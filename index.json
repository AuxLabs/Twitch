{
  "api/AuxLabs.SimpleTwitch.Chat.Badge.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.Badge.html",
    "title": "Struct Badge | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Struct Badge Inherited Members System.ValueType.Equals(object) System.ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public readonly struct Badge Constructors Name Description Badge(string, string) Properties Name Description Name The badge's name. Version Information relating to the badge. Methods Name Description Parse(string, out Badge) ToString() TryParseMany(string, out IReadOnlyCollection<Badge>)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.BaseTags.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.BaseTags.html",
    "title": "Class BaseTags | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class BaseTags Inheritance object QueryMap BaseTags ClearChatTags ClearMessageTags GlobalUserStateTags MessageTags NoticeTags RoomStateTags SendMessageTags WhisperTags Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable Inherited Members QueryMap.CreateQueryMap() QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public abstract class BaseTags : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Methods Name Description LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format."
  },
  "api/AuxLabs.SimpleTwitch.Chat.BitsBadgeTierTags.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.BitsBadgeTierTags.html",
    "title": "Class BitsBadgeTierTags | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class BitsBadgeTierTags Inheritance object QueryMap BaseTags MessageTags UserNoticeTags BitsBadgeTierTags Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IUserRelation IUser IEntity<string> Inherited Members UserNoticeTags.NoticeType UserNoticeTags.SystemMessage MessageTags.Id MessageTags.CustomRewardId MessageTags.ChannelId MessageTags.Type MessageTags.Timestamp MessageTags.UserId MessageTags.UserType MessageTags.DisplayName MessageTags.Name MessageTags.Color MessageTags.Badges MessageTags.BadgeInfo MessageTags.Bits MessageTags.Emotes MessageTags.Action MessageTags.IsMod MessageTags.IsSubscriber MessageTags.IsTurbo MessageTags.IsVIP MessageTags.IsEmoteOnly MessageTags.IsFirstMessage MessageTags.IsReturningChatter MessageTags.ReplyParentMessageId MessageTags.ReplyParentUserId MessageTags.ReplyParentUserName MessageTags.ReplyParentDisplayName MessageTags.ReplyParentMessage MessageTags.Nonce MessageTags.Flags MessageTags.IUserRelation.RelatedId MessageTags.IUserRelation.RelatedName MessageTags.IUserRelation.RelatedDisplayName QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class BitsBadgeTierTags : UserNoticeTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IUserRelation, IUser, IEntity<string> Properties Name Description BitsThreshold The tier of the Bits badge the user just earned. Methods Name Description CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.CapabilityRequest.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.CapabilityRequest.html",
    "title": "Class CapabilityRequest | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class CapabilityRequest Inheritance object IrcPayload CapabilityRequest Implements IPayload Inherited Members IrcPayload.IsHelloEvent IrcPayload.Tags IrcPayload.Prefix IrcPayload.Command IrcPayload.CommandRaw IrcPayload.Parameters IrcPayload.ToString() IrcPayload.TagsTypeSelector IrcPayload.UserNoticeTypeSelector object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class CapabilityRequest : IrcPayload, IPayload Constructors Name Description CapabilityRequest(bool, bool) Properties Name Description HasData"
  },
  "api/AuxLabs.SimpleTwitch.Chat.ClearChatEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.ClearChatEventArgs.html",
    "title": "Class ClearChatEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ClearChatEventArgs Inheritance object ClearChatEventArgs Implements IChatUserRelation IChatUser IUserRelation IUser IEntity<string> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class ClearChatEventArgs : IChatUserRelation, IChatUser, IUserRelation, IUser, IEntity<string> Constructors Name Description ClearChatEventArgs(IReadOnlyCollection<string>) Properties Name Description ChannelName The channel's name. Tags The tags for this event, if provided. UserName The user whose messages were cleared from chat. Methods Name Description Create(IrcPayload) Explicit Interface Implementations Name Description IChatUser.Color IEntity<string>.Id IUser.DisplayName IUser.Name IUserRelation.RelatedDisplayName IUserRelation.RelatedId IUserRelation.RelatedName"
  },
  "api/AuxLabs.SimpleTwitch.Chat.ClearChatTags.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.ClearChatTags.html",
    "title": "Class ClearChatTags | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ClearChatTags Inheritance object QueryMap BaseTags ClearChatTags Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class ClearChatTags : BaseTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Properties Name Description BanDuration The message includes this tag if the user was put in a timeout. ChannelId The ID of the channel where the messages were removed from. TargetUserId The ID of the user that was banned or put in a timeout. Timestamp The date and time this event occurred. Methods Name Description CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.ClearMessageEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.ClearMessageEventArgs.html",
    "title": "Class ClearMessageEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ClearMessageEventArgs Inheritance object ClearMessageEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class ClearMessageEventArgs Constructors Name Description ClearMessageEventArgs(IReadOnlyCollection<string>) Properties Name Description ChannelName Message Tags Methods Name Description Create(IrcPayload)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.ClearMessageTags.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.ClearMessageTags.html",
    "title": "Class ClearMessageTags | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ClearMessageTags Inheritance object QueryMap BaseTags ClearMessageTags Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class ClearMessageTags : BaseTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Properties Name Description ChannelId The ID of the channel (chat room) where the message was removed from. TargetMessageId A UUID that identifies the message that was removed. Timestamp The date and time this event occurred. UserName The name of the user who sent the message. Methods Name Description CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.DefaultIrcSerializer.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.DefaultIrcSerializer.html",
    "title": "Class DefaultIrcSerializer | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class DefaultIrcSerializer Inheritance object DefaultIrcSerializer Implements ISerializer<IrcPayload> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public sealed class DefaultIrcSerializer : ISerializer<IrcPayload> Constructors Name Description DefaultIrcSerializer(bool) Methods Name Description Read(ref ReadOnlySpan<byte>) Write(IrcPayload)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.EmotePosition.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.EmotePosition.html",
    "title": "Struct EmotePosition | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Struct EmotePosition Inherited Members System.ValueType.Equals(object) System.ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public readonly struct EmotePosition Constructors Name Description EmotePosition(string, Range) Properties Name Description Id An ID that uniquely identifies this emote Range The position of this emote in a message Methods Name Description Parse(string, string, out EmotePosition) ToString() TryParseMany(string, out IReadOnlyCollection<EmotePosition>)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.GlobalUserStateTags.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.GlobalUserStateTags.html",
    "title": "Class GlobalUserStateTags | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GlobalUserStateTags Inheritance object QueryMap BaseTags GlobalUserStateTags UserStateTags Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IChatUser IUser IEntity<string> Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class GlobalUserStateTags : BaseTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IChatUser, IUser, IEntity<string> Properties Name Description BadgeInfo Contains metadata related to the chat badges in the badges tag. Badges A collection of badges the user has. Color The color of the user’s name in the chat room. DisplayName The user’s display name. EmoteSets A collection of IDs that identify the emote sets that the user has access to. IsTurbo Indicates whether the user has site-wide commercial free mode enabled. UserId The user’s ID. UserType The type of user. Methods Name Description CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>) Explicit Interface Implementations Name Description IChatUser.Color IEntity<string>.Id IUser.Name"
  },
  "api/AuxLabs.SimpleTwitch.Chat.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.html",
    "title": "Namespace AuxLabs.SimpleTwitch.Chat | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Namespace AuxLabs.SimpleTwitch.Chat Classes BaseTags BitsBadgeTierTags CapabilityRequest ClearChatEventArgs ClearChatTags ClearMessageEventArgs ClearMessageTags DefaultIrcSerializer GlobalUserStateTags IrcPayload JoinChannelsRequest MembershipEventArgs MessageEventArgs MessageTags NamesEventArgs NoticeEventArgs NoticeTags PartChannelsRequest RaidTags RitualTags RoomStateEventArgs RoomStateTags SendMessageRequest SendMessageTags SubscriptionGiftTags SubscriptionGiftUpgradeAnonymousTags SubscriptionGiftUpgradeTags SubscriptionTags TwitchChatApiClient TwitchChatApiConfig UserNoticeEventArgs UserNoticeTags UserStateEventArgs UserStateTags WhisperEventArgs WhisperTags Structs Badge EmotePosition IrcPrefix Interfaces IChatUser IChatUserRelation Enums IrcCommand IrcTokenType MessageType NoticeType RitualType UserNoticeType UserType"
  },
  "api/AuxLabs.SimpleTwitch.Chat.IChatUser.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.IChatUser.html",
    "title": "Interface IChatUser | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Interface IChatUser Inherited Members IUser.Name IUser.DisplayName IEntity<string>.Id Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public interface IChatUser : IUser, IEntity<string> Properties Name Description Color"
  },
  "api/AuxLabs.SimpleTwitch.Chat.IChatUserRelation.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.IChatUserRelation.html",
    "title": "Interface IChatUserRelation | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Interface IChatUserRelation Inherited Members IChatUser.Color IUserRelation.RelatedId IUserRelation.RelatedName IUserRelation.RelatedDisplayName IUser.Name IUser.DisplayName IEntity<string>.Id Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public interface IChatUserRelation : IChatUser, IUserRelation, IUser, IEntity<string>"
  },
  "api/AuxLabs.SimpleTwitch.Chat.IrcCommand.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.IrcCommand.html",
    "title": "Enum IrcCommand | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum IrcCommand Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public enum IrcCommand Fields Name Description CapabilityAcknowledge CapabilityDenied CapabilityRequest ClearChat ClearMessage GlobalUserState Join Message Names NamesEnd NamesList Nickname Notice Part Password Ping Pong Reconnect RoomState RPL_Created RPL_Motd RPL_MotdEnd RPL_MotdStart RPL_MyInfo RPL_Welcome RPL_YourHost Unknown UserNotice UserState Whisper Extension Methods EnumHelper.GetStringValue<IrcCommand>(IrcCommand)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.IrcPayload.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.IrcPayload.html",
    "title": "Class IrcPayload | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class IrcPayload Inheritance object IrcPayload CapabilityRequest JoinChannelsRequest PartChannelsRequest SendMessageRequest Implements IPayload Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class IrcPayload : IPayload Constructors Name Description IrcPayload() IrcPayload(IrcCommand, params string[]) IrcPayload(string, IrcCommand, params string[]) Properties Name Description Command CommandRaw IsHelloEvent Parameters Prefix Tags TagsTypeSelector UserNoticeTypeSelector Methods Name Description ToString()"
  },
  "api/AuxLabs.SimpleTwitch.Chat.IrcPrefix.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.IrcPrefix.html",
    "title": "Struct IrcPrefix | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Struct IrcPrefix Inherited Members System.ValueType.Equals(object) System.ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public struct IrcPrefix Constructors Name Description IrcPrefix(string) Properties Name Description Host Nickname Username Methods Name Description ToString()"
  },
  "api/AuxLabs.SimpleTwitch.Chat.IrcTokenType.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.IrcTokenType.html",
    "title": "Enum IrcTokenType | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum IrcTokenType Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public enum IrcTokenType Fields Name Description ChannelIndicator CommandEnd None ParameterIndicator PrefixEnd PrefixHostIndicator PrefixIndicator PrefixUsernameIndicator Remainder ServerIndicator TagEnd TagEscapedSpace TagIndicator TagKeyValueEnd TagKeyValueSeparator Extension Methods EnumHelper.GetStringValue<IrcTokenType>(IrcTokenType)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.JoinChannelsRequest.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.JoinChannelsRequest.html",
    "title": "Class JoinChannelsRequest | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class JoinChannelsRequest Inheritance object IrcPayload JoinChannelsRequest Implements IPayload Inherited Members IrcPayload.IsHelloEvent IrcPayload.Tags IrcPayload.Prefix IrcPayload.Command IrcPayload.CommandRaw IrcPayload.Parameters IrcPayload.ToString() IrcPayload.TagsTypeSelector IrcPayload.UserNoticeTypeSelector object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class JoinChannelsRequest : IrcPayload, IPayload Constructors Name Description JoinChannelsRequest() JoinChannelsRequest(params string[])"
  },
  "api/AuxLabs.SimpleTwitch.Chat.MembershipEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.MembershipEventArgs.html",
    "title": "Class MembershipEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class MembershipEventArgs Inheritance object MembershipEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class MembershipEventArgs Constructors Name Description MembershipEventArgs(IrcPrefix, IReadOnlyCollection<string>) Properties Name Description ChannelName UserName Methods Name Description Create(IrcPayload)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.MessageEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.MessageEventArgs.html",
    "title": "Class MessageEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class MessageEventArgs Inheritance object MessageEventArgs Implements IChatUserRelation IChatUser IUserRelation IUser IChannel IEntity<string> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class MessageEventArgs : IChatUserRelation, IChatUser, IUserRelation, IUser, IChannel, IEntity<string> Constructors Name Description MessageEventArgs(IrcPrefix?, IReadOnlyCollection<string>) Fields Name Description ContainsSpecialCharacters If special characters are present, emote indices will be incorrect. Properties Name Description ChannelName Message Tags UserName Methods Name Description Create(IrcPayload) Explicit Interface Implementations Name Description IChatUser.Color IChannel.Name IEntity<string>.Id IUser.DisplayName IUser.Name IUserRelation.RelatedDisplayName IUserRelation.RelatedId IUserRelation.RelatedName"
  },
  "api/AuxLabs.SimpleTwitch.Chat.MessageTags.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.MessageTags.html",
    "title": "Class MessageTags | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class MessageTags Inheritance object QueryMap BaseTags MessageTags UserNoticeTags Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IUserRelation IUser IEntity<string> Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class MessageTags : BaseTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IUserRelation, IUser, IEntity<string> Properties Name Description Action The message value when someone uses the /me chat command BadgeInfo Contains metadata related to the chat badges in the badges tag. Currently, this tag contains metadata only for subscriber badges, to indicate the number of months the user has been a subscriber. Badges A collection of badges the user has. Bits The amount of Bits the user cheered. Only a Bits cheer message includes this tag. ChannelId An ID that identifies the channel. Color The color of the user’s name in the chat room. CustomRewardId DisplayName The user’s display name. Emotes A collection of emotes and their position in the message. Flags Id An ID that uniquely identifies the message. IsEmoteOnly Indicates whether this message contains only emotes IsFirstMessage Indicates whether this is the user's first message in the channel IsMod Indicates whether the user is a moderator. IsReturningChatter Indicates whether this is a returning chat user IsSubscriber Indicates whether the user is a subscriber. IsTurbo Indicates whether the user has site-wide commercial free mode enabled. IsVIP Indicates whether the user is a VIP. Name The user’s login name. Nonce A unique value used to identify requests ReplyParentDisplayName The display name of the sender of the parent message. ReplyParentMessage The text of the parent message. ReplyParentMessageId An ID that uniquely identifies the parent message that this message is replying to. ReplyParentUserId An ID that identifies the sender of the parent message. ReplyParentUserName The login name of the sender of the parent message. Timestamp The date and time that the message was sent. Type A value that indicates if a messag has unique properties UserId The ID of the user that sent the message. UserType The type of user. Methods Name Description CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>) Explicit Interface Implementations Name Description IUserRelation.RelatedDisplayName IUserRelation.RelatedId IUserRelation.RelatedName"
  },
  "api/AuxLabs.SimpleTwitch.Chat.MessageType.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.MessageType.html",
    "title": "Enum MessageType | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum MessageType Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public enum MessageType Fields Name Description Highlighted Normal Extension Methods EnumHelper.GetStringValue<MessageType>(MessageType)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.NamesEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.NamesEventArgs.html",
    "title": "Class NamesEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class NamesEventArgs Inheritance object NamesEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class NamesEventArgs Constructors Name Description NamesEventArgs(IReadOnlyCollection<string>) Properties Name Description ChannelName Names"
  },
  "api/AuxLabs.SimpleTwitch.Chat.NoticeEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.NoticeEventArgs.html",
    "title": "Class NoticeEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class NoticeEventArgs Inheritance object NoticeEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class NoticeEventArgs Constructors Name Description NoticeEventArgs(IReadOnlyCollection<string>) Properties Name Description ChannelName Message Tags Methods Name Description Create(IrcPayload)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.NoticeTags.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.NoticeTags.html",
    "title": "Class NoticeTags | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class NoticeTags Inheritance object QueryMap BaseTags NoticeTags Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class NoticeTags : BaseTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Properties Name Description NoticeType A value to determine the action’s outcome. TargetUserId The ID of the user that the action targeted. If specified. Methods Name Description CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.NoticeType.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.NoticeType.html",
    "title": "Enum NoticeType | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum NoticeType Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public enum NoticeType Fields Name Description ColorChanged EmoteOnlyOff EmoteOnlyOn FollowersOff FollowersOn FollowersOnZero MessageBadCharacters MessageBanned MessageChannelBlocked MessageChannelSuspended MessageDuplicate MessageEmoteOnly MessageFollowersOnly MessageFollowersOnlyFollowed MessageFollowersOnlyZero MessageR9k MessageRatelimited MessageRejected MessageRejectedMandatory MessageRequiresVerifiedEmail MessageRequiresVerifiedPhone MessageSlowmode MessageSubsOnly MessageSuspended MessageTimedout R9kOff R9kOn SlowOff SlowOn SubsOff SubsOn TOSBan Unknown WhisperBanned WhisperBannedRecipient WhisperInvalidLogin WhisperInvalidSelf WhisperRatelimitedMinute WhisperRatelimitedSecond WhisperRestricted WhisperRestrictedRecipient Extension Methods EnumHelper.GetStringValue<NoticeType>(NoticeType)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.PartChannelsRequest.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.PartChannelsRequest.html",
    "title": "Class PartChannelsRequest | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PartChannelsRequest Inheritance object IrcPayload PartChannelsRequest Implements IPayload Inherited Members IrcPayload.IsHelloEvent IrcPayload.Tags IrcPayload.Prefix IrcPayload.Command IrcPayload.CommandRaw IrcPayload.Parameters IrcPayload.ToString() IrcPayload.TagsTypeSelector IrcPayload.UserNoticeTypeSelector object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class PartChannelsRequest : IrcPayload, IPayload Constructors Name Description PartChannelsRequest() PartChannelsRequest(params string[])"
  },
  "api/AuxLabs.SimpleTwitch.Chat.RaidTags.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.RaidTags.html",
    "title": "Class RaidTags | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class RaidTags Inheritance object QueryMap BaseTags MessageTags UserNoticeTags RaidTags Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IUserRelation IUser IEntity<string> Inherited Members UserNoticeTags.NoticeType UserNoticeTags.SystemMessage MessageTags.Id MessageTags.CustomRewardId MessageTags.ChannelId MessageTags.Type MessageTags.Timestamp MessageTags.UserId MessageTags.UserType MessageTags.DisplayName MessageTags.Name MessageTags.Color MessageTags.Badges MessageTags.BadgeInfo MessageTags.Bits MessageTags.Emotes MessageTags.Action MessageTags.IsMod MessageTags.IsSubscriber MessageTags.IsTurbo MessageTags.IsVIP MessageTags.IsEmoteOnly MessageTags.IsFirstMessage MessageTags.IsReturningChatter MessageTags.ReplyParentMessageId MessageTags.ReplyParentUserId MessageTags.ReplyParentUserName MessageTags.ReplyParentDisplayName MessageTags.ReplyParentMessage MessageTags.Nonce MessageTags.Flags MessageTags.IUserRelation.RelatedId MessageTags.IUserRelation.RelatedName MessageTags.IUserRelation.RelatedDisplayName QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class RaidTags : UserNoticeTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IUserRelation, IUser, IEntity<string> Properties Name Description ProfileImageUrl The profile image of the broadcaster raiding this channel. RaiderDisplayName The display name of the broadcaster raiding this channel. RaiderLogin The login name of the broadcaster raiding this channel. RaiderViewerCount The number of viewers raiding this channel from the broadcaster’s channel. Methods Name Description CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.RitualTags.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.RitualTags.html",
    "title": "Class RitualTags | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class RitualTags Inheritance object QueryMap BaseTags MessageTags UserNoticeTags RitualTags Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IUserRelation IUser IEntity<string> Inherited Members UserNoticeTags.NoticeType UserNoticeTags.SystemMessage MessageTags.Id MessageTags.CustomRewardId MessageTags.ChannelId MessageTags.Type MessageTags.Timestamp MessageTags.UserId MessageTags.UserType MessageTags.DisplayName MessageTags.Name MessageTags.Color MessageTags.Badges MessageTags.BadgeInfo MessageTags.Bits MessageTags.Emotes MessageTags.Action MessageTags.IsMod MessageTags.IsSubscriber MessageTags.IsTurbo MessageTags.IsVIP MessageTags.IsEmoteOnly MessageTags.IsFirstMessage MessageTags.IsReturningChatter MessageTags.ReplyParentMessageId MessageTags.ReplyParentUserId MessageTags.ReplyParentUserName MessageTags.ReplyParentDisplayName MessageTags.ReplyParentMessage MessageTags.Nonce MessageTags.Flags MessageTags.IUserRelation.RelatedId MessageTags.IUserRelation.RelatedName MessageTags.IUserRelation.RelatedDisplayName QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class RitualTags : UserNoticeTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IUserRelation, IUser, IEntity<string> Properties Name Description RitualType The name of the ritual being celebrated. Methods Name Description CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.RitualType.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.RitualType.html",
    "title": "Enum RitualType | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum RitualType Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public enum RitualType Fields Name Description NewChatter Unknown Extension Methods EnumHelper.GetStringValue<RitualType>(RitualType)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.RoomStateEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.RoomStateEventArgs.html",
    "title": "Class RoomStateEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class RoomStateEventArgs Inheritance object RoomStateEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class RoomStateEventArgs Constructors Name Description RoomStateEventArgs(IReadOnlyCollection<string>) Properties Name Description ChannelName Tags Methods Name Description Create(IrcPayload)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.RoomStateTags.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.RoomStateTags.html",
    "title": "Class RoomStateTags | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class RoomStateTags Inheritance object QueryMap BaseTags RoomStateTags Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class RoomStateTags : BaseTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Properties Name Description ChannelId An ID that identifies the channel. FollowersOnlyMinutes Indicates how long, in minutes, the user must have followed the broadcaster before posting chat messages. IsEmoteOnly Indicates whether the chat room allows only messages with emotes. IsFollowersOnly Indicates whether only followers can post messages in the chat room. IsRituals IsSlowEnabled Indicates whether users must wait between sending messages. IsSubscribersOnly Indicates whether only subscribers and moderators can chat in the chat room. IsUniqueEnabled Indicates whether a user’s messages must be unique. SlowSeconds Indicates how long, in seconds, users must wait between sending messages. Methods Name Description CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.SendMessageRequest.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.SendMessageRequest.html",
    "title": "Class SendMessageRequest | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class SendMessageRequest Inheritance object IrcPayload SendMessageRequest Implements IPayload Inherited Members IrcPayload.IsHelloEvent IrcPayload.Tags IrcPayload.Prefix IrcPayload.Command IrcPayload.CommandRaw IrcPayload.Parameters IrcPayload.ToString() IrcPayload.TagsTypeSelector IrcPayload.UserNoticeTypeSelector object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class SendMessageRequest : IrcPayload, IPayload Constructors Name Description SendMessageRequest(string, string, string)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.SendMessageTags.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.SendMessageTags.html",
    "title": "Class SendMessageTags | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class SendMessageTags Inheritance object QueryMap BaseTags SendMessageTags Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class SendMessageTags : BaseTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Constructors Name Description SendMessageTags(string) Properties Name Description ReplyMessageId The id of the message to reply to Methods Name Description CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.SubscriptionGiftTags.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.SubscriptionGiftTags.html",
    "title": "Class SubscriptionGiftTags | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class SubscriptionGiftTags Inheritance object QueryMap BaseTags MessageTags UserNoticeTags SubscriptionGiftTags Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IUserRelation IUser IEntity<string> Inherited Members UserNoticeTags.NoticeType UserNoticeTags.SystemMessage MessageTags.Id MessageTags.CustomRewardId MessageTags.ChannelId MessageTags.Type MessageTags.Timestamp MessageTags.UserId MessageTags.UserType MessageTags.DisplayName MessageTags.Name MessageTags.Color MessageTags.Badges MessageTags.BadgeInfo MessageTags.Bits MessageTags.Emotes MessageTags.Action MessageTags.IsMod MessageTags.IsSubscriber MessageTags.IsTurbo MessageTags.IsVIP MessageTags.IsEmoteOnly MessageTags.IsFirstMessage MessageTags.IsReturningChatter MessageTags.ReplyParentMessageId MessageTags.ReplyParentUserId MessageTags.ReplyParentUserName MessageTags.ReplyParentDisplayName MessageTags.ReplyParentMessage MessageTags.Nonce MessageTags.Flags MessageTags.IUserRelation.RelatedId MessageTags.IUserRelation.RelatedName MessageTags.IUserRelation.RelatedDisplayName QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class SubscriptionGiftTags : UserNoticeTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IUserRelation, IUser, IEntity<string> Properties Name Description GiftedMonths The number of months gifted as part of a single, multi-month gift. RecipientDisplayName The display name of the subscription gift recipient. RecipientId The user ID of the subscription gift recipient. RecipientName The user name of the subscription gift recipient. SubscriptionName The display name of the subscription plan. This may be a default name or one created by the channel owner. SubscriptionType The type of subscription plan being used. TotalMonths The total number of months the user has subscribed. Methods Name Description CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.SubscriptionGiftUpgradeAnonymousTags.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.SubscriptionGiftUpgradeAnonymousTags.html",
    "title": "Class SubscriptionGiftUpgradeAnonymousTags | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class SubscriptionGiftUpgradeAnonymousTags Inheritance object QueryMap BaseTags MessageTags UserNoticeTags SubscriptionGiftUpgradeAnonymousTags SubscriptionGiftUpgradeTags Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IUserRelation IUser IEntity<string> Inherited Members UserNoticeTags.NoticeType UserNoticeTags.SystemMessage MessageTags.Id MessageTags.CustomRewardId MessageTags.ChannelId MessageTags.Type MessageTags.Timestamp MessageTags.UserId MessageTags.UserType MessageTags.DisplayName MessageTags.Name MessageTags.Color MessageTags.Badges MessageTags.BadgeInfo MessageTags.Bits MessageTags.Emotes MessageTags.Action MessageTags.IsMod MessageTags.IsSubscriber MessageTags.IsTurbo MessageTags.IsVIP MessageTags.IsEmoteOnly MessageTags.IsFirstMessage MessageTags.IsReturningChatter MessageTags.ReplyParentMessageId MessageTags.ReplyParentUserId MessageTags.ReplyParentUserName MessageTags.ReplyParentDisplayName MessageTags.ReplyParentMessage MessageTags.Nonce MessageTags.Flags MessageTags.IUserRelation.RelatedId MessageTags.IUserRelation.RelatedName MessageTags.IUserRelation.RelatedDisplayName QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class SubscriptionGiftUpgradeAnonymousTags : UserNoticeTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IUserRelation, IUser, IEntity<string> Properties Name Description PromoGiftName The subscriptions promo, if any, that is ongoing. PromoGiftTotal The number of gifts the gifter has given. Methods Name Description CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.SubscriptionGiftUpgradeTags.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.SubscriptionGiftUpgradeTags.html",
    "title": "Class SubscriptionGiftUpgradeTags | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class SubscriptionGiftUpgradeTags Inheritance object QueryMap BaseTags MessageTags UserNoticeTags SubscriptionGiftUpgradeAnonymousTags SubscriptionGiftUpgradeTags Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IUserRelation IUser IEntity<string> Inherited Members SubscriptionGiftUpgradeAnonymousTags.PromoGiftTotal SubscriptionGiftUpgradeAnonymousTags.PromoGiftName UserNoticeTags.NoticeType UserNoticeTags.SystemMessage MessageTags.Id MessageTags.CustomRewardId MessageTags.ChannelId MessageTags.Type MessageTags.Timestamp MessageTags.UserId MessageTags.UserType MessageTags.DisplayName MessageTags.Name MessageTags.Color MessageTags.Badges MessageTags.BadgeInfo MessageTags.Bits MessageTags.Emotes MessageTags.Action MessageTags.IsMod MessageTags.IsSubscriber MessageTags.IsTurbo MessageTags.IsVIP MessageTags.IsEmoteOnly MessageTags.IsFirstMessage MessageTags.IsReturningChatter MessageTags.ReplyParentMessageId MessageTags.ReplyParentUserId MessageTags.ReplyParentUserName MessageTags.ReplyParentDisplayName MessageTags.ReplyParentMessage MessageTags.Nonce MessageTags.Flags MessageTags.IUserRelation.RelatedId MessageTags.IUserRelation.RelatedName MessageTags.IUserRelation.RelatedDisplayName QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class SubscriptionGiftUpgradeTags : SubscriptionGiftUpgradeAnonymousTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IUserRelation, IUser, IEntity<string> Properties Name Description SenderDisplayName The display name of the user who gifted the subscription. SenderLogin The login name of the user who gifted the subscription. Methods Name Description CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.SubscriptionTags.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.SubscriptionTags.html",
    "title": "Class SubscriptionTags | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class SubscriptionTags Inheritance object QueryMap BaseTags MessageTags UserNoticeTags SubscriptionTags Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IUserRelation IUser IEntity<string> Inherited Members UserNoticeTags.NoticeType UserNoticeTags.SystemMessage MessageTags.Id MessageTags.CustomRewardId MessageTags.ChannelId MessageTags.Type MessageTags.Timestamp MessageTags.UserId MessageTags.UserType MessageTags.DisplayName MessageTags.Name MessageTags.Color MessageTags.Badges MessageTags.BadgeInfo MessageTags.Bits MessageTags.Emotes MessageTags.Action MessageTags.IsMod MessageTags.IsSubscriber MessageTags.IsTurbo MessageTags.IsVIP MessageTags.IsEmoteOnly MessageTags.IsFirstMessage MessageTags.IsReturningChatter MessageTags.ReplyParentMessageId MessageTags.ReplyParentUserId MessageTags.ReplyParentUserName MessageTags.ReplyParentDisplayName MessageTags.ReplyParentMessage MessageTags.Nonce MessageTags.Flags MessageTags.IUserRelation.RelatedId MessageTags.IUserRelation.RelatedName MessageTags.IUserRelation.RelatedDisplayName QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class SubscriptionTags : UserNoticeTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IUserRelation, IUser, IEntity<string> Properties Name Description IsStreakShared Indicates whether the user wants their streaks shared. StreakMonths The number of consecutive months the user has subscribed. SubscriptionName The display name of the subscription plan. This may be a default name or one created by the channel owner SubscriptionType The type of subscription plan being used. TotalMonths The total number of months the user has subscribed. Methods Name Description CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.TwitchChatApiClient.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.TwitchChatApiClient.html",
    "title": "Class TwitchChatApiClient | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class TwitchChatApiClient Inheritance object BaseSocketClient<IrcPayload> TwitchChatApiClient Inherited Members BaseSocketClient<IrcPayload>.Connected BaseSocketClient<IrcPayload>.Disconnected BaseSocketClient<IrcPayload>.DeserializationError BaseSocketClient<IrcPayload>.UnknownEventReceived BaseSocketClient<IrcPayload>.PayloadReceived BaseSocketClient<IrcPayload>.PayloadSent BaseSocketClient<IrcPayload>.State BaseSocketClient<IrcPayload>.ReceivedData BaseSocketClient<IrcPayload>.OnUnknownEventReceived(IrcPayload) BaseSocketClient<IrcPayload>.Run(string) BaseSocketClient<IrcPayload>.RunAsync(string) BaseSocketClient<IrcPayload>.Stop() BaseSocketClient<IrcPayload>.StopAsync() BaseSocketClient<IrcPayload>.Dispose() BaseSocketClient<IrcPayload>.Send(IrcPayload) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class TwitchChatApiClient : BaseSocketClient<IrcPayload> Constructors Name Description TwitchChatApiClient(TwitchChatApiConfig) TwitchChatApiClient(string, TwitchChatApiConfig) Fields Name Description CommandsRequested ShouldHandleEvents TagsRequested ThrowOnMismatchedTags ThrowOnUnknownEvent Properties Name Description Serializer Methods Name Description HandleEvent(IrcPayload, TaskCompletionSource<bool>) Run() RunAsync() SendChannelMessage(string, string, string) Send a message to a channel. SendHeartbeat() SendHeartbeatAck() SendIdentify() SendJoin(params string[]) Join a channel by name. SendPart(params string[]) Leave a channel by name. SetIdentity(string, string) Events Name Description CapabilityAcknowledged Triggered after successful authentication. CapabilityDenied Triggered when authenticating with invalid capabilities ChannelJoined Triggered when a user joins a channel. ChannelLeft Triggered when a user leaves a channel. ChatCleared Triggered when someone removes all messages from the channel or from a specified user. GlobalUserStateReceived Triggered after authenticated with the server. Indicates the authenticated user's chat settings. MessageCleared Triggered when someone removes a single message from the chat room. MessageReceived Triggered when a message is received in a channel. NamesReceived Triggered after joining a channel, lists current active chatters. NoticeReceived Triggered to indicate the outcome of an action. Reconnect Triggered when the Twitch IRC server needs to terminate the connection. RoomStateReceived Triggered when you join a channel or when the channel’s chat settings change. Indicates the chat's current settings. UserNoticeReceived Triggered when events relating to a user in a channel occur. e.g. subscriptions, gifts, raids... UserStateReceived Triggered when the bot joins a channel. Indicates the authenticated user's state in said channel. WhisperReceived Triggered when a whisper is received."
  },
  "api/AuxLabs.SimpleTwitch.Chat.TwitchChatApiConfig.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.TwitchChatApiConfig.html",
    "title": "Class TwitchChatApiConfig | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class TwitchChatApiConfig Inheritance object TwitchChatApiConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class TwitchChatApiConfig Properties Name Description IrcSerializer Specify a custom serializer for chat irc messages. RequestCommands Lets your bot send messages that include Twitch chat commands and receive Twitch-specific messages. RequestTags Adds additional metadata to the command and membership messages. ShouldHandleEvents Should the client forward event types to their respective events. ThrowOnMismatchedTags Should an exception be raised if an event provides unhandled tags ThrowOnUnknownEvent Should an exception be raised if an unhandled event is received from twitch."
  },
  "api/AuxLabs.SimpleTwitch.Chat.UserNoticeEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.UserNoticeEventArgs.html",
    "title": "Class UserNoticeEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class UserNoticeEventArgs Inheritance object UserNoticeEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class UserNoticeEventArgs Constructors Name Description UserNoticeEventArgs(IReadOnlyCollection<string>) Properties Name Description ChannelName Message Tags Methods Name Description Create(IrcPayload)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.UserNoticeTags.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.UserNoticeTags.html",
    "title": "Class UserNoticeTags | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class UserNoticeTags Inheritance object QueryMap BaseTags MessageTags UserNoticeTags BitsBadgeTierTags RaidTags RitualTags SubscriptionGiftTags SubscriptionGiftUpgradeAnonymousTags SubscriptionTags Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IUserRelation IUser IEntity<string> Inherited Members MessageTags.Id MessageTags.CustomRewardId MessageTags.ChannelId MessageTags.Type MessageTags.Timestamp MessageTags.UserId MessageTags.UserType MessageTags.DisplayName MessageTags.Name MessageTags.Color MessageTags.Badges MessageTags.BadgeInfo MessageTags.Bits MessageTags.Emotes MessageTags.Action MessageTags.IsMod MessageTags.IsSubscriber MessageTags.IsTurbo MessageTags.IsVIP MessageTags.IsEmoteOnly MessageTags.IsFirstMessage MessageTags.IsReturningChatter MessageTags.ReplyParentMessageId MessageTags.ReplyParentUserId MessageTags.ReplyParentUserName MessageTags.ReplyParentDisplayName MessageTags.ReplyParentMessage MessageTags.Nonce MessageTags.Flags MessageTags.IUserRelation.RelatedId MessageTags.IUserRelation.RelatedName MessageTags.IUserRelation.RelatedDisplayName QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class UserNoticeTags : MessageTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IUserRelation, IUser, IEntity<string> Properties Name Description NoticeType The type of notice. SystemMessage The message Twitch shows in the chat room for this notice. Methods Name Description CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.UserNoticeType.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.UserNoticeType.html",
    "title": "Enum UserNoticeType | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum UserNoticeType Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public enum UserNoticeType Fields Name Description Announcement BitsBadgeTier Raid Resubscription RewardGift Ritual Subscription SubscriptionGift SubscriptionGiftUpgrade SubscriptionGiftUpgradeAnonymous SubscriptionMysteryGift Unknown Unraid Extension Methods EnumHelper.GetStringValue<UserNoticeType>(UserNoticeType)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.UserStateEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.UserStateEventArgs.html",
    "title": "Class UserStateEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class UserStateEventArgs Inheritance object UserStateEventArgs Implements IChatUser IUser IEntity<string> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class UserStateEventArgs : IChatUser, IUser, IEntity<string> Constructors Name Description UserStateEventArgs(IReadOnlyCollection<string>) Properties Name Description ChannelName Tags Methods Name Description Create(IrcPayload) Explicit Interface Implementations Name Description IChatUser.Color IEntity<string>.Id IUser.DisplayName IUser.Name"
  },
  "api/AuxLabs.SimpleTwitch.Chat.UserStateTags.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.UserStateTags.html",
    "title": "Class UserStateTags | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class UserStateTags Inheritance object QueryMap BaseTags GlobalUserStateTags UserStateTags Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IChatUser IUser IEntity<string> Inherited Members GlobalUserStateTags.UserId GlobalUserStateTags.UserType GlobalUserStateTags.DisplayName GlobalUserStateTags.Color GlobalUserStateTags.Badges GlobalUserStateTags.BadgeInfo GlobalUserStateTags.EmoteSets GlobalUserStateTags.IsTurbo GlobalUserStateTags.IEntity<string>.Id GlobalUserStateTags.IUser.Name GlobalUserStateTags.IChatUser.Color QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class UserStateTags : GlobalUserStateTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IChatUser, IUser, IEntity<string> Properties Name Description IsModerator Indicates whether the user is a moderator IsSubscriber Indicates whether the user is a subscriber. MessageId An ID that uniquely identifies a message, if one was sent. Methods Name Description CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.UserType.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.UserType.html",
    "title": "Enum UserType | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum UserType Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public enum UserType Fields Name Description Admin GlobalModerator Normal Staff Extension Methods EnumHelper.GetStringValue<UserType>(UserType)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.WhisperEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.WhisperEventArgs.html",
    "title": "Class WhisperEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class WhisperEventArgs Inheritance object WhisperEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class WhisperEventArgs Constructors Name Description WhisperEventArgs(IrcPrefix?, IReadOnlyCollection<string>) Properties Name Description Message ReceiverName SenderName Tags Methods Name Description Create(IrcPayload)"
  },
  "api/AuxLabs.SimpleTwitch.Chat.WhisperTags.html": {
    "href": "api/AuxLabs.SimpleTwitch.Chat.WhisperTags.html",
    "title": "Class WhisperTags | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class WhisperTags Inheritance object QueryMap BaseTags WhisperTags Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Chat Assembly: AuxLabs.SimpleTwitch.Chat.dll Syntax public class WhisperTags : BaseTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Properties Name Description Action The message value when someone uses the /me chat command Badges A collection of badges the user has. Color The color of the user’s name in the chat room. DisplayName The user’s display name. Emotes A collection of emotes and their position in the message. Id An ID that uniquely identifies the message. IsTurbo Indicates whether the user has site-wide commercial free mode enabled. ThreadId An ID that uniquely identifies the whisper thread. UserId The ID of the user that sent the message. UserType The type of user. Methods Name Description CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>)"
  },
  "api/AuxLabs.SimpleTwitch.EmoteFormat.html": {
    "href": "api/AuxLabs.SimpleTwitch.EmoteFormat.html",
    "title": "Enum EmoteFormat | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum EmoteFormat Namespace: AuxLabs.SimpleTwitch Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum EmoteFormat Fields Name Description Animated Static Extension Methods EnumHelper.GetStringValue<EmoteFormat>(EmoteFormat)"
  },
  "api/AuxLabs.SimpleTwitch.EnumHelper.html": {
    "href": "api/AuxLabs.SimpleTwitch.EnumHelper.html",
    "title": "Class EnumHelper | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class EnumHelper Inheritance object EnumHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch Assembly: AuxLabs.SimpleTwitch.dll Syntax public static class EnumHelper Methods Name Description GetEnumValue<T>(string) GetStringValue<T>(T)"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.AuthorizationGrantedEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.AuthorizationGrantedEventArgs.html",
    "title": "Class AuthorizationGrantedEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class AuthorizationGrantedEventArgs Inheritance object AuthorizationGrantedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class AuthorizationGrantedEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.AuthorizationRevokedEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.AuthorizationRevokedEventArgs.html",
    "title": "Class AuthorizationRevokedEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class AuthorizationRevokedEventArgs Inheritance object AuthorizationRevokedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class AuthorizationRevokedEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.BanEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.BanEventArgs.html",
    "title": "Class BanEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class BanEventArgs Inheritance object BanEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class BanEventArgs Properties Name Description BannedAt The UTC date and time of when the user was banned or put in a timeout. BroadcasterDisplayName The requested broadcaster display name. BroadcasterId The requested broadcaster ID. BroadcasterName The requested broadcaster login. EndsAt The UTC date and time of when the timeout ends. IsPermanent Indicates whether the ban is permanent. ModeratorDisplayName The user name of the issuer of the ban. ModeratorId The user ID of the issuer of the ban. ModeratorName The user login of the issuer of the ban. Reason The reason behind the ban. UserDisplayName The user display name for the user who was banned on the specified channel. UserId The user ID for the user who was banned on the specified channel. UserName The user login for the user who was banned on the specified channel."
  },
  "api/AuxLabs.SimpleTwitch.EventSub.BitsTransactionEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.BitsTransactionEventArgs.html",
    "title": "Class BitsTransactionEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class BitsTransactionEventArgs Inheritance object BitsTransactionEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class BitsTransactionEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.CampaignEndedEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.CampaignEndedEventArgs.html",
    "title": "Class CampaignEndedEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class CampaignEndedEventArgs Inheritance object CampaignEndedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class CampaignEndedEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.CampaignProgressEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.CampaignProgressEventArgs.html",
    "title": "Class CampaignProgressEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class CampaignProgressEventArgs Inheritance object CampaignProgressEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class CampaignProgressEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.CampaignStartedEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.CampaignStartedEventArgs.html",
    "title": "Class CampaignStartedEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class CampaignStartedEventArgs Inheritance object CampaignStartedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class CampaignStartedEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.ChannelFollowEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.ChannelFollowEventArgs.html",
    "title": "Class ChannelFollowEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ChannelFollowEventArgs Inheritance object ChannelFollowEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class ChannelFollowEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.ChannelUpdateEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.ChannelUpdateEventArgs.html",
    "title": "Class ChannelUpdateEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ChannelUpdateEventArgs Inheritance object ChannelUpdateEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class ChannelUpdateEventArgs Properties Name Description BroadcasterDisplayName The requested broadcaster display name. BroadcasterId The requested broadcaster ID. BroadcasterName The requested broadcaster login. CategoryId The channel’s category ID. CategoryName The category name. IsMature Indicates whether the channel is flagged as mature. Language The channel’s broadcast language. Title The channel’s stream title."
  },
  "api/AuxLabs.SimpleTwitch.EventSub.CheerEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.CheerEventArgs.html",
    "title": "Class CheerEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class CheerEventArgs Inheritance object CheerEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class CheerEventArgs Properties Name Description BitsAmount The number of bits cheered. BroadcasterDisplayName The requested broadcaster display name. BroadcasterId The requested broadcaster ID. BroadcasterName The requested broadcaster login. IsAnonymous Whether the user cheered anonymously or not. Message The message sent with the cheer. UserDisplayName The user display name for the user who cheered on the specified channel. UserId The user ID for the user who cheered on the specified channel. UserName The user login for the user who cheered on the specified channel."
  },
  "api/AuxLabs.SimpleTwitch.EventSub.DonationEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.DonationEventArgs.html",
    "title": "Class DonationEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class DonationEventArgs Inheritance object DonationEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class DonationEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.EntitlementGrantEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.EntitlementGrantEventArgs.html",
    "title": "Class EntitlementGrantEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class EntitlementGrantEventArgs Inheritance object EntitlementGrantEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class EntitlementGrantEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.EventSubFrame-1.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.EventSubFrame-1.html",
    "title": "Class EventSubFrame<T> | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class EventSubFrame<T> Inheritance object EventSubFrame<T> EventSubFrame Implements IPayload Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.WebSockets.dll Syntax public class EventSubFrame<T> : IPayload Type Parameters Name Description T Properties Name Description IsHelloEvent Metadata An object that identifies the message. Payload An object that contains the message."
  },
  "api/AuxLabs.SimpleTwitch.EventSub.EventSubFrame.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.EventSubFrame.html",
    "title": "Class EventSubFrame | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class EventSubFrame Inheritance object EventSubFrame<object> EventSubFrame Implements IPayload Inherited Members EventSubFrame<object>.IsHelloEvent EventSubFrame<object>.Metadata EventSubFrame<object>.Payload object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.WebSockets.dll Syntax public class EventSubFrame : EventSubFrame<object>, IPayload"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.EventSubPayload-1.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.EventSubPayload-1.html",
    "title": "Class EventSubPayload<T> | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class EventSubPayload<T> Inheritance object EventSubPayload<T> EventSubPayload EventSubWebSocketPayload<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class EventSubPayload<T> Type Parameters Name Description T Properties Name Description Challenge Event EventTypeSelector Subscription"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.EventSubPayload.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.EventSubPayload.html",
    "title": "Class EventSubPayload | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class EventSubPayload Inheritance object EventSubPayload<object> EventSubPayload Inherited Members EventSubPayload<object>.Challenge EventSubPayload<object>.Subscription EventSubPayload<object>.Event EventSubPayload<object>.EventTypeSelector object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class EventSubPayload : EventSubPayload<object>"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.EventSubscription.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.EventSubscription.html",
    "title": "Class EventSubscription | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class EventSubscription Inheritance object EventSubscription Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class EventSubscription Properties Name Description Condition Subscription-specific parameters. Cost How much the subscription counts against your limit. CreatedAt The time the notification was created. Id Your client ID. Status The status of the subscription. Transport Information about the transport used for this subscription. Type The notification’s subscription type. TypeRaw The notification’s subscription type in raw string form. Version The version of the subscription."
  },
  "api/AuxLabs.SimpleTwitch.EventSub.EventSubWebSocketPayload-1.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.EventSubWebSocketPayload-1.html",
    "title": "Class EventSubWebSocketPayload<T> | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class EventSubWebSocketPayload<T> Inheritance object EventSubPayload<T> EventSubWebSocketPayload<T> Inherited Members EventSubPayload<T>.Challenge EventSubPayload<T>.Subscription EventSubPayload<T>.Event EventSubPayload<T>.EventTypeSelector object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.WebSockets.dll Syntax public class EventSubWebSocketPayload<T> : EventSubPayload<T> Type Parameters Name Description T Properties Name Description Session"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.GoalEndedEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.GoalEndedEventArgs.html",
    "title": "Class GoalEndedEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GoalEndedEventArgs Inheritance object GoalEndedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class GoalEndedEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.GoalProgressEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.GoalProgressEventArgs.html",
    "title": "Class GoalProgressEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GoalProgressEventArgs Inheritance object GoalProgressEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class GoalProgressEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.GoalStartedEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.GoalStartedEventArgs.html",
    "title": "Class GoalStartedEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GoalStartedEventArgs Inheritance object GoalStartedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class GoalStartedEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.html",
    "title": "Namespace AuxLabs.SimpleTwitch.EventSub | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Namespace AuxLabs.SimpleTwitch.EventSub Classes AuthorizationGrantedEventArgs AuthorizationRevokedEventArgs BanEventArgs BitsTransactionEventArgs CampaignEndedEventArgs CampaignProgressEventArgs CampaignStartedEventArgs ChannelFollowEventArgs ChannelUpdateEventArgs CheerEventArgs DonationEventArgs EntitlementGrantEventArgs EventSubFrame EventSubFrame<T> EventSubPayload EventSubPayload<T> EventSubscription EventSubWebSocketPayload<T> GoalEndedEventArgs GoalProgressEventArgs GoalStartedEventArgs HypeTrainEndedEventArgs HypeTrainProgressEventArgs HypeTrainStartedEventArgs ModeratorAddedEventArgs ModeratorRemovedEventArgs PollEndedEventArgs PollEventArgs PredictionEndedEventArgs PredictionLockedEventArgs PredictionProgressEventArgs PredictionStartedEventArgs RaidEventArgs RedemptionAddedEvent RedemptionUpdatedEvent RewardAddedEventArgs RewardRemovedEventArgs RewardUpdatedEvent Session ShieldModeEndedEventArgs ShieldModeStartedEventArgs ShoutoutCreatedEventArgs ShoutoutReceivedEventArgs StreamEndedEventArgs StreamStartedEventArgs SubscriptionEndedEventArgs SubscriptionEventArgs SubscriptionGiftedEventArgs SubscriptionMessageEventArgs TwitchEventSubApiClient TwitchEventSubConfig UnbanEventArgs UserUpdatedEventArgs VotingOption WebSocketMetadata Interfaces IBan Enums MessageType"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.HypeTrainEndedEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.HypeTrainEndedEventArgs.html",
    "title": "Class HypeTrainEndedEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class HypeTrainEndedEventArgs Inheritance object HypeTrainEndedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class HypeTrainEndedEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.HypeTrainProgressEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.HypeTrainProgressEventArgs.html",
    "title": "Class HypeTrainProgressEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class HypeTrainProgressEventArgs Inheritance object HypeTrainProgressEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class HypeTrainProgressEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.HypeTrainStartedEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.HypeTrainStartedEventArgs.html",
    "title": "Class HypeTrainStartedEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class HypeTrainStartedEventArgs Inheritance object HypeTrainStartedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class HypeTrainStartedEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.IBan.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.IBan.html",
    "title": "Interface IBan | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Interface IBan Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public interface IBan Properties Name Description Broadcaster Moderator User"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.MessageType.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.MessageType.html",
    "title": "Enum MessageType | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum MessageType Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public enum MessageType Fields Name Description KeepAlive Notification Reconnect Revocation Unknown Welcome Extension Methods EnumHelper.GetStringValue<MessageType>(MessageType)"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.ModeratorAddedEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.ModeratorAddedEventArgs.html",
    "title": "Class ModeratorAddedEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ModeratorAddedEventArgs Inheritance object ModeratorAddedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class ModeratorAddedEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.ModeratorRemovedEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.ModeratorRemovedEventArgs.html",
    "title": "Class ModeratorRemovedEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ModeratorRemovedEventArgs Inheritance object ModeratorRemovedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class ModeratorRemovedEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.PollEndedEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.PollEndedEventArgs.html",
    "title": "Class PollEndedEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PollEndedEventArgs Inheritance object PollEventArgs PollEndedEventArgs Inherited Members PollEventArgs.Id PollEventArgs.BroadcasterId PollEventArgs.BroadcasterName PollEventArgs.BroadcasterDisplayName PollEventArgs.Title PollEventArgs.Choices PollEventArgs.BitsVoting PollEventArgs.ChannelPointsVoting PollEventArgs.StartedAt PollEventArgs.EndsAt object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class PollEndedEventArgs : PollEventArgs Properties Name Description Status The status of the poll."
  },
  "api/AuxLabs.SimpleTwitch.EventSub.PollEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.PollEventArgs.html",
    "title": "Class PollEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PollEventArgs Inheritance object PollEventArgs PollEndedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class PollEventArgs Properties Name Description BitsVoting The Bits voting settings for the poll. BroadcasterDisplayName The requested broadcaster display name. BroadcasterId The requested broadcaster ID. BroadcasterName The requested broadcaster login. ChannelPointsVoting The Channel Points voting settings for the poll. Choices A collection of choices for the poll. EndsAt The time the poll will end. Id ID of the poll. StartedAt The time the poll started. Title Question displayed for the poll."
  },
  "api/AuxLabs.SimpleTwitch.EventSub.PredictionEndedEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.PredictionEndedEventArgs.html",
    "title": "Class PredictionEndedEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PredictionEndedEventArgs Inheritance object PredictionEndedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class PredictionEndedEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.PredictionLockedEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.PredictionLockedEventArgs.html",
    "title": "Class PredictionLockedEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PredictionLockedEventArgs Inheritance object PredictionLockedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class PredictionLockedEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.PredictionProgressEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.PredictionProgressEventArgs.html",
    "title": "Class PredictionProgressEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PredictionProgressEventArgs Inheritance object PredictionProgressEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class PredictionProgressEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.PredictionStartedEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.PredictionStartedEventArgs.html",
    "title": "Class PredictionStartedEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PredictionStartedEventArgs Inheritance object PredictionStartedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class PredictionStartedEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.RaidEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.RaidEventArgs.html",
    "title": "Class RaidEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class RaidEventArgs Inheritance object RaidEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class RaidEventArgs Properties Name Description FromBroadcasterDisplayName The broadcaster display name that created the raid. FromBroadcasterId The broadcaster ID that created the raid. FromBroadcasterName The broadcaster login that created the raid. ToBroadcasterDisplayName The broadcaster display name that received the raid. ToBroadcasterId The broadcaster ID that received the raid. ToBroadcasterName The broadcaster login that received the raid. Viewers The number of viewers in the raid."
  },
  "api/AuxLabs.SimpleTwitch.EventSub.RedemptionAddedEvent.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.RedemptionAddedEvent.html",
    "title": "Class RedemptionAddedEvent | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class RedemptionAddedEvent Inheritance object RedemptionAddedEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class RedemptionAddedEvent"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.RedemptionUpdatedEvent.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.RedemptionUpdatedEvent.html",
    "title": "Class RedemptionUpdatedEvent | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class RedemptionUpdatedEvent Inheritance object RedemptionUpdatedEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class RedemptionUpdatedEvent"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.RewardAddedEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.RewardAddedEventArgs.html",
    "title": "Class RewardAddedEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class RewardAddedEventArgs Inheritance object RewardAddedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class RewardAddedEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.RewardRemovedEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.RewardRemovedEventArgs.html",
    "title": "Class RewardRemovedEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class RewardRemovedEventArgs Inheritance object RewardRemovedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class RewardRemovedEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.RewardUpdatedEvent.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.RewardUpdatedEvent.html",
    "title": "Class RewardUpdatedEvent | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class RewardUpdatedEvent Inheritance object RewardUpdatedEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class RewardUpdatedEvent"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.Session.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.Session.html",
    "title": "Class Session | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Session Inheritance object Session Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.WebSockets.dll Syntax public class Session Properties Name Description ConnectedAt The UTC date and time that the connection was created. Id An ID that uniquely identifies this WebSocket connection. KeepaliveTimeoutSeconds The maximum number of seconds that you should expect silence before receiving a keepalive message. ReconnectUrl The URL to reconnect to if you get a Reconnect message. Status The connection’s status."
  },
  "api/AuxLabs.SimpleTwitch.EventSub.ShieldModeEndedEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.ShieldModeEndedEventArgs.html",
    "title": "Class ShieldModeEndedEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ShieldModeEndedEventArgs Inheritance object ShieldModeEndedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class ShieldModeEndedEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.ShieldModeStartedEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.ShieldModeStartedEventArgs.html",
    "title": "Class ShieldModeStartedEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ShieldModeStartedEventArgs Inheritance object ShieldModeStartedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class ShieldModeStartedEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.ShoutoutCreatedEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.ShoutoutCreatedEventArgs.html",
    "title": "Class ShoutoutCreatedEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ShoutoutCreatedEventArgs Inheritance object ShoutoutCreatedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class ShoutoutCreatedEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.ShoutoutReceivedEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.ShoutoutReceivedEventArgs.html",
    "title": "Class ShoutoutReceivedEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ShoutoutReceivedEventArgs Inheritance object ShoutoutReceivedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class ShoutoutReceivedEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.StreamEndedEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.StreamEndedEventArgs.html",
    "title": "Class StreamEndedEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class StreamEndedEventArgs Inheritance object StreamEndedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class StreamEndedEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.StreamStartedEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.StreamStartedEventArgs.html",
    "title": "Class StreamStartedEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class StreamStartedEventArgs Inheritance object StreamStartedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class StreamStartedEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.SubscriptionEndedEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.SubscriptionEndedEventArgs.html",
    "title": "Class SubscriptionEndedEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class SubscriptionEndedEventArgs Inheritance object SubscriptionEndedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class SubscriptionEndedEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.SubscriptionEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.SubscriptionEventArgs.html",
    "title": "Class SubscriptionEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class SubscriptionEventArgs Inheritance object SubscriptionEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class SubscriptionEventArgs Properties Name Description BroadcasterDisplayName The requested broadcaster display name. BroadcasterId The requested broadcaster ID. BroadcasterName The requested broadcaster login. IsGift Whether the subscription is a gift. Tier The tier of the subscription. UserDisplayName The user display name for the user who subscribed to the specified channel. UserId The user ID for the user who subscribed to the specified channel. UserName The user login for the user who subscribed to the specified channel."
  },
  "api/AuxLabs.SimpleTwitch.EventSub.SubscriptionGiftedEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.SubscriptionGiftedEventArgs.html",
    "title": "Class SubscriptionGiftedEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class SubscriptionGiftedEventArgs Inheritance object SubscriptionGiftedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class SubscriptionGiftedEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.SubscriptionMessageEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.SubscriptionMessageEventArgs.html",
    "title": "Class SubscriptionMessageEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class SubscriptionMessageEventArgs Inheritance object SubscriptionMessageEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class SubscriptionMessageEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.TwitchEventSubApiClient.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.TwitchEventSubApiClient.html",
    "title": "Class TwitchEventSubApiClient | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class TwitchEventSubApiClient Inheritance object BaseSocketClient<EventSubFrame> TwitchEventSubApiClient Inherited Members BaseSocketClient<EventSubFrame>.Connected BaseSocketClient<EventSubFrame>.Disconnected BaseSocketClient<EventSubFrame>.DeserializationError BaseSocketClient<EventSubFrame>.UnknownEventReceived BaseSocketClient<EventSubFrame>.PayloadReceived BaseSocketClient<EventSubFrame>.PayloadSent BaseSocketClient<EventSubFrame>.State BaseSocketClient<EventSubFrame>.ReceivedData BaseSocketClient<EventSubFrame>.OnUnknownEventReceived(EventSubFrame) BaseSocketClient<EventSubFrame>.SendIdentify() BaseSocketClient<EventSubFrame>.SendHeartbeat() BaseSocketClient<EventSubFrame>.SendHeartbeatAck() BaseSocketClient<EventSubFrame>.Run(string) BaseSocketClient<EventSubFrame>.RunAsync(string) BaseSocketClient<EventSubFrame>.Stop() BaseSocketClient<EventSubFrame>.StopAsync() BaseSocketClient<EventSubFrame>.Dispose() BaseSocketClient<EventSubFrame>.Send(EventSubFrame) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.WebSockets.dll Syntax public class TwitchEventSubApiClient : BaseSocketClient<EventSubFrame> Constructors Name Description TwitchEventSubApiClient(TwitchEventSubConfig) TwitchEventSubApiClient(string, TwitchEventSubConfig) Fields Name Description ThrowOnUnknownEvent Properties Name Description Serializer Session Methods Name Description HandleEvent(EventSubFrame, TaskCompletionSource<bool>) Run() RunAsync() Events Name Description AuthorizationGranted A user’s authorization has been granted to your client id. AuthorizationRevoked A user’s authorization has been revoked for your client id. BitsCheered A user cheers on the specified channel. BitsTransactionCreated A Bits transaction occurred for a specified Twitch Extension. ChannelFollow A specified channel receives a follow. ChannelRaided A broadcaster raids another broadcaster’s channel. ChannelUpdated A broadcaster updates their channel properties e.g., category, title, mature flag, broadcast, or language. CharityCampaignProgress Sends an event notification when progress is made towards the campaign’s goal or when the broadcaster changes the fundraising goal. CharityCampaignStarted Sends an event notification when the broadcaster starts a charity campaign. CharityCampaignStopped Sends an event notification when the broadcaster stops a charity campaign. CharityDonation Sends an event notification when a user donates to the broadcaster’s charity campaign. DropEntitlementGranted An entitlement for a Drop is granted to a user. GoalEnded Get notified when a broadcaster ends a goal. GoalProgress Get notified when progress (either positive or negative) is made towards a broadcaster’s goal. GoalStarted Get notified when a broadcaster begins a goal. HypeTrainEnded A Hype Train ends on the specified channel. HypeTrainProgress A Hype Train makes progress on the specified channel. HypeTrainStarted A Hype Train begins on the specified channel. ModeratorAdded Moderator privileges were added to a user on a specified channel. ModeratorRemoved Moderator privileges were removed from a user on a specified channel. PollEnded A poll ended on a specified channel. PollProgress Users respond to a poll on a specified channel. PollStarted A poll started on a specified channel. PredictionEnded A Prediction ended on a specified channel. PredictionLocked A Prediction was locked on a specified channel. PredictionProgress Users participated in a Prediction on a specified channel. PredictionStarted A Prediction started on a specified channel. Reconnect Triggered when the server requests a reconnect. RedemptionAdded A viewer has redeemed a custom channel points reward on the specified channel. RedemptionUpdated A redemption of a channel points custom reward has been updated for the specified channel. Revocation Triggered when the user no longer exists or they revoked the authorization token that the subscription relied on. RewardAdded A custom channel points reward has been created for the specified channel. RewardRemoved A custom channel points reward has been removed from the specified channel. RewardUpdated A custom channel points reward has been updated for the specified channel. SessionCreated Triggered when a session is created after connection. ShieldModeEnded Sends a notification when the broadcaster deactivates Shield Mode. ShieldModeStarted Sends a notification when the broadcaster activates Shield Mode. ShoutoutCreated Sends a notification when the specified broadcaster sends a Shoutout. ShoutoutReceived Sends a notification when the specified broadcaster receives a Shoutout. StreamEnded The specified broadcaster stops a stream. StreamStarted The specified broadcaster starts a stream. Subscription A notification when a specified channel receives a subscriber. This does not include resubscribes. SubscriptionEnd A notification when a subscription to the specified channel ends. SubscriptionGifted A notification when a viewer gives a gift subscription to one or more users in the specified channel. SubscriptionMessage A notification when a user sends a resubscription chat message in a specific channel. UserBanned A viewer is banned from the specified channel. UserUnbanned A viewer is unbanned from the specified channel. UserUpdated A user has updated their account."
  },
  "api/AuxLabs.SimpleTwitch.EventSub.TwitchEventSubConfig.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.TwitchEventSubConfig.html",
    "title": "Class TwitchEventSubConfig | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class TwitchEventSubConfig Inheritance object TwitchEventSubConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.WebSockets.dll Syntax public class TwitchEventSubConfig Properties Name Description Serializer Specify a custom serializer for eventsub json messages. ThrowOnUnknownEvent Should an exception be raised if an unhandled event is received from twitch."
  },
  "api/AuxLabs.SimpleTwitch.EventSub.UnbanEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.UnbanEventArgs.html",
    "title": "Class UnbanEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class UnbanEventArgs Inheritance object UnbanEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class UnbanEventArgs Properties Name Description BroadcasterDisplayName The requested broadcaster display name. BroadcasterId The requested broadcaster ID. BroadcasterName The requested broadcaster login. ModeratorDisplayName The user name of the issuer of the unban. ModeratorId The user ID of the issuer of the unban. ModeratorName The user login of the issuer of the unban. UserDisplayName The user display name for the user who was unbanned on the specified channel. UserId The user id for the user who was unbanned on the specified channel. UserName The user login for the user who was unbanned on the specified channel."
  },
  "api/AuxLabs.SimpleTwitch.EventSub.UserUpdatedEventArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.UserUpdatedEventArgs.html",
    "title": "Class UserUpdatedEventArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class UserUpdatedEventArgs Inheritance object UserUpdatedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class UserUpdatedEventArgs"
  },
  "api/AuxLabs.SimpleTwitch.EventSub.VotingOption.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.VotingOption.html",
    "title": "Class VotingOption | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class VotingOption Inheritance object VotingOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.dll Syntax public class VotingOption Properties Name Description AmountPerVote Number of specified currency required to vote once. IsEnabled Indicates if this option is enabled."
  },
  "api/AuxLabs.SimpleTwitch.EventSub.WebSocketMetadata.html": {
    "href": "api/AuxLabs.SimpleTwitch.EventSub.WebSocketMetadata.html",
    "title": "Class WebSocketMetadata | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class WebSocketMetadata Inheritance object WebSocketMetadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.EventSub Assembly: AuxLabs.SimpleTwitch.EventSub.WebSockets.dll Syntax public class WebSocketMetadata Properties Name Description Id An ID that uniquely identifies the message. SubscriptionType The type of event sent in the message. SubscriptionVersion The version number of the subscription type’s definition. This is the same value specified in the subscription request. Timestamp The UTC date and time that the message was sent. Type The type of message. TypeRaw The type of message, in a raw string format."
  },
  "api/AuxLabs.SimpleTwitch.html": {
    "href": "api/AuxLabs.SimpleTwitch.html",
    "title": "Namespace AuxLabs.SimpleTwitch | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Namespace AuxLabs.SimpleTwitch Classes EnumHelper HttpException MissingScopeException NoEqualityComparer QueryMap RateLimitedException Require TwitchConstants TwitchException UnexpectedTagsException WebSocketClosedException Interfaces IChannel IChannelInfo IEntity<TId> IUser IUserFollow IUserInfo IUserRelation Enums EmoteFormat SubscriptionType"
  },
  "api/AuxLabs.SimpleTwitch.HttpException.html": {
    "href": "api/AuxLabs.SimpleTwitch.HttpException.html",
    "title": "Class HttpException | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class HttpException Inheritance object System.Exception HttpException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch Assembly: AuxLabs.SimpleTwitch.dll Syntax public class HttpException : Exception, ISerializable Constructors Name Description HttpException(HttpStatusCode, string) Properties Name Description HttpCode Reason"
  },
  "api/AuxLabs.SimpleTwitch.IChannel.html": {
    "href": "api/AuxLabs.SimpleTwitch.IChannel.html",
    "title": "Interface IChannel | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Interface IChannel Inherited Members IEntity<string>.Id Namespace: AuxLabs.SimpleTwitch Assembly: AuxLabs.SimpleTwitch.dll Syntax public interface IChannel : IEntity<string> Properties Name Description Name"
  },
  "api/AuxLabs.SimpleTwitch.IChannelInfo.html": {
    "href": "api/AuxLabs.SimpleTwitch.IChannelInfo.html",
    "title": "Interface IChannelInfo | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Interface IChannelInfo Inherited Members IChannel.Name IEntity<string>.Id Namespace: AuxLabs.SimpleTwitch Assembly: AuxLabs.SimpleTwitch.dll Syntax public interface IChannelInfo : IChannel, IEntity<string>"
  },
  "api/AuxLabs.SimpleTwitch.IEntity-1.html": {
    "href": "api/AuxLabs.SimpleTwitch.IEntity-1.html",
    "title": "Interface IEntity<TId> | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Interface IEntity<TId> Namespace: AuxLabs.SimpleTwitch Assembly: AuxLabs.SimpleTwitch.dll Syntax public interface IEntity<TId> Type Parameters Name Description TId Properties Name Description Id"
  },
  "api/AuxLabs.SimpleTwitch.IUser.html": {
    "href": "api/AuxLabs.SimpleTwitch.IUser.html",
    "title": "Interface IUser | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Interface IUser Inherited Members IEntity<string>.Id Namespace: AuxLabs.SimpleTwitch Assembly: AuxLabs.SimpleTwitch.dll Syntax public interface IUser : IEntity<string> Properties Name Description DisplayName Name"
  },
  "api/AuxLabs.SimpleTwitch.IUserFollow.html": {
    "href": "api/AuxLabs.SimpleTwitch.IUserFollow.html",
    "title": "Interface IUserFollow | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Interface IUserFollow Namespace: AuxLabs.SimpleTwitch Assembly: AuxLabs.SimpleTwitch.dll Syntax public interface IUserFollow Properties Name Description BroadcasterDisplayName The display name of the user that’s being followed. BroadcasterId The ID of the user that’s being followed by UserId. BroadcasterName The login name of the user that’s being followed. FollowedAt The UTC date and time of when UserId began following BroadcasterId. UserDisplayName The follower’s display name. UserId The ID of the user that's following BroadcasterId. UserName The follower’s login name."
  },
  "api/AuxLabs.SimpleTwitch.IUserInfo.html": {
    "href": "api/AuxLabs.SimpleTwitch.IUserInfo.html",
    "title": "Interface IUserInfo | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Interface IUserInfo Inherited Members IUser.Name IUser.DisplayName IEntity<string>.Id Namespace: AuxLabs.SimpleTwitch Assembly: AuxLabs.SimpleTwitch.dll Syntax public interface IUserInfo : IUser, IEntity<string>"
  },
  "api/AuxLabs.SimpleTwitch.IUserRelation.html": {
    "href": "api/AuxLabs.SimpleTwitch.IUserRelation.html",
    "title": "Interface IUserRelation | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Interface IUserRelation Inherited Members IUser.Name IUser.DisplayName IEntity<string>.Id Namespace: AuxLabs.SimpleTwitch Assembly: AuxLabs.SimpleTwitch.dll Syntax public interface IUserRelation : IUser, IEntity<string> Properties Name Description RelatedDisplayName RelatedId RelatedName"
  },
  "api/AuxLabs.SimpleTwitch.MissingScopeException.html": {
    "href": "api/AuxLabs.SimpleTwitch.MissingScopeException.html",
    "title": "Class MissingScopeException | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class MissingScopeException Inheritance object System.Exception TwitchException MissingScopeException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch Assembly: AuxLabs.SimpleTwitch.dll Syntax public class MissingScopeException : TwitchException, ISerializable Constructors Name Description MissingScopeException(params string[]) Properties Name Description Scopes"
  },
  "api/AuxLabs.SimpleTwitch.NoEqualityComparer.html": {
    "href": "api/AuxLabs.SimpleTwitch.NoEqualityComparer.html",
    "title": "Class NoEqualityComparer | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class NoEqualityComparer Inheritance object NoEqualityComparer Implements System.Collections.Generic.IEqualityComparer<T><string> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch Assembly: AuxLabs.SimpleTwitch.dll Syntax public class NoEqualityComparer : IEqualityComparer<string> Fields Name Description Instance Methods Name Description Equals(string, string) GetHashCode(string)"
  },
  "api/AuxLabs.SimpleTwitch.PubSub.html": {
    "href": "api/AuxLabs.SimpleTwitch.PubSub.html",
    "title": "Namespace AuxLabs.SimpleTwitch.PubSub | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Namespace AuxLabs.SimpleTwitch.PubSub Classes PubSubPayload PubSubPayload<TPayload> PubSubRequest PubSubResponse TwitchPubSubApiClient TwitchPubSubApiConfig Structs PubSubTopic Enums PubSubPayloadType PubSubTopicType"
  },
  "api/AuxLabs.SimpleTwitch.PubSub.PubSubPayload-1.html": {
    "href": "api/AuxLabs.SimpleTwitch.PubSub.PubSubPayload-1.html",
    "title": "Class PubSubPayload<TPayload> | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PubSubPayload<TPayload> Inheritance object PubSubPayload<TPayload> PubSubPayload Implements IPayload Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.PubSub Assembly: AuxLabs.SimpleTwitch.PubSub.dll Syntax public class PubSubPayload<TPayload> : IPayload Type Parameters Name Description TPayload Properties Name Description Data Error IsHelloEvent Nonce Type"
  },
  "api/AuxLabs.SimpleTwitch.PubSub.PubSubPayload.html": {
    "href": "api/AuxLabs.SimpleTwitch.PubSub.PubSubPayload.html",
    "title": "Class PubSubPayload | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PubSubPayload Inheritance object PubSubPayload<PubSubResponse> PubSubPayload Implements IPayload Inherited Members PubSubPayload<PubSubResponse>.IsHelloEvent PubSubPayload<PubSubResponse>.Type PubSubPayload<PubSubResponse>.Nonce PubSubPayload<PubSubResponse>.Error PubSubPayload<PubSubResponse>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.PubSub Assembly: AuxLabs.SimpleTwitch.PubSub.dll Syntax public class PubSubPayload : PubSubPayload<PubSubResponse>, IPayload"
  },
  "api/AuxLabs.SimpleTwitch.PubSub.PubSubPayloadType.html": {
    "href": "api/AuxLabs.SimpleTwitch.PubSub.PubSubPayloadType.html",
    "title": "Enum PubSubPayloadType | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum PubSubPayloadType Namespace: AuxLabs.SimpleTwitch.PubSub Assembly: AuxLabs.SimpleTwitch.PubSub.dll Syntax public enum PubSubPayloadType Fields Name Description Listen Message Response Unknown Unlisten Extension Methods EnumHelper.GetStringValue<PubSubPayloadType>(PubSubPayloadType)"
  },
  "api/AuxLabs.SimpleTwitch.PubSub.PubSubRequest.html": {
    "href": "api/AuxLabs.SimpleTwitch.PubSub.PubSubRequest.html",
    "title": "Class PubSubRequest | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PubSubRequest Inheritance object PubSubRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.PubSub Assembly: AuxLabs.SimpleTwitch.PubSub.dll Syntax public class PubSubRequest Properties Name Description Token Topics"
  },
  "api/AuxLabs.SimpleTwitch.PubSub.PubSubResponse.html": {
    "href": "api/AuxLabs.SimpleTwitch.PubSub.PubSubResponse.html",
    "title": "Class PubSubResponse | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PubSubResponse Inheritance object PubSubResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.PubSub Assembly: AuxLabs.SimpleTwitch.PubSub.dll Syntax public class PubSubResponse Properties Name Description MessageData Topic"
  },
  "api/AuxLabs.SimpleTwitch.PubSub.PubSubTopic.html": {
    "href": "api/AuxLabs.SimpleTwitch.PubSub.PubSubTopic.html",
    "title": "Struct PubSubTopic | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Struct PubSubTopic Inherited Members System.ValueType.Equals(object) System.ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch.PubSub Assembly: AuxLabs.SimpleTwitch.PubSub.dll Syntax public readonly struct PubSubTopic Constructors Name Description PubSubTopic(string) Properties Name Description Ids Type Methods Name Description ToString()"
  },
  "api/AuxLabs.SimpleTwitch.PubSub.PubSubTopicType.html": {
    "href": "api/AuxLabs.SimpleTwitch.PubSub.PubSubTopicType.html",
    "title": "Enum PubSubTopicType | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum PubSubTopicType Namespace: AuxLabs.SimpleTwitch.PubSub Assembly: AuxLabs.SimpleTwitch.PubSub.dll Syntax public enum PubSubTopicType Fields Name Description AutoModQueue AutoMod flags a message as potentially inappropriate, and when a moderator takes action on a message. BitsBadgeUnlocks Message sent when a user earns a new Bits badge in a particular channel, and chooses to share the notification with chat. BitsV1 Anyone cheers in a specified channel. BitsV2 Anyone cheers in a specified channel. ChannelPointRedemptions A custom reward is redeemed in a channel. ChannelSubscriptions Anyone subscribes (first month), resubscribes (subsequent months), or gifts a subscription to a channel. LowTrustUserStatus The broadcaster or a moderator updates the low trust status of a user, or a new message has been sent in chat by a potential ban evader or a bans shared user. ModerationNotifications A user’s message held by AutoMod has been approved or denied. ModeratorActions Examples of moderator actions are bans, unbans, timeouts, deleting messages, changing chat mode (followers-only, subs-only), changing AutoMod levels, and adding a mod. Unknown Whispers Anyone whispers the specified user. Extension Methods EnumHelper.GetStringValue<PubSubTopicType>(PubSubTopicType)"
  },
  "api/AuxLabs.SimpleTwitch.PubSub.TwitchPubSubApiClient.html": {
    "href": "api/AuxLabs.SimpleTwitch.PubSub.TwitchPubSubApiClient.html",
    "title": "Class TwitchPubSubApiClient | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class TwitchPubSubApiClient Inheritance object BaseSocketClient<PubSubPayload> TwitchPubSubApiClient Inherited Members BaseSocketClient<PubSubPayload>.Connected BaseSocketClient<PubSubPayload>.Disconnected BaseSocketClient<PubSubPayload>.DeserializationError BaseSocketClient<PubSubPayload>.UnknownEventReceived BaseSocketClient<PubSubPayload>.PayloadReceived BaseSocketClient<PubSubPayload>.PayloadSent BaseSocketClient<PubSubPayload>.State BaseSocketClient<PubSubPayload>.ReceivedData BaseSocketClient<PubSubPayload>.OnUnknownEventReceived(PubSubPayload) BaseSocketClient<PubSubPayload>.SendIdentify() BaseSocketClient<PubSubPayload>.Run(string) BaseSocketClient<PubSubPayload>.RunAsync(string) BaseSocketClient<PubSubPayload>.Stop() BaseSocketClient<PubSubPayload>.StopAsync() BaseSocketClient<PubSubPayload>.Dispose() BaseSocketClient<PubSubPayload>.Send(PubSubPayload) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.PubSub Assembly: AuxLabs.SimpleTwitch.PubSub.dll Syntax public class TwitchPubSubApiClient : BaseSocketClient<PubSubPayload> Constructors Name Description TwitchPubSubApiClient(TwitchPubSubApiConfig) TwitchPubSubApiClient(string, TwitchPubSubApiConfig) Properties Name Description Serializer Methods Name Description HandleEvent(PubSubPayload, TaskCompletionSource<bool>) Run() RunAsync() SendHeartbeat() SendHeartbeatAck()"
  },
  "api/AuxLabs.SimpleTwitch.PubSub.TwitchPubSubApiConfig.html": {
    "href": "api/AuxLabs.SimpleTwitch.PubSub.TwitchPubSubApiConfig.html",
    "title": "Class TwitchPubSubApiConfig | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class TwitchPubSubApiConfig Inheritance object TwitchPubSubApiConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.PubSub Assembly: AuxLabs.SimpleTwitch.PubSub.dll Syntax public class TwitchPubSubApiConfig Properties Name Description Serializer"
  },
  "api/AuxLabs.SimpleTwitch.QueryMap.html": {
    "href": "api/AuxLabs.SimpleTwitch.QueryMap.html",
    "title": "Class QueryMap | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class QueryMap Inheritance object QueryMap BaseTags AutomodSettingsArgs CodeStatusArgs DeleteBanArgs DeleteBlockArgs DeleteBlockedTermsArgs DeleteMessageArgs DeleteRaidArgs DeleteVideosArgs GetActiveExtensionsArgs GetAnalyticsArgs GetBadgesArgs GetBannedUsersArgs GetBitsLeaderboardArgs GetBlockedTermsArgs GetBlocksArgs GetBroadcastKeyArgs GetBroadcastMarkersArgs GetBroadcastsArgs GetChannelEditorsArgs GetChannelsArgs GetChannelTeamsArgs GetCharityCampaignArgs GetCharityDonationsArgs GetChatSettingsArgs GetChattersArgs GetCheermotesArgs GetClipsArgs GetCurrentTrackArgs GetDropStatusArgs GetEmotesArgs GetEmoteSetsArgs GetEventSubscriptionsArgs GetExtensionTransactionsArgs GetFollowedBroadcastsArgs GetFollowsArgs GetGamesArgs GetGoalsArgs GetHypeTrainsArgs GetPlaylistsArgs GetPlaylistTracksArgs GetPollsArgs GetPredictionsArgs GetRedemptionsArgs GetRewardArgs GetRolesArgs GetScheduleArgs GetSubscriberArgs GetSubscriptionsArgs GetTeamArgs GetTopGamesArgs GetUserColorArgs GetUsersArgs GetVideosArgs ManageRewardArgs ManageRolesArgs ManageSegmentArgs ModifyRedemptionsArgs PatchChannelArgs PatchChatSettingsArgs PatchScheduleArgs PostAnnouncementArgs PostAppAccessTokenArgs PostAutomodMessageArgs PostBanArgs PostBlockedTermArgs PostClipArgs PostCommercialBody PostEnforcementStatusArgs PostRaidArgs PostRevokeTokenArgs PostRewardArgs PostSegmentArgs PostShoutoutArgs PostWhisperArgs PutBlockArgs PutShieldModeArgs PutUserArgs PutUserChatColorArgs SearchCategoriesArgs SearchChannelsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch Assembly: AuxLabs.SimpleTwitch.dll Syntax public abstract class QueryMap : IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Methods Name Description CreateQueryMap() Explicit Interface Implementations Name Description ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) ICollection<KeyValuePair<string, string>>.Clear() ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) ICollection<KeyValuePair<string, string>>.Count ICollection<KeyValuePair<string, string>>.IsReadOnly ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) IDictionary<string, string>.Add(string, string) IDictionary<string, string>.ContainsKey(string) IDictionary<string, string>.this[string] IDictionary<string, string>.Keys IDictionary<string, string>.Remove(string) IDictionary<string, string>.TryGetValue(string, out string) IDictionary<string, string>.Values IEnumerable<KeyValuePair<string, string>>.GetEnumerator() IEnumerable.GetEnumerator()"
  },
  "api/AuxLabs.SimpleTwitch.RateLimitedException.html": {
    "href": "api/AuxLabs.SimpleTwitch.RateLimitedException.html",
    "title": "Class RateLimitedException | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class RateLimitedException Inheritance object System.Exception System.SystemException System.TimeoutException RateLimitedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch Assembly: AuxLabs.SimpleTwitch.dll Syntax public class RateLimitedException : TimeoutException, ISerializable Constructors Name Description RateLimitedException()"
  },
  "api/AuxLabs.SimpleTwitch.Require.html": {
    "href": "api/AuxLabs.SimpleTwitch.Require.html",
    "title": "Class Require | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Require Inheritance object Require Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch Assembly: AuxLabs.SimpleTwitch.dll Syntax public static class Require Methods Name Description After(DateTime, DateTime, string, string) After(DateTime?, DateTime, string, string) AtLeast(int, int, string, string) AtLeast(int?, int, string, string) AtLeast(uint?, int, string, string) AtLeast(uint, int, string, string) AtMost(int, int, string, string) AtMost(int?, int, string, string) AtMost(uint?, int, string, string) AtMost(uint, int, string, string) Before(DateTime, DateTime, string, string) Before(DateTime?, DateTime, string, string) Equal(object, object, string, string) Exclusive(object[], string[], bool, string) GreaterThan(int, int, string, string) GreaterThan(int?, int, string, string) GreaterThan(uint?, int, string, string) GreaterThan(uint, int, string, string) HasAtLeast<T>(IEnumerable<T>, int, string, string) HasAtMost<T>(IEnumerable<T>, int, string, string) HasGreaterThan<T>(IEnumerable<T>, int, string, string) HasLessThan<T>(IEnumerable<T>, int, string, string) LengthAtLeast(string, int, string, string) LengthAtMost(string, int, string, string) LengthGreaterThan(string, int, string, string) LengthLessThan(string, int, string, string) LessThan(int, int, string, string) LessThan(int?, int, string, string) LessThan(uint?, int, string, string) LessThan(uint, int, string, string) NotEmpty(string, string, string) NotEmptyOrWhitespace(string, string, string) NotNull(object, string, string) NotNullOrEmpty(string, string, string) NotNullOrWhitespace(string, string, string) NotZero(int, string, string) NotZero(int?, string, string) NotZero(uint?, string, string) NotZero(uint, string, string) OnOrAfter(DateTime, DateTime, string, string) OnOrAfter(DateTime?, DateTime, string, string) OnOrBefore(DateTime, DateTime, string, string) OnOrBefore(DateTime?, DateTime, string, string) Scopes(IEnumerable<string>, string[])"
  },
  "api/AuxLabs.SimpleTwitch.Rest.AcceptedTransport.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.AcceptedTransport.html",
    "title": "Class AcceptedTransport | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class AcceptedTransport Inheritance object Transport AcceptedTransport Inherited Members Transport.Method Transport.Callback Transport.Secret Transport.SessionId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class AcceptedTransport : Transport Properties Name Description ConnectedAt The date and time that the WebSocket was connected. Only specified for websockets. DisconnectedAt The date and time that the WebSocket was disconnected. Only specified for websockets."
  },
  "api/AuxLabs.SimpleTwitch.Rest.AccessTokenInfo.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.AccessTokenInfo.html",
    "title": "Class AccessTokenInfo | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class AccessTokenInfo Inheritance object AccessTokenInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class AccessTokenInfo Properties Name Description ClientId ExpiresInSeconds Scopes UserId UserName"
  },
  "api/AuxLabs.SimpleTwitch.Rest.Album.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Album.html",
    "title": "Class Album | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Album Inheritance object Album Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Album Properties Name Description Id The album’s Amazon Standard Identification Number. ImageUrl A URL to the album’s cover art. Name The album’s name."
  },
  "api/AuxLabs.SimpleTwitch.Rest.Analytic.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Analytic.html",
    "title": "Class Analytic | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Analytic Inheritance object Analytic ExtensionAnalytic GameAnalytic Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public abstract class Analytic Properties Name Description DateRange The reporting window’s start and end dates. Type The type of report. Url The URL used to download the report."
  },
  "api/AuxLabs.SimpleTwitch.Rest.AnalyticType.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.AnalyticType.html",
    "title": "Enum AnalyticType | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum AnalyticType Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum AnalyticType Fields Name Description None OverviewV2 Extension Methods EnumHelper.GetStringValue<AnalyticType>(AnalyticType)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.AnnouncementColor.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.AnnouncementColor.html",
    "title": "Enum AnnouncementColor | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum AnnouncementColor Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum AnnouncementColor Fields Name Description Blue Green Orange Primary Purple Extension Methods EnumHelper.GetStringValue<AnnouncementColor>(AnnouncementColor)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.AppIdentity.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.AppIdentity.html",
    "title": "Class AppIdentity | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class AppIdentity Inheritance object AppIdentity UserIdentity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class AppIdentity Properties Name Description AccessToken ExpiresInSeconds TokenType"
  },
  "api/AuxLabs.SimpleTwitch.Rest.Artist.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Artist.html",
    "title": "Class Artist | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Artist Inheritance object Artist Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Artist Properties Name Description Id The artist’s Amazon Standard Identification Number. Name The artist’s name. UserId The ID of the Twitch user that created the track."
  },
  "api/AuxLabs.SimpleTwitch.Rest.AuthorizationCondition.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.AuthorizationCondition.html",
    "title": "Class AuthorizationCondition | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class AuthorizationCondition Inheritance object AuthorizationCondition Implements IEventCondition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class AuthorizationCondition : IEventCondition Constructors Name Description AuthorizationCondition() AuthorizationCondition(string) Properties Name Description ClientId Your application's client id."
  },
  "api/AuxLabs.SimpleTwitch.Rest.AutomodAction.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.AutomodAction.html",
    "title": "Enum AutomodAction | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum AutomodAction Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum AutomodAction Fields Name Description Allow Deny Extension Methods EnumHelper.GetStringValue<AutomodAction>(AutomodAction)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.AutomodFilter.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.AutomodFilter.html",
    "title": "Enum AutomodFilter | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum AutomodFilter Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum AutomodFilter Fields Name Description Less Maximum More None Some Extension Methods EnumHelper.GetStringValue<AutomodFilter>(AutomodFilter)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.AutomodSettings.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.AutomodSettings.html",
    "title": "Class AutomodSettings | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class AutomodSettings Inheritance object AutomodSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class AutomodSettings Properties Name Description Aggression The Automod level for hostility involving aggression. BroadcasterId The broadcaster’s ID. Bullying The Automod level for hostility involving name calling or insults. Disability The Automod level for discrimination against disability. Misogyny The Automod level for discrimination against women. ModeratorId The moderator’s ID. OverallLevel The default AutoMod level for the broadcaster. RaceEthnicityOrReligion The Automod level for racial discrimination. SexBasedTerms The Automod level for sexual content. SexualitySexOrGender The AutoMod level for discrimination based on sexuality, sex, or gender. Swearing The Automod level for profanity."
  },
  "api/AuxLabs.SimpleTwitch.Rest.AutomodSettingsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.AutomodSettingsArgs.html",
    "title": "Class AutomodSettingsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class AutomodSettingsArgs Inheritance object QueryMap AutomodSettingsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class AutomodSettingsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IScopedRequest Properties Name Description BroadcasterId The ID of the broadcaster whose AutoMod settings you want to get. ModeratorId The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.Badge.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Badge.html",
    "title": "Class Badge | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Badge Inheritance object Badge Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Badge Properties Name Description SetId An ID that identifies this set of chat badges. Versions A collection of chat badges in this set."
  },
  "api/AuxLabs.SimpleTwitch.Rest.BadgeVersion.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.BadgeVersion.html",
    "title": "Struct BadgeVersion | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Struct BadgeVersion Inherited Members System.ValueType.Equals(object) System.ValueType.GetHashCode() System.ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public struct BadgeVersion Properties Name Description Id An ID that identifies this version of the badge. The ID can be any value. LargeImageUrl A URL to the large version (72px x 72px) of the badge. MediumImageUrl A URL to the medium version (36px x 36px) of the badge. SmallImageUrl A URL to the small version (18px x 18px) of the badge."
  },
  "api/AuxLabs.SimpleTwitch.Rest.Ban.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Ban.html",
    "title": "Class Ban | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Ban Inheritance object Ban Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Ban Properties Name Description BroadcasterId The broadcaster whose chat room the user was banned from chatting in. CreatedAt The UTC date and time that the ban or timeout was placed. EndsAt The UTC date and time that the timeout will end. ModeratorId The moderator that banned or put the user in the timeout. UserId The user that was banned or put in a timeout."
  },
  "api/AuxLabs.SimpleTwitch.Rest.BannedUser.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.BannedUser.html",
    "title": "Class BannedUser | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class BannedUser Inheritance object BannedUser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class BannedUser Properties Name Description CreatedAt The UTC date and time of when the user was banned. ExpiresAt The UTC date and time of when the timeout expires ModeratorDisplayName The moderator’s display name. ModeratorId The ID of the moderator that banned the user or put them in a timeout. ModeratorName The moderator’s login name. Reason The reason the user was banned or put in a timeout if the moderator provided one. UserDisplayName The banned user’s display name. UserId The ID of the banned user. UserName The banned user’s login name."
  },
  "api/AuxLabs.SimpleTwitch.Rest.BitsPeriod.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.BitsPeriod.html",
    "title": "Enum BitsPeriod | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum BitsPeriod Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum BitsPeriod Fields Name Description All Day Month Week Year Extension Methods EnumHelper.GetStringValue<BitsPeriod>(BitsPeriod)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.BitsTier.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.BitsTier.html",
    "title": "Class BitsTier | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class BitsTier Inheritance object BitsTier Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class BitsTier Properties Name Description CanCheer Determines whether users can cheer at this tier level. Color The hex code of the color associated with this tier level Images The animated and static image sets for the Cheermote. Level The tier level. MinimumBits The minimum number of Bits that you must cheer at this tier level. ShowInBitsCard Determines whether this tier level is shown in the Bits card."
  },
  "api/AuxLabs.SimpleTwitch.Rest.BitsUser.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.BitsUser.html",
    "title": "Class BitsUser | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class BitsUser Inheritance object BitsUser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class BitsUser Properties Name Description Rank The user’s position on the leaderboard. TotalBits The number of bits the user has cheered. UserId An ID that identifies a user on the leaderboard. UserLogin The user’s login name. UserName The user’s display name."
  },
  "api/AuxLabs.SimpleTwitch.Rest.BlockContext.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.BlockContext.html",
    "title": "Enum BlockContext | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum BlockContext Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum BlockContext Fields Name Description Chat Whisper Extension Methods EnumHelper.GetStringValue<BlockContext>(BlockContext)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.BlockedTerm.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.BlockedTerm.html",
    "title": "Class BlockedTerm | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class BlockedTerm Inheritance object BlockedTerm Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class BlockedTerm Properties Name Description BroadcasterId The broadcaster that owns the list of blocked terms. CreatedAt The UTC date and time that the term was blocked. ExpiresAt The UTC date and time that the blocked term is set to expire. Id An ID that identifies this blocked term. ModeratorId The moderator that blocked the word or phrase from being used in the broadcaster’s chat room. Text The blocked word or phrase. UpdatedAt The UTC date and time that the term was updated."
  },
  "api/AuxLabs.SimpleTwitch.Rest.BlockReason.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.BlockReason.html",
    "title": "Enum BlockReason | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum BlockReason Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum BlockReason Fields Name Description Harassment Other Spam Extension Methods EnumHelper.GetStringValue<BlockReason>(BlockReason)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.Broadcast.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Broadcast.html",
    "title": "Class Broadcast | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Broadcast Inheritance object Broadcast Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Broadcast Properties Name Description GameId The ID of the category or game being played. GameName The name of the category or game being played. Id An ID that identifies the stream. IsMature Indicates whether the stream is meant for mature audiences. Language The ISO 639-1 two-letter language code that the stream uses. StartedAt The UTC date and time of when the broadcast began. Tags The tags applied to the stream. ThumbnailUrl A URL to an image of a frame from the last 5 minutes of the stream. Title The stream’s title. Type The type of stream. UserDisplayName The user’s display name. UserId The ID of the user that’s broadcasting the stream. UserName The user’s login name. ViewerCount The number of users watching the stream."
  },
  "api/AuxLabs.SimpleTwitch.Rest.BroadcasterCondition.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.BroadcasterCondition.html",
    "title": "Class BroadcasterCondition | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class BroadcasterCondition Inheritance object BroadcasterCondition FollowCondition RewardCondition Implements IEventCondition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class BroadcasterCondition : IEventCondition Constructors Name Description BroadcasterCondition() BroadcasterCondition(string) Properties Name Description BroadcasterId The broadcaster user ID of the channel for which notifications will be received."
  },
  "api/AuxLabs.SimpleTwitch.Rest.BroadcasterType.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.BroadcasterType.html",
    "title": "Enum BroadcasterType | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum BroadcasterType Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum BroadcasterType Fields Name Description Affiliate None Partner Extension Methods EnumHelper.GetStringValue<BroadcasterType>(BroadcasterType)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.BroadcastMarker.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.BroadcastMarker.html",
    "title": "Class BroadcastMarker | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class BroadcastMarker Inheritance object BroadcastMarker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class BroadcastMarker Properties Name Description CreatedAt The UTC date and time of when the user created the marker. Description A description that the user gave the marker to help them remember why they marked the location. Id An ID that identifies this marker. PositionSeconds The relative offset (in seconds) of the marker from the beginning of the stream."
  },
  "api/AuxLabs.SimpleTwitch.Rest.BroadcastType.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.BroadcastType.html",
    "title": "Enum BroadcastType | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum BroadcastType Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum BroadcastType Fields Name Description All Live Unknown Extension Methods EnumHelper.GetStringValue<BroadcastType>(BroadcastType)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.Category.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Category.html",
    "title": "Class Category | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Category Inheritance object Category Game Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Category Properties Name Description BoxArtUrl A URL to the category’s box art. Id An ID that identifies the category. Name The category’s name."
  },
  "api/AuxLabs.SimpleTwitch.Rest.CDN.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.CDN.html",
    "title": "Class CDN | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class CDN Inheritance object CDN Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public static class CDN Fields Name Description EmoteImageUrl Methods Name Description GetEmoteImageUrl(string, EmoteFormat, EmoteTheme, EmoteScale)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.Channel.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Channel.html",
    "title": "Class Channel | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Channel Inheritance object Channel ChannelBroadcast Implements IUser IChannel IEntity<string> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Channel : IUser, IChannel, IEntity<string> Properties Name Description BroadcasterDisplayName The broadcaster’s display name. BroadcasterId An ID that uniquely identifies the broadcaster. BroadcasterName The broadcaster’s login name. Culture The broadcaster’s preferred language. Delay The value of the broadcaster’s stream delay setting, in seconds. GameId An ID that uniquely identifies the game that the broadcaster is playing or last played. GameName The name of the game that the broadcaster is playing or last played. Tags The tags applied to the channel. Title The title of the stream that the broadcaster is currently streaming or last streamed. Explicit Interface Implementations Name Description IChannel.Name IEntity<string>.Id IUser.DisplayName IUser.Name"
  },
  "api/AuxLabs.SimpleTwitch.Rest.ChannelBroadcast.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.ChannelBroadcast.html",
    "title": "Class ChannelBroadcast | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ChannelBroadcast Inheritance object Channel ChannelBroadcast Implements IUser IChannel IEntity<string> Inherited Members Channel.BroadcasterId Channel.BroadcasterName Channel.BroadcasterDisplayName Channel.Culture Channel.GameId Channel.GameName Channel.Title Channel.Delay Channel.Tags Channel.IUser.Name Channel.IUser.DisplayName Channel.IEntity<string>.Id Channel.IChannel.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class ChannelBroadcast : Channel, IUser, IChannel, IEntity<string> Properties Name Description IsLive Determines whether the broadcaster is streaming live. StartedAt The UTC date and time of when the broadcaster started streaming. ThumbnailUrl A URL to a thumbnail of the broadcaster’s profile image."
  },
  "api/AuxLabs.SimpleTwitch.Rest.ChannelEditor.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.ChannelEditor.html",
    "title": "Class ChannelEditor | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ChannelEditor Inheritance object ChannelEditor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class ChannelEditor Properties Name Description CreatedAt The date and time when the user became one of the broadcaster’s editors. UserId An ID that uniquely identifies a user with editor permissions. UserName The user’s display name."
  },
  "api/AuxLabs.SimpleTwitch.Rest.ChannelTeam.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.ChannelTeam.html",
    "title": "Class ChannelTeam | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ChannelTeam Inheritance object SimpleTeam ChannelTeam Inherited Members SimpleTeam.Id SimpleTeam.Name SimpleTeam.DisplayName SimpleTeam.BackgroundImageUrl SimpleTeam.BannerUrl SimpleTeam.CreatedAt SimpleTeam.UpdatedAt SimpleTeam.Description SimpleTeam.ThumbnailUrl object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class ChannelTeam : SimpleTeam Properties Name Description BroadcasterDisplayName The broadcaster’s display name. BroadcasterId An ID that identifies the broadcaster. BroadcasterName The broadcaster’s login name."
  },
  "api/AuxLabs.SimpleTwitch.Rest.CharityAmount.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.CharityAmount.html",
    "title": "Struct CharityAmount | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Struct CharityAmount Inherited Members System.ValueType.Equals(object) System.ValueType.GetHashCode() System.ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public struct CharityAmount Properties Name Description Currency The ISO-4217 three-letter currency code that identifies the type of currency. DecimalPlaces The number of decimal places used by the currency. Value The monetary amount in the currency’s minor unit."
  },
  "api/AuxLabs.SimpleTwitch.Rest.CharityCampaign.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.CharityCampaign.html",
    "title": "Class CharityCampaign | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class CharityCampaign Inheritance object CharityCampaign Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class CharityCampaign Properties Name Description BroadcasterId An ID that identifies the broadcaster that’s running the campaign. BroadcasterLogin The broadcaster’s login name. BroadcasterName The broadcaster’s display name. CharityDescription A description of the charity. CharityLogoUrl A URL to an image of the charity’s logo. CharityName The charity’s name. CharityWebsiteUrl A URL to the charity’s website. CurrentAmount The current amount of donations that the campaign has received. Id An ID that identifies the charity campaign. TargetAmount The campaign’s fundraising goal."
  },
  "api/AuxLabs.SimpleTwitch.Rest.CharityDonation.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.CharityDonation.html",
    "title": "Class CharityDonation | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class CharityDonation Inheritance object CharityDonation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class CharityDonation Properties Name Description Amount The amount of money that the user donated. CampaignId An ID that identifies the charity campaign that the donation applies to. Id An ID that identifies the donation. UserId An ID that identifies a user that donated money to the campaign. UserLogin The user’s login name. UserName The user’s display name."
  },
  "api/AuxLabs.SimpleTwitch.Rest.ChatColor.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.ChatColor.html",
    "title": "Enum ChatColor | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum ChatColor Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum ChatColor Fields Name Description Blue BlueViolet CadetBlue Chocolate Coral DodgerBlue Firebrick GoldenRod Green HotPink None OrangeRed Red SeaGreen SpringGreen YellowGreen Extension Methods EnumHelper.GetStringValue<ChatColor>(ChatColor)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.ChatSettings.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.ChatSettings.html",
    "title": "Class ChatSettings | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ChatSettings Inheritance object PatchChatSettingsBody ChatSettings Inherited Members PatchChatSettingsBody.IsEmoteOnly PatchChatSettingsBody.IsFollowerOnly PatchChatSettingsBody.FollowerOnlyMinutes PatchChatSettingsBody.IsModeratorDelayed PatchChatSettingsBody.ModeratorDelaySeconds PatchChatSettingsBody.IsSlowEnabled PatchChatSettingsBody.SlowSeconds PatchChatSettingsBody.IsSubscriberOnly PatchChatSettingsBody.IsUniqueEnabled PatchChatSettingsBody.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class ChatSettings : PatchChatSettingsBody Properties Name Description BroadcasterId The ID of the broadcaster specified in the request. ModeratorId The moderator’s ID."
  },
  "api/AuxLabs.SimpleTwitch.Rest.Cheermote.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Cheermote.html",
    "title": "Class Cheermote | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Cheermote Inheritance object Cheermote Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Cheermote Properties Name Description IsCharitable Indicates whether this Cheermote provides a charitable contribution match during charity campaigns. LastUpdatedAt The date and time when this Cheermote was last updated. Name The prefix of the Cheermote string that you use in chat to cheer bits. Order The order that the Cheermotes are shown in the bits card. Tiers A collection of tier levels that the Cheermote supports. Type The type of Cheermote."
  },
  "api/AuxLabs.SimpleTwitch.Rest.CheermoteFormat.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.CheermoteFormat.html",
    "title": "Class CheermoteFormat | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class CheermoteFormat Inheritance object CheermoteFormat Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class CheermoteFormat Properties Name Description AnimatedImage StaticImage"
  },
  "api/AuxLabs.SimpleTwitch.Rest.CheermoteImage.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.CheermoteImage.html",
    "title": "Class CheermoteImage | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class CheermoteImage Inheritance object CheermoteImage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class CheermoteImage Properties Name Description Size1 Size1AndHalf Size2 Size3 Size4"
  },
  "api/AuxLabs.SimpleTwitch.Rest.CheermoteTheme.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.CheermoteTheme.html",
    "title": "Class CheermoteTheme | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class CheermoteTheme Inheritance object CheermoteTheme Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class CheermoteTheme Properties Name Description Dark Light"
  },
  "api/AuxLabs.SimpleTwitch.Rest.CheermoteType.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.CheermoteType.html",
    "title": "Enum CheermoteType | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum CheermoteType Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum CheermoteType Fields Name Description ChannelCustom DisplayOnly GlobalFirstParty GlobalThirdParty None Sponsored Extension Methods EnumHelper.GetStringValue<CheermoteType>(CheermoteType)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.Clip.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Clip.html",
    "title": "Class Clip | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Clip Inheritance object SimpleClip Clip Inherited Members SimpleClip.Id SimpleClip.EditUrl object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Clip : SimpleClip Properties Name Description BroadcasterDisplayName The broadcaster’s display name. BroadcasterId An ID that identifies the broadcaster that the video was clipped from. CreatedAt The date and time of when the clip was created. CreatorDisplayName The user’s display name. CreatorId An ID that identifies the user that created the clip. DurationSeconds The length of the clip, in seconds. EmbedUrl A URL that you can use in an iframe to embed the clip. GameId The ID of the game that was being played when the clip was created. Language The language that the broadcaster broadcasts in. OffsetSeconds The zero-based offset, in seconds, to where the clip starts in the video ThumbnailUrl A URL to a thumbnail image of the clip. Title The title of the clip. Url A URL to the clip. VideoId An ID that identifies the video that the clip came from. ViewCount The number of times the clip has been viewed."
  },
  "api/AuxLabs.SimpleTwitch.Rest.CodeStatus.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.CodeStatus.html",
    "title": "Enum CodeStatus | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum CodeStatus Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum CodeStatus Fields Name Description AlreadyClaimed The code has already been claimed. All codes are single-use. Expired The code has expired and can no longer be claimed. Inactive The code has not been activated. IncorrectFormat The code is not properly formatted. InternalError An internal or unknown error occurred when checking the code. Retry later. NotFound The code was not found. Unused The code has not been claimed. UserNotEligible The user is not eligible to redeem this code. Extension Methods EnumHelper.GetStringValue<CodeStatus>(CodeStatus)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.CodeStatusArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.CodeStatusArgs.html",
    "title": "Class CodeStatusArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class CodeStatusArgs Inheritance object QueryMap CodeStatusArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class CodeStatusArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Properties Name Description Codes The redemption codes to check. UserId The ID of the user that owns the redemption code. Methods Name Description CreateQueryMap() Validate()"
  },
  "api/AuxLabs.SimpleTwitch.Rest.Commercial.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Commercial.html",
    "title": "Class Commercial | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Commercial Contains information about the status of a commercial request. Inheritance object Commercial Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Commercial Properties Name Description Length The length of the commercial you requested. Message A message that indicates whether Twitch was able to serve an ad. RetryAfter The number of seconds you must wait before running another commercial."
  },
  "api/AuxLabs.SimpleTwitch.Rest.ComponentExtension.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.ComponentExtension.html",
    "title": "Class ComponentExtension | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ComponentExtension Inheritance object SimpleExtension ComponentExtension Inherited Members SimpleExtension.Id SimpleExtension.Version SimpleExtension.Name SimpleExtension.IsActive object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class ComponentExtension : SimpleExtension Properties Name Description X The x-coordinate where the extension is placed. Y The y-coordinate where the extension is placed."
  },
  "api/AuxLabs.SimpleTwitch.Rest.Cost.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Cost.html",
    "title": "Class Cost | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Cost Inheritance object Cost Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Cost Properties Name Description Amount The amount exchanged for the digital product. Type The type of currency exchanged."
  },
  "api/AuxLabs.SimpleTwitch.Rest.CostType.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.CostType.html",
    "title": "Enum CostType | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum CostType Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum CostType Fields Name Description Bits None Extension Methods EnumHelper.GetStringValue<CostType>(CostType)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.CultureInfoConverter.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.CultureInfoConverter.html",
    "title": "Class CultureInfoConverter | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class CultureInfoConverter Inheritance object CultureInfoConverter Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class CultureInfoConverter : JsonConverter<CultureInfo> Methods Name Description Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Write(Utf8JsonWriter, CultureInfo, JsonSerializerOptions)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.DateRange.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.DateRange.html",
    "title": "Struct DateRange | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Struct DateRange Inherited Members System.ValueType.Equals(object) System.ValueType.GetHashCode() System.ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public readonly struct DateRange Constructors Name Description DateRange(DateTime, DateTime) Properties Name Description EndedAt StartedAt"
  },
  "api/AuxLabs.SimpleTwitch.Rest.DefaultRateLimiter.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.DefaultRateLimiter.html",
    "title": "Class DefaultRateLimiter | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class DefaultRateLimiter Inheritance object DefaultRateLimiter Implements IRateLimiter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class DefaultRateLimiter : IRateLimiter Constructors Name Description DefaultRateLimiter() Methods Name Description EnterBucketLockAsync(string, CancellationToken) EnterGlobalLockAsync(CancellationToken) EnterLockAsync(string, CancellationToken) UpdateLimit(string, RateLimitInfo, bool)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.DeleteBanArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.DeleteBanArgs.html",
    "title": "Class DeleteBanArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class DeleteBanArgs Inheritance object QueryMap DeleteBanArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class DeleteBanArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description BroadcasterId The ID of the broadcaster whose chat room the user is being banned from. ModeratorId The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. Scopes UserId The ID of the user to remove the ban or timeout from. Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.DeleteBlockArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.DeleteBlockArgs.html",
    "title": "Class DeleteBlockArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class DeleteBlockArgs Inheritance object QueryMap DeleteBlockArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class DeleteBlockArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IScopedRequest Constructors Name Description DeleteBlockArgs() DeleteBlockArgs(string) Properties Name Description Scopes UserId The ID of the user to remove from the broadcaster’s list of blocked users. Methods Name Description CreateQueryMap() Validate(IEnumerable<string>) Operators Name Description implicit operator string(DeleteBlockArgs) implicit operator DeleteBlockArgs(string)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.DeleteBlockedTermsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.DeleteBlockedTermsArgs.html",
    "title": "Class DeleteBlockedTermsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class DeleteBlockedTermsArgs Inheritance object QueryMap DeleteBlockedTermsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class DeleteBlockedTermsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description BroadcasterId The ID of the broadcaster whose blocked terms you’re getting. ModeratorId The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. Scopes TermId The ID of the blocked term to remove from the broadcaster’s list of blocked terms. Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.DeleteMessageArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.DeleteMessageArgs.html",
    "title": "Class DeleteMessageArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class DeleteMessageArgs Inheritance object QueryMap DeleteMessageArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class DeleteMessageArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description BroadcasterId The ID of the broadcaster that owns the chat room to remove messages from. MessageId The ID of the message to remove. ModeratorId The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.DeleteRaidArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.DeleteRaidArgs.html",
    "title": "Class DeleteRaidArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class DeleteRaidArgs Inheritance object QueryMap DeleteRaidArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class DeleteRaidArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Constructors Name Description DeleteRaidArgs() DeleteRaidArgs(string) Properties Name Description BroadcasterId The ID of the broadcaster that initiated the raid. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>) Operators Name Description implicit operator string(DeleteRaidArgs) implicit operator DeleteRaidArgs(string)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.DeleteVideosArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.DeleteVideosArgs.html",
    "title": "Class DeleteVideosArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class DeleteVideosArgs Inheritance object QueryMap DeleteVideosArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class DeleteVideosArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IScopedRequest Constructors Name Description DeleteVideosArgs() DeleteVideosArgs(List<string>) DeleteVideosArgs(params string[]) Properties Name Description Scopes VideoIds The collection of video ids to delete. Methods Name Description CreateQueryMap() Validate(IEnumerable<string>) Operators Name Description implicit operator List<string>(DeleteVideosArgs) implicit operator string[](DeleteVideosArgs) implicit operator DeleteVideosArgs(List<string>) implicit operator DeleteVideosArgs(string[])"
  },
  "api/AuxLabs.SimpleTwitch.Rest.DropEntitlementCondition.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.DropEntitlementCondition.html",
    "title": "Class DropEntitlementCondition | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class DropEntitlementCondition Inheritance object DropEntitlementCondition Implements IEventCondition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class DropEntitlementCondition : IEventCondition Constructors Name Description DropEntitlementCondition() DropEntitlementCondition(string, string, string) Properties Name Description CampaignId Optional. The campaign ID for a specific campaign for which notifications will be received. CategoryId Optional. The category (or game) ID of the game for which notifications will be received. OrganizationId The organization ID of the organization that owns the game on the developer portal."
  },
  "api/AuxLabs.SimpleTwitch.Rest.DropStatus.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.DropStatus.html",
    "title": "Enum DropStatus | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum DropStatus Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum DropStatus Fields Name Description InvalidId The entitlement IDs are not valid. NotFound The entitlement IDs were not found. Success The status of the entitlements were successfully updated. Unauthorized The user or organization identified by the user access token is not authorized to update the entitlements. UpdateFailed The update failed. These are considered transient errors and the request should be retried later. Extension Methods EnumHelper.GetStringValue<DropStatus>(DropStatus)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.Emote.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Emote.html",
    "title": "Class Emote | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Emote Inheritance object GlobalEmote Emote Inherited Members GlobalEmote.Id GlobalEmote.Name GlobalEmote.Images GlobalEmote.Formats GlobalEmote.Scales GlobalEmote.Themes object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Emote : GlobalEmote Properties Name Description BroadcasterId The ID of the broadcaster who owns the emote. EmoteSetId An ID that identifies the emote set that the emote belongs to. Tier The subscriber tier at which the emote is unlocked. Type The type of emote."
  },
  "api/AuxLabs.SimpleTwitch.Rest.EmoteScale.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.EmoteScale.html",
    "title": "Enum EmoteScale | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum EmoteScale Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum EmoteScale Fields Name Description Large A large version (112px x 112px) is available. Medium A medium version (56px x 56px) is available. Small A small version (28px x 28px) is available. Extension Methods EnumHelper.GetStringValue<EmoteScale>(EmoteScale)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.EmoteTheme.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.EmoteTheme.html",
    "title": "Enum EmoteTheme | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum EmoteTheme Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum EmoteTheme Fields Name Description Dark Light Extension Methods EnumHelper.GetStringValue<EmoteTheme>(EmoteTheme)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.EmoteType.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.EmoteType.html",
    "title": "Enum EmoteType | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum EmoteType Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum EmoteType Fields Name Description BitsTier A custom bits tier emote. Follower A custom follower emote. None Subscription A custom subscriber emote. Extension Methods EnumHelper.GetStringValue<EmoteType>(EmoteType)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.Entitlement.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Entitlement.html",
    "title": "Class Entitlement | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Entitlement Inheritance object Entitlement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Entitlement Properties Name Description BenefitId An ID that identifies the benefit (reward). GameId An ID that identifies the game the user was playing when the reward was entitled. Id An ID that identifies the entitlement. LastUpdatedAt The UTC date and time of when the entitlement was last updated. Status The entitlement’s fulfillment status. Timestamp The UTC date and time of when the entitlement was granted. UserId An ID that identifies the user who was granted the entitlement."
  },
  "api/AuxLabs.SimpleTwitch.Rest.EntitlementCode.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.EntitlementCode.html",
    "title": "Class EntitlementCode | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class EntitlementCode Inheritance object EntitlementCode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class EntitlementCode Properties Name Description Code The redemption code. Status The redemption code’s status."
  },
  "api/AuxLabs.SimpleTwitch.Rest.EntitlementDrop.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.EntitlementDrop.html",
    "title": "Class EntitlementDrop | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class EntitlementDrop Inheritance object EntitlementDrop Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class EntitlementDrop Properties Name Description EntitlementIds The list of entitlements that the status applies to. Status Indicates the status of the specified entitlements."
  },
  "api/AuxLabs.SimpleTwitch.Rest.EventSub.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.EventSub.html",
    "title": "Class EventSub | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class EventSub Inheritance object EventSub Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class EventSub Properties Name Description Condition The subscription’s parameter values. Cost The amount that the subscription counts against your limit. CreatedAt The date and time of when the subscription was created. Id An ID that identifies the subscription. Status The subscription’s status. Transport The transport details used to send the notifications. Type The subscription’s type. Version The version number that identifies this definition of the subscription’s data."
  },
  "api/AuxLabs.SimpleTwitch.Rest.EventSubResponse.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.EventSubResponse.html",
    "title": "Class EventSubResponse | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class EventSubResponse Inheritance object TwitchResponse<EventSub> EventSubResponse Inherited Members TwitchResponse<EventSub>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class EventSubResponse : TwitchResponse<EventSub> Properties Name Description MaxTotalCost The maximum total cost that you’re allowed to incur for all subscriptions you create. Pagination Contains information used to page through the list of results. Total The total number of subscriptions you’ve created. TotalCost The sum of all of your subscription costs."
  },
  "api/AuxLabs.SimpleTwitch.Rest.EventSubStatus.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.EventSubStatus.html",
    "title": "Enum EventSubStatus | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum EventSubStatus Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum EventSubStatus Fields Name Description AuthorizationRevoked The authorization was revoked for one or more users specified in the Condition object. CallbackVerificationFailed The specified callback URL failed verification. CallbackVerificationPending The subscription is pending verification of the specified callback URL. Enabled The subscription is enabled. FailuresExceeded The notification delivery failure rate was too high. ModeratorRemoved The moderator that authorized the subscription is no longer one of the broadcaster's moderators. Unknown UserRemoved One of the users specified in the Condition object was removed. VersionRemoved The subscribed to subscription type and version is no longer supported. WebSocketDisconnected The client closed the connection. WebSocketFailedHeartbeat The client failed to respond to a ping message. WebSocketInboundTraffic The client sent a non-pong message. WebSocketInternalError The Twitch WebSocket server experienced an unexpected error. WebSocketNetworkError The Twitch WebSocket server experienced a network error writing the message to the client. WebSocketTimeout The Twitch WebSocket server timed out writing the message to the client. WebSocketUnused The client failed to subscribe to events within the required time. Extension Methods EnumHelper.GetStringValue<EventSubStatus>(EventSubStatus)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.EventSubType.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.EventSubType.html",
    "title": "Enum EventSubType | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum EventSubType Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum EventSubType Fields Name Description ChannelBan A viewer is banned from the specified channel. ChannelCheer A user cheers on the specified channel. ChannelFollow A specified channel receives a follow. ChannelModeratorAdd Moderator privileges were added to a user on a specified channel. ChannelModeratorRemove Moderator privileges were removed from a user on a specified channel. ChannelPointsRedemptionAdd A viewer has redeemed a custom channel points reward on the specified channel. ChannelPointsRedemptionUpdate A redemption of a channel points custom reward has been updated for the specified channel. ChannelPointsRewardAdd A custom channel points reward has been created for the specified channel. ChannelPointsRewardRemove A custom channel points reward has been removed from the specified channel. ChannelPointsRewardUpdate A custom channel points reward has been updated for the specified channel. ChannelPollEnd A poll ended on a specified channel. ChannelPollProgress Users respond to a poll on a specified channel. ChannelPollStart A poll started on a specified channel. ChannelPredictionEnd A Prediction ended on a specified channel. ChannelPredictionLock A Prediction was locked on a specified channel. ChannelPredictionProgress Users participated in a Prediction on a specified channel. ChannelPredictionStart A Prediction started on a specified channel. ChannelRaid A broadcaster raids another broadcaster’s channel. ChannelSubscribe A notification when a specified channel receives a subscriber. This does not include resubscribes. ChannelSubscriptionEnd A notification when a subscription to the specified channel ends. ChannelSubscriptionGift A notification when a viewer gives a gift subscription to one or more users in the specified channel. ChannelSubscriptionMessage A notification when a user sends a resubscription chat message in a specific channel. ChannelUnban A viewer is unbanned from the specified channel. ChannelUpdate A broadcaster updates their channel properties e.g., category, title, mature flag, broadcast, or language. CharityCampaignProgress Sends an event notification when progress is made towards the campaign’s goal or when the broadcaster changes the fundraising goal. CharityCampaignStart Sends an event notification when the broadcaster starts a charity campaign. CharityCampaignStop Sends an event notification when the broadcaster stops a charity campaign. CharityDonation Sends an event notification when a user donates to the broadcaster’s charity campaign. DropEntitlementGrant An entitlement for a Drop is granted to a user. ExtensionBitsTransactionCreate A Bits transaction occurred for a specified Twitch Extension. GoalEnd Get notified when a broadcaster ends a goal. GoalProgress Get notified when progress (either positive or negative) is made towards a broadcaster’s goal. GoalStart Get notified when a broadcaster Starts a goal. HypeTrainEnd A Hype Train ends on the specified channel. HypeTrainProgress A Hype Train makes progress on the specified channel. HypeTrainStart A Hype Train Starts on the specified channel. None ShieldModeEnd Sends a notification when the broadcaster deactivates Shield Mode. ShieldModeStart Sends a notification when the broadcaster activates Shield Mode. ShoutoutCreate Sends a notification when the specified broadcaster sends a Shoutout. ShoutoutReceived Sends a notification when the specified broadcaster receives a Shoutout. StreamOffline The specified broadcaster stops a stream. StreamOnline The specified broadcaster starts a stream. UserAuthorizationGrant A user’s authorization has been granted to your client id. UserAuthorizationRevoke A user’s authorization has been revoked for your client id. UserUpdate A user has updated their account. Extension Methods EnumHelper.GetStringValue<EventSubType>(EventSubType)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.Extension.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Extension.html",
    "title": "Class Extension | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Extension Inheritance object SimpleExtension Extension Inherited Members SimpleExtension.Id SimpleExtension.Version SimpleExtension.Name SimpleExtension.IsActive object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Extension : SimpleExtension Properties Name Description CanActivate Determines whether the extension is configured and can be activated. Types The extension types that you can activate for this extension."
  },
  "api/AuxLabs.SimpleTwitch.Rest.ExtensionAnalytic.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.ExtensionAnalytic.html",
    "title": "Class ExtensionAnalytic | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ExtensionAnalytic Contains information about an extension's analytic report. Inheritance object Analytic ExtensionAnalytic Inherited Members Analytic.Url Analytic.Type Analytic.DateRange object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class ExtensionAnalytic : Analytic Properties Name Description ExtensionId An ID that identifies the extension that the report was generated for."
  },
  "api/AuxLabs.SimpleTwitch.Rest.ExtensionMap.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.ExtensionMap.html",
    "title": "Class ExtensionMap | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ExtensionMap Inheritance object ExtensionMap Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class ExtensionMap Properties Name Description Component A dictionary that contains the data for a video-component extension. Overlay A dictionary that contains the data for a video-overlay extension. Panel A dictionary that contains the data for a panel extension."
  },
  "api/AuxLabs.SimpleTwitch.Rest.ExtensionTransaction.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.ExtensionTransaction.html",
    "title": "Class ExtensionTransaction | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ExtensionTransaction Inheritance object ExtensionTransaction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class ExtensionTransaction Properties Name Description BroadcasterDisplayName The broadcaster’s display name. BroadcasterId The ID of the broadcaster that owns the channel where the transaction occurred. BroadcasterName The broadcaster’s login name. Id An ID that identifies the transaction. ProductData Contains details about the digital product. ProductType The type of transaction. Timestamp The UTC date and time of the transaction. UserDisplayName The user’s display name. UserId The ID of the user that purchased the digital product. UserName The user’s login name."
  },
  "api/AuxLabs.SimpleTwitch.Rest.ExtensionTransactionCondition.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.ExtensionTransactionCondition.html",
    "title": "Class ExtensionTransactionCondition | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ExtensionTransactionCondition Inheritance object ExtensionTransactionCondition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class ExtensionTransactionCondition Constructors Name Description ExtensionTransactionCondition() ExtensionTransactionCondition(string) Properties Name Description ExtensionClientId The client ID of the extension."
  },
  "api/AuxLabs.SimpleTwitch.Rest.ExtensionType.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.ExtensionType.html",
    "title": "Enum ExtensionType | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum ExtensionType Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum ExtensionType Fields Name Description Component Mobile Overlay Panel Unknown Extension Methods EnumHelper.GetStringValue<ExtensionType>(ExtensionType)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.FollowCondition.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.FollowCondition.html",
    "title": "Class FollowCondition | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class FollowCondition Inheritance object BroadcasterCondition FollowCondition Implements IEventCondition Inherited Members BroadcasterCondition.BroadcasterId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class FollowCondition : BroadcasterCondition, IEventCondition Constructors Name Description FollowCondition() FollowCondition(string, string) Properties Name Description ModeratorId The ID of the moderator of the channel you want to get notifications for."
  },
  "api/AuxLabs.SimpleTwitch.Rest.FollowedChannel.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.FollowedChannel.html",
    "title": "Class FollowedChannel | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class FollowedChannel Inheritance object FollowedChannel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class FollowedChannel Properties Name Description BroadcasterDisplayName BroadcasterId BroadcasterName FollowedAt"
  },
  "api/AuxLabs.SimpleTwitch.Rest.Follower.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Follower.html",
    "title": "Class Follower | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Follower Inheritance object Follower Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Follower Properties Name Description FollowedAt The UTC timestamp when the user started following the broadcaster. UserDisplayName The user’s display name. UserId An ID that uniquely identifies the user that’s following the broadcaster. UserName The user’s login name."
  },
  "api/AuxLabs.SimpleTwitch.Rest.FulfillmentStatus.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.FulfillmentStatus.html",
    "title": "Enum FulfillmentStatus | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum FulfillmentStatus Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum FulfillmentStatus Fields Name Description Claimed Fulfilled Extension Methods EnumHelper.GetStringValue<FulfillmentStatus>(FulfillmentStatus)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.Game.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Game.html",
    "title": "Class Game | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Game Inheritance object Category Game Inherited Members Category.Id Category.Name Category.BoxArtUrl object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Game : Category Properties Name Description IgdbId The ID that IGDB uses to identify this game."
  },
  "api/AuxLabs.SimpleTwitch.Rest.GameAnalytic.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GameAnalytic.html",
    "title": "Class GameAnalytic | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GameAnalytic Contains information about a game's analytic report. Inheritance object Analytic GameAnalytic Inherited Members Analytic.Url Analytic.Type Analytic.DateRange object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GameAnalytic : Analytic Properties Name Description GameId An ID that identifies the game that the report was generated for."
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetActiveExtensionsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetActiveExtensionsArgs.html",
    "title": "Class GetActiveExtensionsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetActiveExtensionsArgs Inheritance object QueryMap GetActiveExtensionsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetActiveExtensionsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IScopedRequest Constructors Name Description GetActiveExtensionsArgs() GetActiveExtensionsArgs(string) Properties Name Description Scopes UserId The ID of the user to remove from the broadcaster’s list of blocked users. Methods Name Description CreateQueryMap() Validate(IEnumerable<string>) Operators Name Description implicit operator string(GetActiveExtensionsArgs) implicit operator GetActiveExtensionsArgs(string)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetAnalyticsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetAnalyticsArgs.html",
    "title": "Class GetAnalyticsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetAnalyticsArgs Inheritance object QueryMap GetAnalyticsArgs GetExtensionAnalyticsArgs GetGameAnalyticsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public abstract class GetAnalyticsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Properties Name Description After EndedAt Optional, ending date/time for returned reports First The maximum number of items to return per page in the response. StartedAt Optional, starting date/time for returned reports Type Optional, type of analytics report that is returned Methods Name Description CreateQueryMap() Validate() Explicit Interface Implementations Name Description IPaginatedRequest.Before"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetBadgesArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetBadgesArgs.html",
    "title": "Class GetBadgesArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetBadgesArgs Inheritance object QueryMap GetBadgesArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetBadgesArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Constructors Name Description GetBadgesArgs() GetBadgesArgs(string) Properties Name Description BroadcasterId The ID of the broadcaster whose chat badges you want to get. Methods Name Description CreateQueryMap() Validate() Operators Name Description implicit operator string(GetBadgesArgs) implicit operator GetBadgesArgs(string)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetBannedUsersArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetBannedUsersArgs.html",
    "title": "Class GetBannedUsersArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetBannedUsersArgs Inheritance object QueryMap GetBannedUsersArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetBannedUsersArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Properties Name Description After Before BroadcasterId The ID of the broadcaster whose list of banned users you want to get. First Scopes UserIds A list of user IDs used to filter the results. Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetBitsLeaderboardArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetBitsLeaderboardArgs.html",
    "title": "Class GetBitsLeaderboardArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetBitsLeaderboardArgs Inheritance object QueryMap GetBitsLeaderboardArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetBitsLeaderboardArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IScopedRequest Properties Name Description Count Optional, the number of results to return. Period Optional, the time period over which data is aggregated Scopes StartedAt Optional, the start date used for determining the aggregation period. UserId Optional, an ID that identifies a user that cheered bits in the channel. Methods Name Description CreateQueryMap() Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetBlockedTermsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetBlockedTermsArgs.html",
    "title": "Class GetBlockedTermsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetBlockedTermsArgs Inheritance object QueryMap GetBlockedTermsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetBlockedTermsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Properties Name Description After BroadcasterId The ID of the broadcaster whose blocked terms you’re getting. First ModeratorId The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>) Explicit Interface Implementations Name Description IPaginatedRequest.Before"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetBlocksArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetBlocksArgs.html",
    "title": "Class GetBlocksArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetBlocksArgs Inheritance object QueryMap GetBlocksArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetBlocksArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IScopedRequest Properties Name Description After BroadcasterId The ID of the broadcaster whose list of blocked users you want to get. First Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>) Explicit Interface Implementations Name Description IPaginatedRequest.Before"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetBroadcastKeyArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetBroadcastKeyArgs.html",
    "title": "Class GetBroadcastKeyArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetBroadcastKeyArgs Inheritance object QueryMap GetBroadcastKeyArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetBroadcastKeyArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Constructors Name Description GetBroadcastKeyArgs() GetBroadcastKeyArgs(string) Properties Name Description BroadcasterId The ID of the broadcaster that owns the channel. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>) Operators Name Description implicit operator string(GetBroadcastKeyArgs) implicit operator GetBroadcastKeyArgs(string)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetBroadcastMarkersArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetBroadcastMarkersArgs.html",
    "title": "Class GetBroadcastMarkersArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetBroadcastMarkersArgs Inheritance object QueryMap GetBroadcastMarkersArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetBroadcastMarkersArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IScopedRequest Properties Name Description After Before First The maximum number of items to return per page in the response. Scopes UserId A user ID. VideoId A video on demand (VOD)/video ID. Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetBroadcastsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetBroadcastsArgs.html",
    "title": "Class GetBroadcastsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetBroadcastsArgs Inheritance object QueryMap GetBroadcastsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetBroadcastsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Properties Name Description After Before First The maximum number of items to return per page in the response. GameIds A game (category) ID used to filter the list of streams. Languages A collection of ISO 639-1 two-letter language codes used to filter the list of streams. Type The type of stream to filter the list of streams by. UserIds A user ID used to filter the list of streams. UserNames A user login name used to filter the list of streams. Methods Name Description CreateQueryMap() Validate()"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetChannelEditorsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetChannelEditorsArgs.html",
    "title": "Class GetChannelEditorsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetChannelEditorsArgs Inheritance object QueryMap GetChannelEditorsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetChannelEditorsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Constructors Name Description GetChannelEditorsArgs() GetChannelEditorsArgs(string) Properties Name Description BroadcasterId The ID of the broadcaster that owns the channel. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>) Operators Name Description implicit operator string(GetChannelEditorsArgs) implicit operator GetChannelEditorsArgs(string)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetChannelsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetChannelsArgs.html",
    "title": "Class GetChannelsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetChannelsArgs Inheritance object QueryMap GetChannelsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetChannelsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Constructors Name Description GetChannelsArgs() GetChannelsArgs(params string[]) Properties Name Description ChannelIds A collection of IDs of the broadcasters whose channel you want to get. Methods Name Description CreateQueryMap() Validate() Operators Name Description implicit operator string[](GetChannelsArgs) implicit operator GetChannelsArgs(string[])"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetChannelTeamsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetChannelTeamsArgs.html",
    "title": "Class GetChannelTeamsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetChannelTeamsArgs Inheritance object QueryMap GetChannelTeamsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetChannelTeamsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Constructors Name Description GetChannelTeamsArgs() GetChannelTeamsArgs(string) Properties Name Description BroadcasterId The ID of the broadcaster whose teams you want to get. Methods Name Description CreateQueryMap() Validate() Operators Name Description implicit operator string(GetChannelTeamsArgs) implicit operator GetChannelTeamsArgs(string)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetCharityCampaignArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetCharityCampaignArgs.html",
    "title": "Class GetCharityCampaignArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetCharityCampaignArgs Inheritance object QueryMap GetCharityCampaignArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetCharityCampaignArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description BroadcasterId The ID of the broadcaster that’s currently running a charity campaign. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetCharityDonationsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetCharityDonationsArgs.html",
    "title": "Class GetCharityDonationsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetCharityDonationsArgs Inheritance object QueryMap GetCharityDonationsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetCharityDonationsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Properties Name Description After BroadcasterId The ID of the broadcaster that’s currently running a charity campaign. First The maximum number of items to return per page in the response. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>) Explicit Interface Implementations Name Description IPaginatedRequest.Before"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetChatSettingsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetChatSettingsArgs.html",
    "title": "Class GetChatSettingsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetChatSettingsArgs Inheritance object QueryMap GetChatSettingsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetChatSettingsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description BroadcasterId The ID of the broadcaster whose chat settings you want to get. ModeratorId The ID of the broadcaster or one of the broadcaster’s moderators. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetChattersArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetChattersArgs.html",
    "title": "Class GetChattersArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetChattersArgs Inheritance object QueryMap GetChattersArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetChattersArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Properties Name Description After BroadcasterId The ID of the broadcaster whose list of chatters you want to get. First The maximum number of items to return per page in the response. ModeratorId The ID of the broadcaster or one of the broadcaster’s moderators. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>) Explicit Interface Implementations Name Description IPaginatedRequest.Before"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetCheermotesArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetCheermotesArgs.html",
    "title": "Class GetCheermotesArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetCheermotesArgs Inheritance object QueryMap GetCheermotesArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetCheermotesArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Constructors Name Description GetCheermotesArgs() GetCheermotesArgs(string) Properties Name Description BroadcasterId Optional, the ID of the broadcaster that owns the channel. Methods Name Description CreateQueryMap() Validate() Operators Name Description implicit operator string(GetCheermotesArgs) implicit operator GetCheermotesArgs(string)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetClipsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetClipsArgs.html",
    "title": "Class GetClipsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetClipsArgs Inheritance object QueryMap GetClipsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetClipsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Properties Name Description After Before BroadcasterId An ID that identifies the broadcaster whose video clips you want to get. ClipIds An ID that identifies the clip to get. EndedAt The end date used to filter clips. First The maximum number of items to return per page in the response. GameId An ID that identifies the game whose clips you want to get. StartedAt The start date used to filter clips. Methods Name Description CreateQueryMap() Validate()"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetCurrentTrackArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetCurrentTrackArgs.html",
    "title": "Class GetCurrentTrackArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetCurrentTrackArgs Inheritance object QueryMap GetCurrentTrackArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetCurrentTrackArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Properties Name Description BroadcasterId The ID of the broadcaster that’s playing a Soundtrack track. Methods Name Description CreateQueryMap() Validate()"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetDropStatusArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetDropStatusArgs.html",
    "title": "Class GetDropStatusArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetDropStatusArgs Inheritance object QueryMap GetDropStatusArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetDropStatusArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Properties Name Description After EntitlementIds IDs that identify the entitlements to get. First The maximum number of items to return per page in the response. GameId An ID that identifies a game that offered entitlements. Status The entitlement’s fulfillment status. UserId The ID of the user that owns the redemption code. Methods Name Description CreateQueryMap() Validate() Explicit Interface Implementations Name Description IPaginatedRequest.Before"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetEmotesArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetEmotesArgs.html",
    "title": "Class GetEmotesArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetEmotesArgs Inheritance object QueryMap GetEmotesArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetEmotesArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Constructors Name Description GetEmotesArgs() GetEmotesArgs(string) Properties Name Description BroadcasterId An ID that identifies the broadcaster whose emotes you want to get. Methods Name Description CreateQueryMap() Validate() Operators Name Description implicit operator string(GetEmotesArgs) implicit operator GetEmotesArgs(string)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetEmoteSetsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetEmoteSetsArgs.html",
    "title": "Class GetEmoteSetsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetEmoteSetsArgs Inheritance object QueryMap GetEmoteSetsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetEmoteSetsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Constructors Name Description GetEmoteSetsArgs() GetEmoteSetsArgs(List<string>) GetEmoteSetsArgs(params string[]) Properties Name Description EmoteSetIds A collection of IDs that identify the emote sets to get. Methods Name Description CreateQueryMap() Validate() Operators Name Description implicit operator List<string>(GetEmoteSetsArgs) implicit operator string[](GetEmoteSetsArgs) implicit operator GetEmoteSetsArgs(List<string>) implicit operator GetEmoteSetsArgs(string[])"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetEventSubscriptionsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetEventSubscriptionsArgs.html",
    "title": "Class GetEventSubscriptionsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetEventSubscriptionsArgs Inheritance object QueryMap GetEventSubscriptionsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetEventSubscriptionsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Properties Name Description After Status Filter subscriptions by its status. Type Filter subscriptions by subscription type. UserId Filter subscriptions by user ID. Methods Name Description CreateQueryMap() Validate() Explicit Interface Implementations Name Description IPaginatedRequest.Before IPaginatedRequest.First"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetExtensionAnalyticsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetExtensionAnalyticsArgs.html",
    "title": "Class GetExtensionAnalyticsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetExtensionAnalyticsArgs Inheritance object QueryMap GetAnalyticsArgs GetExtensionAnalyticsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest IScopedRequest Inherited Members GetAnalyticsArgs.EndedAt GetAnalyticsArgs.StartedAt GetAnalyticsArgs.Type GetAnalyticsArgs.First GetAnalyticsArgs.After GetAnalyticsArgs.Validate() GetAnalyticsArgs.IPaginatedRequest.Before QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetExtensionAnalyticsArgs : GetAnalyticsArgs, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IScopedRequest Properties Name Description ExtensionId Optional, the extension’s client ID. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetExtensionTransactionsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetExtensionTransactionsArgs.html",
    "title": "Class GetExtensionTransactionsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetExtensionTransactionsArgs Inheritance object QueryMap GetExtensionTransactionsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetExtensionTransactionsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Properties Name Description After ExtensionId The ID of the extension whose list of transactions you want to get. First The maximum number of items to return per page in the response. TransactionIds Optional, a collection of transaction ids used to filter the list of transactions. Methods Name Description CreateQueryMap() Validate() Explicit Interface Implementations Name Description IPaginatedRequest.Before"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetFollowedBroadcastsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetFollowedBroadcastsArgs.html",
    "title": "Class GetFollowedBroadcastsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetFollowedBroadcastsArgs Inheritance object QueryMap GetFollowedBroadcastsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetFollowedBroadcastsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Properties Name Description After First The maximum number of items to return per page in the response. Scopes UserId The ID of the user whose list of followed streams you want to get. Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>) Explicit Interface Implementations Name Description IPaginatedRequest.Before"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetFollowedChannelsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetFollowedChannelsArgs.html",
    "title": "Class GetFollowedChannelsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetFollowedChannelsArgs Inheritance object QueryMap GetFollowsArgs GetFollowedChannelsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members GetFollowsArgs.Scopes GetFollowsArgs.UserId GetFollowsArgs.BroadcasterId GetFollowsArgs.First GetFollowsArgs.After GetFollowsArgs.Validate(IEnumerable<string>) GetFollowsArgs.IPaginatedRequest.Before QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetFollowedChannelsArgs : GetFollowsArgs, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetFollowersArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetFollowersArgs.html",
    "title": "Class GetFollowersArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetFollowersArgs Inheritance object QueryMap GetFollowsArgs GetFollowersArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members GetFollowsArgs.Scopes GetFollowsArgs.UserId GetFollowsArgs.BroadcasterId GetFollowsArgs.First GetFollowsArgs.After GetFollowsArgs.Validate(IEnumerable<string>) GetFollowsArgs.IPaginatedRequest.Before QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetFollowersArgs : GetFollowsArgs, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetFollowsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetFollowsArgs.html",
    "title": "Class GetFollowsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetFollowsArgs Inheritance object QueryMap GetFollowsArgs GetFollowedChannelsArgs GetFollowersArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest IScopedRequest Inherited Members QueryMap.CreateQueryMap() QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public abstract class GetFollowsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IScopedRequest Properties Name Description After BroadcasterId A broadcaster’s ID. First Scopes UserId A user’s ID. Methods Name Description Validate(IEnumerable<string>) Explicit Interface Implementations Name Description IPaginatedRequest.Before"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetGameAnalyticsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetGameAnalyticsArgs.html",
    "title": "Class GetGameAnalyticsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetGameAnalyticsArgs Inheritance object QueryMap GetAnalyticsArgs GetGameAnalyticsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest IScopedRequest Inherited Members GetAnalyticsArgs.EndedAt GetAnalyticsArgs.StartedAt GetAnalyticsArgs.Type GetAnalyticsArgs.First GetAnalyticsArgs.After GetAnalyticsArgs.Validate() GetAnalyticsArgs.IPaginatedRequest.Before QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetGameAnalyticsArgs : GetAnalyticsArgs, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IScopedRequest Properties Name Description GameId Optional, the game's client ID. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetGamesArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetGamesArgs.html",
    "title": "Class GetGamesArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetGamesArgs Inheritance object QueryMap GetGamesArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetGamesArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Properties Name Description GameIds The IDs of the category or game to get. GameNames The name of the categories or games to get. IgdbIds The IGDB IDs of the games to get. Methods Name Description CreateQueryMap() Validate()"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetGoalsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetGoalsArgs.html",
    "title": "Class GetGoalsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetGoalsArgs Inheritance object QueryMap GetGoalsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetGoalsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Constructors Name Description GetGoalsArgs() GetGoalsArgs(string) Properties Name Description BroadcasterId The ID of the broadcaster that created the goals. Scopes Methods Name Description CreateQueryMap() ToString() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>) Operators Name Description implicit operator string(GetGoalsArgs) implicit operator GetGoalsArgs(string)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetHypeTrainsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetHypeTrainsArgs.html",
    "title": "Class GetHypeTrainsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetHypeTrainsArgs Inheritance object QueryMap GetHypeTrainsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetHypeTrainsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Properties Name Description After BroadcasterId The ID of the broadcaster that’s running the Hype Train. First The maximum number of items to return per page in the response. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>) Explicit Interface Implementations Name Description IPaginatedRequest.Before"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetModeratorsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetModeratorsArgs.html",
    "title": "Class GetModeratorsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetModeratorsArgs Inheritance object QueryMap GetRolesArgs GetModeratorsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members GetRolesArgs.BroadcasterId GetRolesArgs.UserIds GetRolesArgs.First GetRolesArgs.After GetRolesArgs.Validate() GetRolesArgs.CreateQueryMap() GetRolesArgs.IPaginatedRequest.Before QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetModeratorsArgs : GetRolesArgs, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Properties Name Description Scopes Methods Name Description Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetPlaylistsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetPlaylistsArgs.html",
    "title": "Class GetPlaylistsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetPlaylistsArgs Inheritance object QueryMap GetPlaylistsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetPlaylistsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Properties Name Description After First The maximum number of items to return per page in the response. PlaylistId The ID of the playlist to get. Methods Name Description CreateQueryMap() Validate() Explicit Interface Implementations Name Description IPaginatedRequest.Before"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetPlaylistTracksArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetPlaylistTracksArgs.html",
    "title": "Class GetPlaylistTracksArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetPlaylistTracksArgs Inheritance object QueryMap GetPlaylistTracksArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetPlaylistTracksArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Properties Name Description After First The maximum number of items to return per page in the response. PlaylistId The ID of the playlist to get. Methods Name Description CreateQueryMap() Validate() Explicit Interface Implementations Name Description IPaginatedRequest.Before"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetPollsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetPollsArgs.html",
    "title": "Class GetPollsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetPollsArgs Inheritance object QueryMap GetPollsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetPollsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Properties Name Description After BroadcasterId The ID of the broadcaster that created the polls. First PollIds A list of IDs that identify the polls to return. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>) Explicit Interface Implementations Name Description IPaginatedRequest.Before"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetPredictionsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetPredictionsArgs.html",
    "title": "Class GetPredictionsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetPredictionsArgs Inheritance object QueryMap GetPredictionsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetPredictionsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Properties Name Description After BroadcasterId The ID of the broadcaster whose predictions you want to get. First PredictionIds The IDs of the predictions to get. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>) Explicit Interface Implementations Name Description IPaginatedRequest.Before"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetRedemptionsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetRedemptionsArgs.html",
    "title": "Class GetRedemptionsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetRedemptionsArgs Inheritance object QueryMap GetRedemptionsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetRedemptionsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Properties Name Description After BroadcasterId The ID of the broadcaster that owns the custom reward. First The maximum number of items to return per page in the response. RedemptionIds A list of IDs to filter the redemptions by. RewardId The ID that identifies the custom reward whose redemptions you want to get. Scopes Sort The order to sort redemptions by. Status The status of the redemptions to return. Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>) Explicit Interface Implementations Name Description IPaginatedRequest.Before"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetRewardArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetRewardArgs.html",
    "title": "Class GetRewardArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetRewardArgs Inheritance object QueryMap GetRewardArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetRewardArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description BroadcasterId The ID of the broadcaster whose custom rewards you want to get. CustomRewardIds A list of IDs to filter the rewards by. OnlyManagebleRewards Determines whether the response contains only the custom rewards that the app can manage. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetRolesArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetRolesArgs.html",
    "title": "Class GetRolesArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetRolesArgs Inheritance object QueryMap GetRolesArgs GetModeratorsArgs GetVipsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public abstract class GetRolesArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Properties Name Description After BroadcasterId The ID of the broadcaster whose list of users you want to get. First UserIds A list of user IDs used to filter the results. Methods Name Description CreateQueryMap() Validate() Explicit Interface Implementations Name Description IPaginatedRequest.Before"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetScheduleArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetScheduleArgs.html",
    "title": "Class GetScheduleArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetScheduleArgs Inheritance object QueryMap GetScheduleArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetScheduleArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Properties Name Description After BroadcasterId The ID of the broadcaster that owns the streaming schedule you want to get. First SegmentIds The IDs of the scheduled segments to return. StartAt The UTC date and time that identifies when in the broadcaster’s schedule to start returning segments. Methods Name Description CreateQueryMap() Validate() Explicit Interface Implementations Name Description IPaginatedRequest.Before"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetShieldModeArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetShieldModeArgs.html",
    "title": "Class GetShieldModeArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetShieldModeArgs Inheritance object QueryMap PutShieldModeArgs GetShieldModeArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members PutShieldModeArgs.BroadcasterId PutShieldModeArgs.ModeratorId PutShieldModeArgs.Validate(IEnumerable<string>, string) PutShieldModeArgs.Validate(IEnumerable<string>) PutShieldModeArgs.CreateQueryMap() QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetShieldModeArgs : PutShieldModeArgs, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description Scopes"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetSubscriberArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetSubscriberArgs.html",
    "title": "Class GetSubscriberArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetSubscriberArgs Inheritance object QueryMap GetSubscriberArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetSubscriberArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description BroadcasterId The ID of a partner or affiliate broadcaster. Scopes UserId The ID of the user that you’re checking to see whether they subscribe to BroadcasterId. Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetSubscriptionsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetSubscriptionsArgs.html",
    "title": "Class GetSubscriptionsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetSubscriptionsArgs Inheritance object QueryMap GetSubscriptionsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetSubscriptionsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Properties Name Description After Before BroadcasterId The broadcaster’s ID. First The maximum number of items to return per page in the response. Scopes UserIds Filters the list to include only the specified subscribers. Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetTeamArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetTeamArgs.html",
    "title": "Class GetTeamArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetTeamArgs Inheritance object QueryMap GetTeamArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetTeamArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Properties Name Description Id The name of the team to get. Name The ID of the team to get. Methods Name Description CreateQueryMap() Validate()"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetTopGamesArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetTopGamesArgs.html",
    "title": "Class GetTopGamesArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetTopGamesArgs Inheritance object QueryMap GetTopGamesArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetTopGamesArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Properties Name Description After Before First The maximum number of items to return per page in the response. Methods Name Description CreateQueryMap() Validate()"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetUserColorArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetUserColorArgs.html",
    "title": "Class GetUserColorArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetUserColorArgs Inheritance object QueryMap GetUserColorArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetUserColorArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Constructors Name Description GetUserColorArgs() GetUserColorArgs(List<string>) GetUserColorArgs(params string[]) Properties Name Description UserIds A collection of IDs of the users whose color you want to get. Methods Name Description CreateQueryMap() Validate() Operators Name Description implicit operator List<string>(GetUserColorArgs) implicit operator string[](GetUserColorArgs) implicit operator GetUserColorArgs(List<string>) implicit operator GetUserColorArgs(string[])"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetUsersArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetUsersArgs.html",
    "title": "Class GetUsersArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetUsersArgs Inheritance object QueryMap GetUsersArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetUsersArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Constructors Name Description GetUsersArgs() GetUsersArgs(GetUsersMode, params string[]) Properties Name Description UserIds The ID of the user to get. UserNames The login name of the user to get. Methods Name Description CreateQueryMap() Validate()"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetUsersMode.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetUsersMode.html",
    "title": "Enum GetUsersMode | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum GetUsersMode Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum GetUsersMode Fields Name Description Id Name Extension Methods EnumHelper.GetStringValue<GetUsersMode>(GetUsersMode)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetVideosArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetVideosArgs.html",
    "title": "Class GetVideosArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetVideosArgs Inheritance object QueryMap GetVideosArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetVideosArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Properties Name Description After Before First GameId A category or game ID. Language Filter the list of videos by the language that the video owner broadcasts in. Period Filter the list of videos by when they were published. Sort The order to sort the returned videos in. Type Filter the list of videos by the video’s type. UserId The ID of the user whose list of videos you want to get. VideoIds A collection of IDs that identify the videos you want to get. Methods Name Description CreateQueryMap() Validate()"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GetVipsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GetVipsArgs.html",
    "title": "Class GetVipsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GetVipsArgs Inheritance object QueryMap GetRolesArgs GetVipsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members GetRolesArgs.BroadcasterId GetRolesArgs.UserIds GetRolesArgs.First GetRolesArgs.After GetRolesArgs.Validate() GetRolesArgs.CreateQueryMap() GetRolesArgs.IPaginatedRequest.Before QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GetVipsArgs : GetRolesArgs, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Properties Name Description Scopes Methods Name Description Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.GlobalEmote.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GlobalEmote.html",
    "title": "Class GlobalEmote | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class GlobalEmote Inheritance object GlobalEmote Emote Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class GlobalEmote Properties Name Description Formats The formats that the emote is available in. Id An ID that identifies this emote. Images The image URLs for the emote. Name The name of the emote. Scales The sizes that the emote is available in. Themes The background themes that the emote is available in."
  },
  "api/AuxLabs.SimpleTwitch.Rest.Goal.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Goal.html",
    "title": "Class Goal | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Goal Inheritance object Goal Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Goal Properties Name Description BroadcasterDisplayName The broadcaster’s display name. BroadcasterId An ID that identifies the broadcaster that created the goal. BroadcasterName The broadcaster’s login name. CreatedAt The UTC date and time that the broadcaster created the goal. CurrentAmount The goal’s current value. Description A description of the goal. Id An ID that identifies this goal. TargetAmount The goal’s target value. Type The type of goal."
  },
  "api/AuxLabs.SimpleTwitch.Rest.GoalType.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.GoalType.html",
    "title": "Enum GoalType | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum GoalType Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum GoalType Fields Name Description Follower The goal is to increase followers. NewSubscription The goal is to increase subscriptions. NewSubscriptionCount The goal is to increase subscriptions. None Subscription The goal is to increase subscriptions. SusbcriptionCount The goal is to increase subscriptions. Extension Methods EnumHelper.GetStringValue<GoalType>(GoalType)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.html",
    "title": "Namespace AuxLabs.SimpleTwitch.Rest | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Namespace AuxLabs.SimpleTwitch.Rest Classes AcceptedTransport AccessTokenInfo Album Analytic AppIdentity Artist AuthorizationCondition AutomodSettings AutomodSettingsArgs Badge Ban BannedUser BitsTier BitsUser BlockedTerm Broadcast BroadcasterCondition BroadcastMarker Category CDN Channel ChannelBroadcast ChannelEditor ChannelTeam CharityCampaign CharityDonation ChatSettings Cheermote CheermoteFormat CheermoteImage CheermoteTheme Clip CodeStatusArgs Commercial Contains information about the status of a commercial request. ComponentExtension Cost CultureInfoConverter DefaultRateLimiter DeleteBanArgs DeleteBlockArgs DeleteBlockedTermsArgs DeleteMessageArgs DeleteRaidArgs DeleteVideosArgs DropEntitlementCondition Emote Entitlement EntitlementCode EntitlementDrop EventSub EventSubResponse Extension ExtensionAnalytic Contains information about an extension's analytic report. ExtensionMap ExtensionTransaction ExtensionTransactionCondition FollowCondition FollowedChannel Follower Game GameAnalytic Contains information about a game's analytic report. GetActiveExtensionsArgs GetAnalyticsArgs GetBadgesArgs GetBannedUsersArgs GetBitsLeaderboardArgs GetBlockedTermsArgs GetBlocksArgs GetBroadcastKeyArgs GetBroadcastMarkersArgs GetBroadcastsArgs GetChannelEditorsArgs GetChannelsArgs GetChannelTeamsArgs GetCharityCampaignArgs GetCharityDonationsArgs GetChatSettingsArgs GetChattersArgs GetCheermotesArgs GetClipsArgs GetCurrentTrackArgs GetDropStatusArgs GetEmotesArgs GetEmoteSetsArgs GetEventSubscriptionsArgs GetExtensionAnalyticsArgs GetExtensionTransactionsArgs GetFollowedBroadcastsArgs GetFollowedChannelsArgs GetFollowersArgs GetFollowsArgs GetGameAnalyticsArgs GetGamesArgs GetGoalsArgs GetHypeTrainsArgs GetModeratorsArgs GetPlaylistsArgs GetPlaylistTracksArgs GetPollsArgs GetPredictionsArgs GetRedemptionsArgs GetRewardArgs GetRolesArgs GetScheduleArgs GetShieldModeArgs GetSubscriberArgs GetSubscriptionsArgs GetTeamArgs GetTopGamesArgs GetUserColorArgs GetUsersArgs GetVideosArgs GetVipsArgs GlobalEmote Goal HypeTrain HypeTrainContribution HypeTrainInfo ManageModeratorArgs ManageRewardArgs ManageRolesArgs ManageSegmentArgs ManageVipArgs MockMessage ModifyRedemptionsArgs PatchChannelArgs PatchChannelBody PatchChatSettingsArgs PatchChatSettingsBody PatchDropsStatusArgs PatchPollBody PatchPredictionBody PatchScheduleArgs PatchSegmentBody Playlist Poll PollOption PostAnnouncementArgs PostAnnouncementBody PostAppAccessTokenArgs PostAutomodMessageArgs PostBanArgs PostBanBody PostBanUser PostBlockedTermArgs PostBlockedTermBody PostBroadcastMarkerBody PostClipArgs PostCommercialBody PostEnforcementStatusArgs PostEnforcementStatusBody PostEventSubscriptionBody PostPredictionBody PostRaidArgs PostRefreshTokenArgs PostRevokeTokenArgs PostRewardArgs PostRewardBody PostSegmentArgs PostSegmentBody PostShoutoutArgs PostUserAccessTokenArgs PostWhisperArgs PostWhisperBody Prediction PredictionOption PredictionUser ProductData PutAutomodSettingsBody PutBlockArgs PutPollBody PutShieldModeArgs PutShieldModeBody PutUserArgs PutUserChatColorArgs Raid RaidCondition Redemption RestError Reward RewardCondition RFCDateTimeConverter Schedule ScheduleSegment SearchCategoriesArgs SearchChannelsArgs ShieldMode SimpleChatUser SimpleClip SimpleExtension SimpleReward SimpleSubscription SimpleTeam SimpleUser Soundtrack Subscription Team TeamUser Track TrackSource Transport TwitchIdentityApiClient A client that implements Twitch's identity api for manging access tokens. TwitchMetaResponse<T> An object that represents data returned by a Twitch request, but with some metadata. TwitchResponse<T> An object that represents data returned by a Twitch request. TwitchRestApiClient TwitchRestApiConfig TwitchRestException User UserCondition UserIdentity Vacation Video Structs BadgeVersion CharityAmount DateRange Pagination RateLimitInfo RewardSetting Title TwitchImage VideoOffset Interfaces IAgentRequest IEventCondition IPaginatedRequest Indicates that a request can be paginated. IRateLimiter IScopedRequest Indicates that a method requires special authentication to be used. ITwitchApi ITwitchIdentityApi Enums AnalyticType AnnouncementColor AutomodAction AutomodFilter BitsPeriod BlockContext BlockReason BroadcasterType BroadcastType ChatColor CheermoteType CodeStatus CostType DropStatus EmoteScale EmoteTheme EmoteType EventSubStatus EventSubType ExtensionType FulfillmentStatus GetUsersMode GoalType HypeTrainContributionType PollStatus PredictionColor PredictionStatus ProductType RedemptionSort RedemptionStatus TokenType TrackSourceType TransportMethod UserType VideoPeriod VideoSort VideoType"
  },
  "api/AuxLabs.SimpleTwitch.Rest.HypeTrain.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.HypeTrain.html",
    "title": "Class HypeTrain | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class HypeTrain Inheritance object HypeTrain Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class HypeTrain Properties Name Description BroadcasterId The ID of the broadcaster that’s running the Hype Train. CooldownEndsAt The UTC date and time that another Hype Train can start. ExpiresAt The UTC date and time that the Hype Train ends. Goal The value needed to reach the next level. Id An ID that identifies this Hype Train. LastContribution The most recent contribution towards the Hype Train’s goal. Level The highest level that the Hype Train reached StartedAt The UTC date and time that this Hype Train started. TopContributions The top contributors for each contribution type. Total The current total amount raised."
  },
  "api/AuxLabs.SimpleTwitch.Rest.HypeTrainContribution.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.HypeTrainContribution.html",
    "title": "Class HypeTrainContribution | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class HypeTrainContribution Inheritance object HypeTrainContribution Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class HypeTrainContribution Properties Name Description Total The total amount contributed. Type The contribution method used. UserId The ID of the user that made the contribution."
  },
  "api/AuxLabs.SimpleTwitch.Rest.HypeTrainContributionType.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.HypeTrainContributionType.html",
    "title": "Enum HypeTrainContributionType | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum HypeTrainContributionType Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum HypeTrainContributionType Fields Name Description Bits Other Subscriptions Extension Methods EnumHelper.GetStringValue<HypeTrainContributionType>(HypeTrainContributionType)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.HypeTrainInfo.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.HypeTrainInfo.html",
    "title": "Class HypeTrainInfo | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class HypeTrainInfo Inheritance object HypeTrainInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class HypeTrainInfo Properties Name Description Data The event's data. Id An ID that identifies this event. Timestamp The UTC date and time that the event occurred. Type The type of event. Version The version number of the definition of the event’s data."
  },
  "api/AuxLabs.SimpleTwitch.Rest.IAgentRequest.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.IAgentRequest.html",
    "title": "Interface IAgentRequest | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Interface IAgentRequest Inherited Members IScopedRequest.Scopes IScopedRequest.Validate(IEnumerable<string>) Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public interface IAgentRequest : IScopedRequest Methods Name Description Validate(IEnumerable<string>, string)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.IEventCondition.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.IEventCondition.html",
    "title": "Interface IEventCondition | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Interface IEventCondition Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public interface IEventCondition"
  },
  "api/AuxLabs.SimpleTwitch.Rest.IPaginatedRequest.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.IPaginatedRequest.html",
    "title": "Interface IPaginatedRequest | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Interface IPaginatedRequest Indicates that a request can be paginated. Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public interface IPaginatedRequest Properties Name Description After The cursor used to get the next page of results. Before The cursor used to get the previous page of results. First The maximum number of items to return per page in the response."
  },
  "api/AuxLabs.SimpleTwitch.Rest.IRateLimiter.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.IRateLimiter.html",
    "title": "Interface IRateLimiter | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Interface IRateLimiter Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public interface IRateLimiter Methods Name Description EnterLockAsync(string, CancellationToken) UpdateLimit(string, RateLimitInfo, bool)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.IScopedRequest.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.IScopedRequest.html",
    "title": "Interface IScopedRequest | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Interface IScopedRequest Indicates that a method requires special authentication to be used. Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public interface IScopedRequest Properties Name Description Scopes The scopes required for this request. Methods Name Description Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.ITwitchApi.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.ITwitchApi.html",
    "title": "Interface ITwitchApi | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Interface ITwitchApi Inherited Members System.IDisposable.Dispose() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public interface ITwitchApi : IDisposable Properties Name Description Authorization ClientId Methods Name Description DeleteBanAsync(DeleteBanArgs) Removes the ban or timeout that was placed on the specified user. DeleteBlockAsync(DeleteBlockArgs) Removes the user from the broadcaster’s list of blocked users. DeleteBlockedTermAsync(DeleteBlockedTermsArgs) Removes the word or phrase from the broadcaster’s list of blocked terms. DeleteChatMessagesAsync(DeleteMessageArgs) Removes a single chat message or all chat messages from the broadcaster’s chat room. DeleteEventSubscriptionAsync(string) Deletes an EventSub subscription. DeleteModeratorAsync(ManageModeratorArgs) Removes a moderator from the broadcaster’s chat room. DeleteRaidAsync(DeleteRaidArgs) Cancel a pending raid. DeleteRewardAsync(ManageRewardArgs) Deletes a custom reward that the broadcaster created. Only the app that created a reward is able to delete it. DeleteSegmentAsync(ManageSegmentArgs) Updates a scheduled broadcast segment. DeleteVideoAsync(DeleteVideosArgs) Deletes one or more videos. You may delete past broadcasts, highlights, or uploads. DeleteVipAsync(ManageVipArgs) Removes the specified user as a VIP in the broadcaster’s channel. GetActiveExtensionsAsync(GetActiveExtensionsArgs) Gets a list of all extensions (both active and inactive) that the broadcaster has installed. GetAutomodSettingsAsync(AutomodSettingsArgs) Gets the broadcaster’s AutoMod settings. GetBadgesAsync() Gets Twitch’s list of chat badges, which users may use in any channel’s chat room. GetBadgesAsync(GetBadgesArgs) Gets the broadcaster’s list of custom chat badges. GetBannedUsersAsync(GetBannedUsersArgs) Gets all users that the broadcaster banned or put in a timeout. GetBitsLeaderboardAsync(GetBitsLeaderboardArgs) Gets the Bits leaderboard for the authenticated broadcaster. GetBlockedTermsAsync(GetBlockedTermsArgs) Gets the broadcaster’s list of non-private, blocked words or phrases. GetBlocksAsync(GetBlocksArgs) Gets the list of users that the broadcaster has blocked. GetBroadcastKeyAsync(GetBroadcastKeyArgs) Gets the channel’s broadcast key. GetBroadcastMarkersAsync(GetBroadcastMarkersArgs) Gets a list of markers from the user’s most recent stream or from the specified VOD/video. GetBroadcastsAsync(GetBroadcastsArgs) Gets a list of all broadcasts. GetCategoriesAsync(SearchCategoriesArgs) Gets the games or categories that match the specified query. GetChannelEditorsAsync(GetChannelEditorsArgs) Gets the broadcaster’s list editors. GetChannelsAsync(GetChannelsArgs) Gets information about one or more channels. GetChannelsAsync(SearchChannelsArgs) Gets the channels that match the specified query and have streamed content within the past 6 months. GetCharityCampaignAsync(GetCharityCampaignArgs) Gets information about the charity campaign that a broadcaster is running. GetCharityDonationsAsync(GetCharityDonationsArgs) Gets the list of donations that users have made to the broadcaster’s active charity campaign. GetChatSettingsAsync(GetChatSettingsArgs) Gets the broadcaster’s chat settings. GetChattersAsync(GetChattersArgs) Gets the list of users that are connected to the broadcaster’s chat session. GetCheermotesAsync(GetCheermotesArgs) Gets a collection of Cheermotes that can be used to cheer bits in any bits-enabled channel. GetClipsAsync(GetClipsArgs) Gets one or more video clips that were captured from streams. GetCodeStatusAsync(CodeStatusArgs) Gets the status of one or more redemption codes for a Bits reward. GetCurrentTrackAsync(GetCurrentTrackArgs) Gets the Soundtrack track that the broadcaster is playing. GetDropsStatusAsync(GetDropStatusArgs) Gets an organization’s list of entitlements that have been granted to a game, a user, or both. GetEmotesAsync() Gets the list of global emotes. GetEmotesAsync(GetEmotesArgs) Gets the broadcaster’s list of custom emotes. GetEmoteSetsAsync(GetEmoteSetsArgs) Gets emotes for one or more specified emote sets. GetEventSubscriptionsAsync(GetEventSubscriptionsArgs) Gets a collection of EventSub subscriptions that the client in the access token created. GetExtensionAnalyticsAsync(GetExtensionAnalyticsArgs) Gets an analytics report for one or more extensions. The response contains the URLs used to download the reports (CSV files). GetExtensionTransactionsAsync(GetExtensionTransactionsArgs) Gets an extension’s list of transactions. GetFollowedBroadcastsAsync(GetFollowedBroadcastsArgs) Gets the list of broadcasters that the user follows and that are streaming live. GetFollowedChannelsAsync(GetFollowedChannelsArgs) Gets a list of broadcasters that the specified user follows. GetFollowersAsync(GetFollowersArgs) Gets a list of users that follow the specified broadcaster. GetGameAnalyticsAsync(GetGameAnalyticsArgs) Gets an analytics report for one or more games. The response contains the URLs used to download the reports (CSV files). GetGamesAsync(GetGamesArgs) Gets information about specified categories or games. GetGoalsAsync(GetGoalsArgs) Gets the broadcaster’s list of active goals. GetHypetrainEventsAsync(GetHypeTrainsArgs) Gets information about the broadcaster’s current or most recent Hype Train event. GetModeratorsAsync(GetModeratorsArgs) Gets all users allowed to moderate the broadcaster’s chat room. GetPlaylistsAsync(GetPlaylistsArgs) Gets a list of Soundtrack playlists. GetPlaylistTracksAsync(GetPlaylistTracksArgs) Gets the Soundtrack playlist’s tracks. GetPollAsync(GetPredictionsArgs) Gets a list of polls that the broadcaster created. GetPredictionAsync(GetPredictionsArgs) Gets a list of Channel Points Predictions that the broadcaster created. GetRewardRedemptionAsync(GetRedemptionsArgs) Gets a list of redemptions for the specified custom reward. Only the app that created a reward is able to see it's redemptions. GetRewardsAsync(GetRewardArgs) Gets a list of custom rewards that the specified broadcaster created. GetScheduleAsync(GetScheduleArgs) Gets the broadcaster’s streaming schedule. GetShieldModeAsync(GetShieldModeArgs) Activates or deactivates the broadcaster’s Shield Mode. GetSubscriberAsync(GetSubscriberArgs) Checks whether the user subscribes to the broadcaster’s channel. GetSubscriptionsAsync(GetSubscriptionsArgs) Updates the specified user’s information. GetTeamAsync(GetTeamArgs) Gets information about the specified Twitch team. GetTeamsAsync(GetChannelTeamsArgs) Gets information about one or more users. GetTopGamesAsync(GetTopGamesArgs) Gets information about all broadcasts on Twitch. GetUserChatColorAsync(GetUserColorArgs) Gets the color used for the user’s name in chat. GetUserExtensionsAsync() Gets a list of all extensions (both active and inactive) that the broadcaster has installed. GetUsersAsync(GetUsersArgs) Gets information about one or more users. GetVideosAsync(GetVideosArgs) Gets information about one or more published videos. GetVipsAsync(GetVipsArgs) Gets a list of the broadcaster’s VIPs. PatchChannelAsync(PatchChannelArgs, PatchChannelBody) Updates a channel’s properties. PatchChatSettingsAsync(PatchChatSettingsArgs, PatchChatSettingsBody) Updates the broadcaster’s chat settings. PatchDropsStatusAsync(PatchDropsStatusArgs) Updates the Drop entitlement’s fulfillment status. PatchPollAsync(PatchPollBody) Ends an active poll. PatchPredictionaAsync(PostPredictionBody) Locks, resolves, or cancels a Channel Points Prediction. PatchRewardAsync(ManageRewardArgs, PostRewardBody) Updates a custom reward. The app used to create the reward is the only app that may update the reward. PatchRewardRedemptionAsync(RedemptionStatus, ModifyRedemptionsArgs) Updates a redemption’s status. The app used to create the reward is the only app that may update the redemption. PatchScheduleAsync(PatchScheduleArgs) Updates the broadcaster’s schedule settings, such as scheduling a vacation. PatchSegmentAsync(ManageSegmentArgs, PatchSegmentBody) Updates a scheduled broadcast segment. PostAutomodMessageAsync(PostAutomodMessageArgs) Allow or deny the message that AutoMod flagged for review. PostBanAsync(PostBanArgs, PostBanBody) Bans a user from participating in the specified broadcaster’s chat room or puts them in a timeout. PostBlockedTermAsync(PostBlockedTermArgs, PostBlockedTermBody) Gets the broadcaster’s list of non-private, blocked words or phrases. PostBroadcastMarkerAsync(PostBroadcastMarkerBody) Adds a marker to a live stream. PostChatAnnouncementAsync(PostAnnouncementArgs, PostAnnouncementBody) Sends an announcement to the broadcaster’s chat room. PostClipAsync(PostClipArgs) Creates a clip from the broadcaster’s stream. PostCodeStatusAsync(CodeStatusArgs) Redeems one or more redemption codes. PostCommercialAsync(PostCommercialBody) Starts a commercial on the specified channel. PostEnforcementStatusAsync(PostEnforcementStatusArgs, PostEnforcementStatusBody) Checks whether AutoMod would flag the specified message for review. PostEventSubscriptionAsync(PostEventSubscriptionBody) Creates an EventSub subscription. PostModeratorAsync(ManageModeratorArgs) Adds a moderator to the broadcaster’s chat room. PostPollAsync(PutPollBody) Creates a poll that viewers in the broadcaster’s channel can vote on. PostPredictionAsync(PostPredictionBody) Creates a Channel Points Prediction. PostRaidAsync(PostRaidArgs) Raid another channel by sending the broadcaster’s viewers to the targeted channel. PostRewardsAsync(PostRewardArgs, PostRewardBody) Creates a custom reward in the broadcaster’s channel. PostSegmentAsync(PostSegmentArgs, PostSegmentBody) Adds a single or recurring broadcast to the broadcaster’s streaming schedule. PostShoutoutAsync(PostShoutoutArgs) Sends a shoutout to the specified broadcaster. PostVipAsync(ManageVipArgs) Adds the specified user as a VIP in the broadcaster’s channel. PostWhisperAsync(PostWhisperArgs, PostWhisperBody) Sends a whisper message to the specified user. PutAutomodSettingsAsync(AutomodSettingsArgs, PutAutomodSettingsBody) Updates the broadcaster’s AutoMod settings. PutBlockAsync(PutBlockArgs) Blocks the specified user from interacting with or having contact with the broadcaster. PutExtensionsAsync(ExtensionMap) Updates an installed extension’s information. PutShieldModeAsync(PutShieldModeArgs, PutShieldModeBody) Activates or deactivates the broadcaster’s Shield Mode. PutUserAsync(PutUserArgs) Updates the specified user’s information. PutUserChatColor(PutUserChatColorArgs) Updates the color used for the user's name in chat."
  },
  "api/AuxLabs.SimpleTwitch.Rest.ITwitchIdentityApi.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.ITwitchIdentityApi.html",
    "title": "Interface ITwitchIdentityApi | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Interface ITwitchIdentityApi Inherited Members System.IDisposable.Dispose() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public interface ITwitchIdentityApi : IDisposable Methods Name Description PostAccessTokenAsync(PostAppAccessTokenArgs) PostAccessTokenAsync(PostUserAccessTokenArgs) PostRefreshTokenAsync(PostRefreshTokenArgs) RevokeTokenAsync(PostRevokeTokenArgs) ValidateAsync(string)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.ManageModeratorArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.ManageModeratorArgs.html",
    "title": "Class ManageModeratorArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ManageModeratorArgs Inheritance object QueryMap ManageRolesArgs ManageModeratorArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members ManageRolesArgs.BroadcasterId ManageRolesArgs.UserId ManageRolesArgs.Validate() ManageRolesArgs.CreateQueryMap() QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class ManageModeratorArgs : ManageRolesArgs, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description Scopes Methods Name Description Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.ManageRewardArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.ManageRewardArgs.html",
    "title": "Class ManageRewardArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ManageRewardArgs Inheritance object QueryMap ManageRewardArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class ManageRewardArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description BroadcasterId The ID of the broadcaster that created the custom reward. RewardId The ID of the custom reward to delete. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.ManageRolesArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.ManageRolesArgs.html",
    "title": "Class ManageRolesArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ManageRolesArgs Inheritance object QueryMap ManageRolesArgs ManageModeratorArgs ManageVipArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public abstract class ManageRolesArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Properties Name Description BroadcasterId The ID of the broadcaster that owns the chat room. UserId The ID of the user to add or remove a role from in the broadcaster’s chat room. Methods Name Description CreateQueryMap() Validate()"
  },
  "api/AuxLabs.SimpleTwitch.Rest.ManageSegmentArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.ManageSegmentArgs.html",
    "title": "Class ManageSegmentArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ManageSegmentArgs Inheritance object QueryMap ManageSegmentArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class ManageSegmentArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description BroadcasterId The ID of the broadcaster who owns the broadcast segment to update. Scopes SegmentId The ID of the broadcast segment to update. Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.ManageVipArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.ManageVipArgs.html",
    "title": "Class ManageVipArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ManageVipArgs Inheritance object QueryMap ManageRolesArgs ManageVipArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members ManageRolesArgs.BroadcasterId ManageRolesArgs.UserId ManageRolesArgs.Validate() ManageRolesArgs.CreateQueryMap() QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class ManageVipArgs : ManageRolesArgs, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description Scopes Methods Name Description Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.MockMessage.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.MockMessage.html",
    "title": "Class MockMessage | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class MockMessage Inheritance object MockMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class MockMessage Constructors Name Description MockMessage() MockMessage(string, string) Properties Name Description Id A caller-defined ID used to correlate this message with the same message in the response. IsPermitted indicates whether Twitch would approve the message or hold it for moderator review. Text The message to check."
  },
  "api/AuxLabs.SimpleTwitch.Rest.ModifyRedemptionsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.ModifyRedemptionsArgs.html",
    "title": "Class ModifyRedemptionsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ModifyRedemptionsArgs Inheritance object QueryMap ModifyRedemptionsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class ModifyRedemptionsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description BroadcasterId The ID of the broadcaster that owns the custom reward. Ids A list of IDs to filter the redemptions by. RewardId The ID that identifies the custom reward whose redemptions you want to get. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.Pagination.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Pagination.html",
    "title": "Struct Pagination | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Struct Pagination Inherited Members System.ValueType.Equals(object) System.ValueType.GetHashCode() System.ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public struct Pagination Properties Name Description Cursor The cursor used to get the next page of results."
  },
  "api/AuxLabs.SimpleTwitch.Rest.PatchChannelArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PatchChannelArgs.html",
    "title": "Class PatchChannelArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PatchChannelArgs Inheritance object QueryMap PatchChannelArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PatchChannelArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description BroadcasterId The ID of the broadcaster whose channel you want to update. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PatchChannelBody.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PatchChannelBody.html",
    "title": "Class PatchChannelBody | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PatchChannelBody Inheritance object PatchChannelBody Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PatchChannelBody Properties Name Description BroadcasterLanguage The user’s preferred language. Set the value to an ISO 639-1 two-letter language code. Delay The number of seconds you want your broadcast buffered before streaming it live. GameId The ID of the game that the user plays. Tags A collection of channel-defined tags to apply to the channel. Title The title of the user’s stream. Methods Name Description Validate()"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PatchChatSettingsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PatchChatSettingsArgs.html",
    "title": "Class PatchChatSettingsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PatchChatSettingsArgs Inheritance object QueryMap PatchChatSettingsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PatchChatSettingsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description BroadcasterId The ID of the broadcaster whose chat settings you want to get. ModeratorId The ID of a user that has permission to moderate the broadcaster’s chat room. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PatchChatSettingsBody.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PatchChatSettingsBody.html",
    "title": "Class PatchChatSettingsBody | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PatchChatSettingsBody Inheritance object PatchChatSettingsBody ChatSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PatchChatSettingsBody Properties Name Description FollowerOnlyMinutes The length of time that users must follow the broadcaster before being able to participate in the chat. IsEmoteOnly Determines whether chat messages must contain only emotes. IsFollowerOnly Determines whether the broadcaster restricts the chat room to followers only. IsModeratorDelayed Determines whether the broadcaster adds a short delay before chat messages appear in the chat room. IsSlowEnabled Determines whether the broadcaster limits how often users in the chat room are allowed to send messages. IsSubscriberOnly Determines whether only users that subscribe to the broadcaster’s channel may talk in the chat room. IsUniqueEnabled Determines whether the broadcaster requires users to post only unique messages in the chat room. ModeratorDelaySeconds The amount of time that messages are delayed before appearing in chat. SlowSeconds The amount of time that users must wait between sending messages. Methods Name Description Validate()"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PatchDropsStatusArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PatchDropsStatusArgs.html",
    "title": "Class PatchDropsStatusArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PatchDropsStatusArgs Inheritance object PatchDropsStatusArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PatchDropsStatusArgs Properties Name Description EntitlementIds A list of IDs that identify the entitlements to update. Status The fulfillment status to set the entitlements to. Methods Name Description Validate()"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PatchPollBody.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PatchPollBody.html",
    "title": "Class PatchPollBody | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PatchPollBody Inheritance object PatchPollBody Implements IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PatchPollBody : IAgentRequest, IScopedRequest Properties Name Description BroadcasterId The ID of the broadcaster that’s running the poll. PollId The ID of the poll to update. Scopes Status The status to set the poll to. Methods Name Description Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PatchPredictionBody.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PatchPredictionBody.html",
    "title": "Class PatchPredictionBody | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PatchPredictionBody Inheritance object PatchPredictionBody Implements IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PatchPredictionBody : IAgentRequest, IScopedRequest Properties Name Description BroadcasterId The ID of the broadcaster that’s running the prediction. PredictionId The ID of the prediction to update. Scopes Status The status to set the prediction to. WinningId The ID of the winning outcome. Methods Name Description Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PatchScheduleArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PatchScheduleArgs.html",
    "title": "Class PatchScheduleArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PatchScheduleArgs Inheritance object QueryMap PatchScheduleArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PatchScheduleArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description BroadcasterId The ID of the broadcaster whose schedule settings you want to update. IsVacationEnabled Indicates whether the broadcaster has scheduled a vacation. Scopes Timezone The time zone that the broadcaster broadcasts from. VacationEndsAt The UTC date and time of when the broadcaster’s vacation ends. VacationStartsAt The UTC date and time of when the broadcaster’s vacation starts. Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PatchSegmentBody.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PatchSegmentBody.html",
    "title": "Class PatchSegmentBody | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PatchSegmentBody Inheritance object PatchSegmentBody Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PatchSegmentBody Properties Name Description CategoryId The ID of the category that best represents the broadcast’s content. DurationMinutes The length of time that the broadcast is scheduled to run. IsCancelled Indicates whether the broadcast is canceled. StartsAt The date and time that the broadcast segment starts. Timezone The time zone that the broadcaster broadcasts from. Title The broadcast’s title. Methods Name Description Validate()"
  },
  "api/AuxLabs.SimpleTwitch.Rest.Playlist.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Playlist.html",
    "title": "Class Playlist | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Playlist Inheritance object Playlist Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Playlist Properties Name Description Description A short description about the music that the playlist includes. Id The playlist’s Amazon Standard Identification Number. ImageUrl A URL to the playlist’s image art. Title The playlist’s title."
  },
  "api/AuxLabs.SimpleTwitch.Rest.Poll.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Poll.html",
    "title": "Class Poll | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Poll Inheritance object Poll Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Poll Properties Name Description BitsPerVote Not used; will be set to 0. BroadcasterDisplayName The broadcaster’s login name. BroadcasterId An ID that identifies the broadcaster that created the poll. BroadcasterName The broadcaster’s display name. ChannelPointsPerVote The number of points the viewer must spend to cast one additional vote. Choices A list of choices that viewers can choose from. DurationSeconds The length of time that the poll will run for. EndedAt The UTC date and time of when the poll ended. Id An ID that identifies the poll. IsBitsVotingEnabled Not used; will be set to false. IsChannelPointsVotingEnabled Indicates whether viewers may cast additional votes using Channel Points. StartedAt The UTC date and time of when the poll began. Status The poll’s status. Title The question that viewers are voting on."
  },
  "api/AuxLabs.SimpleTwitch.Rest.PollOption.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PollOption.html",
    "title": "Class PollOption | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PollOption Inheritance object PollOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PollOption Properties Name Description BitsVotes Not used; will be set to 0. ChannelPointsVotes The number of votes cast using Channel Points. Id An ID that identifies this choice. Title The choice’s title. Votes The total number of votes cast for this choice."
  },
  "api/AuxLabs.SimpleTwitch.Rest.PollStatus.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PollStatus.html",
    "title": "Enum PollStatus | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum PollStatus Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum PollStatus Fields Name Description Active The poll is running. Archived The poll has been archived and is no longer visible on the channel. Completed The poll ended on schedule. Invalid Something went wrong while determining the state. Moderated The poll was deleted. Terminated The poll was terminated before its scheduled end. Extension Methods EnumHelper.GetStringValue<PollStatus>(PollStatus)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostAnnouncementArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostAnnouncementArgs.html",
    "title": "Class PostAnnouncementArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostAnnouncementArgs Inheritance object QueryMap PostAnnouncementArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostAnnouncementArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description BroadcasterId The ID of the broadcaster that owns the chat room to send the announcement to. ModeratorId The ID of a user who has permission to moderate the broadcaster’s chat room. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostAnnouncementBody.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostAnnouncementBody.html",
    "title": "Class PostAnnouncementBody | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostAnnouncementBody Inheritance object PostAnnouncementBody Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostAnnouncementBody Properties Name Description Color The color used to highlight the announcement. Message The announcement to make in the broadcaster’s chat room. Methods Name Description Validate()"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostAppAccessTokenArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostAppAccessTokenArgs.html",
    "title": "Class PostAppAccessTokenArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostAppAccessTokenArgs Inheritance object QueryMap PostAppAccessTokenArgs PostRefreshTokenArgs PostUserAccessTokenArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostAppAccessTokenArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Properties Name Description ClientId Your app’s registered client ID. ClientSecret Your app’s registered client secret. GrantType Constant value, this is set internally. Methods Name Description CreateQueryMap() Validate()"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostAutomodMessageArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostAutomodMessageArgs.html",
    "title": "Class PostAutomodMessageArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostAutomodMessageArgs Inheritance object QueryMap PostAutomodMessageArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostAutomodMessageArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description Action The action to take for the message. MessageId The ID of the message to allow or deny. Scopes UserId The moderator who is approving or denying the held message. Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostBanArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostBanArgs.html",
    "title": "Class PostBanArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostBanArgs Inheritance object QueryMap PostBanArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostBanArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description BroadcasterId The ID of the broadcaster whose chat room the user is being banned from. ModeratorId The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostBanBody.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostBanBody.html",
    "title": "Class PostBanBody | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostBanBody Inheritance object PostBanBody Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostBanBody Properties Name Description Bans Identifies the user and type of ban. Methods Name Description Validate()"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostBanUser.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostBanUser.html",
    "title": "Class PostBanUser | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostBanUser Inheritance object PostBanUser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostBanUser Constructors Name Description PostBanUser() PostBanUser(string, int?, string) Properties Name Description DurationSeconds The timeout period. Reason The reason the you’re banning the user or putting them in a timeout. UserId The ID of the user to ban or put in a timeout. Methods Name Description Validate()"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostBlockedTermArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostBlockedTermArgs.html",
    "title": "Class PostBlockedTermArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostBlockedTermArgs Inheritance object QueryMap PostBlockedTermArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostBlockedTermArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description BroadcasterId The ID of the broadcaster whose blocked terms you’re getting. ModeratorId The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostBlockedTermBody.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostBlockedTermBody.html",
    "title": "Class PostBlockedTermBody | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostBlockedTermBody Inheritance object PostBlockedTermBody Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostBlockedTermBody Constructors Name Description PostBlockedTermBody() PostBlockedTermBody(string) Properties Name Description Text The word or phrase to block from being used in the broadcaster’s chat room. Methods Name Description ToString() Validate() Operators Name Description implicit operator string(PostBlockedTermBody) implicit operator PostBlockedTermBody(string)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostBroadcastMarkerBody.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostBroadcastMarkerBody.html",
    "title": "Class PostBroadcastMarkerBody | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostBroadcastMarkerBody Inheritance object PostBroadcastMarkerBody Implements IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostBroadcastMarkerBody : IAgentRequest, IScopedRequest Properties Name Description Description A short description of the marker to help the user remember why they marked the location. Scopes UserId The ID of the broadcaster that’s streaming content. Methods Name Description Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostClipArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostClipArgs.html",
    "title": "Class PostClipArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostClipArgs Inheritance object QueryMap PostClipArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostClipArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IScopedRequest Constructors Name Description PostClipArgs() PostClipArgs(string, bool?) Properties Name Description BroadcasterId The ID of the broadcaster whose stream you want to create a clip from. HasDelay Determines whether the API captures the clip at the moment the viewer requests it or after a delay. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>) Operators Name Description implicit operator string(PostClipArgs) implicit operator PostClipArgs(string)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostCommercialBody.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostCommercialBody.html",
    "title": "Class PostCommercialBody | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostCommercialBody Inheritance object QueryMap PostCommercialBody Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostCommercialBody : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description BroadcasterId The ID of the partner or affiliate broadcaster that wants to run the commercial. Length Optional, the length of the commercial to run, in seconds. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostEnforcementStatusArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostEnforcementStatusArgs.html",
    "title": "Class PostEnforcementStatusArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostEnforcementStatusArgs Inheritance object QueryMap PostEnforcementStatusArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostEnforcementStatusArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Constructors Name Description PostEnforcementStatusArgs() PostEnforcementStatusArgs(string) Properties Name Description BroadcasterId The ID of the broadcaster that owns the channel. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>) Operators Name Description implicit operator string(PostEnforcementStatusArgs) implicit operator PostEnforcementStatusArgs(string)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostEnforcementStatusBody.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostEnforcementStatusBody.html",
    "title": "Class PostEnforcementStatusBody | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostEnforcementStatusBody Inheritance object PostEnforcementStatusBody Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostEnforcementStatusBody Properties Name Description Messages The list of messages to check. Methods Name Description Validate()"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostEventSubscriptionBody.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostEventSubscriptionBody.html",
    "title": "Class PostEventSubscriptionBody | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostEventSubscriptionBody Inheritance object PostEventSubscriptionBody Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostEventSubscriptionBody Constructors Name Description PostEventSubscriptionBody() PostEventSubscriptionBody(string, string) PostEventSubscriptionBody(string) Properties Name Description Condition Parameter values that are specific to the specified subscription type. Transport The transport details that you want Twitch to use when sending you notifications. Type The type of subscription to create. Version The version number that identifies the definition of the subscription type that you want the response to use. Methods Name Description Validate()"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostPredictionBody.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostPredictionBody.html",
    "title": "Class PostPredictionBody | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostPredictionBody Inheritance object PostPredictionBody Implements IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostPredictionBody : IAgentRequest, IScopedRequest Properties Name Description BroadcasterId The ID of the broadcaster that’s running the prediction. Outcomes The list of possible outcomes that the viewers may choose from. PredictionDurationSeconds The length of time (in seconds) that the prediction will run for. Scopes Title The question that the broadcaster is asking. Methods Name Description Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostRaidArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostRaidArgs.html",
    "title": "Class PostRaidArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostRaidArgs Inheritance object QueryMap PostRaidArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostRaidArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description FromBroadcasterId The ID of the broadcaster that’s sending the raiding party. Scopes ToBroadcasterId The ID of the broadcaster to raid. Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostRefreshTokenArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostRefreshTokenArgs.html",
    "title": "Class PostRefreshTokenArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostRefreshTokenArgs Inheritance object QueryMap PostAppAccessTokenArgs PostRefreshTokenArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable Inherited Members PostAppAccessTokenArgs.ClientId PostAppAccessTokenArgs.ClientSecret PostAppAccessTokenArgs.GrantType QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostRefreshTokenArgs : PostAppAccessTokenArgs, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Constructors Name Description PostRefreshTokenArgs() Properties Name Description RefreshToken The refresh token issued to the client. Methods Name Description CreateQueryMap() Validate()"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostRevokeTokenArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostRevokeTokenArgs.html",
    "title": "Class PostRevokeTokenArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostRevokeTokenArgs Inheritance object QueryMap PostRevokeTokenArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostRevokeTokenArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Properties Name Description ClientId Your app’s registered client ID. Token The access token to revoke. Methods Name Description CreateQueryMap() Validate()"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostRewardArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostRewardArgs.html",
    "title": "Class PostRewardArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostRewardArgs Inheritance object QueryMap PostRewardArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostRewardArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description BroadcasterId The ID of the broadcaster to add the custom reward to. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostRewardBody.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostRewardBody.html",
    "title": "Class PostRewardBody | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostRewardBody Inheritance object PostRewardBody Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostRewardBody Properties Name Description BackgroundColor The background color to use for the reward. Cost The cost of the reward, in channel points. GlobalCooldownSeconds The cooldown period, in seconds. IsEnabled Determines whether the reward is enabled. IsGlobalCooldownEnabled Determines whether to apply a cooldown period between redemptions IsMaxPerStreamEnabled Determines whether to limit the maximum number of redemptions allowed per live stream. IsMaxPerUserEnabled Determines whether to limit the maximum number of redemptions allowed per user per stream IsUserInputRequired Determines whether the user needs to enter information when redeeming the reward. MaxPerStream The maximum number of redemptions allowed per live stream. MaxPerUser The maximum number of redemptions allowed per user per stream. Prompt The prompt shown to the viewer when they redeem the reward. ShouldSkipRequestQueue Determines whether redemptions should be set to fulfilled status immediately when a reward is redeemed. Title The custom reward’s title. Methods Name Description Validate()"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostSegmentArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostSegmentArgs.html",
    "title": "Class PostSegmentArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostSegmentArgs Inheritance object QueryMap PostSegmentArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostSegmentArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Constructors Name Description PostSegmentArgs() PostSegmentArgs(string) Properties Name Description BroadcasterId The ID of the broadcaster that owns the schedule to add the broadcast segment to. Scopes Methods Name Description CreateQueryMap() ToString() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>) Operators Name Description implicit operator string(PostSegmentArgs) implicit operator PostSegmentArgs(string)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostSegmentBody.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostSegmentBody.html",
    "title": "Class PostSegmentBody | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostSegmentBody Inheritance object PostSegmentBody Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostSegmentBody Properties Name Description CategoryId The ID of the category that best represents the broadcast’s content. DurationMinutes The length of time that the broadcast is scheduled to run. IsRecurring Determines whether the broadcast recurs weekly. StartsAt The date and time that the broadcast segment starts. Timezone The time zone that the broadcaster broadcasts from. Title The broadcast’s title. Methods Name Description Validate()"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostShoutoutArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostShoutoutArgs.html",
    "title": "Class PostShoutoutArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostShoutoutArgs Inheritance object QueryMap PostShoutoutArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostShoutoutArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description FromBroadcasterId The ID of the broadcaster that’s sending the Shoutout. ModeratorId The ID of the broadcaster or a user that is one of the broadcaster’s moderators. Scopes ToBroadcasterId The ID of the broadcaster that’s receiving the Shoutout. Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostUserAccessTokenArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostUserAccessTokenArgs.html",
    "title": "Class PostUserAccessTokenArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostUserAccessTokenArgs Inheritance object QueryMap PostAppAccessTokenArgs PostUserAccessTokenArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable Inherited Members PostAppAccessTokenArgs.ClientId PostAppAccessTokenArgs.ClientSecret PostAppAccessTokenArgs.GrantType QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostUserAccessTokenArgs : PostAppAccessTokenArgs, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Constructors Name Description PostUserAccessTokenArgs() Properties Name Description AuthorizationCode The code that the /authorize response returned in the code query parameter. RedirectUri Your app’s registered redirect URI. Methods Name Description CreateQueryMap() Validate()"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostWhisperArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostWhisperArgs.html",
    "title": "Class PostWhisperArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostWhisperArgs Inheritance object QueryMap PostWhisperArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostWhisperArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description FromUserId The ID of the user sending the whisper. Scopes ToUserId The ID of the user to receive the whisper. Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PostWhisperBody.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PostWhisperBody.html",
    "title": "Class PostWhisperBody | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PostWhisperBody Inheritance object PostWhisperBody Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PostWhisperBody Constructors Name Description PostWhisperBody() PostWhisperBody(string) Properties Name Description Message Methods Name Description ToString() Validate() Operators Name Description implicit operator string(PostWhisperBody) implicit operator PostWhisperBody(string)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.Prediction.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Prediction.html",
    "title": "Class Prediction | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Prediction Inheritance object Prediction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Prediction Properties Name Description BroadcasterDisplayName The broadcaster’s display name. BroadcasterId An ID that identifies the broadcaster that created the prediction. BroadcasterName The broadcaster’s login name. CreatedAt The UTC date and time of when the Prediction began. EndedAt The UTC date and time of when the Prediction ended. Id An ID that identifies this prediction. LockedAt The UTC date and time of when the Prediction was locked. Outcomes A collection of possible outcomes for the prediction. PredictionDurationSeconds The length of time that the prediction will run for. Status The prediction’s status. Title The question that the prediction asks. WinningOutcomeId The ID of the winning outcome."
  },
  "api/AuxLabs.SimpleTwitch.Rest.PredictionColor.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PredictionColor.html",
    "title": "Enum PredictionColor | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum PredictionColor Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum PredictionColor Fields Name Description Blue Pink Extension Methods EnumHelper.GetStringValue<PredictionColor>(PredictionColor)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PredictionOption.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PredictionOption.html",
    "title": "Class PredictionOption | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PredictionOption Inheritance object PredictionOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PredictionOption Properties Name Description ChannelPointsTotal The number of Channel Points spent by viewers on this outcome. Color The color that visually identifies this outcome in the UX. Id An ID that identifies this outcome. Title The outcome’s text. TopPredictors A collection of viewers who were the top predictors Users The number of unique viewers that chose this outcome."
  },
  "api/AuxLabs.SimpleTwitch.Rest.PredictionStatus.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PredictionStatus.html",
    "title": "Enum PredictionStatus | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum PredictionStatus Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum PredictionStatus Fields Name Description Active The Prediction is running and viewers can make predictions. Cancelled The broadcaster canceled the Prediction and refunded the Channel Points to the participants. Locked The broadcaster locked the Prediction, which means viewers can no longer make predictions. Resolved The winning outcome was determined and the Channel Points were distributed to the viewers who predicted the correct outcome. Extension Methods EnumHelper.GetStringValue<PredictionStatus>(PredictionStatus)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PredictionUser.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PredictionUser.html",
    "title": "Class PredictionUser | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PredictionUser Inheritance object PredictionUser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PredictionUser Properties Name Description ChannelPointsUsed The number of Channel Points the viewer spent. ChannelPointsWon The number of Channel Points distributed to the viewer. DisplayName The viewer’s display name. Id An ID that identifies the viewer. Name The viewer’s login name."
  },
  "api/AuxLabs.SimpleTwitch.Rest.ProductData.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.ProductData.html",
    "title": "Class ProductData | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ProductData Inheritance object ProductData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class ProductData Properties Name Description Cost Contains details about the digital product’s cost. DisplayName The name of the digital product. Domain Set to twitch.ext. + the extension's ID. ExpiresAt This is always null since you may purchase only unexpired products. IsBroadcast Determines whether the data was broadcast to all instances of the extension. IsInDevelopment Determines whether the product is in development. Sku An ID that identifies the digital product."
  },
  "api/AuxLabs.SimpleTwitch.Rest.ProductType.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.ProductType.html",
    "title": "Enum ProductType | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum ProductType Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum ProductType Fields Name Description BitsInExtension None Extension Methods EnumHelper.GetStringValue<ProductType>(ProductType)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PutAutomodSettingsBody.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PutAutomodSettingsBody.html",
    "title": "Class PutAutomodSettingsBody | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PutAutomodSettingsBody Inheritance object PutAutomodSettingsBody Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PutAutomodSettingsBody Properties Name Description Aggression The Automod level for hostility involving aggression. Bullying The Automod level for hostility involving name calling or insults. Disability The Automod level for discrimination against disability. Misogyny The Automod level for discrimination against women. OverallLevel The default AutoMod level for the broadcaster. RaceEthnicityOrReligion The Automod level for racial discrimination. SexBasedTerms The Automod level for sexual content. SexualitySexOrGender The AutoMod level for discrimination based on sexuality, sex, or gender. Swearing The Automod level for profanity."
  },
  "api/AuxLabs.SimpleTwitch.Rest.PutBlockArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PutBlockArgs.html",
    "title": "Class PutBlockArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PutBlockArgs Inheritance object QueryMap PutBlockArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PutBlockArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IScopedRequest Properties Name Description Context The location where the harassment took place that is causing the brodcaster to block the user. Reason The reason that the broadcaster is blocking the user. Scopes TargetUserId The ID of the user to block. Methods Name Description CreateQueryMap() Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PutPollBody.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PutPollBody.html",
    "title": "Class PutPollBody | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PutPollBody Inheritance object PutPollBody Implements IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PutPollBody : IAgentRequest, IScopedRequest Properties Name Description BroadcasterId The ID of the broadcaster that’s running the poll. ChannelPointsPerVote Optional. The number of points that the viewer must spend to cast one additional vote. Choices A list of choices that viewers may choose from. DurationSeconds The length of time that the poll will run for. IsChannelPointsVotingEnabled Optional. Indicates whether viewers may cast additional votes using Channel Points. Scopes Title The question that viewers will vote on. Methods Name Description Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PutShieldModeArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PutShieldModeArgs.html",
    "title": "Class PutShieldModeArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PutShieldModeArgs Inheritance object QueryMap PutShieldModeArgs GetShieldModeArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PutShieldModeArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description BroadcasterId The ID of the broadcaster that owns the chat room to remove messages from. ModeratorId The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PutShieldModeBody.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PutShieldModeBody.html",
    "title": "Class PutShieldModeBody | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PutShieldModeBody Inheritance object PutShieldModeBody Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PutShieldModeBody Constructors Name Description PutShieldModeBody() PutShieldModeBody(bool) Properties Name Description IsActive Determines whether to activate Shield Mode. Operators Name Description implicit operator bool(PutShieldModeBody) implicit operator PutShieldModeBody(bool)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PutUserArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PutUserArgs.html",
    "title": "Class PutUserArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PutUserArgs Inheritance object QueryMap PutUserArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PutUserArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IScopedRequest Constructors Name Description PutUserArgs() PutUserArgs(string) Properties Name Description Description The string to update the channel’s description to. Scopes Methods Name Description CreateQueryMap() Validate(IEnumerable<string>) Operators Name Description implicit operator string(PutUserArgs) implicit operator PutUserArgs(string)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.PutUserChatColorArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.PutUserChatColorArgs.html",
    "title": "Class PutUserChatColorArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class PutUserChatColorArgs Inheritance object QueryMap PutUserChatColorArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IAgentRequest IScopedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class PutUserChatColorArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Properties Name Description Color The color to use for the user’s name in chat. CustomColor Turbo and Prime users may specify a custom color. Scopes UserId The ID of the user whose chat color you want to update. Methods Name Description CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.Raid.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Raid.html",
    "title": "Class Raid | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Raid Inheritance object Raid Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Raid Properties Name Description CreatedAt The UTC date and time of when the raid was requested. IsMature Indicates whether the channel being raided contains mature content."
  },
  "api/AuxLabs.SimpleTwitch.Rest.RaidCondition.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.RaidCondition.html",
    "title": "Class RaidCondition | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class RaidCondition Inheritance object RaidCondition Implements IEventCondition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class RaidCondition : IEventCondition Constructors Name Description RaidCondition(string, string) Properties Name Description FromBroadcasterId Optional. The broadcaster user ID that created the channel raid you want to get notifications for. ToBroadcasterId Optional. The broadcaster user ID that received the channel raid you want to get notifications for."
  },
  "api/AuxLabs.SimpleTwitch.Rest.RateLimitInfo.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.RateLimitInfo.html",
    "title": "Struct RateLimitInfo | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Struct RateLimitInfo Inherited Members System.ValueType.Equals(object) System.ValueType.GetHashCode() System.ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public readonly struct RateLimitInfo Properties Name Description IsGlobal Lag Limit Path Remaining Reset"
  },
  "api/AuxLabs.SimpleTwitch.Rest.Redemption.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Redemption.html",
    "title": "Class Redemption | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Redemption Inheritance object Redemption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Redemption Properties Name Description BroadcasterId The ID that uniquely identifies the broadcaster. BroadcasterLogin The broadcaster’s login name. BroadcasterName The broadcaster’s display name. Id The ID that uniquely identifies this redemption. RedeemedAt The date and time of when the reward was redeemed Reward The reward that the user redeemed. Status The state of the redemption. UserId The ID that uniquely identifies the user that redeemed the reward. UserInput The text the user entered at the prompt when they redeemed the reward. UserLogin The user’s login name. UserName The user’s display name."
  },
  "api/AuxLabs.SimpleTwitch.Rest.RedemptionSort.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.RedemptionSort.html",
    "title": "Enum RedemptionSort | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum RedemptionSort Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum RedemptionSort Fields Name Description Newest Oldest Extension Methods EnumHelper.GetStringValue<RedemptionSort>(RedemptionSort)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.RedemptionStatus.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.RedemptionStatus.html",
    "title": "Enum RedemptionStatus | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum RedemptionStatus Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum RedemptionStatus Fields Name Description Cancelled Fulfilled Unfulfilled Unknown Extension Methods EnumHelper.GetStringValue<RedemptionStatus>(RedemptionStatus)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.RestError.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.RestError.html",
    "title": "Class RestError | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class RestError Inheritance object RestError Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class RestError Properties Name Description Code Error Message"
  },
  "api/AuxLabs.SimpleTwitch.Rest.Reward.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Reward.html",
    "title": "Class Reward | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Reward Inheritance object SimpleReward Reward Inherited Members SimpleReward.Id SimpleReward.Title SimpleReward.Prompt SimpleReward.Cost object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Reward : SimpleReward Properties Name Description BackgroundColor The background color to use for the reward. BroadcasterId The ID that uniquely identifies the broadcaster. BroadcasterLogin The broadcaster’s login name. BroadcasterName The broadcaster’s display name. CooldownExpiresAt The timestamp of when the cooldown period expires. DefaultImages A set of default images for the reward. GlobalCooldownSetting Determines whether to apply a cooldown period between redemptions. Images A set of custom images for the reward. IsEnabled Determines whether the reward is enabled. IsInStock Determines whether the reward is currently in stock. IsPaused Determines whether the reward is currently paused. IsUserInputRequired Determines whether the user must enter information when redeeming the reward. MaxPerStreamSetting Determiness whether to apply a maximum to the number to the redemptions allowed per live stream. MaxPerUserSetting Determines whether to apply a maximum to the number of redemptions allowed per user per live stream. ShouldSkipRequestQueue Determines whether redemptions should be set to fulfilled status immediately when a reward is redeemed. TotalRedemptions The number of redemptions redeemed during the current live stream."
  },
  "api/AuxLabs.SimpleTwitch.Rest.RewardCondition.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.RewardCondition.html",
    "title": "Class RewardCondition | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class RewardCondition Inheritance object BroadcasterCondition RewardCondition Implements IEventCondition Inherited Members BroadcasterCondition.BroadcasterId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class RewardCondition : BroadcasterCondition, IEventCondition Constructors Name Description RewardCondition() RewardCondition(string, string) Properties Name Description RewardId Optional. Specify a reward id to only receive notifications for a specific reward."
  },
  "api/AuxLabs.SimpleTwitch.Rest.RewardSetting.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.RewardSetting.html",
    "title": "Struct RewardSetting | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Struct RewardSetting Inherited Members System.ValueType.Equals(object) System.ValueType.GetHashCode() System.ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public readonly struct RewardSetting Constructors Name Description RewardSetting(bool, uint) Properties Name Description IsEnabled Value"
  },
  "api/AuxLabs.SimpleTwitch.Rest.RFCDateTimeConverter.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.RFCDateTimeConverter.html",
    "title": "Class RFCDateTimeConverter | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class RFCDateTimeConverter Inheritance object RFCDateTimeConverter Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class RFCDateTimeConverter : JsonConverter<DateTime> Methods Name Description Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Write(Utf8JsonWriter, DateTime, JsonSerializerOptions)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.Schedule.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Schedule.html",
    "title": "Class Schedule | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Schedule Inheritance object Schedule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Schedule Properties Name Description BroadcasterDisplayName The broadcaster’s display name. BroadcasterId The ID of the broadcaster that owns the broadcast schedule. BroadcasterName The broadcaster’s login name. Segments The list of broadcasts in the broadcaster’s streaming schedule. Vacation The dates when the broadcaster is on vacation and not streaming."
  },
  "api/AuxLabs.SimpleTwitch.Rest.ScheduleSegment.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.ScheduleSegment.html",
    "title": "Class ScheduleSegment | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ScheduleSegment Inheritance object ScheduleSegment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class ScheduleSegment Properties Name Description CancelledUntil Indicates whether the broadcaster canceled this segment of a recurring broadcast. Category The type of content that the broadcaster plans to stream. EndsAt The UTC date and time of when the broadcast ends. Id An ID that identifies this broadcast segment. IsRecurring Determines whether the broadcast is part of a recurring series that streams at the same time each week or is a one-time broadcast. StartsAt The UTC date and time of when the broadcast starts. Title The broadcast segment’s title."
  },
  "api/AuxLabs.SimpleTwitch.Rest.SearchCategoriesArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.SearchCategoriesArgs.html",
    "title": "Class SearchCategoriesArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class SearchCategoriesArgs Inheritance object QueryMap SearchCategoriesArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class SearchCategoriesArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Properties Name Description After First The maximum number of items to return per page in the response. Query The search string. Methods Name Description CreateQueryMap() Validate() Explicit Interface Implementations Name Description IPaginatedRequest.Before"
  },
  "api/AuxLabs.SimpleTwitch.Rest.SearchChannelsArgs.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.SearchChannelsArgs.html",
    "title": "Class SearchChannelsArgs | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class SearchChannelsArgs Inheritance object QueryMap SearchChannelsArgs Implements System.Collections.Generic.IDictionary<TKey, TValue><string, string> System.Collections.Generic.ICollection<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.Generic.IEnumerable<T><System.Collections.Generic.KeyValuePair<TKey, TValue><string, string>> System.Collections.IEnumerable IPaginatedRequest Inherited Members QueryMap.IDictionary<string, string>.this[string] QueryMap.IDictionary<string, string>.Keys QueryMap.IDictionary<string, string>.Values QueryMap.IDictionary<string, string>.Add(string, string) QueryMap.IDictionary<string, string>.ContainsKey(string) QueryMap.IDictionary<string, string>.Remove(string) QueryMap.IDictionary<string, string>.TryGetValue(string, out string) QueryMap.ICollection<KeyValuePair<string, string>>.Count QueryMap.ICollection<KeyValuePair<string, string>>.IsReadOnly QueryMap.ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.Clear() QueryMap.ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string>) QueryMap.ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[], int) QueryMap.IEnumerable<KeyValuePair<string, string>>.GetEnumerator() QueryMap.IEnumerable.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class SearchChannelsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Properties Name Description After First The maximum number of items to return per page in the response. LiveOnly Determines whether the response includes only channels that are currently streaming live. Query The search string. Methods Name Description CreateQueryMap() Validate() Explicit Interface Implementations Name Description IPaginatedRequest.Before"
  },
  "api/AuxLabs.SimpleTwitch.Rest.ShieldMode.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.ShieldMode.html",
    "title": "Class ShieldMode | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class ShieldMode Inheritance object ShieldMode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class ShieldMode Properties Name Description IsActive Determines whether Shield Mode is active. LastActivatedAt The UTC timestamp of when Shield Mode was last activated. ModeratorDisplayName The moderator’s display name. ModeratorId An ID that identifies the moderator that last activated Shield Mode. ModeratorName The moderator’s login name."
  },
  "api/AuxLabs.SimpleTwitch.Rest.SimpleChatUser.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.SimpleChatUser.html",
    "title": "Class SimpleChatUser | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class SimpleChatUser Inheritance object SimpleUser SimpleChatUser Implements IUser IEntity<string> Inherited Members SimpleUser.Id SimpleUser.Name SimpleUser.DisplayName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class SimpleChatUser : SimpleUser, IUser, IEntity<string> Properties Name Description Color The color of the user's name in chat."
  },
  "api/AuxLabs.SimpleTwitch.Rest.SimpleClip.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.SimpleClip.html",
    "title": "Class SimpleClip | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class SimpleClip Inheritance object SimpleClip Clip Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class SimpleClip Properties Name Description EditUrl A URL that you can use to edit the clip’s title, identify the part of the clip to publish, and publish the clip. Id An ID that uniquely identifies the clip."
  },
  "api/AuxLabs.SimpleTwitch.Rest.SimpleExtension.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.SimpleExtension.html",
    "title": "Class SimpleExtension | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class SimpleExtension Inheritance object SimpleExtension ComponentExtension Extension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class SimpleExtension Properties Name Description Id An ID that identifies the extension. IsActive Determines the extension’s activation state. Name The extension’s name. Version The extension’s version."
  },
  "api/AuxLabs.SimpleTwitch.Rest.SimpleReward.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.SimpleReward.html",
    "title": "Class SimpleReward | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class SimpleReward Inheritance object SimpleReward Reward Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class SimpleReward Properties Name Description Cost The cost of the reward in channel points. Id The ID that uniquely identifies this custom reward. Prompt The prompt shown to the viewer when they redeem the reward if user input is required. Title The title of the reward."
  },
  "api/AuxLabs.SimpleTwitch.Rest.SimpleSubscription.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.SimpleSubscription.html",
    "title": "Class SimpleSubscription | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class SimpleSubscription Inheritance object SimpleSubscription Subscription Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class SimpleSubscription Properties Name Description BroadcasterDisplayName BroadcasterId BroadcasterName GifterDisplayName GifterId GifterName IsGift Determines whether the subscription is a gift subscription. Tier The type of subscription."
  },
  "api/AuxLabs.SimpleTwitch.Rest.SimpleTeam.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.SimpleTeam.html",
    "title": "Class SimpleTeam | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class SimpleTeam Inheritance object SimpleTeam ChannelTeam Team Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class SimpleTeam Properties Name Description BackgroundImageUrl A URL to the team’s background image. BannerUrl A URL to the team’s banner. CreatedAt The UTC date and time of when the team was created. Description The team’s description. The description may contain formatting such as Markdown, HTML, newline (\\n) characters, etc. DisplayName The team’s display name. Id An ID that identifies the team. Name The team’s name. ThumbnailUrl A URL to a thumbnail image of the team’s logo. UpdatedAt The UTC date and time of the last time the team was updated."
  },
  "api/AuxLabs.SimpleTwitch.Rest.SimpleUser.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.SimpleUser.html",
    "title": "Class SimpleUser | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class SimpleUser Inheritance object SimpleUser SimpleChatUser User Implements IUser IEntity<string> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class SimpleUser : IUser, IEntity<string> Properties Name Description DisplayName The user’s display name. Id The ID of the user Name The user’s login name."
  },
  "api/AuxLabs.SimpleTwitch.Rest.Soundtrack.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Soundtrack.html",
    "title": "Class Soundtrack | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Soundtrack Inheritance object Soundtrack Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Soundtrack Properties Name Description Source The source of the track that’s currently playing. Track Describes a track."
  },
  "api/AuxLabs.SimpleTwitch.Rest.Subscription.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Subscription.html",
    "title": "Class Subscription | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Subscription Inheritance object SimpleSubscription Subscription Inherited Members SimpleSubscription.BroadcasterId SimpleSubscription.BroadcasterName SimpleSubscription.BroadcasterDisplayName SimpleSubscription.GifterId SimpleSubscription.GifterName SimpleSubscription.GifterDisplayName SimpleSubscription.IsGift SimpleSubscription.Tier object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Subscription : SimpleSubscription Properties Name Description PlanName The name of the subscription. UserDisplayName The user’s display name. UserId An ID that identifies the subscribing user. UserName The user’s login name."
  },
  "api/AuxLabs.SimpleTwitch.Rest.Team.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Team.html",
    "title": "Class Team | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Team Inheritance object SimpleTeam Team Inherited Members SimpleTeam.Id SimpleTeam.Name SimpleTeam.DisplayName SimpleTeam.BackgroundImageUrl SimpleTeam.BannerUrl SimpleTeam.CreatedAt SimpleTeam.UpdatedAt SimpleTeam.Description SimpleTeam.ThumbnailUrl object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Team : SimpleTeam Properties Name Description Users The list of team members."
  },
  "api/AuxLabs.SimpleTwitch.Rest.TeamUser.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.TeamUser.html",
    "title": "Class TeamUser | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class TeamUser Inheritance object TeamUser Implements IUser IEntity<string> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class TeamUser : IUser, IEntity<string> Properties Name Description DisplayName The user’s display name. Id The ID of the user Name The user’s login name."
  },
  "api/AuxLabs.SimpleTwitch.Rest.Title.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Title.html",
    "title": "Struct Title | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Struct Title Inherited Members System.ValueType.Equals(object) System.ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public readonly struct Title Constructors Name Description Title(string) Properties Name Description Value Methods Name Description ToString() Operators Name Description implicit operator string(Title) implicit operator Title(string)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.TokenType.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.TokenType.html",
    "title": "Enum TokenType | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum TokenType Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum TokenType Fields Name Description Bearer None Extension Methods EnumHelper.GetStringValue<TokenType>(TokenType)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.Track.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Track.html",
    "title": "Class Track | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Track Inheritance object Track Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Track Properties Name Description Album Describes the album that the track is found on. Artists The artists included on the track. DurationSeconds The duration of the track, in seconds. Id The track’s Amazon Standard Identification Number. Isrc The track’s International Standard Recording Code. Title The track’s title."
  },
  "api/AuxLabs.SimpleTwitch.Rest.TrackSource.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.TrackSource.html",
    "title": "Class TrackSource | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class TrackSource Inheritance object TrackSource Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class TrackSource Properties Name Description Id The playlist’s or station’s Amazon Standard Identification Number. ImageUrl A URL to the playlist’s or station’s image art. SoundtrackUrl A URL to the playlist on Soundtrack. SpotifyUrl A URL to the playlist on Spotify. Title The playlist’s or station’s title. Type The type of content that this source maps to."
  },
  "api/AuxLabs.SimpleTwitch.Rest.TrackSourceType.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.TrackSourceType.html",
    "title": "Enum TrackSourceType | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum TrackSourceType Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum TrackSourceType Fields Name Description Playlist Station Extension Methods EnumHelper.GetStringValue<TrackSourceType>(TrackSourceType)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.Transport.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Transport.html",
    "title": "Class Transport | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Transport Inheritance object Transport AcceptedTransport Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Transport Properties Name Description Callback The callback URL where the notifications are sent. Only required for webhooks. Method The transport method. Secret The secret used to verify the signature. Only required for webhooks. SessionId An ID that identifies the WebSocket to send notifications to. Only required for websockets."
  },
  "api/AuxLabs.SimpleTwitch.Rest.TransportMethod.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.TransportMethod.html",
    "title": "Enum TransportMethod | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum TransportMethod Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum TransportMethod Fields Name Description Webhook WebSocket Extension Methods EnumHelper.GetStringValue<TransportMethod>(TransportMethod)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.TwitchIdentityApiClient.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.TwitchIdentityApiClient.html",
    "title": "Class TwitchIdentityApiClient | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class TwitchIdentityApiClient A client that implements Twitch's identity api for manging access tokens. Inheritance object TwitchIdentityApiClient Implements ITwitchIdentityApi System.IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class TwitchIdentityApiClient : ITwitchIdentityApi, IDisposable Constructors Name Description TwitchIdentityApiClient() TwitchIdentityApiClient(string, string, string) TwitchIdentityApiClient(string, string) TwitchIdentityApiClient(string) Properties Name Description ClientId Your app’s registered client ID. ClientSecret Your app’s registered client secret. Identity Information about the currently authorized user. RefreshToken Methods Name Description Dispose() Dispose(bool) PostAccessTokenAsync(PostAppAccessTokenArgs) Get an access token that identifies you as the specified application PostAccessTokenAsync(PostUserAccessTokenArgs) Get an access token that identifies you as the specified user PostRefreshTokenAsync(PostRefreshTokenArgs) Refresh an expired user access token RevokeTokenAsync(PostRevokeTokenArgs) Revoke an access token that is no longer needed ValidateAsync() Get an app identity using the provided app credentials. ValidateAsync(string, string) Get information relating to a user access token ValidateAsync(string) Get information relating to a user access token"
  },
  "api/AuxLabs.SimpleTwitch.Rest.TwitchImage.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.TwitchImage.html",
    "title": "Struct TwitchImage | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Struct TwitchImage Inherited Members System.ValueType.Equals(object) System.ValueType.GetHashCode() System.ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public struct TwitchImage Properties Name Description LargeImageUrl A URL to the large version (112px x 112px) of the image. MediumImageUrl A URL to the medium version (56px x 56px) of the image. SmallImageUrl A URL to the small version (28px x 28px) of the image."
  },
  "api/AuxLabs.SimpleTwitch.Rest.TwitchMetaResponse-1.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.TwitchMetaResponse-1.html",
    "title": "Class TwitchMetaResponse<T> | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class TwitchMetaResponse<T> An object that represents data returned by a Twitch request, but with some metadata. Inheritance object TwitchResponse<T> TwitchMetaResponse<T> Inherited Members TwitchResponse<T>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class TwitchMetaResponse<T> : TwitchResponse<T> where T : class Type Parameters Name Description T Properties Name Description DateRange A range of dates relating to the objects returned in . Pagination Contains information used to page through the list of results. Points The current number of subscriber points earned by this broadcaster. Total The total number of objects returned in ."
  },
  "api/AuxLabs.SimpleTwitch.Rest.TwitchResponse-1.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.TwitchResponse-1.html",
    "title": "Class TwitchResponse<T> | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class TwitchResponse<T> An object that represents data returned by a Twitch request. Inheritance object TwitchResponse<T> EventSubResponse TwitchMetaResponse<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class TwitchResponse<T> where T : class Type Parameters Name Description T Properties Name Description Data A collection of objects returned from a request"
  },
  "api/AuxLabs.SimpleTwitch.Rest.TwitchRestApiClient.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.TwitchRestApiClient.html",
    "title": "Class TwitchRestApiClient | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class TwitchRestApiClient Inheritance object TwitchRestApiClient Implements ITwitchApi System.IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class TwitchRestApiClient : ITwitchApi, IDisposable Constructors Name Description TwitchRestApiClient(TwitchRestApiConfig) TwitchRestApiClient(string, TwitchRestApiConfig) Properties Name Description Authorization ClientId Identity Methods Name Description DeleteBanAsync(DeleteBanArgs) Removes the ban or timeout that was placed on the specified user. DeleteBlockAsync(DeleteBlockArgs) Removes the user from the broadcaster’s list of blocked users. DeleteBlockedTermAsync(DeleteBlockedTermsArgs) Removes the word or phrase from the broadcaster’s list of blocked terms. DeleteChatMessagesAsync(DeleteMessageArgs) Removes a single chat message or all chat messages from the broadcaster’s chat room. DeleteEventSubscriptionAsync(string) Deletes an EventSub subscription. DeleteModeratorAsync(ManageModeratorArgs) Removes a moderator from the broadcaster’s chat room. DeleteRaidAsync(DeleteRaidArgs) Cancel a pending raid. DeleteRewardAsync(ManageRewardArgs) Deletes a custom reward that the broadcaster created. Only the app that created a reward is able to delete it. DeleteSegmentAsync(ManageSegmentArgs) Updates a scheduled broadcast segment. DeleteVideoAsync(DeleteVideosArgs) Deletes one or more videos. You may delete past broadcasts, highlights, or uploads. DeleteVipAsync(ManageVipArgs) Removes the specified user as a VIP in the broadcaster’s channel. Dispose() Dispose(bool) GetActiveExtensionsAsync(GetActiveExtensionsArgs) Gets a list of all extensions (both active and inactive) that the broadcaster has installed. GetAutomodSettingsAsync(AutomodSettingsArgs) Gets the broadcaster’s AutoMod settings. GetBadgesAsync() Gets Twitch’s list of chat badges, which users may use in any channel’s chat room. GetBadgesAsync(GetBadgesArgs) Gets the broadcaster’s list of custom chat badges. GetBannedUsersAsync(GetBannedUsersArgs) Gets all users that the broadcaster banned or put in a timeout. GetBitsLeaderboardAsync(GetBitsLeaderboardArgs) Gets the Bits leaderboard for the authenticated broadcaster. GetBlockedTermsAsync(GetBlockedTermsArgs) Gets the broadcaster’s list of non-private, blocked words or phrases. GetBlocksAsync(GetBlocksArgs) Gets the list of users that the broadcaster has blocked. GetBroadcastKeyAsync(GetBroadcastKeyArgs) Gets the channel’s broadcast key. GetBroadcastMarkersAsync(GetBroadcastMarkersArgs) Gets a list of markers from the user’s most recent stream or from the specified VOD/video. GetBroadcastsAsync(GetBroadcastsArgs) Gets a list of all broadcasts. GetCategoriesAsync(SearchCategoriesArgs) Gets the games or categories that match the specified query. GetChannelEditorsAsync(GetChannelEditorsArgs) Gets the broadcaster’s list editors. GetChannelsAsync(GetChannelsArgs) Gets information about one or more channels. GetChannelsAsync(SearchChannelsArgs) Gets the channels that match the specified query and have streamed content within the past 6 months. GetCharityCampaignAsync(GetCharityCampaignArgs) Gets information about the charity campaign that a broadcaster is running. GetCharityDonationsAsync(GetCharityDonationsArgs) Gets the list of donations that users have made to the broadcaster’s active charity campaign. GetChatSettingsAsync(GetChatSettingsArgs) Gets the broadcaster’s chat settings. GetChattersAsync(GetChattersArgs) Gets the list of users that are connected to the broadcaster’s chat session. GetCheermotesAsync(GetCheermotesArgs) Gets a collection of Cheermotes that can be used to cheer bits in any bits-enabled channel. GetClipsAsync(GetClipsArgs) Gets one or more video clips that were captured from streams. GetCodeStatusAsync(CodeStatusArgs) Gets the status of one or more redemption codes for a Bits reward. GetCurrentTrackAsync(GetCurrentTrackArgs) Gets the Soundtrack track that the broadcaster is playing. GetDropsStatusAsync(GetDropStatusArgs) Gets an organization’s list of entitlements that have been granted to a game, a user, or both. GetEmotesAsync() Gets the list of global emotes. GetEmotesAsync(GetEmotesArgs) Gets the broadcaster’s list of custom emotes. GetEmoteSetsAsync(GetEmoteSetsArgs) Gets emotes for one or more specified emote sets. GetEventSubscriptionsAsync(GetEventSubscriptionsArgs) Gets a collection of EventSub subscriptions that the client in the access token created. GetExtensionAnalyticsAsync(GetExtensionAnalyticsArgs) Gets an analytics report for one or more extensions. The response contains the URLs used to download the reports (CSV files). GetExtensionTransactionsAsync(GetExtensionTransactionsArgs) Gets an extension’s list of transactions. GetFollowedBroadcastsAsync(GetFollowedBroadcastsArgs) Gets the list of broadcasters that the user follows and that are streaming live. GetFollowedChannelsAsync(GetFollowedChannelsArgs) Gets a list of broadcasters that the specified user follows. GetFollowersAsync(GetFollowersArgs) Gets a list of users that follow the specified broadcaster. GetGameAnalyticsAsync(GetGameAnalyticsArgs) Gets an analytics report for one or more games. The response contains the URLs used to download the reports (CSV files). GetGamesAsync(GetGamesArgs) Gets information about specified categories or games. GetGoalsAsync(GetGoalsArgs) Gets the broadcaster’s list of active goals. GetHypetrainEventsAsync(GetHypeTrainsArgs) Gets information about the broadcaster’s current or most recent Hype Train event. GetModeratorsAsync(GetModeratorsArgs) Gets all users allowed to moderate the broadcaster’s chat room. GetPlaylistsAsync(GetPlaylistsArgs) Gets a list of Soundtrack playlists. GetPlaylistTracksAsync(GetPlaylistTracksArgs) Gets the Soundtrack playlist’s tracks. GetPollAsync(GetPredictionsArgs) Gets a list of polls that the broadcaster created. GetPredictionAsync(GetPredictionsArgs) Gets a list of Channel Points Predictions that the broadcaster created. GetRewardRedemptionAsync(GetRedemptionsArgs) Gets a list of redemptions for the specified custom reward. Only the app that created a reward is able to see it's redemptions. GetRewardsAsync(GetRewardArgs) Gets a list of custom rewards that the specified broadcaster created. GetScheduleAsync(GetScheduleArgs) Gets the broadcaster’s streaming schedule. GetShieldModeAsync(GetShieldModeArgs) Activates or deactivates the broadcaster’s Shield Mode. GetSubscriberAsync(GetSubscriberArgs) Checks whether the user subscribes to the broadcaster’s channel. GetSubscriptionsAsync(GetSubscriptionsArgs) Updates the specified user’s information. GetTeamAsync(GetTeamArgs) Gets information about the specified Twitch team. GetTeamsAsync(GetChannelTeamsArgs) Gets information about one or more users. GetTopGamesAsync(GetTopGamesArgs) Gets information about all broadcasts on Twitch. GetUserChatColorAsync(GetUserColorArgs) Gets the color used for the user’s name in chat. GetUserExtensionsAsync() Gets a list of all extensions (both active and inactive) that the broadcaster has installed. GetUsersAsync(GetUsersArgs) Gets information about one or more users. GetVideosAsync(GetVideosArgs) Gets information about one or more published videos. GetVipsAsync(GetVipsArgs) Gets a list of the broadcaster’s VIPs. PatchChannelAsync(PatchChannelArgs, PatchChannelBody) Updates a channel’s properties. PatchChatSettingsAsync(PatchChatSettingsArgs, PatchChatSettingsBody) Updates the broadcaster’s chat settings. PatchDropsStatusAsync(PatchDropsStatusArgs) Updates the Drop entitlement’s fulfillment status. PatchPollAsync(PatchPollBody) Ends an active poll. PatchPredictionaAsync(PostPredictionBody) Locks, resolves, or cancels a Channel Points Prediction. PatchRewardAsync(ManageRewardArgs, PostRewardBody) Updates a custom reward. The app used to create the reward is the only app that may update the reward. PatchRewardRedemptionAsync(RedemptionStatus, ModifyRedemptionsArgs) Updates a redemption’s status. The app used to create the reward is the only app that may update the redemption. PatchScheduleAsync(PatchScheduleArgs) Updates the broadcaster’s schedule settings, such as scheduling a vacation. PatchSegmentAsync(ManageSegmentArgs, PatchSegmentBody) Updates a scheduled broadcast segment. PostAutomodMessageAsync(PostAutomodMessageArgs) Allow or deny the message that AutoMod flagged for review. PostBanAsync(PostBanArgs, PostBanBody) Bans a user from participating in the specified broadcaster’s chat room or puts them in a timeout. PostBlockedTermAsync(PostBlockedTermArgs, PostBlockedTermBody) Gets the broadcaster’s list of non-private, blocked words or phrases. PostBroadcastMarkerAsync(PostBroadcastMarkerBody) Adds a marker to a live stream. PostChatAnnouncementAsync(PostAnnouncementArgs, PostAnnouncementBody) Sends an announcement to the broadcaster’s chat room. PostClipAsync(PostClipArgs) Creates a clip from the broadcaster’s stream. PostCodeStatusAsync(CodeStatusArgs) Redeems one or more redemption codes. PostCommercialAsync(PostCommercialBody) Starts a commercial on the specified channel. PostEnforcementStatusAsync(PostEnforcementStatusArgs, PostEnforcementStatusBody) Checks whether AutoMod would flag the specified message for review. PostEventSubscriptionAsync(PostEventSubscriptionBody) Creates an EventSub subscription. PostModeratorAsync(ManageModeratorArgs) Adds a moderator to the broadcaster’s chat room. PostPollAsync(PutPollBody) Creates a poll that viewers in the broadcaster’s channel can vote on. PostPredictionAsync(PostPredictionBody) Creates a Channel Points Prediction. PostRaidAsync(PostRaidArgs) Raid another channel by sending the broadcaster’s viewers to the targeted channel. PostRewardsAsync(PostRewardArgs, PostRewardBody) Creates a custom reward in the broadcaster’s channel. PostSegmentAsync(PostSegmentArgs, PostSegmentBody) Adds a single or recurring broadcast to the broadcaster’s streaming schedule. PostShoutoutAsync(PostShoutoutArgs) Sends a shoutout to the specified broadcaster. PostVipAsync(ManageVipArgs) Adds the specified user as a VIP in the broadcaster’s channel. PostWhisperAsync(PostWhisperArgs, PostWhisperBody) Sends a whisper message to the specified user. PutAutomodSettingsAsync(AutomodSettingsArgs, PutAutomodSettingsBody) Updates the broadcaster’s AutoMod settings. PutBlockAsync(PutBlockArgs) Blocks the specified user from interacting with or having contact with the broadcaster. PutExtensionsAsync(ExtensionMap) Updates an installed extension’s information. PutShieldModeAsync(PutShieldModeArgs, PutShieldModeBody) Activates or deactivates the broadcaster’s Shield Mode. PutUserAsync(PutUserArgs) Updates the specified user’s information. PutUserChatColor(PutUserChatColorArgs) Updates the color used for the user's name in chat. RefreshTokenAsync() Refresh the token for the authorized user. RevokeTokenAsync() Revoke the currently authorized user's token. ValidateAsync() Get an app identity using the provided app credentials. ValidateAsync(string, string) Get information relating to a user access token"
  },
  "api/AuxLabs.SimpleTwitch.Rest.TwitchRestApiConfig.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.TwitchRestApiConfig.html",
    "title": "Class TwitchRestApiConfig | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class TwitchRestApiConfig Inheritance object TwitchRestApiConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class TwitchRestApiConfig Properties Name Description ClientId ClientSecret ShouldAutoRefresh Should the client attempt to auto refresh tokens."
  },
  "api/AuxLabs.SimpleTwitch.Rest.TwitchRestException.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.TwitchRestException.html",
    "title": "Class TwitchRestException | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class TwitchRestException Inheritance object System.Exception TwitchException TwitchRestException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class TwitchRestException : TwitchException, ISerializable Constructors Name Description TwitchRestException(HttpStatusCode, int?, string) Properties Name Description Code HttpCode Reason"
  },
  "api/AuxLabs.SimpleTwitch.Rest.User.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.User.html",
    "title": "Class User | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class User Inheritance object SimpleUser User Implements IUser IEntity<string> Inherited Members SimpleUser.Id SimpleUser.Name SimpleUser.DisplayName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class User : SimpleUser, IUser, IEntity<string> Properties Name Description BroadcasterType User’s broadcaster type CreatedAt Date when the user was created Description User’s channel description Email User’s verified email address OfflineImageUrl URL of the user’s offline image ProfileImageUrl URL of the user’s profile image Type User’s type ViewCount Total number of views of the user’s channel"
  },
  "api/AuxLabs.SimpleTwitch.Rest.UserCondition.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.UserCondition.html",
    "title": "Class UserCondition | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class UserCondition Inheritance object UserCondition Implements IEventCondition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class UserCondition : IEventCondition Constructors Name Description UserCondition() UserCondition(string) Properties Name Description UserId The user ID for the user you want notifications for."
  },
  "api/AuxLabs.SimpleTwitch.Rest.UserIdentity.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.UserIdentity.html",
    "title": "Class UserIdentity | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class UserIdentity Inheritance object AppIdentity UserIdentity Inherited Members AppIdentity.AccessToken AppIdentity.ExpiresInSeconds AppIdentity.TokenType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class UserIdentity : AppIdentity Properties Name Description RefreshToken Scopes UserId UserName"
  },
  "api/AuxLabs.SimpleTwitch.Rest.UserType.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.UserType.html",
    "title": "Enum UserType | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum UserType Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum UserType Fields Name Description Admin GlobalModerator None Staff Extension Methods EnumHelper.GetStringValue<UserType>(UserType)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.Vacation.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Vacation.html",
    "title": "Class Vacation | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Vacation Inheritance object Vacation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Vacation Properties Name Description EndsAt The UTC date and time of when the broadcaster’s vacation ends. StartsAt The UTC date and time of when the broadcaster’s vacation starts."
  },
  "api/AuxLabs.SimpleTwitch.Rest.Video.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.Video.html",
    "title": "Class Video | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class Video Inheritance object Video Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public class Video Properties Name Description CreatedAt The date and time, in UTC, of when the video was created. Description The video’s description. Duration The video’s length in ISO 8601 duration format. Id An ID that identifies the video. Language The ISO 639-1 two-letter language code that the video was broadcast in. MutedSegments The segments that Twitch Audio Recognition muted. PublishedAt The date and time, in UTC, of when the video was published. StreamId The ID of the stream that the video originated from if the video is a Archive. ThumbnailUrl A URL to a thumbnail image of the video. Title The video’s title. Type The video’s type. Url The video’s URL. UserDisplayName The broadcaster’s display name. UserId The ID of the broadcaster that owns the video. UserName The broadcaster’s login name. Viewable The video’s viewable state. Always set to public. ViewCount The number of times that users have watched the video."
  },
  "api/AuxLabs.SimpleTwitch.Rest.VideoOffset.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.VideoOffset.html",
    "title": "Struct VideoOffset | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Struct VideoOffset Inherited Members System.ValueType.Equals(object) System.ValueType.GetHashCode() System.ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public readonly struct VideoOffset Constructors Name Description VideoOffset(int, int) Properties Name Description Duration Offset"
  },
  "api/AuxLabs.SimpleTwitch.Rest.VideoPeriod.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.VideoPeriod.html",
    "title": "Enum VideoPeriod | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum VideoPeriod Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum VideoPeriod Fields Name Description All Day Month Week Extension Methods EnumHelper.GetStringValue<VideoPeriod>(VideoPeriod)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.VideoSort.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.VideoSort.html",
    "title": "Enum VideoSort | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum VideoSort Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum VideoSort Fields Name Description Time Trending Views Extension Methods EnumHelper.GetStringValue<VideoSort>(VideoSort)"
  },
  "api/AuxLabs.SimpleTwitch.Rest.VideoType.html": {
    "href": "api/AuxLabs.SimpleTwitch.Rest.VideoType.html",
    "title": "Enum VideoType | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum VideoType Namespace: AuxLabs.SimpleTwitch.Rest Assembly: AuxLabs.SimpleTwitch.Rest.dll Syntax public enum VideoType Fields Name Description All Archive An on-demand video (VOD) of one of the broadcaster's past streams. Highlight A highlight reel of one of the broadcaster's past streams. Upload A video that the broadcaster uploaded to their video library. Extension Methods EnumHelper.GetStringValue<VideoType>(VideoType)"
  },
  "api/AuxLabs.SimpleTwitch.SubscriptionType.html": {
    "href": "api/AuxLabs.SimpleTwitch.SubscriptionType.html",
    "title": "Enum SubscriptionType | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum SubscriptionType Namespace: AuxLabs.SimpleTwitch Assembly: AuxLabs.SimpleTwitch.dll Syntax public enum SubscriptionType Fields Name Description Prime Tier1 Tier2 Tier3 Extension Methods EnumHelper.GetStringValue<SubscriptionType>(SubscriptionType)"
  },
  "api/AuxLabs.SimpleTwitch.TwitchConstants.html": {
    "href": "api/AuxLabs.SimpleTwitch.TwitchConstants.html",
    "title": "Class TwitchConstants | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class TwitchConstants Inheritance object TwitchConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch Assembly: AuxLabs.SimpleTwitch.dll Syntax public static class TwitchConstants Fields Name Description AnonymousNamePrefix ChatIrcUrl ChatSecureIrcUrl ChatSecureWebSocketUrl ChatWebSocketUrl EmoteUrl EventSubUrl GlobalRatelimitBucket PubSubUrl RestApiUrl RestIdentityApiUrl"
  },
  "api/AuxLabs.SimpleTwitch.TwitchException.html": {
    "href": "api/AuxLabs.SimpleTwitch.TwitchException.html",
    "title": "Class TwitchException | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class TwitchException Inheritance object System.Exception TwitchException MissingScopeException TwitchRestException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch Assembly: AuxLabs.SimpleTwitch.dll Syntax public class TwitchException : Exception, ISerializable Constructors Name Description TwitchException() TwitchException(string)"
  },
  "api/AuxLabs.SimpleTwitch.UnexpectedTagsException.html": {
    "href": "api/AuxLabs.SimpleTwitch.UnexpectedTagsException.html",
    "title": "Class UnexpectedTagsException | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class UnexpectedTagsException Inheritance object System.Exception System.SystemException System.Runtime.Serialization.SerializationException UnexpectedTagsException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch Assembly: AuxLabs.SimpleTwitch.dll Syntax public class UnexpectedTagsException : SerializationException, ISerializable Constructors Name Description UnexpectedTagsException(string, IDictionary<string, string>, Dictionary<string, string>) Properties Name Description EventName Expected Provided Unique"
  },
  "api/AuxLabs.SimpleTwitch.WebSocketClosedException.html": {
    "href": "api/AuxLabs.SimpleTwitch.WebSocketClosedException.html",
    "title": "Class WebSocketClosedException | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class WebSocketClosedException Inheritance object System.Exception WebSocketClosedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch Assembly: AuxLabs.SimpleTwitch.dll Syntax public class WebSocketClosedException : Exception, ISerializable Constructors Name Description WebSocketClosedException(int, string) Properties Name Description CloseCode Reason"
  },
  "api/AuxLabs.SimpleTwitch.WebSockets.BaseSocketClient-1.html": {
    "href": "api/AuxLabs.SimpleTwitch.WebSockets.BaseSocketClient-1.html",
    "title": "Class BaseSocketClient<TPayload> | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class BaseSocketClient<TPayload> Inheritance object BaseSocketClient<TPayload> TwitchChatApiClient TwitchEventSubApiClient TwitchPubSubApiClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.WebSockets Assembly: AuxLabs.SimpleTwitch.WebSockets.dll Syntax public abstract class BaseSocketClient<TPayload> where TPayload : IPayload Type Parameters Name Description TPayload Constructors Name Description BaseSocketClient(int, bool) Fields Name Description ReceivedData Properties Name Description Serializer State Methods Name Description Dispose() HandleEvent(TPayload, TaskCompletionSource<bool>) OnUnknownEventReceived(TPayload) Run() Run(string) RunAsync() RunAsync(string) Send(TPayload) SendHeartbeat() SendHeartbeatAck() SendIdentify() Stop() StopAsync() Events Name Description Connected DeserializationError Disconnected PayloadReceived PayloadSent UnknownEventReceived"
  },
  "api/AuxLabs.SimpleTwitch.WebSockets.ConnectionState.html": {
    "href": "api/AuxLabs.SimpleTwitch.WebSockets.ConnectionState.html",
    "title": "Enum ConnectionState | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Enum ConnectionState Namespace: AuxLabs.SimpleTwitch.WebSockets Assembly: AuxLabs.SimpleTwitch.WebSockets.dll Syntax public enum ConnectionState Fields Name Description Connected Connecting Disconnected Disconnecting Extension Methods EnumHelper.GetStringValue<ConnectionState>(ConnectionState)"
  },
  "api/AuxLabs.SimpleTwitch.WebSockets.html": {
    "href": "api/AuxLabs.SimpleTwitch.WebSockets.html",
    "title": "Namespace AuxLabs.SimpleTwitch.WebSockets | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Namespace AuxLabs.SimpleTwitch.WebSockets Classes BaseSocketClient<TPayload> JsonSerializer<TPayload> WebSocketClosedException Interfaces IPayload ISerializer<TPayload> Enums ConnectionState"
  },
  "api/AuxLabs.SimpleTwitch.WebSockets.IPayload.html": {
    "href": "api/AuxLabs.SimpleTwitch.WebSockets.IPayload.html",
    "title": "Interface IPayload | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Interface IPayload Namespace: AuxLabs.SimpleTwitch.WebSockets Assembly: AuxLabs.SimpleTwitch.WebSockets.dll Syntax public interface IPayload Properties Name Description IsHelloEvent"
  },
  "api/AuxLabs.SimpleTwitch.WebSockets.ISerializer-1.html": {
    "href": "api/AuxLabs.SimpleTwitch.WebSockets.ISerializer-1.html",
    "title": "Interface ISerializer<TPayload> | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Interface ISerializer<TPayload> Namespace: AuxLabs.SimpleTwitch.WebSockets Assembly: AuxLabs.SimpleTwitch.WebSockets.dll Syntax public interface ISerializer<TPayload> Type Parameters Name Description TPayload Methods Name Description Read(ref ReadOnlySpan<byte>) Write(TPayload)"
  },
  "api/AuxLabs.SimpleTwitch.WebSockets.JsonSerializer-1.html": {
    "href": "api/AuxLabs.SimpleTwitch.WebSockets.JsonSerializer-1.html",
    "title": "Class JsonSerializer<TPayload> | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class JsonSerializer<TPayload> Inheritance object JsonSerializer<TPayload> Implements ISerializer<TPayload> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: AuxLabs.SimpleTwitch.WebSockets Assembly: AuxLabs.SimpleTwitch.WebSockets.dll Syntax public class JsonSerializer<TPayload> : ISerializer<TPayload> Type Parameters Name Description TPayload Methods Name Description Read(ref ReadOnlySpan<byte>) Write(TPayload)"
  },
  "api/AuxLabs.SimpleTwitch.WebSockets.WebSocketClosedException.html": {
    "href": "api/AuxLabs.SimpleTwitch.WebSockets.WebSocketClosedException.html",
    "title": "Class WebSocketClosedException | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Class WebSocketClosedException Inheritance object System.Exception WebSocketClosedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: AuxLabs.SimpleTwitch.WebSockets Assembly: AuxLabs.SimpleTwitch.WebSockets.dll Syntax public class WebSocketClosedException : Exception, ISerializable Constructors Name Description WebSocketClosedException(WebSocketCloseStatus, string) WebSocketClosedException(string, Exception, WebSocketCloseStatus, string) WebSocketClosedException(string, WebSocketCloseStatus, string) Properties Name Description CloseStatus Code Reason"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER | AuxLabs.SimpleTwitch Documentation",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation!"
  },
  "guides/chat/init.html": {
    "href": "guides/chat/init.html",
    "title": "Add your introductions here! | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Add your introductions here!"
  },
  "guides/chat/ratelimits.html": {
    "href": "guides/chat/ratelimits.html",
    "title": "Add your introductions here! | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Add your introductions here!"
  },
  "guides/eventsub/init.html": {
    "href": "guides/eventsub/init.html",
    "title": "Add your introductions here! | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Add your introductions here!"
  },
  "guides/eventsub/ratelimits.html": {
    "href": "guides/eventsub/ratelimits.html",
    "title": "Add your introductions here! | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Add your introductions here!"
  },
  "guides/getting-started.html": {
    "href": "guides/getting-started.html",
    "title": "Add your introductions here! | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Add your introductions here!"
  },
  "guides/pubsub/init.html": {
    "href": "guides/pubsub/init.html",
    "title": "Add your introductions here! | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Add your introductions here!"
  },
  "guides/pubsub/ratelimits.html": {
    "href": "guides/pubsub/ratelimits.html",
    "title": "Add your introductions here! | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Add your introductions here!"
  },
  "guides/rest/init.html": {
    "href": "guides/rest/init.html",
    "title": "Add your introductions here! | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Add your introductions here!"
  },
  "guides/rest/ratelimits.html": {
    "href": "guides/rest/ratelimits.html",
    "title": "Add your introductions here! | AuxLabs.SimpleTwitch Documentation",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "SimpleTwitch | AuxLabs.SimpleTwitch Documentation",
    "keywords": "SimpleTwitch SimpleTwitch is a bare minimum implmentation of the Twitch APIs. It's built in a way that should make it easy to extend and implement your own clients as needed, if needed. An example of such an implementation is AuxLabs.Twitch, the main and intended version of the library for general usage. Builds Release builds will be available through Nuget, and development builds are available publicly through Github Packages. Documentation The API reference, starter tutorials, and other documentation will be available at the documentation site. Samples For examples and sample projects look at the examples repository. Features Rest - [x] Global ratelimit handling - [ ] Unique endpoint ratelimit handling - [x] Check arguments for validity before requests - [x] Scope confirmation before requests - [ ] Automatic token refresh - [x] Ability to implement a custom ratelimiter - [x] Ability to specify a custom rest api url - [ ] All endpoint categories progress - [x] 5/5 Identity - [x] 1/1 Ads - [x] 2/2 Analytics - [x] 3/3 Bits - [x] 3/3 Channels - [x] 6/6 Channel Points - [x] 2/2 Charity - [x] 12/12 Chat - [x] 2/2 Clips - [x] 4/4 Entitlements - [ ] 0/12 Extensions - [x] 3/3 EventSub - [x] 2/2 Games - [x] 1/1 Goals - [x] 1/1 Hype Trains - [x] 19/19 Moderation - [x] 3/3 Polls - [x] 3/3 Predictions - [x] 2/2 Raids - [x] 6/6 Schedule - [x] 2/2 Search - [x] 3/3 Music - [x] 5/5 Streams - [x] 2/2 Subscriptions - [x] 2/2 Teams - [x] 9/9 Users - [x] 2/2 Videos - [x] 1/1 Whispers Chat [ ] Ratelimit handling [x] Automatic heartbeat [x] Automatic reconnection [x] Auto-detect unhandled tags [x] Provide a custom irc serializer [x] Connect to a custom websocket chat url [x] Authenticate anonymously [x] Handle all available events [x] Capability Acknowledged [x] Capability Denied [x] Chat Cleared [x] Message Deleted [x] Global User State [x] Notice Received [x] Message Received [x] Room State Received [x] User Notice Received [x] User State Received [x] Whisper Received [x] Channel Joined [x] Channel Left [x] Names Received EventSub [x] Subscribe/Unsubscribe/View subscriptions through Rest client [ ] Ratelimits and Subscription Costs [x] WebSocket client [ ] WebHook client [ ] Automatic heartbeat [x] Automatic reconnection [ ] Handle all available events [ ] Followers [ ] Subscriptions [ ] Bits Cheered [ ] Raids [ ] User Banned [ ] User Unbanned [ ] Moderators [ ] Rewards [ ] Redemptions [ ] Polls [ ] Predictions [ ] Charity Donations [ ] Charity Campaigns [ ] Drops Entitlements [ ] Extension Bits Transactions [ ] Goals [ ] Hype Trains [ ] Shield Mode [ ] Shoutouts [ ] Stream Status [ ] Authorization Granted/Revoked [ ] User Updated PubSub [ ] Ratelimits [ ] Automatic heartbeat [ ] Automatic reconnection [ ] Handle all available events [ ] Bits [ ] Bist Badge Unlocks [ ] Channel Point Redemptions [ ] Channel Subscriptions [ ] Automod Queue [ ] Moderator Actions [ ] Low Trust User Status [ ] Mdoerator Notifications [ ] Whispers"
  }
}