{
  "api/AuxLabs.Twitch.AnalyticType.html": {
    "href": "api/AuxLabs.Twitch.AnalyticType.html",
    "title": "Enum AnalyticType | AuxLabs.Twitch Documentation",
    "keywords": "Enum AnalyticType Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum AnalyticType Extension Methods EnumHelper.GetStringValue<T>(T) Fields None = 0 [EnumMember(Value = \"overview_v2\")] OverviewV2 = 1"
  },
  "api/AuxLabs.Twitch.AnnouncementColor.html": {
    "href": "api/AuxLabs.Twitch.AnnouncementColor.html",
    "title": "Enum AnnouncementColor | AuxLabs.Twitch Documentation",
    "keywords": "Enum AnnouncementColor Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum AnnouncementColor Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"blue\")] Blue = 1 [EnumMember(Value = \"green\")] Green = 2 [EnumMember(Value = \"orange\")] Orange = 3 [EnumMember(Value = \"primary\")] Primary = 0 [EnumMember(Value = \"purple\")] Purple = 4"
  },
  "api/AuxLabs.Twitch.AsyncEnumerableExtensions.Flatten.html": {
    "href": "api/AuxLabs.Twitch.AsyncEnumerableExtensions.Flatten.html",
    "title": "Method Flatten | AuxLabs.Twitch Documentation",
    "keywords": "Method Flatten Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Flatten<T>(IAsyncEnumerable<IEnumerable<T>>) Flattens the specified pages into one IAsyncEnumerable<T>. public static IAsyncEnumerable<T> Flatten<T>(this IAsyncEnumerable<IEnumerable<T>> source) Parameters source IAsyncEnumerable<IEnumerable<T>> Returns IAsyncEnumerable<T> Type Parameters T"
  },
  "api/AuxLabs.Twitch.AsyncEnumerableExtensions.FlattenAsync.html": {
    "href": "api/AuxLabs.Twitch.AsyncEnumerableExtensions.FlattenAsync.html",
    "title": "Method FlattenAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method FlattenAsync Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) Flattens the specified pages into one IEnumerable<T> asynchronously. public static Task<IEnumerable<T>> FlattenAsync<T>(this IAsyncEnumerable<IEnumerable<T>> source) Parameters source IAsyncEnumerable<IEnumerable<T>> Returns Task<IEnumerable<T>> Type Parameters T"
  },
  "api/AuxLabs.Twitch.AsyncEnumerableExtensions.html": {
    "href": "api/AuxLabs.Twitch.AsyncEnumerableExtensions.html",
    "title": "Class AsyncEnumerableExtensions | AuxLabs.Twitch Documentation",
    "keywords": "Class AsyncEnumerableExtensions Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll An extension class for squashing IAsyncEnumerable<T>. public static class AsyncEnumerableExtensions Inheritance object AsyncEnumerableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This set of extension methods will squash an IAsyncEnumerable<T> into a single IEnumerable<T>. This is often associated with requests that has a set limit when requesting. Methods Flatten<T>(IAsyncEnumerable<IEnumerable<T>>) Flattens the specified pages into one IAsyncEnumerable<T>. FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) Flattens the specified pages into one IEnumerable<T> asynchronously."
  },
  "api/AuxLabs.Twitch.AutomodAction.html": {
    "href": "api/AuxLabs.Twitch.AutomodAction.html",
    "title": "Enum AutomodAction | AuxLabs.Twitch Documentation",
    "keywords": "Enum AutomodAction Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum AutomodAction Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"ALLOW\")] Allow = 1 [EnumMember(Value = \"DENY\")] Deny = 0"
  },
  "api/AuxLabs.Twitch.AutomodFilter.html": {
    "href": "api/AuxLabs.Twitch.AutomodFilter.html",
    "title": "Enum AutomodFilter | AuxLabs.Twitch Documentation",
    "keywords": "Enum AutomodFilter Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum AutomodFilter Extension Methods EnumHelper.GetStringValue<T>(T) Fields Less = 1 Maximum = 4 More = 3 None = 0 Some = 2"
  },
  "api/AuxLabs.Twitch.BitsPeriod.html": {
    "href": "api/AuxLabs.Twitch.BitsPeriod.html",
    "title": "Enum BitsPeriod | AuxLabs.Twitch Documentation",
    "keywords": "Enum BitsPeriod Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum BitsPeriod Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"all\")] All = 0 [EnumMember(Value = \"day\")] Day = 1 [EnumMember(Value = \"month\")] Month = 3 [EnumMember(Value = \"week\")] Week = 2 [EnumMember(Value = \"year\")] Year = 4"
  },
  "api/AuxLabs.Twitch.BlockContext.html": {
    "href": "api/AuxLabs.Twitch.BlockContext.html",
    "title": "Enum BlockContext | AuxLabs.Twitch Documentation",
    "keywords": "Enum BlockContext Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum BlockContext Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"chat\")] Chat = 0 [EnumMember(Value = \"whisper\")] Whisper = 1"
  },
  "api/AuxLabs.Twitch.BroadcasterType.html": {
    "href": "api/AuxLabs.Twitch.BroadcasterType.html",
    "title": "Enum BroadcasterType | AuxLabs.Twitch Documentation",
    "keywords": "Enum BroadcasterType Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum BroadcasterType Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"affiliate\")] Affiliate = 2 [EnumMember(Value = \"\")] None = 0 [EnumMember(Value = \"partner\")] Partner = 1"
  },
  "api/AuxLabs.Twitch.BroadcastType.html": {
    "href": "api/AuxLabs.Twitch.BroadcastType.html",
    "title": "Enum BroadcastType | AuxLabs.Twitch Documentation",
    "keywords": "Enum BroadcastType Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum BroadcastType Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"all\")] All = 1 [EnumMember(Value = \"live\")] Live = 2 [EnumMember(Value = \"playlist\")] Playlist = 3 [EnumMember(Value = \"premiere\")] Premiere = 5 [EnumMember(Value = \"rerun\")] Rerun = 6 Unknown = 0 [EnumMember(Value = \"watch_party\")] WatchParty = 4"
  },
  "api/AuxLabs.Twitch.Cacheable-2.DownloadAsync.html": {
    "href": "api/AuxLabs.Twitch.Cacheable-2.DownloadAsync.html",
    "title": "Method DownloadAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DownloadAsync Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll DownloadAsync() public Task<TEntity> DownloadAsync() Returns Task<TEntity>"
  },
  "api/AuxLabs.Twitch.Cacheable-2.GetOrDownloadAsync.html": {
    "href": "api/AuxLabs.Twitch.Cacheable-2.GetOrDownloadAsync.html",
    "title": "Method GetOrDownloadAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetOrDownloadAsync Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll GetOrDownloadAsync() public Task<TEntity> GetOrDownloadAsync() Returns Task<TEntity>"
  },
  "api/AuxLabs.Twitch.Cacheable-2.HasValue.html": {
    "href": "api/AuxLabs.Twitch.Cacheable-2.HasValue.html",
    "title": "Property HasValue | AuxLabs.Twitch Documentation",
    "keywords": "Property HasValue Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll HasValue public readonly bool HasValue { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Cacheable-2.html": {
    "href": "api/AuxLabs.Twitch.Cacheable-2.html",
    "title": "Struct Cacheable<TEntity, TId> | AuxLabs.Twitch Documentation",
    "keywords": "Struct Cacheable<TEntity, TId> Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public struct Cacheable<TEntity, TId> where TEntity : IEntity<TId> where TId : IEquatable<TId> Type Parameters TEntity TId Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties HasValue Id Value Methods DownloadAsync() GetOrDownloadAsync()"
  },
  "api/AuxLabs.Twitch.Cacheable-2.Id.html": {
    "href": "api/AuxLabs.Twitch.Cacheable-2.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Id public readonly TId Id { get; } Property Value TId"
  },
  "api/AuxLabs.Twitch.Cacheable-2.Value.html": {
    "href": "api/AuxLabs.Twitch.Cacheable-2.Value.html",
    "title": "Property Value | AuxLabs.Twitch Documentation",
    "keywords": "Property Value Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Value public readonly TEntity Value { get; } Property Value TEntity"
  },
  "api/AuxLabs.Twitch.CDN.EmoteImageUrl.html": {
    "href": "api/AuxLabs.Twitch.CDN.EmoteImageUrl.html",
    "title": "Property EmoteImageUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property EmoteImageUrl Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll EmoteImageUrl public static string EmoteImageUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.CDN.GetEmoteImageUrl.html": {
    "href": "api/AuxLabs.Twitch.CDN.GetEmoteImageUrl.html",
    "title": "Method GetEmoteImageUrl | AuxLabs.Twitch Documentation",
    "keywords": "Method GetEmoteImageUrl Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll GetEmoteImageUrl(string, EmoteFormat, EmoteTheme, EmoteScale) public static string GetEmoteImageUrl(string emoteId, EmoteFormat format = EmoteFormat.Static, EmoteTheme theme = EmoteTheme.Dark, EmoteScale scale = EmoteScale.Small) Parameters emoteId string format EmoteFormat theme EmoteTheme scale EmoteScale Returns string"
  },
  "api/AuxLabs.Twitch.CDN.GetStreamPreviewImageUrl.html": {
    "href": "api/AuxLabs.Twitch.CDN.GetStreamPreviewImageUrl.html",
    "title": "Method GetStreamPreviewImageUrl | AuxLabs.Twitch Documentation",
    "keywords": "Method GetStreamPreviewImageUrl Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll GetStreamPreviewImageUrl(string, int, int) public static string GetStreamPreviewImageUrl(string userName, int width = 320, int height = 180) Parameters userName string width int height int Returns string"
  },
  "api/AuxLabs.Twitch.CDN.html": {
    "href": "api/AuxLabs.Twitch.CDN.html",
    "title": "Class CDN | AuxLabs.Twitch Documentation",
    "keywords": "Class CDN Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public static class CDN Inheritance object CDN Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EmoteImageUrl StreamPreviewImageUrl Methods GetEmoteImageUrl(string, EmoteFormat, EmoteTheme, EmoteScale) GetStreamPreviewImageUrl(string, int, int)"
  },
  "api/AuxLabs.Twitch.CDN.StreamPreviewImageUrl.html": {
    "href": "api/AuxLabs.Twitch.CDN.StreamPreviewImageUrl.html",
    "title": "Property StreamPreviewImageUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property StreamPreviewImageUrl Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll StreamPreviewImageUrl public static string StreamPreviewImageUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Api.DefaultIrcSerializer.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.DefaultIrcSerializer.-ctor.html",
    "title": "Constructor DefaultIrcSerializer | AuxLabs.Twitch Documentation",
    "keywords": "Constructor DefaultIrcSerializer Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll DefaultIrcSerializer(bool) public DefaultIrcSerializer(bool throwOnMismatchedTags = false) Parameters throwOnMismatchedTags bool"
  },
  "api/AuxLabs.Twitch.Chat.Api.DefaultIrcSerializer.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.DefaultIrcSerializer.html",
    "title": "Class DefaultIrcSerializer | AuxLabs.Twitch Documentation",
    "keywords": "Class DefaultIrcSerializer Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll public sealed class DefaultIrcSerializer : ISerializer<IrcPayload> Inheritance object DefaultIrcSerializer Implements ISerializer<IrcPayload> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DefaultIrcSerializer(bool) Methods Read(ref ReadOnlySpan<byte>) Write(IrcPayload)"
  },
  "api/AuxLabs.Twitch.Chat.Api.DefaultIrcSerializer.Read.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.DefaultIrcSerializer.Read.html",
    "title": "Method Read | AuxLabs.Twitch Documentation",
    "keywords": "Method Read Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll Read(ref ReadOnlySpan<byte>) public IrcPayload Read(ref ReadOnlySpan<byte> data) Parameters data ReadOnlySpan<byte> Returns IrcPayload"
  },
  "api/AuxLabs.Twitch.Chat.Api.DefaultIrcSerializer.Write.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.DefaultIrcSerializer.Write.html",
    "title": "Method Write | AuxLabs.Twitch Documentation",
    "keywords": "Method Write Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll Write(IrcPayload) public ReadOnlyMemory<byte> Write(IrcPayload msg) Parameters msg IrcPayload Returns ReadOnlyMemory<byte>"
  },
  "api/AuxLabs.Twitch.Chat.Api.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.html",
    "title": "Namespace AuxLabs.Twitch.Chat.Api | AuxLabs.Twitch Documentation",
    "keywords": "Namespace AuxLabs.Twitch.Chat.Api Classes DefaultIrcSerializer IrcPayload TwitchChatApiClient TwitchChatApiConfig TwitchChatException Structs IrcPrefix Enums IrcCommand IrcTokenType"
  },
  "api/AuxLabs.Twitch.Chat.Api.IrcCommand.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.IrcCommand.html",
    "title": "Enum IrcCommand | AuxLabs.Twitch Documentation",
    "keywords": "Enum IrcCommand Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll public enum IrcCommand Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"CAP * ACK\")] CapabilityAcknowledge = 15 [EnumMember(Value = \"CAP * NAK\")] CapabilityDenied = 16 [EnumMember(Value = \"CAP REQ\")] CapabilityRequest = 20 [EnumMember(Value = \"CLEARCHAT\")] ClearChat = 1 [EnumMember(Value = \"CLEARMSG\")] ClearMessage = 2 [EnumMember(Value = \"GLOBALUSERSTATE\")] GlobalUserState = 14 [EnumMember(Value = \"JOIN\")] Join = 21 [EnumMember(Value = \"PRIVMSG\")] Message = 3 [EnumMember(Value = \"NAMES\")] Names = 6 [EnumMember(Value = \"366\")] NamesEnd = 8 [EnumMember(Value = \"353\")] NamesList = 7 [EnumMember(Value = \"NICK\")] Nickname = 19 [EnumMember(Value = \"NOTICE\")] Notice = 9 [EnumMember(Value = \"PART\")] Part = 22 [EnumMember(Value = \"PASS\")] Password = 18 [EnumMember(Value = \"PING\")] Ping = 17 [EnumMember(Value = \"PONG\")] Pong = 5 [EnumMember(Value = \"RECONNECT\")] Reconnect = 10 [EnumMember(Value = \"ROOMSTATE\")] RoomState = 11 [EnumMember(Value = \"003\")] RPL_Created = 25 [EnumMember(Value = \"372\")] RPL_Motd = 28 [EnumMember(Value = \"376\")] RPL_MotdEnd = 29 [EnumMember(Value = \"375\")] RPL_MotdStart = 27 [EnumMember(Value = \"004\")] RPL_MyInfo = 26 [EnumMember(Value = \"001\")] RPL_Welcome = 23 [EnumMember(Value = \"002\")] RPL_YourHost = 24 Unknown = 0 [EnumMember(Value = \"USERNOTICE\")] UserNotice = 12 [EnumMember(Value = \"USERSTATE\")] UserState = 13 [EnumMember(Value = \"WHISPER\")] Whisper = 4"
  },
  "api/AuxLabs.Twitch.Chat.Api.IrcPayload.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.IrcPayload.-ctor.html",
    "title": "Constructor IrcPayload | AuxLabs.Twitch Documentation",
    "keywords": "Constructor IrcPayload Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll IrcPayload() public IrcPayload() IrcPayload(IrcCommand, params string[]) public IrcPayload(IrcCommand ircCommand, params string[] parameters) Parameters ircCommand IrcCommand parameters string[] IrcPayload(string, IrcCommand, params string[]) public IrcPayload(string prefix, IrcCommand ircCommand, params string[] parameters) Parameters prefix string ircCommand IrcCommand parameters string[]"
  },
  "api/AuxLabs.Twitch.Chat.Api.IrcPayload.Command.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.IrcPayload.Command.html",
    "title": "Property Command | AuxLabs.Twitch Documentation",
    "keywords": "Property Command Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll Command public IrcCommand Command { get; set; } Property Value IrcCommand"
  },
  "api/AuxLabs.Twitch.Chat.Api.IrcPayload.CommandRaw.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.IrcPayload.CommandRaw.html",
    "title": "Property CommandRaw | AuxLabs.Twitch Documentation",
    "keywords": "Property CommandRaw Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll CommandRaw public string CommandRaw { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Api.IrcPayload.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.IrcPayload.html",
    "title": "Class IrcPayload | AuxLabs.Twitch Documentation",
    "keywords": "Class IrcPayload Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll public class IrcPayload : IPayload Inheritance object IrcPayload Implements IPayload Derived CapabilityRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors IrcPayload() IrcPayload(IrcCommand, params string[]) IrcPayload(string, IrcCommand, params string[]) Properties Command CommandRaw IsHelloEvent Parameters Prefix Tags TagsTypeSelector UserNoticeTypeSelector Methods ToString()"
  },
  "api/AuxLabs.Twitch.Chat.Api.IrcPayload.IsHelloEvent.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.IrcPayload.IsHelloEvent.html",
    "title": "Property IsHelloEvent | AuxLabs.Twitch Documentation",
    "keywords": "Property IsHelloEvent Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll IsHelloEvent public bool IsHelloEvent { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Api.IrcPayload.Parameters.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.IrcPayload.Parameters.html",
    "title": "Property Parameters | AuxLabs.Twitch Documentation",
    "keywords": "Property Parameters Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll Parameters public IReadOnlyCollection<string> Parameters { get; set; } Property Value IReadOnlyCollection<string>"
  },
  "api/AuxLabs.Twitch.Chat.Api.IrcPayload.Prefix.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.IrcPayload.Prefix.html",
    "title": "Property Prefix | AuxLabs.Twitch Documentation",
    "keywords": "Property Prefix Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll Prefix public IrcPrefix? Prefix { get; set; } Property Value IrcPrefix?"
  },
  "api/AuxLabs.Twitch.Chat.Api.IrcPayload.Tags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.IrcPayload.Tags.html",
    "title": "Property Tags | AuxLabs.Twitch Documentation",
    "keywords": "Property Tags Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll Tags public BaseTags Tags { get; set; } Property Value BaseTags"
  },
  "api/AuxLabs.Twitch.Chat.Api.IrcPayload.TagsTypeSelector.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.IrcPayload.TagsTypeSelector.html",
    "title": "Property TagsTypeSelector | AuxLabs.Twitch Documentation",
    "keywords": "Property TagsTypeSelector Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll TagsTypeSelector public static Dictionary<IrcCommand, Type> TagsTypeSelector { get; } Property Value Dictionary<IrcCommand, Type>"
  },
  "api/AuxLabs.Twitch.Chat.Api.IrcPayload.ToString.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.IrcPayload.ToString.html",
    "title": "Method ToString | AuxLabs.Twitch Documentation",
    "keywords": "Method ToString Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll ToString() public override string ToString() Returns string"
  },
  "api/AuxLabs.Twitch.Chat.Api.IrcPayload.UserNoticeTypeSelector.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.IrcPayload.UserNoticeTypeSelector.html",
    "title": "Property UserNoticeTypeSelector | AuxLabs.Twitch Documentation",
    "keywords": "Property UserNoticeTypeSelector Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll UserNoticeTypeSelector public static Dictionary<UserNoticeType, Type> UserNoticeTypeSelector { get; } Property Value Dictionary<UserNoticeType, Type>"
  },
  "api/AuxLabs.Twitch.Chat.Api.IrcPrefix.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.IrcPrefix.-ctor.html",
    "title": "Constructor IrcPrefix | AuxLabs.Twitch Documentation",
    "keywords": "Constructor IrcPrefix Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll IrcPrefix(string) public IrcPrefix(string prefix) Parameters prefix string"
  },
  "api/AuxLabs.Twitch.Chat.Api.IrcPrefix.Host.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.IrcPrefix.Host.html",
    "title": "Property Host | AuxLabs.Twitch Documentation",
    "keywords": "Property Host Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll Host public readonly string Host { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Api.IrcPrefix.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.IrcPrefix.html",
    "title": "Struct IrcPrefix | AuxLabs.Twitch Documentation",
    "keywords": "Struct IrcPrefix Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll public struct IrcPrefix Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors IrcPrefix(string) Properties Host Nickname Username Methods ToString()"
  },
  "api/AuxLabs.Twitch.Chat.Api.IrcPrefix.Nickname.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.IrcPrefix.Nickname.html",
    "title": "Property Nickname | AuxLabs.Twitch Documentation",
    "keywords": "Property Nickname Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll Nickname public readonly string Nickname { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Api.IrcPrefix.ToString.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.IrcPrefix.ToString.html",
    "title": "Method ToString | AuxLabs.Twitch Documentation",
    "keywords": "Method ToString Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll ToString() public override string ToString() Returns string"
  },
  "api/AuxLabs.Twitch.Chat.Api.IrcPrefix.Username.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.IrcPrefix.Username.html",
    "title": "Property Username | AuxLabs.Twitch Documentation",
    "keywords": "Property Username Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll Username public readonly string Username { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Api.IrcTokenType.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.IrcTokenType.html",
    "title": "Enum IrcTokenType | AuxLabs.Twitch Documentation",
    "keywords": "Enum IrcTokenType Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll public enum IrcTokenType Extension Methods EnumHelper.GetStringValue<T>(T) Fields ChannelIndicator = 12 CommandEnd = 10 None = 0 ParameterIndicator = 13 PrefixEnd = 9 PrefixHostIndicator = 8 PrefixIndicator = 6 PrefixUsernameIndicator = 7 Remainder = 14 ServerIndicator = 11 TagEnd = 5 TagEscapedSpace = 4 TagIndicator = 1 TagKeyValueEnd = 3 TagKeyValueSeparator = 2"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.-ctor.html",
    "title": "Constructor TwitchChatApiClient | AuxLabs.Twitch Documentation",
    "keywords": "Constructor TwitchChatApiClient Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll TwitchChatApiClient(TwitchChatApiConfig) public TwitchChatApiClient(TwitchChatApiConfig config = null) Parameters config TwitchChatApiConfig TwitchChatApiClient(string, TwitchChatApiConfig) public TwitchChatApiClient(string url, TwitchChatApiConfig config = null) Parameters url string config TwitchChatApiConfig"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.CapabilityAcknowledged.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.CapabilityAcknowledged.html",
    "title": "Event CapabilityAcknowledged | AuxLabs.Twitch Documentation",
    "keywords": "Event CapabilityAcknowledged Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll Triggered after successful authentication. public event Action<IReadOnlyCollection<string>> CapabilityAcknowledged Returns Action<IReadOnlyCollection<string>>"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.CapabilityDenied.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.CapabilityDenied.html",
    "title": "Event CapabilityDenied | AuxLabs.Twitch Documentation",
    "keywords": "Event CapabilityDenied Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll Triggered when authenticating with invalid capabilities public event Action<IReadOnlyCollection<string>> CapabilityDenied Returns Action<IReadOnlyCollection<string>>"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.ChannelJoined.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.ChannelJoined.html",
    "title": "Event ChannelJoined | AuxLabs.Twitch Documentation",
    "keywords": "Event ChannelJoined Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll Triggered when a user joins a channel. public event Action<MembershipEventArgs> ChannelJoined Returns Action<MembershipEventArgs>"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.ChannelLeft.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.ChannelLeft.html",
    "title": "Event ChannelLeft | AuxLabs.Twitch Documentation",
    "keywords": "Event ChannelLeft Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll Triggered when a user leaves a channel. public event Action<MembershipEventArgs> ChannelLeft Returns Action<MembershipEventArgs>"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.ChatCleared.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.ChatCleared.html",
    "title": "Event ChatCleared | AuxLabs.Twitch Documentation",
    "keywords": "Event ChatCleared Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll Triggered when someone removes all messages from the channel or from a specified user. public event Action<ClearChatEventArgs> ChatCleared Returns Action<ClearChatEventArgs>"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.CommandsRequested.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.CommandsRequested.html",
    "title": "Field CommandsRequested | AuxLabs.Twitch Documentation",
    "keywords": "Field CommandsRequested Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll public readonly bool CommandsRequested Returns bool"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.Connected.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.Connected.html",
    "title": "Event Connected | AuxLabs.Twitch Documentation",
    "keywords": "Event Connected Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll The client has successfully made a connection to the server. public event Action Connected Returns Action"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.Disconnected.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.Disconnected.html",
    "title": "Event Disconnected | AuxLabs.Twitch Documentation",
    "keywords": "Event Disconnected Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll The client was forcibly disconnected from the server. public event Action<Exception> Disconnected Returns Action<Exception>"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.Dispose.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.Dispose.html",
    "title": "Method Dispose | AuxLabs.Twitch Documentation",
    "keywords": "Method Dispose Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.GlobalUserStateReceived.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.GlobalUserStateReceived.html",
    "title": "Event GlobalUserStateReceived | AuxLabs.Twitch Documentation",
    "keywords": "Event GlobalUserStateReceived Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll Triggered after authenticated with the server. Indicates the authenticated user's chat settings. public event Action<GlobalUserStateTags> GlobalUserStateReceived Returns Action<GlobalUserStateTags>"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.html",
    "title": "Class TwitchChatApiClient | AuxLabs.Twitch Documentation",
    "keywords": "Class TwitchChatApiClient Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll public class TwitchChatApiClient : IDisposable Inheritance object TwitchChatApiClient Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TwitchChatApiClient(TwitchChatApiConfig) TwitchChatApiClient(string, TwitchChatApiConfig) Fields CommandsRequested TagsRequested ThrowOnUnhandledTags ThrowOnUnknownEvent UseVerifiedRateLimits Properties IsAnonymous State Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Dispose(bool) Run() RunAsync() SendJoin(params string[]) Join a channel by name. SendMessage(string, string, string) Send a message to a channel. SendPart(params string[]) Leave a channel by name. WithIdentity(string, string) Events CapabilityAcknowledged Triggered after successful authentication. CapabilityDenied Triggered when authenticating with invalid capabilities ChannelJoined Triggered when a user joins a channel. ChannelLeft Triggered when a user leaves a channel. ChatCleared Triggered when someone removes all messages from the channel or from a specified user. Connected The client has successfully made a connection to the server. Disconnected The client was forcibly disconnected from the server. GlobalUserStateReceived Triggered after authenticated with the server. Indicates the authenticated user's chat settings. MessageCleared Triggered when someone removes a single message from the chat room. MessageReceived Triggered when a message is received in a channel. NamesReceived Triggered after joining a channel, lists current active chatters. NoticeReceived Triggered to indicate the outcome of an action. Reconnect Triggered when the server needs to terminate the connection. RoomStateReceived Triggered when you join a channel or when the channel’s chat settings change. Indicates the chat's current settings. UnknownEventReceived An unhandled irc command was received. UserNoticeReceived Triggered when events relating to a user in a channel occur. e.g. subscriptions, gifts, raids... UserStateReceived Triggered when the bot joins a channel. Indicates the authenticated user's state in said channel. WhisperReceived Triggered when a whisper is received."
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.IsAnonymous.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.IsAnonymous.html",
    "title": "Property IsAnonymous | AuxLabs.Twitch Documentation",
    "keywords": "Property IsAnonymous Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll IsAnonymous public bool IsAnonymous { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.MessageCleared.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.MessageCleared.html",
    "title": "Event MessageCleared | AuxLabs.Twitch Documentation",
    "keywords": "Event MessageCleared Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll Triggered when someone removes a single message from the chat room. public event Action<ClearMessageEventArgs> MessageCleared Returns Action<ClearMessageEventArgs>"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.MessageReceived.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.MessageReceived.html",
    "title": "Event MessageReceived | AuxLabs.Twitch Documentation",
    "keywords": "Event MessageReceived Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll Triggered when a message is received in a channel. public event Action<MessageEventArgs> MessageReceived Returns Action<MessageEventArgs>"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.NamesReceived.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.NamesReceived.html",
    "title": "Event NamesReceived | AuxLabs.Twitch Documentation",
    "keywords": "Event NamesReceived Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll Triggered after joining a channel, lists current active chatters. public event Action<NamesEventArgs> NamesReceived Returns Action<NamesEventArgs>"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.NoticeReceived.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.NoticeReceived.html",
    "title": "Event NoticeReceived | AuxLabs.Twitch Documentation",
    "keywords": "Event NoticeReceived Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll Triggered to indicate the outcome of an action. public event Action<NoticeEventArgs> NoticeReceived Returns Action<NoticeEventArgs>"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.Reconnect.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.Reconnect.html",
    "title": "Event Reconnect | AuxLabs.Twitch Documentation",
    "keywords": "Event Reconnect Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll Triggered when the server needs to terminate the connection. public event Action Reconnect Returns Action"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.RoomStateReceived.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.RoomStateReceived.html",
    "title": "Event RoomStateReceived | AuxLabs.Twitch Documentation",
    "keywords": "Event RoomStateReceived Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll Triggered when you join a channel or when the channel’s chat settings change. Indicates the chat's current settings. public event Action<RoomStateEventArgs> RoomStateReceived Returns Action<RoomStateEventArgs>"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.Run.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.Run.html",
    "title": "Method Run | AuxLabs.Twitch Documentation",
    "keywords": "Method Run Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll Run() public void Run()"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.RunAsync.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.RunAsync.html",
    "title": "Method RunAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method RunAsync Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll RunAsync() public Task RunAsync() Returns Task"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.SendJoin.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.SendJoin.html",
    "title": "Method SendJoin | AuxLabs.Twitch Documentation",
    "keywords": "Method SendJoin Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll SendJoin(params string[]) Join a channel by name. public void SendJoin(params string[] channelNames) Parameters channelNames string[] Remarks Max channels per request is 20 or 2000 for verified accounts."
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.SendMessage.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.SendMessage.html",
    "title": "Method SendMessage | AuxLabs.Twitch Documentation",
    "keywords": "Method SendMessage Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll SendMessage(string, string, string) Send a message to a channel. public void SendMessage(string channelName, string message, string replyMessageId = null) Parameters channelName string message string replyMessageId string"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.SendPart.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.SendPart.html",
    "title": "Method SendPart | AuxLabs.Twitch Documentation",
    "keywords": "Method SendPart Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll SendPart(params string[]) Leave a channel by name. public void SendPart(params string[] channelNames) Parameters channelNames string[] Remarks Max channels per request is 20 or 2000 for verified accounts."
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.State.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.State.html",
    "title": "Property State | AuxLabs.Twitch Documentation",
    "keywords": "Property State Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll State public ConnectionState State { get; } Property Value ConnectionState"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.TagsRequested.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.TagsRequested.html",
    "title": "Field TagsRequested | AuxLabs.Twitch Documentation",
    "keywords": "Field TagsRequested Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll public readonly bool TagsRequested Returns bool"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.ThrowOnUnhandledTags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.ThrowOnUnhandledTags.html",
    "title": "Field ThrowOnUnhandledTags | AuxLabs.Twitch Documentation",
    "keywords": "Field ThrowOnUnhandledTags Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll public readonly bool ThrowOnUnhandledTags Returns bool"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.ThrowOnUnknownEvent.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.ThrowOnUnknownEvent.html",
    "title": "Field ThrowOnUnknownEvent | AuxLabs.Twitch Documentation",
    "keywords": "Field ThrowOnUnknownEvent Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll public readonly bool ThrowOnUnknownEvent Returns bool"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.UnknownEventReceived.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.UnknownEventReceived.html",
    "title": "Event UnknownEventReceived | AuxLabs.Twitch Documentation",
    "keywords": "Event UnknownEventReceived Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll An unhandled irc command was received. public event Action<IrcPayload> UnknownEventReceived Returns Action<IrcPayload>"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.UserNoticeReceived.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.UserNoticeReceived.html",
    "title": "Event UserNoticeReceived | AuxLabs.Twitch Documentation",
    "keywords": "Event UserNoticeReceived Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll Triggered when events relating to a user in a channel occur. e.g. subscriptions, gifts, raids... public event Action<UserNoticeEventArgs> UserNoticeReceived Returns Action<UserNoticeEventArgs>"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.UserStateReceived.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.UserStateReceived.html",
    "title": "Event UserStateReceived | AuxLabs.Twitch Documentation",
    "keywords": "Event UserStateReceived Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll Triggered when the bot joins a channel. Indicates the authenticated user's state in said channel. public event Action<UserStateEventArgs> UserStateReceived Returns Action<UserStateEventArgs>"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.UseVerifiedRateLimits.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.UseVerifiedRateLimits.html",
    "title": "Field UseVerifiedRateLimits | AuxLabs.Twitch Documentation",
    "keywords": "Field UseVerifiedRateLimits Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll public readonly bool UseVerifiedRateLimits Returns bool"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.WhisperReceived.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.WhisperReceived.html",
    "title": "Event WhisperReceived | AuxLabs.Twitch Documentation",
    "keywords": "Event WhisperReceived Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll Triggered when a whisper is received. public event Action<WhisperEventArgs> WhisperReceived Returns Action<WhisperEventArgs>"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.WithIdentity.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiClient.WithIdentity.html",
    "title": "Method WithIdentity | AuxLabs.Twitch Documentation",
    "keywords": "Method WithIdentity Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll WithIdentity(string, string) public TwitchChatApiClient WithIdentity(string username, string token) Parameters username string token string Returns TwitchChatApiClient"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiConfig.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiConfig.html",
    "title": "Class TwitchChatApiConfig | AuxLabs.Twitch Documentation",
    "keywords": "Class TwitchChatApiConfig Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll public class TwitchChatApiConfig Inheritance object TwitchChatApiConfig Derived TwitchChatConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IrcSerializer Specify a custom serializer for chat irc messages. RequestCommands Lets your bot send messages that include Twitch chat commands and receive Twitch-specific messages. RequestTags Adds additional metadata to the command and membership messages. ThrowOnUnhandledTags Should an exception be raised if an event provides unhandled tags. ThrowOnUnknownEvent Should an exception be raised if an unhandled event is received from twitch. UseVerifiedRateLimits Should the client handle ratelimits as a verified account."
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiConfig.IrcSerializer.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiConfig.IrcSerializer.html",
    "title": "Property IrcSerializer | AuxLabs.Twitch Documentation",
    "keywords": "Property IrcSerializer Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll IrcSerializer Specify a custom serializer for chat irc messages. public ISerializer<IrcPayload> IrcSerializer { get; set; } Property Value ISerializer<IrcPayload>"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiConfig.RequestCommands.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiConfig.RequestCommands.html",
    "title": "Property RequestCommands | AuxLabs.Twitch Documentation",
    "keywords": "Property RequestCommands Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll RequestCommands Lets your bot send messages that include Twitch chat commands and receive Twitch-specific messages. public bool RequestCommands { get; set; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiConfig.RequestTags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiConfig.RequestTags.html",
    "title": "Property RequestTags | AuxLabs.Twitch Documentation",
    "keywords": "Property RequestTags Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll RequestTags Adds additional metadata to the command and membership messages. public bool RequestTags { get; set; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiConfig.ThrowOnUnhandledTags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiConfig.ThrowOnUnhandledTags.html",
    "title": "Property ThrowOnUnhandledTags | AuxLabs.Twitch Documentation",
    "keywords": "Property ThrowOnUnhandledTags Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll ThrowOnUnhandledTags Should an exception be raised if an event provides unhandled tags. public bool ThrowOnUnhandledTags { get; set; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiConfig.ThrowOnUnknownEvent.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiConfig.ThrowOnUnknownEvent.html",
    "title": "Property ThrowOnUnknownEvent | AuxLabs.Twitch Documentation",
    "keywords": "Property ThrowOnUnknownEvent Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll ThrowOnUnknownEvent Should an exception be raised if an unhandled event is received from twitch. public bool ThrowOnUnknownEvent { get; set; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiConfig.UseVerifiedRateLimits.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatApiConfig.UseVerifiedRateLimits.html",
    "title": "Property UseVerifiedRateLimits | AuxLabs.Twitch Documentation",
    "keywords": "Property UseVerifiedRateLimits Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll UseVerifiedRateLimits Should the client handle ratelimits as a verified account. public bool UseVerifiedRateLimits { get; set; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatException.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatException.-ctor.html",
    "title": "Constructor TwitchChatException | AuxLabs.Twitch Documentation",
    "keywords": "Constructor TwitchChatException Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll TwitchChatException() public TwitchChatException() TwitchChatException(string) public TwitchChatException(string message) Parameters message string TwitchChatException(NoticeEventArgs) public TwitchChatException(NoticeEventArgs args) Parameters args NoticeEventArgs"
  },
  "api/AuxLabs.Twitch.Chat.Api.TwitchChatException.html": {
    "href": "api/AuxLabs.Twitch.Chat.Api.TwitchChatException.html",
    "title": "Class TwitchChatException | AuxLabs.Twitch Documentation",
    "keywords": "Class TwitchChatException Namespace AuxLabs.Twitch.Chat.Api Assembly AuxLabs.Twitch.Chat.Api.dll public class TwitchChatException : TwitchException, ISerializable Inheritance object Exception TwitchException TwitchChatException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TwitchChatException() TwitchChatException(NoticeEventArgs) TwitchChatException(string)"
  },
  "api/AuxLabs.Twitch.Chat.Badge.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Chat.Badge.-ctor.html",
    "title": "Constructor Badge | AuxLabs.Twitch Documentation",
    "keywords": "Constructor Badge Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll Badge(string, string) public Badge(string name, string version = \"1\") Parameters name string version string"
  },
  "api/AuxLabs.Twitch.Chat.Badge.html": {
    "href": "api/AuxLabs.Twitch.Chat.Badge.html",
    "title": "Struct Badge | AuxLabs.Twitch Documentation",
    "keywords": "Struct Badge Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll public readonly struct Badge Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Badge(string, string) Properties Name The badge's name. Version Information relating to the badge. Methods Parse(string, out Badge) ToString() TryParseMany(string, out IReadOnlyCollection<Badge>)"
  },
  "api/AuxLabs.Twitch.Chat.Badge.Name.html": {
    "href": "api/AuxLabs.Twitch.Chat.Badge.Name.html",
    "title": "Property Name | AuxLabs.Twitch Documentation",
    "keywords": "Property Name Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll Name The badge's name. public string Name { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Badge.Parse.html": {
    "href": "api/AuxLabs.Twitch.Chat.Badge.Parse.html",
    "title": "Method Parse | AuxLabs.Twitch Documentation",
    "keywords": "Method Parse Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll Parse(string, out Badge) public static void Parse(string value, out Badge badge) Parameters value string badge Badge"
  },
  "api/AuxLabs.Twitch.Chat.Badge.ToString.html": {
    "href": "api/AuxLabs.Twitch.Chat.Badge.ToString.html",
    "title": "Method ToString | AuxLabs.Twitch Documentation",
    "keywords": "Method ToString Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll ToString() public override string ToString() Returns string"
  },
  "api/AuxLabs.Twitch.Chat.Badge.TryParseMany.html": {
    "href": "api/AuxLabs.Twitch.Chat.Badge.TryParseMany.html",
    "title": "Method TryParseMany | AuxLabs.Twitch Documentation",
    "keywords": "Method TryParseMany Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll TryParseMany(string, out IReadOnlyCollection<Badge>) public static bool TryParseMany(string value, out IReadOnlyCollection<Badge> badges) Parameters value string badges IReadOnlyCollection<Badge> Returns bool"
  },
  "api/AuxLabs.Twitch.Chat.Badge.Version.html": {
    "href": "api/AuxLabs.Twitch.Chat.Badge.Version.html",
    "title": "Property Version | AuxLabs.Twitch Documentation",
    "keywords": "Property Version Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll Version Information relating to the badge. public string Version { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatChannel.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatChannel.html",
    "title": "Class ChatChannel | AuxLabs.Twitch Documentation",
    "keywords": "Class ChatChannel Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll public class ChatChannel : ChatSimpleChannel, IEquatable<ChatEntity<string>>, IEntity<string> Inheritance object ChatEntity<string> ChatSimpleChannel ChatChannel Implements IEquatable<ChatEntity<string>> IEntity<string> Inherited Members ChatSimpleChannel.MyUser ChatSimpleChannel.Name ChatSimpleChannel.ToString() ChatSimpleChannel.GetUser(string) ChatSimpleChannel.GetUserByName(string) ChatSimpleChannel.GetMessage(string) ChatSimpleChannel.GetMessages(int) ChatSimpleChannel.SendMessageAsync(string) ChatEntity<string>.Id ChatEntity<string>.Equals(ChatEntity<string>) ChatEntity<string>.Equals(object) ChatEntity<string>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties IsEmoteOnly IsFollowersOnly IsRitualsEnabled IsSlowEnabled IsSubscribersOnly IsUniqueEnabled RequiredFollowTime SlowModeDelay"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatChannel.IsEmoteOnly.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatChannel.IsEmoteOnly.html",
    "title": "Property IsEmoteOnly | AuxLabs.Twitch Documentation",
    "keywords": "Property IsEmoteOnly Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll IsEmoteOnly public bool IsEmoteOnly { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatChannel.IsFollowersOnly.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatChannel.IsFollowersOnly.html",
    "title": "Property IsFollowersOnly | AuxLabs.Twitch Documentation",
    "keywords": "Property IsFollowersOnly Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll IsFollowersOnly public bool IsFollowersOnly { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatChannel.IsRitualsEnabled.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatChannel.IsRitualsEnabled.html",
    "title": "Property IsRitualsEnabled | AuxLabs.Twitch Documentation",
    "keywords": "Property IsRitualsEnabled Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll IsRitualsEnabled public bool IsRitualsEnabled { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatChannel.IsSlowEnabled.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatChannel.IsSlowEnabled.html",
    "title": "Property IsSlowEnabled | AuxLabs.Twitch Documentation",
    "keywords": "Property IsSlowEnabled Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll IsSlowEnabled public bool IsSlowEnabled { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatChannel.IsSubscribersOnly.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatChannel.IsSubscribersOnly.html",
    "title": "Property IsSubscribersOnly | AuxLabs.Twitch Documentation",
    "keywords": "Property IsSubscribersOnly Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll IsSubscribersOnly public bool IsSubscribersOnly { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatChannel.IsUniqueEnabled.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatChannel.IsUniqueEnabled.html",
    "title": "Property IsUniqueEnabled | AuxLabs.Twitch Documentation",
    "keywords": "Property IsUniqueEnabled Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll IsUniqueEnabled public bool IsUniqueEnabled { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatChannel.RequiredFollowTime.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatChannel.RequiredFollowTime.html",
    "title": "Property RequiredFollowTime | AuxLabs.Twitch Documentation",
    "keywords": "Property RequiredFollowTime Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll RequiredFollowTime public TimeSpan? RequiredFollowTime { get; } Property Value TimeSpan?"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatChannel.SlowModeDelay.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatChannel.SlowModeDelay.html",
    "title": "Property SlowModeDelay | AuxLabs.Twitch Documentation",
    "keywords": "Property SlowModeDelay Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll SlowModeDelay public TimeSpan? SlowModeDelay { get; } Property Value TimeSpan?"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatChannelSelfUser.EmoteSets.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatChannelSelfUser.EmoteSets.html",
    "title": "Property EmoteSets | AuxLabs.Twitch Documentation",
    "keywords": "Property EmoteSets Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll EmoteSets public IReadOnlyCollection<string> EmoteSets { get; } Property Value IReadOnlyCollection<string>"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatChannelSelfUser.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatChannelSelfUser.html",
    "title": "Class ChatChannelSelfUser | AuxLabs.Twitch Documentation",
    "keywords": "Class ChatChannelSelfUser Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll Data for the currently authenticated user in a specific channel public class ChatChannelSelfUser : ChatChannelUser, IEquatable<ChatEntity<string>>, IChatUser, ISimpleUser, IPartialUser, IEntity<string> Inheritance object ChatEntity<string> ChatSimpleUser ChatUser ChatChannelUser ChatChannelSelfUser Implements IEquatable<ChatEntity<string>> IChatUser ISimpleUser IPartialUser IEntity<string> Inherited Members ChatChannelUser.Channel ChatChannelUser.IsModerator ChatChannelUser.IsSubscriber ChatChannelUser.IsVIP ChatUser.UserType ChatUser.Badges ChatUser.BadgeInfo ChatUser.IsTurbo ChatSimpleUser.DisplayName ChatSimpleUser.Name ChatSimpleUser.Color ChatSimpleUser.ToString() ChatSimpleUser.GetUserAsync() ChatSimpleUser.GetChannelAsync() ChatEntity<string>.Id ChatEntity<string>.Equals(ChatEntity<string>) ChatEntity<string>.Equals(object) ChatEntity<string>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties EmoteSets"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatChannelUser.Channel.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatChannelUser.Channel.html",
    "title": "Property Channel | AuxLabs.Twitch Documentation",
    "keywords": "Property Channel Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll Channel public ChatSimpleChannel Channel { get; } Property Value ChatSimpleChannel"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatChannelUser.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatChannelUser.html",
    "title": "Class ChatChannelUser | AuxLabs.Twitch Documentation",
    "keywords": "Class ChatChannelUser Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll Data for a user specific to certain channels public class ChatChannelUser : ChatUser, IEquatable<ChatEntity<string>>, IChatUser, ISimpleUser, IPartialUser, IEntity<string> Inheritance object ChatEntity<string> ChatSimpleUser ChatUser ChatChannelUser Implements IEquatable<ChatEntity<string>> IChatUser ISimpleUser IPartialUser IEntity<string> Derived ChatChannelSelfUser Inherited Members ChatUser.UserType ChatUser.Badges ChatUser.BadgeInfo ChatUser.IsTurbo ChatSimpleUser.DisplayName ChatSimpleUser.Name ChatSimpleUser.Color ChatSimpleUser.ToString() ChatSimpleUser.GetUserAsync() ChatSimpleUser.GetChannelAsync() ChatEntity<string>.Id ChatEntity<string>.Equals(ChatEntity<string>) ChatEntity<string>.Equals(object) ChatEntity<string>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Channel IsModerator IsSubscriber IsVIP"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatChannelUser.IsModerator.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatChannelUser.IsModerator.html",
    "title": "Property IsModerator | AuxLabs.Twitch Documentation",
    "keywords": "Property IsModerator Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll IsModerator public bool IsModerator { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatChannelUser.IsSubscriber.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatChannelUser.IsSubscriber.html",
    "title": "Property IsSubscriber | AuxLabs.Twitch Documentation",
    "keywords": "Property IsSubscriber Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll IsSubscriber public bool IsSubscriber { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatChannelUser.IsVIP.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatChannelUser.IsVIP.html",
    "title": "Property IsVIP | AuxLabs.Twitch Documentation",
    "keywords": "Property IsVIP Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll IsVIP public bool? IsVIP { get; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatEntity-1.Equals.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatEntity-1.Equals.html",
    "title": "Method Equals | AuxLabs.Twitch Documentation",
    "keywords": "Method Equals Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll Equals(ChatEntity<T>) public bool Equals(ChatEntity<T> other) Parameters other ChatEntity<T> Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatEntity-1.GetHashCode.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatEntity-1.GetHashCode.html",
    "title": "Method GetHashCode | AuxLabs.Twitch Documentation",
    "keywords": "Method GetHashCode Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll GetHashCode() public override int GetHashCode() Returns int"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatEntity-1.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatEntity-1.html",
    "title": "Class ChatEntity<T> | AuxLabs.Twitch Documentation",
    "keywords": "Class ChatEntity<T> Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll public abstract class ChatEntity<T> : IEquatable<ChatEntity<T>>, IEntity<T> Type Parameters T Inheritance object ChatEntity<T> Implements IEquatable<ChatEntity<T>> IEntity<T> Derived ChatMessageReply ChatSimpleChannel ChatSimpleMessage ChatSimpleUser ChatWhisperMessage Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Id An ID that uniquely identifies the entity. Methods Equals(ChatEntity<T>) Equals(object) GetHashCode() ToString()"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatEntity-1.Id.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatEntity-1.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll Id An ID that uniquely identifies the entity. public T Id { get; } Property Value T"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatEntity-1.ToString.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatEntity-1.ToString.html",
    "title": "Method ToString | AuxLabs.Twitch Documentation",
    "keywords": "Method ToString Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll ToString() public override string ToString() Returns string"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatMessage.BitsAmount.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatMessage.BitsAmount.html",
    "title": "Property BitsAmount | AuxLabs.Twitch Documentation",
    "keywords": "Property BitsAmount Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll BitsAmount public int BitsAmount { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatMessage.Emotes.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatMessage.Emotes.html",
    "title": "Property Emotes | AuxLabs.Twitch Documentation",
    "keywords": "Property Emotes Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll Emotes public IReadOnlyCollection<EmotePosition> Emotes { get; } Property Value IReadOnlyCollection<EmotePosition>"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatMessage.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatMessage.html",
    "title": "Class ChatMessage | AuxLabs.Twitch Documentation",
    "keywords": "Class ChatMessage Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll public class ChatMessage : ChatSimpleMessage, IEquatable<ChatEntity<string>>, IEntity<string> Inheritance object ChatEntity<string> ChatSimpleMessage ChatMessage Implements IEquatable<ChatEntity<string>> IEntity<string> Derived ChatSubscriptionMessage Inherited Members ChatSimpleMessage.Channel ChatSimpleMessage.Author ChatSimpleMessage.Timestamp ChatSimpleMessage.Content ChatSimpleMessage.ToString() ChatEntity<string>.Id ChatEntity<string>.Equals(ChatEntity<string>) ChatEntity<string>.Equals(object) ChatEntity<string>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties BitsAmount Emotes Reply Type"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatMessage.Reply.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatMessage.Reply.html",
    "title": "Property Reply | AuxLabs.Twitch Documentation",
    "keywords": "Property Reply Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll Reply public ChatMessageReply Reply { get; } Property Value ChatMessageReply"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatMessage.Type.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatMessage.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll Type public MessageType Type { get; } Property Value MessageType"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatMessageReply.Author.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatMessageReply.Author.html",
    "title": "Property Author | AuxLabs.Twitch Documentation",
    "keywords": "Property Author Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll Author public ChatSimpleUser Author { get; } Property Value ChatSimpleUser"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatMessageReply.Content.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatMessageReply.Content.html",
    "title": "Property Content | AuxLabs.Twitch Documentation",
    "keywords": "Property Content Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll Content public string Content { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatMessageReply.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatMessageReply.html",
    "title": "Class ChatMessageReply | AuxLabs.Twitch Documentation",
    "keywords": "Class ChatMessageReply Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll public class ChatMessageReply : ChatEntity<string>, IEquatable<ChatEntity<string>>, IEntity<string> Inheritance object ChatEntity<string> ChatMessageReply Implements IEquatable<ChatEntity<string>> IEntity<string> Inherited Members ChatEntity<string>.Id ChatEntity<string>.ToString() ChatEntity<string>.Equals(ChatEntity<string>) ChatEntity<string>.Equals(object) ChatEntity<string>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Author Content"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatRaidUser.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatRaidUser.html",
    "title": "Class ChatRaidUser | AuxLabs.Twitch Documentation",
    "keywords": "Class ChatRaidUser Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll public class ChatRaidUser : ChatSimpleUser, IEquatable<ChatEntity<string>>, IChatUser, ISimpleUser, IPartialUser, IEntity<string> Inheritance object ChatEntity<string> ChatSimpleUser ChatRaidUser Implements IEquatable<ChatEntity<string>> IChatUser ISimpleUser IPartialUser IEntity<string> Inherited Members ChatSimpleUser.DisplayName ChatSimpleUser.Name ChatSimpleUser.Color ChatSimpleUser.ToString() ChatSimpleUser.GetUserAsync() ChatSimpleUser.GetChannelAsync() ChatEntity<string>.Id ChatEntity<string>.Equals(ChatEntity<string>) ChatEntity<string>.Equals(object) ChatEntity<string>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties ProfileImageUrl"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatRaidUser.ProfileImageUrl.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatRaidUser.ProfileImageUrl.html",
    "title": "Property ProfileImageUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property ProfileImageUrl Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll ProfileImageUrl public string ProfileImageUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSelfUser.EmoteSets.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSelfUser.EmoteSets.html",
    "title": "Property EmoteSets | AuxLabs.Twitch Documentation",
    "keywords": "Property EmoteSets Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll EmoteSets public IReadOnlyCollection<string> EmoteSets { get; } Property Value IReadOnlyCollection<string>"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSelfUser.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSelfUser.html",
    "title": "Class ChatSelfUser | AuxLabs.Twitch Documentation",
    "keywords": "Class ChatSelfUser Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll Global data for the currently authenticated user public class ChatSelfUser : ChatUser, IEquatable<ChatEntity<string>>, IChatUser, ISimpleUser, IPartialUser, IEntity<string> Inheritance object ChatEntity<string> ChatSimpleUser ChatUser ChatSelfUser Implements IEquatable<ChatEntity<string>> IChatUser ISimpleUser IPartialUser IEntity<string> Inherited Members ChatUser.UserType ChatUser.Badges ChatUser.BadgeInfo ChatUser.IsTurbo ChatSimpleUser.DisplayName ChatSimpleUser.Name ChatSimpleUser.Color ChatSimpleUser.ToString() ChatSimpleUser.GetUserAsync() ChatSimpleUser.GetChannelAsync() ChatEntity<string>.Id ChatEntity<string>.Equals(ChatEntity<string>) ChatEntity<string>.Equals(object) ChatEntity<string>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties EmoteSets"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleChannel.GetMessage.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleChannel.GetMessage.html",
    "title": "Method GetMessage | AuxLabs.Twitch Documentation",
    "keywords": "Method GetMessage Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll GetMessage(string) public ChatMessage GetMessage(string id) Parameters id string Returns ChatMessage"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleChannel.GetMessages.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleChannel.GetMessages.html",
    "title": "Method GetMessages | AuxLabs.Twitch Documentation",
    "keywords": "Method GetMessages Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll GetMessages(int) public IReadOnlyCollection<ChatMessage> GetMessages(int count) Parameters count int Returns IReadOnlyCollection<ChatMessage>"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleChannel.GetUser.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleChannel.GetUser.html",
    "title": "Method GetUser | AuxLabs.Twitch Documentation",
    "keywords": "Method GetUser Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll GetUser(string) public ChatSimpleUser GetUser(string id) Parameters id string Returns ChatSimpleUser"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleChannel.GetUserByName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleChannel.GetUserByName.html",
    "title": "Method GetUserByName | AuxLabs.Twitch Documentation",
    "keywords": "Method GetUserByName Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll GetUserByName(string) public ChatSimpleUser GetUserByName(string name) Parameters name string Returns ChatSimpleUser"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleChannel.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleChannel.html",
    "title": "Class ChatSimpleChannel | AuxLabs.Twitch Documentation",
    "keywords": "Class ChatSimpleChannel Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll public class ChatSimpleChannel : ChatEntity<string>, IEquatable<ChatEntity<string>>, IEntity<string> Inheritance object ChatEntity<string> ChatSimpleChannel Implements IEquatable<ChatEntity<string>> IEntity<string> Derived ChatChannel Inherited Members ChatEntity<string>.Id ChatEntity<string>.Equals(ChatEntity<string>) ChatEntity<string>.Equals(object) ChatEntity<string>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties MyUser The currently authorized user Name The channel's name Methods GetMessage(string) GetMessages(int) GetUser(string) GetUserByName(string) SendMessageAsync(string) ToString()"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleChannel.MyUser.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleChannel.MyUser.html",
    "title": "Property MyUser | AuxLabs.Twitch Documentation",
    "keywords": "Property MyUser Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll MyUser The currently authorized user public ChatChannelSelfUser MyUser { get; } Property Value ChatChannelSelfUser"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleChannel.Name.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleChannel.Name.html",
    "title": "Property Name | AuxLabs.Twitch Documentation",
    "keywords": "Property Name Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll Name The channel's name public string Name { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleChannel.SendMessageAsync.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleChannel.SendMessageAsync.html",
    "title": "Method SendMessageAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method SendMessageAsync Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll SendMessageAsync(string) public Task SendMessageAsync(string message) Parameters message string Returns Task"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleChannel.ToString.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleChannel.ToString.html",
    "title": "Method ToString | AuxLabs.Twitch Documentation",
    "keywords": "Method ToString Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll ToString() public override string ToString() Returns string"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleMessage.Author.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleMessage.Author.html",
    "title": "Property Author | AuxLabs.Twitch Documentation",
    "keywords": "Property Author Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll Author public ChatSimpleUser Author { get; } Property Value ChatSimpleUser"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleMessage.Channel.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleMessage.Channel.html",
    "title": "Property Channel | AuxLabs.Twitch Documentation",
    "keywords": "Property Channel Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll Channel public ChatSimpleChannel Channel { get; } Property Value ChatSimpleChannel"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleMessage.Content.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleMessage.Content.html",
    "title": "Property Content | AuxLabs.Twitch Documentation",
    "keywords": "Property Content Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll Content public string Content { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleMessage.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleMessage.html",
    "title": "Class ChatSimpleMessage | AuxLabs.Twitch Documentation",
    "keywords": "Class ChatSimpleMessage Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll public class ChatSimpleMessage : ChatEntity<string>, IEquatable<ChatEntity<string>>, IEntity<string> Inheritance object ChatEntity<string> ChatSimpleMessage Implements IEquatable<ChatEntity<string>> IEntity<string> Derived ChatMessage Inherited Members ChatEntity<string>.Id ChatEntity<string>.Equals(ChatEntity<string>) ChatEntity<string>.Equals(object) ChatEntity<string>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Author Channel Content Timestamp Methods ToString()"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleMessage.Timestamp.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleMessage.Timestamp.html",
    "title": "Property Timestamp | AuxLabs.Twitch Documentation",
    "keywords": "Property Timestamp Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll Timestamp public DateTimeOffset Timestamp { get; } Property Value DateTimeOffset"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleMessage.ToString.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleMessage.ToString.html",
    "title": "Method ToString | AuxLabs.Twitch Documentation",
    "keywords": "Method ToString Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll ToString() public override string ToString() Returns string"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleUser.Color.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleUser.Color.html",
    "title": "Property Color | AuxLabs.Twitch Documentation",
    "keywords": "Property Color Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll Color public Color? Color { get; } Property Value Color?"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleUser.DisplayName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleUser.DisplayName.html",
    "title": "Property DisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property DisplayName Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll DisplayName public string DisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleUser.GetChannelAsync.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleUser.GetChannelAsync.html",
    "title": "Method GetChannelAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetChannelAsync Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll GetChannelAsync() Get the channel associated with this user. public Task<RestChannel> GetChannelAsync() Returns Task<RestChannel>"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleUser.GetUserAsync.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleUser.GetUserAsync.html",
    "title": "Method GetUserAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetUserAsync Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll GetUserAsync() Get more info about this user. public Task<RestUser> GetUserAsync() Returns Task<RestUser>"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleUser.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleUser.html",
    "title": "Class ChatSimpleUser | AuxLabs.Twitch Documentation",
    "keywords": "Class ChatSimpleUser Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll public class ChatSimpleUser : ChatEntity<string>, IEquatable<ChatEntity<string>>, IChatUser, ISimpleUser, IPartialUser, IEntity<string> Inheritance object ChatEntity<string> ChatSimpleUser Implements IEquatable<ChatEntity<string>> IChatUser ISimpleUser IPartialUser IEntity<string> Derived ChatRaidUser ChatUser Inherited Members ChatEntity<string>.Id ChatEntity<string>.Equals(ChatEntity<string>) ChatEntity<string>.Equals(object) ChatEntity<string>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Color DisplayName Name Methods GetChannelAsync() Get the channel associated with this user. GetUserAsync() Get more info about this user. ToString()"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleUser.Name.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleUser.Name.html",
    "title": "Property Name | AuxLabs.Twitch Documentation",
    "keywords": "Property Name Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll Name public string Name { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleUser.ToString.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSimpleUser.ToString.html",
    "title": "Method ToString | AuxLabs.Twitch Documentation",
    "keywords": "Method ToString Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll ToString() public override string ToString() Returns string"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSubscriptionMessage.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSubscriptionMessage.html",
    "title": "Class ChatSubscriptionMessage | AuxLabs.Twitch Documentation",
    "keywords": "Class ChatSubscriptionMessage Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll public class ChatSubscriptionMessage : ChatMessage, IEquatable<ChatEntity<string>>, IEntity<string> Inheritance object ChatEntity<string> ChatSimpleMessage ChatMessage ChatSubscriptionMessage Implements IEquatable<ChatEntity<string>> IEntity<string> Inherited Members ChatMessage.Reply ChatMessage.Type ChatMessage.BitsAmount ChatMessage.Emotes ChatSimpleMessage.Channel ChatSimpleMessage.Author ChatSimpleMessage.Timestamp ChatSimpleMessage.Content ChatSimpleMessage.ToString() ChatEntity<string>.Id ChatEntity<string>.Equals(ChatEntity<string>) ChatEntity<string>.Equals(object) ChatEntity<string>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties IsStreakShared Indicates whether the user wants their streaks shared. StreakMonths The number of consecutive months the user has subscribed. SubscriptionName The display name of the subscription plan. This may be a default name or one created by the channel owner SubscriptionType The type of subscription plan being used. TotalMonths The total number of months the user has subscribed."
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSubscriptionMessage.IsStreakShared.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSubscriptionMessage.IsStreakShared.html",
    "title": "Property IsStreakShared | AuxLabs.Twitch Documentation",
    "keywords": "Property IsStreakShared Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll IsStreakShared Indicates whether the user wants their streaks shared. public bool IsStreakShared { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSubscriptionMessage.StreakMonths.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSubscriptionMessage.StreakMonths.html",
    "title": "Property StreakMonths | AuxLabs.Twitch Documentation",
    "keywords": "Property StreakMonths Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll StreakMonths The number of consecutive months the user has subscribed. public int StreakMonths { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSubscriptionMessage.SubscriptionName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSubscriptionMessage.SubscriptionName.html",
    "title": "Property SubscriptionName | AuxLabs.Twitch Documentation",
    "keywords": "Property SubscriptionName Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll SubscriptionName The display name of the subscription plan. This may be a default name or one created by the channel owner public string SubscriptionName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSubscriptionMessage.SubscriptionType.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSubscriptionMessage.SubscriptionType.html",
    "title": "Property SubscriptionType | AuxLabs.Twitch Documentation",
    "keywords": "Property SubscriptionType Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll SubscriptionType The type of subscription plan being used. public SubscriptionType SubscriptionType { get; } Property Value SubscriptionType"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatSubscriptionMessage.TotalMonths.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatSubscriptionMessage.TotalMonths.html",
    "title": "Property TotalMonths | AuxLabs.Twitch Documentation",
    "keywords": "Property TotalMonths Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll TotalMonths The total number of months the user has subscribed. public int TotalMonths { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatUser.BadgeInfo.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatUser.BadgeInfo.html",
    "title": "Property BadgeInfo | AuxLabs.Twitch Documentation",
    "keywords": "Property BadgeInfo Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll BadgeInfo public string BadgeInfo { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatUser.Badges.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatUser.Badges.html",
    "title": "Property Badges | AuxLabs.Twitch Documentation",
    "keywords": "Property Badges Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll Badges public IReadOnlyCollection<Badge> Badges { get; } Property Value IReadOnlyCollection<Badge>"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatUser.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatUser.html",
    "title": "Class ChatUser | AuxLabs.Twitch Documentation",
    "keywords": "Class ChatUser Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll public class ChatUser : ChatSimpleUser, IEquatable<ChatEntity<string>>, IChatUser, ISimpleUser, IPartialUser, IEntity<string> Inheritance object ChatEntity<string> ChatSimpleUser ChatUser Implements IEquatable<ChatEntity<string>> IChatUser ISimpleUser IPartialUser IEntity<string> Derived ChatChannelUser ChatSelfUser Inherited Members ChatSimpleUser.DisplayName ChatSimpleUser.Name ChatSimpleUser.Color ChatSimpleUser.ToString() ChatSimpleUser.GetUserAsync() ChatSimpleUser.GetChannelAsync() ChatEntity<string>.Id ChatEntity<string>.Equals(ChatEntity<string>) ChatEntity<string>.Equals(object) ChatEntity<string>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties BadgeInfo Badges IsTurbo UserType"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatUser.IsTurbo.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatUser.IsTurbo.html",
    "title": "Property IsTurbo | AuxLabs.Twitch Documentation",
    "keywords": "Property IsTurbo Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll IsTurbo public bool IsTurbo { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatUser.UserType.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatUser.UserType.html",
    "title": "Property UserType | AuxLabs.Twitch Documentation",
    "keywords": "Property UserType Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll UserType public UserType UserType { get; } Property Value UserType"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatWhisperMessage.Action.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatWhisperMessage.Action.html",
    "title": "Property Action | AuxLabs.Twitch Documentation",
    "keywords": "Property Action Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll Action public string Action { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatWhisperMessage.Author.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatWhisperMessage.Author.html",
    "title": "Property Author | AuxLabs.Twitch Documentation",
    "keywords": "Property Author Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll Author public ChatUser Author { get; } Property Value ChatUser"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatWhisperMessage.Content.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatWhisperMessage.Content.html",
    "title": "Property Content | AuxLabs.Twitch Documentation",
    "keywords": "Property Content Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll Content public string Content { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatWhisperMessage.Emotes.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatWhisperMessage.Emotes.html",
    "title": "Property Emotes | AuxLabs.Twitch Documentation",
    "keywords": "Property Emotes Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll Emotes public IReadOnlyCollection<EmotePosition> Emotes { get; } Property Value IReadOnlyCollection<EmotePosition>"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatWhisperMessage.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatWhisperMessage.html",
    "title": "Class ChatWhisperMessage | AuxLabs.Twitch Documentation",
    "keywords": "Class ChatWhisperMessage Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll public class ChatWhisperMessage : ChatEntity<string>, IEquatable<ChatEntity<string>>, IEntity<string> Inheritance object ChatEntity<string> ChatWhisperMessage Implements IEquatable<ChatEntity<string>> IEntity<string> Inherited Members ChatEntity<string>.Id ChatEntity<string>.ToString() ChatEntity<string>.Equals(ChatEntity<string>) ChatEntity<string>.Equals(object) ChatEntity<string>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Action Author Content Emotes ThreadId"
  },
  "api/AuxLabs.Twitch.Chat.Entities.ChatWhisperMessage.ThreadId.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.ChatWhisperMessage.ThreadId.html",
    "title": "Property ThreadId | AuxLabs.Twitch Documentation",
    "keywords": "Property ThreadId Namespace AuxLabs.Twitch.Chat.Entities Assembly AuxLabs.Twitch.Chat.dll ThreadId public string ThreadId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Entities.html": {
    "href": "api/AuxLabs.Twitch.Chat.Entities.html",
    "title": "Namespace AuxLabs.Twitch.Chat.Entities | AuxLabs.Twitch Documentation",
    "keywords": "Namespace AuxLabs.Twitch.Chat.Entities Classes ChatChannel ChatChannelSelfUser Data for the currently authenticated user in a specific channel ChatChannelUser Data for a user specific to certain channels ChatEntity<T> ChatMessage ChatMessageReply ChatRaidUser ChatSelfUser Global data for the currently authenticated user ChatSimpleChannel ChatSimpleMessage ChatSimpleUser ChatSubscriptionMessage ChatUser ChatWhisperMessage"
  },
  "api/AuxLabs.Twitch.Chat.html": {
    "href": "api/AuxLabs.Twitch.Chat.html",
    "title": "Namespace AuxLabs.Twitch.Chat | AuxLabs.Twitch Documentation",
    "keywords": "Namespace AuxLabs.Twitch.Chat AuxLabs.Twitch.Chat.Api AuxLabs.Twitch.Chat.Entities AuxLabs.Twitch.Chat.Models AuxLabs.Twitch.Chat.Requests Classes TwitchChatClient TwitchChatConfig Structs Badge Interfaces IChatMessage IMessage IUserNoticeMessage IWhisperMessage Enums MessageType NoticeType RitualType UserNoticeType UserType"
  },
  "api/AuxLabs.Twitch.Chat.IChatMessage.BadgeInfo.html": {
    "href": "api/AuxLabs.Twitch.Chat.IChatMessage.BadgeInfo.html",
    "title": "Property BadgeInfo | AuxLabs.Twitch Documentation",
    "keywords": "Property BadgeInfo Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll BadgeInfo string BadgeInfo { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.IChatMessage.BitsAmount.html": {
    "href": "api/AuxLabs.Twitch.Chat.IChatMessage.BitsAmount.html",
    "title": "Property BitsAmount | AuxLabs.Twitch Documentation",
    "keywords": "Property BitsAmount Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll BitsAmount int BitsAmount { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Chat.IChatMessage.ChannelId.html": {
    "href": "api/AuxLabs.Twitch.Chat.IChatMessage.ChannelId.html",
    "title": "Property ChannelId | AuxLabs.Twitch Documentation",
    "keywords": "Property ChannelId Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll ChannelId string ChannelId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.IChatMessage.ChannelName.html": {
    "href": "api/AuxLabs.Twitch.Chat.IChatMessage.ChannelName.html",
    "title": "Property ChannelName | AuxLabs.Twitch Documentation",
    "keywords": "Property ChannelName Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll ChannelName string ChannelName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.IChatMessage.CustomRewardId.html": {
    "href": "api/AuxLabs.Twitch.Chat.IChatMessage.CustomRewardId.html",
    "title": "Property CustomRewardId | AuxLabs.Twitch Documentation",
    "keywords": "Property CustomRewardId Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll CustomRewardId string CustomRewardId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.IChatMessage.html": {
    "href": "api/AuxLabs.Twitch.Chat.IChatMessage.html",
    "title": "Interface IChatMessage | AuxLabs.Twitch Documentation",
    "keywords": "Interface IChatMessage Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll public interface IChatMessage : IMessage, IEntity<string> Inherited Members IMessage.AuthorId IMessage.AuthorName IMessage.AuthorDisplayName IMessage.AuthorType IMessage.AuthorColor IMessage.Content IMessage.Action IMessage.IsTurbo IMessage.Badges IMessage.Emotes IEntity<string>.Id Properties BadgeInfo BitsAmount ChannelId ChannelName CustomRewardId IsEmoteOnly IsFirstMessage IsModerator IsSubscriber IsVip MessageType Nonce ReplyAuthorDisplayName ReplyAuthorId ReplyAuthorName ReplyMessageContent ReplyMessageId Timestamp"
  },
  "api/AuxLabs.Twitch.Chat.IChatMessage.IsEmoteOnly.html": {
    "href": "api/AuxLabs.Twitch.Chat.IChatMessage.IsEmoteOnly.html",
    "title": "Property IsEmoteOnly | AuxLabs.Twitch Documentation",
    "keywords": "Property IsEmoteOnly Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll IsEmoteOnly bool IsEmoteOnly { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.IChatMessage.IsFirstMessage.html": {
    "href": "api/AuxLabs.Twitch.Chat.IChatMessage.IsFirstMessage.html",
    "title": "Property IsFirstMessage | AuxLabs.Twitch Documentation",
    "keywords": "Property IsFirstMessage Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll IsFirstMessage bool IsFirstMessage { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.IChatMessage.IsModerator.html": {
    "href": "api/AuxLabs.Twitch.Chat.IChatMessage.IsModerator.html",
    "title": "Property IsModerator | AuxLabs.Twitch Documentation",
    "keywords": "Property IsModerator Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll IsModerator bool IsModerator { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.IChatMessage.IsSubscriber.html": {
    "href": "api/AuxLabs.Twitch.Chat.IChatMessage.IsSubscriber.html",
    "title": "Property IsSubscriber | AuxLabs.Twitch Documentation",
    "keywords": "Property IsSubscriber Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll IsSubscriber bool IsSubscriber { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.IChatMessage.IsVip.html": {
    "href": "api/AuxLabs.Twitch.Chat.IChatMessage.IsVip.html",
    "title": "Property IsVip | AuxLabs.Twitch Documentation",
    "keywords": "Property IsVip Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll IsVip bool IsVip { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.IChatMessage.MessageType.html": {
    "href": "api/AuxLabs.Twitch.Chat.IChatMessage.MessageType.html",
    "title": "Property MessageType | AuxLabs.Twitch Documentation",
    "keywords": "Property MessageType Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll MessageType MessageType MessageType { get; } Property Value MessageType"
  },
  "api/AuxLabs.Twitch.Chat.IChatMessage.Nonce.html": {
    "href": "api/AuxLabs.Twitch.Chat.IChatMessage.Nonce.html",
    "title": "Property Nonce | AuxLabs.Twitch Documentation",
    "keywords": "Property Nonce Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll Nonce string Nonce { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.IChatMessage.ReplyAuthorDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Chat.IChatMessage.ReplyAuthorDisplayName.html",
    "title": "Property ReplyAuthorDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property ReplyAuthorDisplayName Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll ReplyAuthorDisplayName string ReplyAuthorDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.IChatMessage.ReplyAuthorId.html": {
    "href": "api/AuxLabs.Twitch.Chat.IChatMessage.ReplyAuthorId.html",
    "title": "Property ReplyAuthorId | AuxLabs.Twitch Documentation",
    "keywords": "Property ReplyAuthorId Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll ReplyAuthorId string ReplyAuthorId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.IChatMessage.ReplyAuthorName.html": {
    "href": "api/AuxLabs.Twitch.Chat.IChatMessage.ReplyAuthorName.html",
    "title": "Property ReplyAuthorName | AuxLabs.Twitch Documentation",
    "keywords": "Property ReplyAuthorName Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll ReplyAuthorName string ReplyAuthorName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.IChatMessage.ReplyMessageContent.html": {
    "href": "api/AuxLabs.Twitch.Chat.IChatMessage.ReplyMessageContent.html",
    "title": "Property ReplyMessageContent | AuxLabs.Twitch Documentation",
    "keywords": "Property ReplyMessageContent Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll ReplyMessageContent string ReplyMessageContent { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.IChatMessage.ReplyMessageId.html": {
    "href": "api/AuxLabs.Twitch.Chat.IChatMessage.ReplyMessageId.html",
    "title": "Property ReplyMessageId | AuxLabs.Twitch Documentation",
    "keywords": "Property ReplyMessageId Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll ReplyMessageId string ReplyMessageId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.IChatMessage.Timestamp.html": {
    "href": "api/AuxLabs.Twitch.Chat.IChatMessage.Timestamp.html",
    "title": "Property Timestamp | AuxLabs.Twitch Documentation",
    "keywords": "Property Timestamp Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll Timestamp DateTimeOffset Timestamp { get; } Property Value DateTimeOffset"
  },
  "api/AuxLabs.Twitch.Chat.IMessage.Action.html": {
    "href": "api/AuxLabs.Twitch.Chat.IMessage.Action.html",
    "title": "Property Action | AuxLabs.Twitch Documentation",
    "keywords": "Property Action Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll Action string Action { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.IMessage.AuthorColor.html": {
    "href": "api/AuxLabs.Twitch.Chat.IMessage.AuthorColor.html",
    "title": "Property AuthorColor | AuxLabs.Twitch Documentation",
    "keywords": "Property AuthorColor Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll AuthorColor Color AuthorColor { get; } Property Value Color"
  },
  "api/AuxLabs.Twitch.Chat.IMessage.AuthorDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Chat.IMessage.AuthorDisplayName.html",
    "title": "Property AuthorDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property AuthorDisplayName Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll AuthorDisplayName string AuthorDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.IMessage.AuthorId.html": {
    "href": "api/AuxLabs.Twitch.Chat.IMessage.AuthorId.html",
    "title": "Property AuthorId | AuxLabs.Twitch Documentation",
    "keywords": "Property AuthorId Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll AuthorId string AuthorId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.IMessage.AuthorName.html": {
    "href": "api/AuxLabs.Twitch.Chat.IMessage.AuthorName.html",
    "title": "Property AuthorName | AuxLabs.Twitch Documentation",
    "keywords": "Property AuthorName Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll AuthorName string AuthorName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.IMessage.AuthorType.html": {
    "href": "api/AuxLabs.Twitch.Chat.IMessage.AuthorType.html",
    "title": "Property AuthorType | AuxLabs.Twitch Documentation",
    "keywords": "Property AuthorType Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll AuthorType UserType AuthorType { get; } Property Value UserType"
  },
  "api/AuxLabs.Twitch.Chat.IMessage.Badges.html": {
    "href": "api/AuxLabs.Twitch.Chat.IMessage.Badges.html",
    "title": "Property Badges | AuxLabs.Twitch Documentation",
    "keywords": "Property Badges Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll Badges IReadOnlyCollection<Badge> Badges { get; } Property Value IReadOnlyCollection<Badge>"
  },
  "api/AuxLabs.Twitch.Chat.IMessage.Content.html": {
    "href": "api/AuxLabs.Twitch.Chat.IMessage.Content.html",
    "title": "Property Content | AuxLabs.Twitch Documentation",
    "keywords": "Property Content Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll Content string Content { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.IMessage.Emotes.html": {
    "href": "api/AuxLabs.Twitch.Chat.IMessage.Emotes.html",
    "title": "Property Emotes | AuxLabs.Twitch Documentation",
    "keywords": "Property Emotes Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll Emotes IReadOnlyCollection<EmotePosition> Emotes { get; } Property Value IReadOnlyCollection<EmotePosition>"
  },
  "api/AuxLabs.Twitch.Chat.IMessage.html": {
    "href": "api/AuxLabs.Twitch.Chat.IMessage.html",
    "title": "Interface IMessage | AuxLabs.Twitch Documentation",
    "keywords": "Interface IMessage Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll public interface IMessage : IEntity<string> Inherited Members IEntity<string>.Id Properties Action AuthorColor AuthorDisplayName AuthorId AuthorName AuthorType Badges Content Emotes IsTurbo"
  },
  "api/AuxLabs.Twitch.Chat.IMessage.IsTurbo.html": {
    "href": "api/AuxLabs.Twitch.Chat.IMessage.IsTurbo.html",
    "title": "Property IsTurbo | AuxLabs.Twitch Documentation",
    "keywords": "Property IsTurbo Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll IsTurbo bool IsTurbo { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.IUserNoticeMessage.html": {
    "href": "api/AuxLabs.Twitch.Chat.IUserNoticeMessage.html",
    "title": "Interface IUserNoticeMessage | AuxLabs.Twitch Documentation",
    "keywords": "Interface IUserNoticeMessage Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll public interface IUserNoticeMessage : IChatMessage, IMessage, IEntity<string> Inherited Members IChatMessage.Timestamp IChatMessage.ChannelId IChatMessage.ChannelName IChatMessage.BadgeInfo IChatMessage.Nonce IChatMessage.CustomRewardId IChatMessage.ReplyMessageId IChatMessage.ReplyMessageContent IChatMessage.ReplyAuthorId IChatMessage.ReplyAuthorName IChatMessage.ReplyAuthorDisplayName IChatMessage.BitsAmount IChatMessage.IsModerator IChatMessage.IsSubscriber IChatMessage.IsVip IChatMessage.IsFirstMessage IChatMessage.IsEmoteOnly IChatMessage.MessageType IMessage.AuthorId IMessage.AuthorName IMessage.AuthorDisplayName IMessage.AuthorType IMessage.AuthorColor IMessage.Content IMessage.Action IMessage.IsTurbo IMessage.Badges IMessage.Emotes IEntity<string>.Id Properties NoticeType SystemMessage"
  },
  "api/AuxLabs.Twitch.Chat.IUserNoticeMessage.NoticeType.html": {
    "href": "api/AuxLabs.Twitch.Chat.IUserNoticeMessage.NoticeType.html",
    "title": "Property NoticeType | AuxLabs.Twitch Documentation",
    "keywords": "Property NoticeType Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll NoticeType UserNoticeType NoticeType { get; } Property Value UserNoticeType"
  },
  "api/AuxLabs.Twitch.Chat.IUserNoticeMessage.SystemMessage.html": {
    "href": "api/AuxLabs.Twitch.Chat.IUserNoticeMessage.SystemMessage.html",
    "title": "Property SystemMessage | AuxLabs.Twitch Documentation",
    "keywords": "Property SystemMessage Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll SystemMessage string SystemMessage { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.IWhisperMessage.html": {
    "href": "api/AuxLabs.Twitch.Chat.IWhisperMessage.html",
    "title": "Interface IWhisperMessage | AuxLabs.Twitch Documentation",
    "keywords": "Interface IWhisperMessage Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll public interface IWhisperMessage : IMessage, IEntity<string> Inherited Members IMessage.AuthorId IMessage.AuthorName IMessage.AuthorDisplayName IMessage.AuthorType IMessage.AuthorColor IMessage.Content IMessage.Action IMessage.IsTurbo IMessage.Badges IMessage.Emotes IEntity<string>.Id Properties ReceiverName ThreadId"
  },
  "api/AuxLabs.Twitch.Chat.IWhisperMessage.ReceiverName.html": {
    "href": "api/AuxLabs.Twitch.Chat.IWhisperMessage.ReceiverName.html",
    "title": "Property ReceiverName | AuxLabs.Twitch Documentation",
    "keywords": "Property ReceiverName Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll ReceiverName string ReceiverName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.IWhisperMessage.ThreadId.html": {
    "href": "api/AuxLabs.Twitch.Chat.IWhisperMessage.ThreadId.html",
    "title": "Property ThreadId | AuxLabs.Twitch Documentation",
    "keywords": "Property ThreadId Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll ThreadId string ThreadId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.MessageType.html": {
    "href": "api/AuxLabs.Twitch.Chat.MessageType.html",
    "title": "Enum MessageType | AuxLabs.Twitch Documentation",
    "keywords": "Enum MessageType Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll public enum MessageType Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"highlighted-message\")] Highlighted = 1 Normal = 0"
  },
  "api/AuxLabs.Twitch.Chat.Models.BaseTags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.BaseTags.html",
    "title": "Class BaseTags | AuxLabs.Twitch Documentation",
    "keywords": "Class BaseTags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public abstract class BaseTags : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap BaseTags Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Derived ClearChatTags ClearMessageTags GlobalUserStateTags MessageTags NoticeTags RoomStateTags SendMessageTags WhisperTags Inherited Members QueryMap.CreateQueryMap() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format."
  },
  "api/AuxLabs.Twitch.Chat.Models.BaseTags.LoadQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.BaseTags.LoadQueryMap.html",
    "title": "Method LoadQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method LoadQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format. public abstract void LoadQueryMap(IReadOnlyDictionary<string, string> map) Parameters map IReadOnlyDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.BitsBadgeTierTags.BitsThreshold.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.BitsBadgeTierTags.BitsThreshold.html",
    "title": "Property BitsThreshold | AuxLabs.Twitch Documentation",
    "keywords": "Property BitsThreshold Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll BitsThreshold The tier of the Bits badge the user just earned. public int BitsThreshold { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Chat.Models.BitsBadgeTierTags.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.BitsBadgeTierTags.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.BitsBadgeTierTags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.BitsBadgeTierTags.html",
    "title": "Class BitsBadgeTierTags | AuxLabs.Twitch Documentation",
    "keywords": "Class BitsBadgeTierTags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class BitsBadgeTierTags : UserNoticeTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap BaseTags MessageTags UserNoticeTags BitsBadgeTierTags Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members UserNoticeTags.NoticeType UserNoticeTags.SystemMessage MessageTags.Timestamp MessageTags.MessageId MessageTags.ChannelId MessageTags.AuthorId MessageTags.AuthorName MessageTags.AuthorDisplayName MessageTags.AuthorType MessageTags.AuthorColor MessageTags.Nonce MessageTags.CustomRewardId MessageTags.ReplyMessageId MessageTags.ReplyMessageContent MessageTags.ReplyAuthorId MessageTags.ReplyAuthorName MessageTags.ReplyAuthorDisplayName MessageTags.BitsAmount MessageTags.IsModerator MessageTags.IsSubscriber MessageTags.IsTurbo MessageTags.IsVIP MessageTags.IsFirstMessage MessageTags.IsEmoteOnly MessageTags.MessageType MessageTags.Badges MessageTags.BadgeInfo MessageTags.Emotes MessageTags.Action object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BitsThreshold The tier of the Bits badge the user just earned. Methods CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format."
  },
  "api/AuxLabs.Twitch.Chat.Models.BitsBadgeTierTags.LoadQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.BitsBadgeTierTags.LoadQueryMap.html",
    "title": "Method LoadQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method LoadQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format. public override void LoadQueryMap(IReadOnlyDictionary<string, string> map) Parameters map IReadOnlyDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.ClearChatEventArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.ClearChatEventArgs.-ctor.html",
    "title": "Constructor ClearChatEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor ClearChatEventArgs Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll ClearChatEventArgs(IReadOnlyCollection<string>) public ClearChatEventArgs(IReadOnlyCollection<string> parameters) Parameters parameters IReadOnlyCollection<string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.ClearChatEventArgs.ChannelName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.ClearChatEventArgs.ChannelName.html",
    "title": "Property ChannelName | AuxLabs.Twitch Documentation",
    "keywords": "Property ChannelName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll ChannelName The channel's name. public string ChannelName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.ClearChatEventArgs.Create.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.ClearChatEventArgs.Create.html",
    "title": "Method Create | AuxLabs.Twitch Documentation",
    "keywords": "Method Create Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Create(IrcPayload) public static ClearChatEventArgs Create(IrcPayload payload) Parameters payload IrcPayload Returns ClearChatEventArgs"
  },
  "api/AuxLabs.Twitch.Chat.Models.ClearChatEventArgs.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.ClearChatEventArgs.html",
    "title": "Class ClearChatEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class ClearChatEventArgs Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class ClearChatEventArgs Inheritance object ClearChatEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ClearChatEventArgs(IReadOnlyCollection<string>) Properties ChannelName The channel's name. Tags The tags for this event, if provided. UserName The user whose messages were cleared from chat. Methods Create(IrcPayload)"
  },
  "api/AuxLabs.Twitch.Chat.Models.ClearChatEventArgs.Tags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.ClearChatEventArgs.Tags.html",
    "title": "Property Tags | AuxLabs.Twitch Documentation",
    "keywords": "Property Tags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Tags The tags for this event, if provided. public ClearChatTags Tags { get; } Property Value ClearChatTags"
  },
  "api/AuxLabs.Twitch.Chat.Models.ClearChatEventArgs.UserName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.ClearChatEventArgs.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll UserName The user whose messages were cleared from chat. public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.ClearChatTags.BanDuration.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.ClearChatTags.BanDuration.html",
    "title": "Property BanDuration | AuxLabs.Twitch Documentation",
    "keywords": "Property BanDuration Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll BanDuration The message includes this tag if the user was put in a timeout. public TimeSpan? BanDuration { get; } Property Value TimeSpan?"
  },
  "api/AuxLabs.Twitch.Chat.Models.ClearChatTags.ChannelId.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.ClearChatTags.ChannelId.html",
    "title": "Property ChannelId | AuxLabs.Twitch Documentation",
    "keywords": "Property ChannelId Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll ChannelId The ID of the channel where the messages were removed from. public string ChannelId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.ClearChatTags.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.ClearChatTags.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.ClearChatTags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.ClearChatTags.html",
    "title": "Class ClearChatTags | AuxLabs.Twitch Documentation",
    "keywords": "Class ClearChatTags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class ClearChatTags : BaseTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap BaseTags ClearChatTags Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BanDuration The message includes this tag if the user was put in a timeout. ChannelId The ID of the channel where the messages were removed from. TargetUserId The ID of the user that was banned or put in a timeout. Timestamp The date and time this event occurred. Methods CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format."
  },
  "api/AuxLabs.Twitch.Chat.Models.ClearChatTags.LoadQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.ClearChatTags.LoadQueryMap.html",
    "title": "Method LoadQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method LoadQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format. public override void LoadQueryMap(IReadOnlyDictionary<string, string> map) Parameters map IReadOnlyDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.ClearChatTags.TargetUserId.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.ClearChatTags.TargetUserId.html",
    "title": "Property TargetUserId | AuxLabs.Twitch Documentation",
    "keywords": "Property TargetUserId Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll TargetUserId The ID of the user that was banned or put in a timeout. public string TargetUserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.ClearChatTags.Timestamp.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.ClearChatTags.Timestamp.html",
    "title": "Property Timestamp | AuxLabs.Twitch Documentation",
    "keywords": "Property Timestamp Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Timestamp The date and time this event occurred. public DateTime Timestamp { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Chat.Models.ClearMessageEventArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.ClearMessageEventArgs.-ctor.html",
    "title": "Constructor ClearMessageEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor ClearMessageEventArgs Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll ClearMessageEventArgs(IReadOnlyCollection<string>) public ClearMessageEventArgs(IReadOnlyCollection<string> parameters) Parameters parameters IReadOnlyCollection<string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.ClearMessageEventArgs.ChannelName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.ClearMessageEventArgs.ChannelName.html",
    "title": "Property ChannelName | AuxLabs.Twitch Documentation",
    "keywords": "Property ChannelName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll ChannelName public string ChannelName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.ClearMessageEventArgs.Create.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.ClearMessageEventArgs.Create.html",
    "title": "Method Create | AuxLabs.Twitch Documentation",
    "keywords": "Method Create Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Create(IrcPayload) public static ClearMessageEventArgs Create(IrcPayload payload) Parameters payload IrcPayload Returns ClearMessageEventArgs"
  },
  "api/AuxLabs.Twitch.Chat.Models.ClearMessageEventArgs.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.ClearMessageEventArgs.html",
    "title": "Class ClearMessageEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class ClearMessageEventArgs Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class ClearMessageEventArgs Inheritance object ClearMessageEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ClearMessageEventArgs(IReadOnlyCollection<string>) Properties ChannelName Message Tags Methods Create(IrcPayload)"
  },
  "api/AuxLabs.Twitch.Chat.Models.ClearMessageEventArgs.Message.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.ClearMessageEventArgs.Message.html",
    "title": "Property Message | AuxLabs.Twitch Documentation",
    "keywords": "Property Message Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Message public string Message { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.ClearMessageEventArgs.Tags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.ClearMessageEventArgs.Tags.html",
    "title": "Property Tags | AuxLabs.Twitch Documentation",
    "keywords": "Property Tags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Tags public ClearMessageTags Tags { get; } Property Value ClearMessageTags"
  },
  "api/AuxLabs.Twitch.Chat.Models.ClearMessageTags.ChannelId.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.ClearMessageTags.ChannelId.html",
    "title": "Property ChannelId | AuxLabs.Twitch Documentation",
    "keywords": "Property ChannelId Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll ChannelId The ID of the channel (chat room) where the message was removed from. public string ChannelId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.ClearMessageTags.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.ClearMessageTags.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.ClearMessageTags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.ClearMessageTags.html",
    "title": "Class ClearMessageTags | AuxLabs.Twitch Documentation",
    "keywords": "Class ClearMessageTags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class ClearMessageTags : BaseTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap BaseTags ClearMessageTags Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId The ID of the channel (chat room) where the message was removed from. TargetMessageId A UUID that identifies the message that was removed. Timestamp The date and time this event occurred. UserName The name of the user who sent the message. Methods CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format."
  },
  "api/AuxLabs.Twitch.Chat.Models.ClearMessageTags.LoadQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.ClearMessageTags.LoadQueryMap.html",
    "title": "Method LoadQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method LoadQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format. public override void LoadQueryMap(IReadOnlyDictionary<string, string> map) Parameters map IReadOnlyDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.ClearMessageTags.TargetMessageId.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.ClearMessageTags.TargetMessageId.html",
    "title": "Property TargetMessageId | AuxLabs.Twitch Documentation",
    "keywords": "Property TargetMessageId Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll TargetMessageId A UUID that identifies the message that was removed. public string TargetMessageId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.ClearMessageTags.Timestamp.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.ClearMessageTags.Timestamp.html",
    "title": "Property Timestamp | AuxLabs.Twitch Documentation",
    "keywords": "Property Timestamp Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Timestamp The date and time this event occurred. public DateTime Timestamp { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Chat.Models.ClearMessageTags.UserName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.ClearMessageTags.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll UserName The name of the user who sent the message. public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.GlobalUserStateTags.BadgeInfo.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.GlobalUserStateTags.BadgeInfo.html",
    "title": "Property BadgeInfo | AuxLabs.Twitch Documentation",
    "keywords": "Property BadgeInfo Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll BadgeInfo Contains metadata related to the chat badges in the badges tag. public string BadgeInfo { get; } Property Value string Remarks Currently, this tag contains metadata only for subscriber badges, to indicate the number of months the user has been a subscriber."
  },
  "api/AuxLabs.Twitch.Chat.Models.GlobalUserStateTags.Badges.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.GlobalUserStateTags.Badges.html",
    "title": "Property Badges | AuxLabs.Twitch Documentation",
    "keywords": "Property Badges Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Badges A collection of badges the user has. public IReadOnlyCollection<Badge> Badges { get; } Property Value IReadOnlyCollection<Badge>"
  },
  "api/AuxLabs.Twitch.Chat.Models.GlobalUserStateTags.Color.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.GlobalUserStateTags.Color.html",
    "title": "Property Color | AuxLabs.Twitch Documentation",
    "keywords": "Property Color Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Color The color of the user’s name in the chat room. public Color Color { get; } Property Value Color"
  },
  "api/AuxLabs.Twitch.Chat.Models.GlobalUserStateTags.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.GlobalUserStateTags.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.GlobalUserStateTags.EmoteSets.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.GlobalUserStateTags.EmoteSets.html",
    "title": "Property EmoteSets | AuxLabs.Twitch Documentation",
    "keywords": "Property EmoteSets Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll EmoteSets A collection of IDs that identify the emote sets that the user has access to. public IReadOnlyCollection<string> EmoteSets { get; } Property Value IReadOnlyCollection<string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.GlobalUserStateTags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.GlobalUserStateTags.html",
    "title": "Class GlobalUserStateTags | AuxLabs.Twitch Documentation",
    "keywords": "Class GlobalUserStateTags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class GlobalUserStateTags : BaseTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap BaseTags GlobalUserStateTags Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Derived UserStateTags Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BadgeInfo Contains metadata related to the chat badges in the badges tag. Badges A collection of badges the user has. Color The color of the user’s name in the chat room. EmoteSets A collection of IDs that identify the emote sets that the user has access to. IsTurbo Indicates whether the user has site-wide commercial free mode enabled. UserDisplayName The user’s display name. UserId The user’s ID. UserType The type of user. Methods CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format."
  },
  "api/AuxLabs.Twitch.Chat.Models.GlobalUserStateTags.IsTurbo.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.GlobalUserStateTags.IsTurbo.html",
    "title": "Property IsTurbo | AuxLabs.Twitch Documentation",
    "keywords": "Property IsTurbo Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll IsTurbo Indicates whether the user has site-wide commercial free mode enabled. public bool IsTurbo { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Models.GlobalUserStateTags.LoadQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.GlobalUserStateTags.LoadQueryMap.html",
    "title": "Method LoadQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method LoadQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format. public override void LoadQueryMap(IReadOnlyDictionary<string, string> map) Parameters map IReadOnlyDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.GlobalUserStateTags.UserDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.GlobalUserStateTags.UserDisplayName.html",
    "title": "Property UserDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserDisplayName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll UserDisplayName The user’s display name. public string UserDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.GlobalUserStateTags.UserId.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.GlobalUserStateTags.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll UserId The user’s ID. public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.GlobalUserStateTags.UserType.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.GlobalUserStateTags.UserType.html",
    "title": "Property UserType | AuxLabs.Twitch Documentation",
    "keywords": "Property UserType Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll UserType The type of user. public UserType UserType { get; } Property Value UserType"
  },
  "api/AuxLabs.Twitch.Chat.Models.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.html",
    "title": "Namespace AuxLabs.Twitch.Chat.Models | AuxLabs.Twitch Documentation",
    "keywords": "Namespace AuxLabs.Twitch.Chat.Models Classes BaseTags BitsBadgeTierTags ClearChatEventArgs ClearChatTags ClearMessageEventArgs ClearMessageTags GlobalUserStateTags MembershipEventArgs MessageEventArgs MessageTags NamesEventArgs NoticeEventArgs NoticeTags RaidTags RitualTags RoomStateEventArgs RoomStateTags SendMessageTags SubscriptionGiftTags SubscriptionGiftUpgradeAnonymousTags SubscriptionGiftUpgradeTags SubscriptionTags UserNoticeEventArgs UserNoticeTags UserStateEventArgs UserStateTags WhisperEventArgs WhisperTags"
  },
  "api/AuxLabs.Twitch.Chat.Models.MembershipEventArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MembershipEventArgs.-ctor.html",
    "title": "Constructor MembershipEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor MembershipEventArgs Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll MembershipEventArgs(IrcPrefix, IReadOnlyCollection<string>) public MembershipEventArgs(IrcPrefix prefix, IReadOnlyCollection<string> parameters) Parameters prefix IrcPrefix parameters IReadOnlyCollection<string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.MembershipEventArgs.ChannelName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MembershipEventArgs.ChannelName.html",
    "title": "Property ChannelName | AuxLabs.Twitch Documentation",
    "keywords": "Property ChannelName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll ChannelName public string ChannelName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.MembershipEventArgs.Create.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MembershipEventArgs.Create.html",
    "title": "Method Create | AuxLabs.Twitch Documentation",
    "keywords": "Method Create Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Create(IrcPayload) public static MembershipEventArgs Create(IrcPayload payload) Parameters payload IrcPayload Returns MembershipEventArgs"
  },
  "api/AuxLabs.Twitch.Chat.Models.MembershipEventArgs.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MembershipEventArgs.html",
    "title": "Class MembershipEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class MembershipEventArgs Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class MembershipEventArgs Inheritance object MembershipEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MembershipEventArgs(IrcPrefix, IReadOnlyCollection<string>) Properties ChannelName UserName Methods Create(IrcPayload)"
  },
  "api/AuxLabs.Twitch.Chat.Models.MembershipEventArgs.UserName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MembershipEventArgs.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll UserName public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageEventArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageEventArgs.-ctor.html",
    "title": "Constructor MessageEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor MessageEventArgs Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll MessageEventArgs(IrcPrefix?, IReadOnlyCollection<string>) public MessageEventArgs(IrcPrefix? prefix, IReadOnlyCollection<string> parameters) Parameters prefix IrcPrefix? parameters IReadOnlyCollection<string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageEventArgs.ChannelName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageEventArgs.ChannelName.html",
    "title": "Property ChannelName | AuxLabs.Twitch Documentation",
    "keywords": "Property ChannelName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll ChannelName public string ChannelName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageEventArgs.ContainsSpecialCharacters.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageEventArgs.ContainsSpecialCharacters.html",
    "title": "Field ContainsSpecialCharacters | AuxLabs.Twitch Documentation",
    "keywords": "Field ContainsSpecialCharacters Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll If special characters are present, emote indices will be incorrect. public readonly bool ContainsSpecialCharacters Returns bool"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageEventArgs.Create.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageEventArgs.Create.html",
    "title": "Method Create | AuxLabs.Twitch Documentation",
    "keywords": "Method Create Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Create(IrcPayload) public static MessageEventArgs Create(IrcPayload payload) Parameters payload IrcPayload Returns MessageEventArgs"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageEventArgs.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageEventArgs.html",
    "title": "Class MessageEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class MessageEventArgs Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class MessageEventArgs : IChatMessage, IMessage, IEntity<string> Inheritance object MessageEventArgs Implements IChatMessage IMessage IEntity<string> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessageEventArgs(IrcPrefix?, IReadOnlyCollection<string>) Fields ContainsSpecialCharacters If special characters are present, emote indices will be incorrect. Properties ChannelName Message Tags UserName Methods Create(IrcPayload)"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageEventArgs.Message.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageEventArgs.Message.html",
    "title": "Property Message | AuxLabs.Twitch Documentation",
    "keywords": "Property Message Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Message public string Message { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageEventArgs.Tags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageEventArgs.Tags.html",
    "title": "Property Tags | AuxLabs.Twitch Documentation",
    "keywords": "Property Tags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Tags public MessageTags Tags { get; } Property Value MessageTags"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageEventArgs.UserName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageEventArgs.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll UserName public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.Action.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.Action.html",
    "title": "Property Action | AuxLabs.Twitch Documentation",
    "keywords": "Property Action Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Action The message value when someone uses the /me chat command public string Action { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.AuthorColor.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.AuthorColor.html",
    "title": "Property AuthorColor | AuxLabs.Twitch Documentation",
    "keywords": "Property AuthorColor Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll AuthorColor The color of the user’s name in the chat room. public Color AuthorColor { get; } Property Value Color"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.AuthorDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.AuthorDisplayName.html",
    "title": "Property AuthorDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property AuthorDisplayName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll AuthorDisplayName The user’s display name. public string AuthorDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.AuthorId.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.AuthorId.html",
    "title": "Property AuthorId | AuxLabs.Twitch Documentation",
    "keywords": "Property AuthorId Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll AuthorId The ID of the user that sent the message. public string AuthorId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.AuthorName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.AuthorName.html",
    "title": "Property AuthorName | AuxLabs.Twitch Documentation",
    "keywords": "Property AuthorName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll AuthorName The user’s login name. public string AuthorName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.AuthorType.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.AuthorType.html",
    "title": "Property AuthorType | AuxLabs.Twitch Documentation",
    "keywords": "Property AuthorType Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll AuthorType The type of user. public UserType AuthorType { get; } Property Value UserType"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.BadgeInfo.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.BadgeInfo.html",
    "title": "Property BadgeInfo | AuxLabs.Twitch Documentation",
    "keywords": "Property BadgeInfo Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll BadgeInfo Contains metadata related to the chat badges in the badges tag. Currently, this tag contains metadata only for subscriber badges, to indicate the number of months the user has been a subscriber. public string BadgeInfo { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.Badges.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.Badges.html",
    "title": "Property Badges | AuxLabs.Twitch Documentation",
    "keywords": "Property Badges Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Badges A collection of badges the user has. public IReadOnlyCollection<Badge> Badges { get; } Property Value IReadOnlyCollection<Badge>"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.BitsAmount.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.BitsAmount.html",
    "title": "Property BitsAmount | AuxLabs.Twitch Documentation",
    "keywords": "Property BitsAmount Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll BitsAmount The amount of Bits the user cheered. Only a Bits cheer message includes this tag. public int BitsAmount { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.ChannelId.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.ChannelId.html",
    "title": "Property ChannelId | AuxLabs.Twitch Documentation",
    "keywords": "Property ChannelId Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll ChannelId An ID that identifies the channel. public string ChannelId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.CustomRewardId.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.CustomRewardId.html",
    "title": "Property CustomRewardId | AuxLabs.Twitch Documentation",
    "keywords": "Property CustomRewardId Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll CustomRewardId public string CustomRewardId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.Emotes.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.Emotes.html",
    "title": "Property Emotes | AuxLabs.Twitch Documentation",
    "keywords": "Property Emotes Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Emotes A collection of emotes and their position in the message. public IReadOnlyCollection<EmotePosition> Emotes { get; } Property Value IReadOnlyCollection<EmotePosition>"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.html",
    "title": "Class MessageTags | AuxLabs.Twitch Documentation",
    "keywords": "Class MessageTags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class MessageTags : BaseTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap BaseTags MessageTags Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Derived UserNoticeTags Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Action The message value when someone uses the /me chat command AuthorColor The color of the user’s name in the chat room. AuthorDisplayName The user’s display name. AuthorId The ID of the user that sent the message. AuthorName The user’s login name. AuthorType The type of user. BadgeInfo Contains metadata related to the chat badges in the badges tag. Currently, this tag contains metadata only for subscriber badges, to indicate the number of months the user has been a subscriber. Badges A collection of badges the user has. BitsAmount The amount of Bits the user cheered. Only a Bits cheer message includes this tag. ChannelId An ID that identifies the channel. CustomRewardId Emotes A collection of emotes and their position in the message. IsEmoteOnly Indicates whether this message contains only emotes IsFirstMessage Indicates whether this is the user's first message in the channel IsModerator Indicates whether the user is a moderator. IsSubscriber Indicates whether the user is a subscriber. IsTurbo Indicates whether the user has site-wide commercial free mode enabled. IsVIP Indicates whether the user is a VIP. MessageId An ID that uniquely identifies the message. MessageType A value that indicates if a message has unique properties Nonce A unique value used to identify requests ReplyAuthorDisplayName The display name of the sender of the parent message. ReplyAuthorId An ID that identifies the sender of the parent message. ReplyAuthorName The login name of the sender of the parent message. ReplyMessageContent The text of the parent message. ReplyMessageId An ID that uniquely identifies the parent message that this message is replying to. Timestamp The date and time that the message was sent. Methods CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format."
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.IsEmoteOnly.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.IsEmoteOnly.html",
    "title": "Property IsEmoteOnly | AuxLabs.Twitch Documentation",
    "keywords": "Property IsEmoteOnly Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll IsEmoteOnly Indicates whether this message contains only emotes public bool IsEmoteOnly { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.IsFirstMessage.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.IsFirstMessage.html",
    "title": "Property IsFirstMessage | AuxLabs.Twitch Documentation",
    "keywords": "Property IsFirstMessage Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll IsFirstMessage Indicates whether this is the user's first message in the channel public bool IsFirstMessage { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.IsModerator.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.IsModerator.html",
    "title": "Property IsModerator | AuxLabs.Twitch Documentation",
    "keywords": "Property IsModerator Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll IsModerator Indicates whether the user is a moderator. public bool IsModerator { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.IsSubscriber.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.IsSubscriber.html",
    "title": "Property IsSubscriber | AuxLabs.Twitch Documentation",
    "keywords": "Property IsSubscriber Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll IsSubscriber Indicates whether the user is a subscriber. public bool IsSubscriber { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.IsTurbo.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.IsTurbo.html",
    "title": "Property IsTurbo | AuxLabs.Twitch Documentation",
    "keywords": "Property IsTurbo Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll IsTurbo Indicates whether the user has site-wide commercial free mode enabled. public bool IsTurbo { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.IsVIP.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.IsVIP.html",
    "title": "Property IsVIP | AuxLabs.Twitch Documentation",
    "keywords": "Property IsVIP Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll IsVIP Indicates whether the user is a VIP. public bool IsVIP { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.LoadQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.LoadQueryMap.html",
    "title": "Method LoadQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method LoadQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format. public override void LoadQueryMap(IReadOnlyDictionary<string, string> map) Parameters map IReadOnlyDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.MessageId.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.MessageId.html",
    "title": "Property MessageId | AuxLabs.Twitch Documentation",
    "keywords": "Property MessageId Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll MessageId An ID that uniquely identifies the message. public string MessageId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.MessageType.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.MessageType.html",
    "title": "Property MessageType | AuxLabs.Twitch Documentation",
    "keywords": "Property MessageType Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll MessageType A value that indicates if a message has unique properties public MessageType MessageType { get; } Property Value MessageType"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.Nonce.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.Nonce.html",
    "title": "Property Nonce | AuxLabs.Twitch Documentation",
    "keywords": "Property Nonce Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Nonce A unique value used to identify requests public string Nonce { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.ReplyAuthorDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.ReplyAuthorDisplayName.html",
    "title": "Property ReplyAuthorDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property ReplyAuthorDisplayName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll ReplyAuthorDisplayName The display name of the sender of the parent message. public string ReplyAuthorDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.ReplyAuthorId.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.ReplyAuthorId.html",
    "title": "Property ReplyAuthorId | AuxLabs.Twitch Documentation",
    "keywords": "Property ReplyAuthorId Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll ReplyAuthorId An ID that identifies the sender of the parent message. public string ReplyAuthorId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.ReplyAuthorName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.ReplyAuthorName.html",
    "title": "Property ReplyAuthorName | AuxLabs.Twitch Documentation",
    "keywords": "Property ReplyAuthorName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll ReplyAuthorName The login name of the sender of the parent message. public string ReplyAuthorName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.ReplyMessageContent.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.ReplyMessageContent.html",
    "title": "Property ReplyMessageContent | AuxLabs.Twitch Documentation",
    "keywords": "Property ReplyMessageContent Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll ReplyMessageContent The text of the parent message. public string ReplyMessageContent { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.ReplyMessageId.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.ReplyMessageId.html",
    "title": "Property ReplyMessageId | AuxLabs.Twitch Documentation",
    "keywords": "Property ReplyMessageId Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll ReplyMessageId An ID that uniquely identifies the parent message that this message is replying to. public string ReplyMessageId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.MessageTags.Timestamp.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.MessageTags.Timestamp.html",
    "title": "Property Timestamp | AuxLabs.Twitch Documentation",
    "keywords": "Property Timestamp Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Timestamp The date and time that the message was sent. public DateTimeOffset Timestamp { get; } Property Value DateTimeOffset"
  },
  "api/AuxLabs.Twitch.Chat.Models.NamesEventArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.NamesEventArgs.-ctor.html",
    "title": "Constructor NamesEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor NamesEventArgs Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll NamesEventArgs(IReadOnlyCollection<string>) public NamesEventArgs(IReadOnlyCollection<string> parameters) Parameters parameters IReadOnlyCollection<string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.NamesEventArgs.ChannelName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.NamesEventArgs.ChannelName.html",
    "title": "Property ChannelName | AuxLabs.Twitch Documentation",
    "keywords": "Property ChannelName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll ChannelName public string ChannelName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.NamesEventArgs.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.NamesEventArgs.html",
    "title": "Class NamesEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class NamesEventArgs Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class NamesEventArgs Inheritance object NamesEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NamesEventArgs(IReadOnlyCollection<string>) Properties ChannelName Names"
  },
  "api/AuxLabs.Twitch.Chat.Models.NamesEventArgs.Names.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.NamesEventArgs.Names.html",
    "title": "Property Names | AuxLabs.Twitch Documentation",
    "keywords": "Property Names Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Names public IReadOnlyCollection<string> Names { get; } Property Value IReadOnlyCollection<string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.NoticeEventArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.NoticeEventArgs.-ctor.html",
    "title": "Constructor NoticeEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor NoticeEventArgs Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll NoticeEventArgs(IReadOnlyCollection<string>) public NoticeEventArgs(IReadOnlyCollection<string> parameters) Parameters parameters IReadOnlyCollection<string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.NoticeEventArgs.ChannelName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.NoticeEventArgs.ChannelName.html",
    "title": "Property ChannelName | AuxLabs.Twitch Documentation",
    "keywords": "Property ChannelName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll ChannelName public string ChannelName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.NoticeEventArgs.Create.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.NoticeEventArgs.Create.html",
    "title": "Method Create | AuxLabs.Twitch Documentation",
    "keywords": "Method Create Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Create(IrcPayload) public static NoticeEventArgs Create(IrcPayload payload) Parameters payload IrcPayload Returns NoticeEventArgs"
  },
  "api/AuxLabs.Twitch.Chat.Models.NoticeEventArgs.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.NoticeEventArgs.html",
    "title": "Class NoticeEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class NoticeEventArgs Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class NoticeEventArgs Inheritance object NoticeEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NoticeEventArgs(IReadOnlyCollection<string>) Properties ChannelName Message Tags Methods Create(IrcPayload)"
  },
  "api/AuxLabs.Twitch.Chat.Models.NoticeEventArgs.Message.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.NoticeEventArgs.Message.html",
    "title": "Property Message | AuxLabs.Twitch Documentation",
    "keywords": "Property Message Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Message public string Message { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.NoticeEventArgs.Tags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.NoticeEventArgs.Tags.html",
    "title": "Property Tags | AuxLabs.Twitch Documentation",
    "keywords": "Property Tags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Tags public NoticeTags Tags { get; } Property Value NoticeTags"
  },
  "api/AuxLabs.Twitch.Chat.Models.NoticeTags.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.NoticeTags.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.NoticeTags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.NoticeTags.html",
    "title": "Class NoticeTags | AuxLabs.Twitch Documentation",
    "keywords": "Class NoticeTags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class NoticeTags : BaseTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap BaseTags NoticeTags Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties NoticeType A value to determine the action’s outcome. TargetUserId The ID of the user that the action targeted. If specified. Methods CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format."
  },
  "api/AuxLabs.Twitch.Chat.Models.NoticeTags.LoadQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.NoticeTags.LoadQueryMap.html",
    "title": "Method LoadQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method LoadQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format. public override void LoadQueryMap(IReadOnlyDictionary<string, string> map) Parameters map IReadOnlyDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.NoticeTags.NoticeType.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.NoticeTags.NoticeType.html",
    "title": "Property NoticeType | AuxLabs.Twitch Documentation",
    "keywords": "Property NoticeType Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll NoticeType A value to determine the action’s outcome. public NoticeType NoticeType { get; } Property Value NoticeType"
  },
  "api/AuxLabs.Twitch.Chat.Models.NoticeTags.TargetUserId.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.NoticeTags.TargetUserId.html",
    "title": "Property TargetUserId | AuxLabs.Twitch Documentation",
    "keywords": "Property TargetUserId Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll TargetUserId The ID of the user that the action targeted. If specified. public string TargetUserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.RaidTags.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RaidTags.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.RaidTags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RaidTags.html",
    "title": "Class RaidTags | AuxLabs.Twitch Documentation",
    "keywords": "Class RaidTags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class RaidTags : UserNoticeTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap BaseTags MessageTags UserNoticeTags RaidTags Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members UserNoticeTags.NoticeType UserNoticeTags.SystemMessage MessageTags.Timestamp MessageTags.MessageId MessageTags.ChannelId MessageTags.AuthorId MessageTags.AuthorName MessageTags.AuthorDisplayName MessageTags.AuthorType MessageTags.AuthorColor MessageTags.Nonce MessageTags.CustomRewardId MessageTags.ReplyMessageId MessageTags.ReplyMessageContent MessageTags.ReplyAuthorId MessageTags.ReplyAuthorName MessageTags.ReplyAuthorDisplayName MessageTags.BitsAmount MessageTags.IsModerator MessageTags.IsSubscriber MessageTags.IsTurbo MessageTags.IsVIP MessageTags.IsFirstMessage MessageTags.IsEmoteOnly MessageTags.MessageType MessageTags.Badges MessageTags.BadgeInfo MessageTags.Emotes MessageTags.Action object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ProfileImageUrl The profile image of the broadcaster raiding this channel. RaiderDisplayName The display name of the broadcaster raiding this channel. RaiderLogin The login name of the broadcaster raiding this channel. RaiderViewerCount The number of viewers raiding this channel from the broadcaster’s channel. Methods CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format."
  },
  "api/AuxLabs.Twitch.Chat.Models.RaidTags.LoadQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RaidTags.LoadQueryMap.html",
    "title": "Method LoadQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method LoadQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format. public override void LoadQueryMap(IReadOnlyDictionary<string, string> map) Parameters map IReadOnlyDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.RaidTags.ProfileImageUrl.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RaidTags.ProfileImageUrl.html",
    "title": "Property ProfileImageUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property ProfileImageUrl Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll ProfileImageUrl The profile image of the broadcaster raiding this channel. public string ProfileImageUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.RaidTags.RaiderDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RaidTags.RaiderDisplayName.html",
    "title": "Property RaiderDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property RaiderDisplayName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll RaiderDisplayName The display name of the broadcaster raiding this channel. public string RaiderDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.RaidTags.RaiderLogin.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RaidTags.RaiderLogin.html",
    "title": "Property RaiderLogin | AuxLabs.Twitch Documentation",
    "keywords": "Property RaiderLogin Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll RaiderLogin The login name of the broadcaster raiding this channel. public string RaiderLogin { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.RaidTags.RaiderViewerCount.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RaidTags.RaiderViewerCount.html",
    "title": "Property RaiderViewerCount | AuxLabs.Twitch Documentation",
    "keywords": "Property RaiderViewerCount Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll RaiderViewerCount The number of viewers raiding this channel from the broadcaster’s channel. public int RaiderViewerCount { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Chat.Models.RitualTags.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RitualTags.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.RitualTags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RitualTags.html",
    "title": "Class RitualTags | AuxLabs.Twitch Documentation",
    "keywords": "Class RitualTags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class RitualTags : UserNoticeTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap BaseTags MessageTags UserNoticeTags RitualTags Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members UserNoticeTags.NoticeType UserNoticeTags.SystemMessage MessageTags.Timestamp MessageTags.MessageId MessageTags.ChannelId MessageTags.AuthorId MessageTags.AuthorName MessageTags.AuthorDisplayName MessageTags.AuthorType MessageTags.AuthorColor MessageTags.Nonce MessageTags.CustomRewardId MessageTags.ReplyMessageId MessageTags.ReplyMessageContent MessageTags.ReplyAuthorId MessageTags.ReplyAuthorName MessageTags.ReplyAuthorDisplayName MessageTags.BitsAmount MessageTags.IsModerator MessageTags.IsSubscriber MessageTags.IsTurbo MessageTags.IsVIP MessageTags.IsFirstMessage MessageTags.IsEmoteOnly MessageTags.MessageType MessageTags.Badges MessageTags.BadgeInfo MessageTags.Emotes MessageTags.Action object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties RitualType The name of the ritual being celebrated. Methods CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format."
  },
  "api/AuxLabs.Twitch.Chat.Models.RitualTags.LoadQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RitualTags.LoadQueryMap.html",
    "title": "Method LoadQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method LoadQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format. public override void LoadQueryMap(IReadOnlyDictionary<string, string> map) Parameters map IReadOnlyDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.RitualTags.RitualType.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RitualTags.RitualType.html",
    "title": "Property RitualType | AuxLabs.Twitch Documentation",
    "keywords": "Property RitualType Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll RitualType The name of the ritual being celebrated. public RitualType RitualType { get; } Property Value RitualType"
  },
  "api/AuxLabs.Twitch.Chat.Models.RoomStateEventArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RoomStateEventArgs.-ctor.html",
    "title": "Constructor RoomStateEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor RoomStateEventArgs Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll RoomStateEventArgs(IReadOnlyCollection<string>) public RoomStateEventArgs(IReadOnlyCollection<string> parameters) Parameters parameters IReadOnlyCollection<string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.RoomStateEventArgs.ChannelName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RoomStateEventArgs.ChannelName.html",
    "title": "Property ChannelName | AuxLabs.Twitch Documentation",
    "keywords": "Property ChannelName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll ChannelName public string ChannelName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.RoomStateEventArgs.Create.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RoomStateEventArgs.Create.html",
    "title": "Method Create | AuxLabs.Twitch Documentation",
    "keywords": "Method Create Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Create(IrcPayload) public static RoomStateEventArgs Create(IrcPayload payload) Parameters payload IrcPayload Returns RoomStateEventArgs"
  },
  "api/AuxLabs.Twitch.Chat.Models.RoomStateEventArgs.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RoomStateEventArgs.html",
    "title": "Class RoomStateEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class RoomStateEventArgs Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class RoomStateEventArgs Inheritance object RoomStateEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RoomStateEventArgs(IReadOnlyCollection<string>) Properties ChannelName Tags Methods Create(IrcPayload)"
  },
  "api/AuxLabs.Twitch.Chat.Models.RoomStateEventArgs.Tags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RoomStateEventArgs.Tags.html",
    "title": "Property Tags | AuxLabs.Twitch Documentation",
    "keywords": "Property Tags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Tags public RoomStateTags Tags { get; } Property Value RoomStateTags"
  },
  "api/AuxLabs.Twitch.Chat.Models.RoomStateTags.ChannelId.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RoomStateTags.ChannelId.html",
    "title": "Property ChannelId | AuxLabs.Twitch Documentation",
    "keywords": "Property ChannelId Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll ChannelId An ID that identifies the channel. public string ChannelId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.RoomStateTags.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RoomStateTags.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.RoomStateTags.FollowersOnlyMinutes.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RoomStateTags.FollowersOnlyMinutes.html",
    "title": "Property FollowersOnlyMinutes | AuxLabs.Twitch Documentation",
    "keywords": "Property FollowersOnlyMinutes Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll FollowersOnlyMinutes Indicates how long, in minutes, the user must have followed the broadcaster before posting chat messages. public int? FollowersOnlyMinutes { get; } Property Value int?"
  },
  "api/AuxLabs.Twitch.Chat.Models.RoomStateTags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RoomStateTags.html",
    "title": "Class RoomStateTags | AuxLabs.Twitch Documentation",
    "keywords": "Class RoomStateTags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class RoomStateTags : BaseTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap BaseTags RoomStateTags Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId An ID that identifies the channel. FollowersOnlyMinutes Indicates how long, in minutes, the user must have followed the broadcaster before posting chat messages. IsEmoteOnly Indicates whether the chat room allows only messages with emotes. IsFollowersOnly Indicates whether only followers can post messages in the chat room. IsRituals IsSlowEnabled Indicates whether users must wait between sending messages. IsSubscribersOnly Indicates whether only subscribers and moderators can chat in the chat room. IsUniqueEnabled Indicates whether a user’s messages must be unique. SlowSeconds Indicates how long, in seconds, users must wait between sending messages. Methods CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format."
  },
  "api/AuxLabs.Twitch.Chat.Models.RoomStateTags.IsEmoteOnly.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RoomStateTags.IsEmoteOnly.html",
    "title": "Property IsEmoteOnly | AuxLabs.Twitch Documentation",
    "keywords": "Property IsEmoteOnly Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll IsEmoteOnly Indicates whether the chat room allows only messages with emotes. public bool? IsEmoteOnly { get; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Chat.Models.RoomStateTags.IsFollowersOnly.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RoomStateTags.IsFollowersOnly.html",
    "title": "Property IsFollowersOnly | AuxLabs.Twitch Documentation",
    "keywords": "Property IsFollowersOnly Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll IsFollowersOnly Indicates whether only followers can post messages in the chat room. public bool? IsFollowersOnly { get; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Chat.Models.RoomStateTags.IsRituals.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RoomStateTags.IsRituals.html",
    "title": "Property IsRituals | AuxLabs.Twitch Documentation",
    "keywords": "Property IsRituals Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll IsRituals public bool? IsRituals { get; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Chat.Models.RoomStateTags.IsSlowEnabled.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RoomStateTags.IsSlowEnabled.html",
    "title": "Property IsSlowEnabled | AuxLabs.Twitch Documentation",
    "keywords": "Property IsSlowEnabled Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll IsSlowEnabled Indicates whether users must wait between sending messages. public bool? IsSlowEnabled { get; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Chat.Models.RoomStateTags.IsSubscribersOnly.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RoomStateTags.IsSubscribersOnly.html",
    "title": "Property IsSubscribersOnly | AuxLabs.Twitch Documentation",
    "keywords": "Property IsSubscribersOnly Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll IsSubscribersOnly Indicates whether only subscribers and moderators can chat in the chat room. public bool? IsSubscribersOnly { get; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Chat.Models.RoomStateTags.IsUniqueEnabled.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RoomStateTags.IsUniqueEnabled.html",
    "title": "Property IsUniqueEnabled | AuxLabs.Twitch Documentation",
    "keywords": "Property IsUniqueEnabled Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll IsUniqueEnabled Indicates whether a user’s messages must be unique. public bool? IsUniqueEnabled { get; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Chat.Models.RoomStateTags.LoadQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RoomStateTags.LoadQueryMap.html",
    "title": "Method LoadQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method LoadQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format. public override void LoadQueryMap(IReadOnlyDictionary<string, string> map) Parameters map IReadOnlyDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.RoomStateTags.SlowSeconds.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.RoomStateTags.SlowSeconds.html",
    "title": "Property SlowSeconds | AuxLabs.Twitch Documentation",
    "keywords": "Property SlowSeconds Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll SlowSeconds Indicates how long, in seconds, users must wait between sending messages. public int? SlowSeconds { get; } Property Value int?"
  },
  "api/AuxLabs.Twitch.Chat.Models.SendMessageTags.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SendMessageTags.-ctor.html",
    "title": "Constructor SendMessageTags | AuxLabs.Twitch Documentation",
    "keywords": "Constructor SendMessageTags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll SendMessageTags(string) public SendMessageTags(string replyMessageId) Parameters replyMessageId string"
  },
  "api/AuxLabs.Twitch.Chat.Models.SendMessageTags.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SendMessageTags.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.SendMessageTags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SendMessageTags.html",
    "title": "Class SendMessageTags | AuxLabs.Twitch Documentation",
    "keywords": "Class SendMessageTags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class SendMessageTags : BaseTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap BaseTags SendMessageTags Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SendMessageTags(string) Properties ReplyMessageId The id of the message to reply to Methods CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format."
  },
  "api/AuxLabs.Twitch.Chat.Models.SendMessageTags.LoadQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SendMessageTags.LoadQueryMap.html",
    "title": "Method LoadQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method LoadQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format. public override void LoadQueryMap(IReadOnlyDictionary<string, string> map) Parameters map IReadOnlyDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.SendMessageTags.ReplyMessageId.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SendMessageTags.ReplyMessageId.html",
    "title": "Property ReplyMessageId | AuxLabs.Twitch Documentation",
    "keywords": "Property ReplyMessageId Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll ReplyMessageId The id of the message to reply to public string ReplyMessageId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftTags.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftTags.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftTags.GiftedMonths.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftTags.GiftedMonths.html",
    "title": "Property GiftedMonths | AuxLabs.Twitch Documentation",
    "keywords": "Property GiftedMonths Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll GiftedMonths The number of months gifted as part of a single, multi-month gift. public int GiftedMonths { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftTags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftTags.html",
    "title": "Class SubscriptionGiftTags | AuxLabs.Twitch Documentation",
    "keywords": "Class SubscriptionGiftTags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class SubscriptionGiftTags : UserNoticeTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap BaseTags MessageTags UserNoticeTags SubscriptionGiftTags Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members UserNoticeTags.NoticeType UserNoticeTags.SystemMessage MessageTags.Timestamp MessageTags.MessageId MessageTags.ChannelId MessageTags.AuthorId MessageTags.AuthorName MessageTags.AuthorDisplayName MessageTags.AuthorType MessageTags.AuthorColor MessageTags.Nonce MessageTags.CustomRewardId MessageTags.ReplyMessageId MessageTags.ReplyMessageContent MessageTags.ReplyAuthorId MessageTags.ReplyAuthorName MessageTags.ReplyAuthorDisplayName MessageTags.BitsAmount MessageTags.IsModerator MessageTags.IsSubscriber MessageTags.IsTurbo MessageTags.IsVIP MessageTags.IsFirstMessage MessageTags.IsEmoteOnly MessageTags.MessageType MessageTags.Badges MessageTags.BadgeInfo MessageTags.Emotes MessageTags.Action object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties GiftedMonths The number of months gifted as part of a single, multi-month gift. RecipientDisplayName The display name of the subscription gift recipient. RecipientId The user ID of the subscription gift recipient. RecipientName The user name of the subscription gift recipient. SubscriptionName The display name of the subscription plan. This may be a default name or one created by the channel owner. SubscriptionType The type of subscription plan being used. TotalMonths The total number of months the user has subscribed. Methods CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format."
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftTags.LoadQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftTags.LoadQueryMap.html",
    "title": "Method LoadQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method LoadQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format. public override void LoadQueryMap(IReadOnlyDictionary<string, string> map) Parameters map IReadOnlyDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftTags.RecipientDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftTags.RecipientDisplayName.html",
    "title": "Property RecipientDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property RecipientDisplayName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll RecipientDisplayName The display name of the subscription gift recipient. public string RecipientDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftTags.RecipientId.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftTags.RecipientId.html",
    "title": "Property RecipientId | AuxLabs.Twitch Documentation",
    "keywords": "Property RecipientId Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll RecipientId The user ID of the subscription gift recipient. public string RecipientId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftTags.RecipientName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftTags.RecipientName.html",
    "title": "Property RecipientName | AuxLabs.Twitch Documentation",
    "keywords": "Property RecipientName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll RecipientName The user name of the subscription gift recipient. public string RecipientName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftTags.SubscriptionName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftTags.SubscriptionName.html",
    "title": "Property SubscriptionName | AuxLabs.Twitch Documentation",
    "keywords": "Property SubscriptionName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll SubscriptionName The display name of the subscription plan. This may be a default name or one created by the channel owner. public string SubscriptionName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftTags.SubscriptionType.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftTags.SubscriptionType.html",
    "title": "Property SubscriptionType | AuxLabs.Twitch Documentation",
    "keywords": "Property SubscriptionType Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll SubscriptionType The type of subscription plan being used. public SubscriptionType SubscriptionType { get; } Property Value SubscriptionType"
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftTags.TotalMonths.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftTags.TotalMonths.html",
    "title": "Property TotalMonths | AuxLabs.Twitch Documentation",
    "keywords": "Property TotalMonths Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll TotalMonths The total number of months the user has subscribed. public int TotalMonths { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftUpgradeAnonymousTags.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftUpgradeAnonymousTags.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftUpgradeAnonymousTags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftUpgradeAnonymousTags.html",
    "title": "Class SubscriptionGiftUpgradeAnonymousTags | AuxLabs.Twitch Documentation",
    "keywords": "Class SubscriptionGiftUpgradeAnonymousTags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class SubscriptionGiftUpgradeAnonymousTags : UserNoticeTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap BaseTags MessageTags UserNoticeTags SubscriptionGiftUpgradeAnonymousTags Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Derived SubscriptionGiftUpgradeTags Inherited Members UserNoticeTags.NoticeType UserNoticeTags.SystemMessage MessageTags.Timestamp MessageTags.MessageId MessageTags.ChannelId MessageTags.AuthorId MessageTags.AuthorName MessageTags.AuthorDisplayName MessageTags.AuthorType MessageTags.AuthorColor MessageTags.Nonce MessageTags.CustomRewardId MessageTags.ReplyMessageId MessageTags.ReplyMessageContent MessageTags.ReplyAuthorId MessageTags.ReplyAuthorName MessageTags.ReplyAuthorDisplayName MessageTags.BitsAmount MessageTags.IsModerator MessageTags.IsSubscriber MessageTags.IsTurbo MessageTags.IsVIP MessageTags.IsFirstMessage MessageTags.IsEmoteOnly MessageTags.MessageType MessageTags.Badges MessageTags.BadgeInfo MessageTags.Emotes MessageTags.Action object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties PromoGiftName The subscriptions promo, if any, that is ongoing. PromoGiftTotal The number of gifts the gifter has given. Methods CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format."
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftUpgradeAnonymousTags.LoadQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftUpgradeAnonymousTags.LoadQueryMap.html",
    "title": "Method LoadQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method LoadQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format. public override void LoadQueryMap(IReadOnlyDictionary<string, string> map) Parameters map IReadOnlyDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftUpgradeAnonymousTags.PromoGiftName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftUpgradeAnonymousTags.PromoGiftName.html",
    "title": "Property PromoGiftName | AuxLabs.Twitch Documentation",
    "keywords": "Property PromoGiftName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll PromoGiftName The subscriptions promo, if any, that is ongoing. public string PromoGiftName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftUpgradeAnonymousTags.PromoGiftTotal.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftUpgradeAnonymousTags.PromoGiftTotal.html",
    "title": "Property PromoGiftTotal | AuxLabs.Twitch Documentation",
    "keywords": "Property PromoGiftTotal Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll PromoGiftTotal The number of gifts the gifter has given. public int PromoGiftTotal { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftUpgradeTags.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftUpgradeTags.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftUpgradeTags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftUpgradeTags.html",
    "title": "Class SubscriptionGiftUpgradeTags | AuxLabs.Twitch Documentation",
    "keywords": "Class SubscriptionGiftUpgradeTags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class SubscriptionGiftUpgradeTags : SubscriptionGiftUpgradeAnonymousTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap BaseTags MessageTags UserNoticeTags SubscriptionGiftUpgradeAnonymousTags SubscriptionGiftUpgradeTags Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members SubscriptionGiftUpgradeAnonymousTags.PromoGiftTotal SubscriptionGiftUpgradeAnonymousTags.PromoGiftName UserNoticeTags.NoticeType UserNoticeTags.SystemMessage MessageTags.Timestamp MessageTags.MessageId MessageTags.ChannelId MessageTags.AuthorId MessageTags.AuthorName MessageTags.AuthorDisplayName MessageTags.AuthorType MessageTags.AuthorColor MessageTags.Nonce MessageTags.CustomRewardId MessageTags.ReplyMessageId MessageTags.ReplyMessageContent MessageTags.ReplyAuthorId MessageTags.ReplyAuthorName MessageTags.ReplyAuthorDisplayName MessageTags.BitsAmount MessageTags.IsModerator MessageTags.IsSubscriber MessageTags.IsTurbo MessageTags.IsVIP MessageTags.IsFirstMessage MessageTags.IsEmoteOnly MessageTags.MessageType MessageTags.Badges MessageTags.BadgeInfo MessageTags.Emotes MessageTags.Action object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties SenderDisplayName The display name of the user who gifted the subscription. SenderLogin The login name of the user who gifted the subscription. Methods CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format."
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftUpgradeTags.LoadQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftUpgradeTags.LoadQueryMap.html",
    "title": "Method LoadQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method LoadQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format. public override void LoadQueryMap(IReadOnlyDictionary<string, string> map) Parameters map IReadOnlyDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftUpgradeTags.SenderDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftUpgradeTags.SenderDisplayName.html",
    "title": "Property SenderDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property SenderDisplayName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll SenderDisplayName The display name of the user who gifted the subscription. public string SenderDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftUpgradeTags.SenderLogin.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionGiftUpgradeTags.SenderLogin.html",
    "title": "Property SenderLogin | AuxLabs.Twitch Documentation",
    "keywords": "Property SenderLogin Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll SenderLogin The login name of the user who gifted the subscription. public string SenderLogin { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionTags.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionTags.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionTags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionTags.html",
    "title": "Class SubscriptionTags | AuxLabs.Twitch Documentation",
    "keywords": "Class SubscriptionTags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class SubscriptionTags : UserNoticeTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap BaseTags MessageTags UserNoticeTags SubscriptionTags Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members UserNoticeTags.NoticeType UserNoticeTags.SystemMessage MessageTags.Timestamp MessageTags.MessageId MessageTags.ChannelId MessageTags.AuthorId MessageTags.AuthorName MessageTags.AuthorDisplayName MessageTags.AuthorType MessageTags.AuthorColor MessageTags.Nonce MessageTags.CustomRewardId MessageTags.ReplyMessageId MessageTags.ReplyMessageContent MessageTags.ReplyAuthorId MessageTags.ReplyAuthorName MessageTags.ReplyAuthorDisplayName MessageTags.BitsAmount MessageTags.IsModerator MessageTags.IsSubscriber MessageTags.IsTurbo MessageTags.IsVIP MessageTags.IsFirstMessage MessageTags.IsEmoteOnly MessageTags.MessageType MessageTags.Badges MessageTags.BadgeInfo MessageTags.Emotes MessageTags.Action object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsStreakShared Indicates whether the user wants their streaks shared. StreakMonths The number of consecutive months the user has subscribed. SubscriptionName The display name of the subscription plan. This may be a default name or one created by the channel owner SubscriptionType The type of subscription plan being used. TotalMonths The total number of months the user has subscribed. Methods CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format."
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionTags.IsStreakShared.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionTags.IsStreakShared.html",
    "title": "Property IsStreakShared | AuxLabs.Twitch Documentation",
    "keywords": "Property IsStreakShared Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll IsStreakShared Indicates whether the user wants their streaks shared. public bool IsStreakShared { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionTags.LoadQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionTags.LoadQueryMap.html",
    "title": "Method LoadQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method LoadQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format. public override void LoadQueryMap(IReadOnlyDictionary<string, string> map) Parameters map IReadOnlyDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionTags.StreakMonths.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionTags.StreakMonths.html",
    "title": "Property StreakMonths | AuxLabs.Twitch Documentation",
    "keywords": "Property StreakMonths Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll StreakMonths The number of consecutive months the user has subscribed. public int StreakMonths { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionTags.SubscriptionName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionTags.SubscriptionName.html",
    "title": "Property SubscriptionName | AuxLabs.Twitch Documentation",
    "keywords": "Property SubscriptionName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll SubscriptionName The display name of the subscription plan. This may be a default name or one created by the channel owner public string SubscriptionName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionTags.SubscriptionType.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionTags.SubscriptionType.html",
    "title": "Property SubscriptionType | AuxLabs.Twitch Documentation",
    "keywords": "Property SubscriptionType Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll SubscriptionType The type of subscription plan being used. public SubscriptionType SubscriptionType { get; } Property Value SubscriptionType"
  },
  "api/AuxLabs.Twitch.Chat.Models.SubscriptionTags.TotalMonths.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.SubscriptionTags.TotalMonths.html",
    "title": "Property TotalMonths | AuxLabs.Twitch Documentation",
    "keywords": "Property TotalMonths Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll TotalMonths The total number of months the user has subscribed. public int TotalMonths { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Chat.Models.UserNoticeEventArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.UserNoticeEventArgs.-ctor.html",
    "title": "Constructor UserNoticeEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor UserNoticeEventArgs Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll UserNoticeEventArgs(IReadOnlyCollection<string>) public UserNoticeEventArgs(IReadOnlyCollection<string> parameters) Parameters parameters IReadOnlyCollection<string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.UserNoticeEventArgs.ChannelName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.UserNoticeEventArgs.ChannelName.html",
    "title": "Property ChannelName | AuxLabs.Twitch Documentation",
    "keywords": "Property ChannelName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll ChannelName public string ChannelName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.UserNoticeEventArgs.Create.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.UserNoticeEventArgs.Create.html",
    "title": "Method Create | AuxLabs.Twitch Documentation",
    "keywords": "Method Create Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Create(IrcPayload) public static UserNoticeEventArgs Create(IrcPayload payload) Parameters payload IrcPayload Returns UserNoticeEventArgs"
  },
  "api/AuxLabs.Twitch.Chat.Models.UserNoticeEventArgs.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.UserNoticeEventArgs.html",
    "title": "Class UserNoticeEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class UserNoticeEventArgs Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class UserNoticeEventArgs : IUserNoticeMessage, IChatMessage, IMessage, IEntity<string> Inheritance object UserNoticeEventArgs Implements IUserNoticeMessage IChatMessage IMessage IEntity<string> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserNoticeEventArgs(IReadOnlyCollection<string>) Properties ChannelName Message Tags Methods Create(IrcPayload)"
  },
  "api/AuxLabs.Twitch.Chat.Models.UserNoticeEventArgs.Message.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.UserNoticeEventArgs.Message.html",
    "title": "Property Message | AuxLabs.Twitch Documentation",
    "keywords": "Property Message Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Message public string Message { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.UserNoticeEventArgs.Tags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.UserNoticeEventArgs.Tags.html",
    "title": "Property Tags | AuxLabs.Twitch Documentation",
    "keywords": "Property Tags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Tags public UserNoticeTags Tags { get; } Property Value UserNoticeTags"
  },
  "api/AuxLabs.Twitch.Chat.Models.UserNoticeTags.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.UserNoticeTags.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.UserNoticeTags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.UserNoticeTags.html",
    "title": "Class UserNoticeTags | AuxLabs.Twitch Documentation",
    "keywords": "Class UserNoticeTags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class UserNoticeTags : MessageTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap BaseTags MessageTags UserNoticeTags Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Derived BitsBadgeTierTags RaidTags RitualTags SubscriptionGiftTags SubscriptionGiftUpgradeAnonymousTags SubscriptionTags Inherited Members MessageTags.Timestamp MessageTags.MessageId MessageTags.ChannelId MessageTags.AuthorId MessageTags.AuthorName MessageTags.AuthorDisplayName MessageTags.AuthorType MessageTags.AuthorColor MessageTags.Nonce MessageTags.CustomRewardId MessageTags.ReplyMessageId MessageTags.ReplyMessageContent MessageTags.ReplyAuthorId MessageTags.ReplyAuthorName MessageTags.ReplyAuthorDisplayName MessageTags.BitsAmount MessageTags.IsModerator MessageTags.IsSubscriber MessageTags.IsTurbo MessageTags.IsVIP MessageTags.IsFirstMessage MessageTags.IsEmoteOnly MessageTags.MessageType MessageTags.Badges MessageTags.BadgeInfo MessageTags.Emotes MessageTags.Action object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties NoticeType The type of notice. SystemMessage The message Twitch shows in the chat room for this notice. Methods CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format."
  },
  "api/AuxLabs.Twitch.Chat.Models.UserNoticeTags.LoadQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.UserNoticeTags.LoadQueryMap.html",
    "title": "Method LoadQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method LoadQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format. public override void LoadQueryMap(IReadOnlyDictionary<string, string> map) Parameters map IReadOnlyDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.UserNoticeTags.NoticeType.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.UserNoticeTags.NoticeType.html",
    "title": "Property NoticeType | AuxLabs.Twitch Documentation",
    "keywords": "Property NoticeType Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll NoticeType The type of notice. public UserNoticeType NoticeType { get; } Property Value UserNoticeType"
  },
  "api/AuxLabs.Twitch.Chat.Models.UserNoticeTags.SystemMessage.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.UserNoticeTags.SystemMessage.html",
    "title": "Property SystemMessage | AuxLabs.Twitch Documentation",
    "keywords": "Property SystemMessage Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll SystemMessage The message Twitch shows in the chat room for this notice. public string SystemMessage { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.UserStateEventArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.UserStateEventArgs.-ctor.html",
    "title": "Constructor UserStateEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor UserStateEventArgs Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll UserStateEventArgs(IReadOnlyCollection<string>) public UserStateEventArgs(IReadOnlyCollection<string> parameters) Parameters parameters IReadOnlyCollection<string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.UserStateEventArgs.ChannelName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.UserStateEventArgs.ChannelName.html",
    "title": "Property ChannelName | AuxLabs.Twitch Documentation",
    "keywords": "Property ChannelName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll ChannelName public string ChannelName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.UserStateEventArgs.Create.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.UserStateEventArgs.Create.html",
    "title": "Method Create | AuxLabs.Twitch Documentation",
    "keywords": "Method Create Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Create(IrcPayload) public static UserStateEventArgs Create(IrcPayload payload) Parameters payload IrcPayload Returns UserStateEventArgs"
  },
  "api/AuxLabs.Twitch.Chat.Models.UserStateEventArgs.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.UserStateEventArgs.html",
    "title": "Class UserStateEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class UserStateEventArgs Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class UserStateEventArgs Inheritance object UserStateEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserStateEventArgs(IReadOnlyCollection<string>) Properties ChannelName Tags Methods Create(IrcPayload)"
  },
  "api/AuxLabs.Twitch.Chat.Models.UserStateEventArgs.Tags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.UserStateEventArgs.Tags.html",
    "title": "Property Tags | AuxLabs.Twitch Documentation",
    "keywords": "Property Tags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Tags public UserStateTags Tags { get; } Property Value UserStateTags"
  },
  "api/AuxLabs.Twitch.Chat.Models.UserStateTags.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.UserStateTags.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.UserStateTags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.UserStateTags.html",
    "title": "Class UserStateTags | AuxLabs.Twitch Documentation",
    "keywords": "Class UserStateTags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class UserStateTags : GlobalUserStateTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap BaseTags GlobalUserStateTags UserStateTags Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members GlobalUserStateTags.UserId GlobalUserStateTags.UserType GlobalUserStateTags.UserDisplayName GlobalUserStateTags.Color GlobalUserStateTags.Badges GlobalUserStateTags.BadgeInfo GlobalUserStateTags.EmoteSets GlobalUserStateTags.IsTurbo object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsModerator Indicates whether the user is a moderator IsSubscriber Indicates whether the user is a subscriber. MessageId An ID that uniquely identifies a message, if one was sent. Methods CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format."
  },
  "api/AuxLabs.Twitch.Chat.Models.UserStateTags.IsModerator.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.UserStateTags.IsModerator.html",
    "title": "Property IsModerator | AuxLabs.Twitch Documentation",
    "keywords": "Property IsModerator Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll IsModerator Indicates whether the user is a moderator public bool IsModerator { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Models.UserStateTags.IsSubscriber.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.UserStateTags.IsSubscriber.html",
    "title": "Property IsSubscriber | AuxLabs.Twitch Documentation",
    "keywords": "Property IsSubscriber Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll IsSubscriber Indicates whether the user is a subscriber. public bool IsSubscriber { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Models.UserStateTags.LoadQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.UserStateTags.LoadQueryMap.html",
    "title": "Method LoadQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method LoadQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format. public override void LoadQueryMap(IReadOnlyDictionary<string, string> map) Parameters map IReadOnlyDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.UserStateTags.MessageId.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.UserStateTags.MessageId.html",
    "title": "Property MessageId | AuxLabs.Twitch Documentation",
    "keywords": "Property MessageId Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll MessageId An ID that uniquely identifies a message, if one was sent. public string MessageId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.WhisperEventArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.WhisperEventArgs.-ctor.html",
    "title": "Constructor WhisperEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor WhisperEventArgs Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll WhisperEventArgs(IrcPrefix?, IReadOnlyCollection<string>) public WhisperEventArgs(IrcPrefix? prefix, IReadOnlyCollection<string> parameters) Parameters prefix IrcPrefix? parameters IReadOnlyCollection<string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.WhisperEventArgs.Create.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.WhisperEventArgs.Create.html",
    "title": "Method Create | AuxLabs.Twitch Documentation",
    "keywords": "Method Create Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Create(IrcPayload) public static WhisperEventArgs Create(IrcPayload payload) Parameters payload IrcPayload Returns WhisperEventArgs"
  },
  "api/AuxLabs.Twitch.Chat.Models.WhisperEventArgs.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.WhisperEventArgs.html",
    "title": "Class WhisperEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class WhisperEventArgs Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class WhisperEventArgs : IWhisperMessage, IMessage, IEntity<string> Inheritance object WhisperEventArgs Implements IWhisperMessage IMessage IEntity<string> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WhisperEventArgs(IrcPrefix?, IReadOnlyCollection<string>) Properties Message ReceiverName SenderName Tags Methods Create(IrcPayload)"
  },
  "api/AuxLabs.Twitch.Chat.Models.WhisperEventArgs.Message.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.WhisperEventArgs.Message.html",
    "title": "Property Message | AuxLabs.Twitch Documentation",
    "keywords": "Property Message Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Message public string Message { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.WhisperEventArgs.ReceiverName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.WhisperEventArgs.ReceiverName.html",
    "title": "Property ReceiverName | AuxLabs.Twitch Documentation",
    "keywords": "Property ReceiverName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll ReceiverName public string ReceiverName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.WhisperEventArgs.SenderName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.WhisperEventArgs.SenderName.html",
    "title": "Property SenderName | AuxLabs.Twitch Documentation",
    "keywords": "Property SenderName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll SenderName public string SenderName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.WhisperEventArgs.Tags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.WhisperEventArgs.Tags.html",
    "title": "Property Tags | AuxLabs.Twitch Documentation",
    "keywords": "Property Tags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Tags public WhisperTags Tags { get; } Property Value WhisperTags"
  },
  "api/AuxLabs.Twitch.Chat.Models.WhisperTags.Action.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.WhisperTags.Action.html",
    "title": "Property Action | AuxLabs.Twitch Documentation",
    "keywords": "Property Action Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Action The message value when someone uses the /me chat command public string Action { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.WhisperTags.AuthorColor.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.WhisperTags.AuthorColor.html",
    "title": "Property AuthorColor | AuxLabs.Twitch Documentation",
    "keywords": "Property AuthorColor Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll AuthorColor The color of the user’s name in the chat room. public Color AuthorColor { get; } Property Value Color"
  },
  "api/AuxLabs.Twitch.Chat.Models.WhisperTags.AuthorDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.WhisperTags.AuthorDisplayName.html",
    "title": "Property AuthorDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property AuthorDisplayName Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll AuthorDisplayName The user’s display name. public string AuthorDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.WhisperTags.AuthorId.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.WhisperTags.AuthorId.html",
    "title": "Property AuthorId | AuxLabs.Twitch Documentation",
    "keywords": "Property AuthorId Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll AuthorId The ID of the user that sent the message. public string AuthorId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.WhisperTags.AuthorType.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.WhisperTags.AuthorType.html",
    "title": "Property AuthorType | AuxLabs.Twitch Documentation",
    "keywords": "Property AuthorType Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll AuthorType The type of user. public UserType AuthorType { get; } Property Value UserType"
  },
  "api/AuxLabs.Twitch.Chat.Models.WhisperTags.Badges.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.WhisperTags.Badges.html",
    "title": "Property Badges | AuxLabs.Twitch Documentation",
    "keywords": "Property Badges Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Badges A collection of badges the user has. public IReadOnlyCollection<Badge> Badges { get; } Property Value IReadOnlyCollection<Badge>"
  },
  "api/AuxLabs.Twitch.Chat.Models.WhisperTags.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.WhisperTags.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.WhisperTags.Emotes.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.WhisperTags.Emotes.html",
    "title": "Property Emotes | AuxLabs.Twitch Documentation",
    "keywords": "Property Emotes Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll Emotes A collection of emotes and their position in the message. public IReadOnlyCollection<EmotePosition> Emotes { get; } Property Value IReadOnlyCollection<EmotePosition>"
  },
  "api/AuxLabs.Twitch.Chat.Models.WhisperTags.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.WhisperTags.html",
    "title": "Class WhisperTags | AuxLabs.Twitch Documentation",
    "keywords": "Class WhisperTags Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll public class WhisperTags : BaseTags, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap BaseTags WhisperTags Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Action The message value when someone uses the /me chat command AuthorColor The color of the user’s name in the chat room. AuthorDisplayName The user’s display name. AuthorId The ID of the user that sent the message. AuthorType The type of user. Badges A collection of badges the user has. Emotes A collection of emotes and their position in the message. IsTurbo Indicates whether the user has site-wide commercial free mode enabled. MessageId An ID that uniquely identifies the message. ThreadId An ID that uniquely identifies the whisper thread. Methods CreateQueryMap() LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format."
  },
  "api/AuxLabs.Twitch.Chat.Models.WhisperTags.IsTurbo.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.WhisperTags.IsTurbo.html",
    "title": "Property IsTurbo | AuxLabs.Twitch Documentation",
    "keywords": "Property IsTurbo Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll IsTurbo Indicates whether the user has site-wide commercial free mode enabled. public bool IsTurbo { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Models.WhisperTags.LoadQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.WhisperTags.LoadQueryMap.html",
    "title": "Method LoadQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method LoadQueryMap Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll LoadQueryMap(IReadOnlyDictionary<string, string>) Fill a dictionary with tags in their query format. public override void LoadQueryMap(IReadOnlyDictionary<string, string> map) Parameters map IReadOnlyDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Chat.Models.WhisperTags.MessageId.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.WhisperTags.MessageId.html",
    "title": "Property MessageId | AuxLabs.Twitch Documentation",
    "keywords": "Property MessageId Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll MessageId An ID that uniquely identifies the message. public string MessageId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Models.WhisperTags.ThreadId.html": {
    "href": "api/AuxLabs.Twitch.Chat.Models.WhisperTags.ThreadId.html",
    "title": "Property ThreadId | AuxLabs.Twitch Documentation",
    "keywords": "Property ThreadId Namespace AuxLabs.Twitch.Chat.Models Assembly AuxLabs.Twitch.Chat.Api.dll ThreadId An ID that uniquely identifies the whisper thread. public string ThreadId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.NoticeType.html": {
    "href": "api/AuxLabs.Twitch.Chat.NoticeType.html",
    "title": "Enum NoticeType | AuxLabs.Twitch Documentation",
    "keywords": "Enum NoticeType Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll public enum NoticeType Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"color_changed\")] ColorChanged = 1 [EnumMember(Value = \"emote_only_off\")] EmoteOnlyOff = 3 [EnumMember(Value = \"emote_only_on\")] EmoteOnlyOn = 4 [EnumMember(Value = \"followers_off\")] FollowersOff = 5 [EnumMember(Value = \"followers_on\")] FollowersOn = 6 [EnumMember(Value = \"followers_on_zero\")] FollowersOnZero = 7 [EnumMember(Value = \"msg_bad_characters\")] MessageBadCharacters = 15 [EnumMember(Value = \"msg_banned\")] MessageBanned = 14 [EnumMember(Value = \"msg_channel_blocked\")] MessageChannelBlocked = 16 [EnumMember(Value = \"msg_channel_suspended\")] MessageChannelSuspended = 17 [EnumMember(Value = \"msg_duplicate\")] MessageDuplicate = 18 [EnumMember(Value = \"msg_emoteonly\")] MessageEmoteOnly = 19 [EnumMember(Value = \"msg_followersonly\")] MessageFollowersOnly = 20 [EnumMember(Value = \"msg_followersonly_followed\")] MessageFollowersOnlyFollowed = 21 [EnumMember(Value = \"msg_followersonly_zero\")] MessageFollowersOnlyZero = 22 [EnumMember(Value = \"msg_R9k\")] MessageR9k = 23 [EnumMember(Value = \"msg_ratelimit\")] MessageRatelimited = 24 [EnumMember(Value = \"msg_rejected\")] MessageRejected = 25 [EnumMember(Value = \"msg_rejected_mandatory\")] MessageRejectedMandatory = 26 [EnumMember(Value = \"msg_verified_email\")] MessageRequiresVerifiedEmail = 32 [EnumMember(Value = \"msg_requires_verified_phone_number\")] MessageRequiresVerifiedPhone = 27 [EnumMember(Value = \"msg_slowmode\")] MessageSlowmode = 28 [EnumMember(Value = \"msg_subsonly\")] MessageSubsOnly = 29 [EnumMember(Value = \"msg_suspended\")] MessageSuspended = 30 [EnumMember(Value = \"msg_timedout\")] MessageTimedout = 31 [EnumMember(Value = \"R9k_off\")] R9kOff = 8 [EnumMember(Value = \"R9k_on\")] R9kOn = 9 [EnumMember(Value = \"slow_off\")] SlowOff = 10 [EnumMember(Value = \"slow_on\")] SlowOn = 11 [EnumMember(Value = \"subs_off\")] SubsOff = 12 [EnumMember(Value = \"subs_on\")] SubsOn = 13 [EnumMember(Value = \"tos_ban\")] TOSBan = 2 Unknown = 0 [EnumMember(Value = \"whisper_banned\")] WhisperBanned = 33 [EnumMember(Value = \"whisper_banned_recipient\")] WhisperBannedRecipient = 34 [EnumMember(Value = \"whisper_invalid_login\")] WhisperInvalidLogin = 35 [EnumMember(Value = \"whisper_invalid_self\")] WhisperInvalidSelf = 36 [EnumMember(Value = \"whisper_limit_per_min\")] WhisperRatelimitedMinute = 37 [EnumMember(Value = \"whisper_limit_per_sec\")] WhisperRatelimitedSecond = 38 [EnumMember(Value = \"whisper_restricted\")] WhisperRestricted = 39 [EnumMember(Value = \"whisper_restricted_recipient\")] WhisperRestrictedRecipient = 40"
  },
  "api/AuxLabs.Twitch.Chat.Requests.BaseChatRequest.CancellationToken.html": {
    "href": "api/AuxLabs.Twitch.Chat.Requests.BaseChatRequest.CancellationToken.html",
    "title": "Property CancellationToken | AuxLabs.Twitch Documentation",
    "keywords": "Property CancellationToken Namespace AuxLabs.Twitch.Chat.Requests Assembly AuxLabs.Twitch.Chat.Api.dll CancellationToken public CancellationToken CancellationToken { get; set; } Property Value CancellationToken"
  },
  "api/AuxLabs.Twitch.Chat.Requests.BaseChatRequest.CreateRequest.html": {
    "href": "api/AuxLabs.Twitch.Chat.Requests.BaseChatRequest.CreateRequest.html",
    "title": "Method CreateRequest | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateRequest Namespace AuxLabs.Twitch.Chat.Requests Assembly AuxLabs.Twitch.Chat.Api.dll CreateRequest() public abstract IrcPayload CreateRequest() Returns IrcPayload"
  },
  "api/AuxLabs.Twitch.Chat.Requests.BaseChatRequest.html": {
    "href": "api/AuxLabs.Twitch.Chat.Requests.BaseChatRequest.html",
    "title": "Class BaseChatRequest | AuxLabs.Twitch Documentation",
    "keywords": "Class BaseChatRequest Namespace AuxLabs.Twitch.Chat.Requests Assembly AuxLabs.Twitch.Chat.Api.dll public abstract class BaseChatRequest Inheritance object BaseChatRequest Derived JoinChannelsRequest PartChannelsRequest SendMessageRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CancellationToken Methods CreateRequest() Validate(bool)"
  },
  "api/AuxLabs.Twitch.Chat.Requests.BaseChatRequest.Validate.html": {
    "href": "api/AuxLabs.Twitch.Chat.Requests.BaseChatRequest.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Chat.Requests Assembly AuxLabs.Twitch.Chat.Api.dll Validate(bool) public abstract void Validate(bool verified) Parameters verified bool"
  },
  "api/AuxLabs.Twitch.Chat.Requests.CapabilityRequest.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Chat.Requests.CapabilityRequest.-ctor.html",
    "title": "Constructor CapabilityRequest | AuxLabs.Twitch Documentation",
    "keywords": "Constructor CapabilityRequest Namespace AuxLabs.Twitch.Chat.Requests Assembly AuxLabs.Twitch.Chat.Api.dll CapabilityRequest(bool, bool) public CapabilityRequest(bool commands, bool tags) Parameters commands bool tags bool"
  },
  "api/AuxLabs.Twitch.Chat.Requests.CapabilityRequest.HasData.html": {
    "href": "api/AuxLabs.Twitch.Chat.Requests.CapabilityRequest.HasData.html",
    "title": "Property HasData | AuxLabs.Twitch Documentation",
    "keywords": "Property HasData Namespace AuxLabs.Twitch.Chat.Requests Assembly AuxLabs.Twitch.Chat.Api.dll HasData public bool HasData { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.Requests.CapabilityRequest.html": {
    "href": "api/AuxLabs.Twitch.Chat.Requests.CapabilityRequest.html",
    "title": "Class CapabilityRequest | AuxLabs.Twitch Documentation",
    "keywords": "Class CapabilityRequest Namespace AuxLabs.Twitch.Chat.Requests Assembly AuxLabs.Twitch.Chat.Api.dll public class CapabilityRequest : IrcPayload, IPayload Inheritance object IrcPayload CapabilityRequest Implements IPayload Inherited Members IrcPayload.IsHelloEvent IrcPayload.Tags IrcPayload.Prefix IrcPayload.Command IrcPayload.CommandRaw IrcPayload.Parameters IrcPayload.ToString() IrcPayload.TagsTypeSelector IrcPayload.UserNoticeTypeSelector object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CapabilityRequest(bool, bool) Properties HasData"
  },
  "api/AuxLabs.Twitch.Chat.Requests.html": {
    "href": "api/AuxLabs.Twitch.Chat.Requests.html",
    "title": "Namespace AuxLabs.Twitch.Chat.Requests | AuxLabs.Twitch Documentation",
    "keywords": "Namespace AuxLabs.Twitch.Chat.Requests Classes BaseChatRequest CapabilityRequest JoinChannelsRequest PartChannelsRequest SendMessageRequest"
  },
  "api/AuxLabs.Twitch.Chat.Requests.JoinChannelsRequest.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Chat.Requests.JoinChannelsRequest.-ctor.html",
    "title": "Constructor JoinChannelsRequest | AuxLabs.Twitch Documentation",
    "keywords": "Constructor JoinChannelsRequest Namespace AuxLabs.Twitch.Chat.Requests Assembly AuxLabs.Twitch.Chat.Api.dll JoinChannelsRequest(params string[]) public JoinChannelsRequest(params string[] channelNames) Parameters channelNames string[] JoinChannelsRequest(string[], CancellationToken?) public JoinChannelsRequest(string[] channelNames, CancellationToken? cancelToken = null) Parameters channelNames string[] cancelToken CancellationToken?"
  },
  "api/AuxLabs.Twitch.Chat.Requests.JoinChannelsRequest.ChannelNames.html": {
    "href": "api/AuxLabs.Twitch.Chat.Requests.JoinChannelsRequest.ChannelNames.html",
    "title": "Property ChannelNames | AuxLabs.Twitch Documentation",
    "keywords": "Property ChannelNames Namespace AuxLabs.Twitch.Chat.Requests Assembly AuxLabs.Twitch.Chat.Api.dll ChannelNames public string[] ChannelNames { get; set; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Chat.Requests.JoinChannelsRequest.CreateRequest.html": {
    "href": "api/AuxLabs.Twitch.Chat.Requests.JoinChannelsRequest.CreateRequest.html",
    "title": "Method CreateRequest | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateRequest Namespace AuxLabs.Twitch.Chat.Requests Assembly AuxLabs.Twitch.Chat.Api.dll CreateRequest() public override IrcPayload CreateRequest() Returns IrcPayload"
  },
  "api/AuxLabs.Twitch.Chat.Requests.JoinChannelsRequest.html": {
    "href": "api/AuxLabs.Twitch.Chat.Requests.JoinChannelsRequest.html",
    "title": "Class JoinChannelsRequest | AuxLabs.Twitch Documentation",
    "keywords": "Class JoinChannelsRequest Namespace AuxLabs.Twitch.Chat.Requests Assembly AuxLabs.Twitch.Chat.Api.dll public class JoinChannelsRequest : BaseChatRequest Inheritance object BaseChatRequest JoinChannelsRequest Inherited Members BaseChatRequest.CancellationToken object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors JoinChannelsRequest(string[], CancellationToken?) JoinChannelsRequest(params string[]) Properties ChannelNames Methods CreateRequest() Validate(bool)"
  },
  "api/AuxLabs.Twitch.Chat.Requests.JoinChannelsRequest.Validate.html": {
    "href": "api/AuxLabs.Twitch.Chat.Requests.JoinChannelsRequest.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Chat.Requests Assembly AuxLabs.Twitch.Chat.Api.dll Validate(bool) public override void Validate(bool verified) Parameters verified bool"
  },
  "api/AuxLabs.Twitch.Chat.Requests.PartChannelsRequest.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Chat.Requests.PartChannelsRequest.-ctor.html",
    "title": "Constructor PartChannelsRequest | AuxLabs.Twitch Documentation",
    "keywords": "Constructor PartChannelsRequest Namespace AuxLabs.Twitch.Chat.Requests Assembly AuxLabs.Twitch.Chat.Api.dll PartChannelsRequest(params string[]) public PartChannelsRequest(params string[] channelNames) Parameters channelNames string[] PartChannelsRequest(string[], CancellationToken?) public PartChannelsRequest(string[] channelNames, CancellationToken? cancelToken = null) Parameters channelNames string[] cancelToken CancellationToken?"
  },
  "api/AuxLabs.Twitch.Chat.Requests.PartChannelsRequest.ChannelNames.html": {
    "href": "api/AuxLabs.Twitch.Chat.Requests.PartChannelsRequest.ChannelNames.html",
    "title": "Property ChannelNames | AuxLabs.Twitch Documentation",
    "keywords": "Property ChannelNames Namespace AuxLabs.Twitch.Chat.Requests Assembly AuxLabs.Twitch.Chat.Api.dll ChannelNames public string[] ChannelNames { get; set; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Chat.Requests.PartChannelsRequest.CreateRequest.html": {
    "href": "api/AuxLabs.Twitch.Chat.Requests.PartChannelsRequest.CreateRequest.html",
    "title": "Method CreateRequest | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateRequest Namespace AuxLabs.Twitch.Chat.Requests Assembly AuxLabs.Twitch.Chat.Api.dll CreateRequest() public override IrcPayload CreateRequest() Returns IrcPayload"
  },
  "api/AuxLabs.Twitch.Chat.Requests.PartChannelsRequest.html": {
    "href": "api/AuxLabs.Twitch.Chat.Requests.PartChannelsRequest.html",
    "title": "Class PartChannelsRequest | AuxLabs.Twitch Documentation",
    "keywords": "Class PartChannelsRequest Namespace AuxLabs.Twitch.Chat.Requests Assembly AuxLabs.Twitch.Chat.Api.dll public class PartChannelsRequest : BaseChatRequest Inheritance object BaseChatRequest PartChannelsRequest Inherited Members BaseChatRequest.CancellationToken object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PartChannelsRequest(string[], CancellationToken?) PartChannelsRequest(params string[]) Properties ChannelNames Methods CreateRequest() Validate(bool)"
  },
  "api/AuxLabs.Twitch.Chat.Requests.PartChannelsRequest.Validate.html": {
    "href": "api/AuxLabs.Twitch.Chat.Requests.PartChannelsRequest.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Chat.Requests Assembly AuxLabs.Twitch.Chat.Api.dll Validate(bool) public override void Validate(bool verified) Parameters verified bool"
  },
  "api/AuxLabs.Twitch.Chat.Requests.SendMessageRequest.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Chat.Requests.SendMessageRequest.-ctor.html",
    "title": "Constructor SendMessageRequest | AuxLabs.Twitch Documentation",
    "keywords": "Constructor SendMessageRequest Namespace AuxLabs.Twitch.Chat.Requests Assembly AuxLabs.Twitch.Chat.Api.dll SendMessageRequest(string, string, string) public SendMessageRequest(string channelName, string message, string replyMessageId = null) Parameters channelName string message string replyMessageId string SendMessageRequest(string, string, string, CancellationToken?) public SendMessageRequest(string channelName, string message, string replyMessageId = null, CancellationToken? cancelToken = null) Parameters channelName string message string replyMessageId string cancelToken CancellationToken?"
  },
  "api/AuxLabs.Twitch.Chat.Requests.SendMessageRequest.ChannelName.html": {
    "href": "api/AuxLabs.Twitch.Chat.Requests.SendMessageRequest.ChannelName.html",
    "title": "Property ChannelName | AuxLabs.Twitch Documentation",
    "keywords": "Property ChannelName Namespace AuxLabs.Twitch.Chat.Requests Assembly AuxLabs.Twitch.Chat.Api.dll ChannelName public string ChannelName { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Requests.SendMessageRequest.CreateRequest.html": {
    "href": "api/AuxLabs.Twitch.Chat.Requests.SendMessageRequest.CreateRequest.html",
    "title": "Method CreateRequest | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateRequest Namespace AuxLabs.Twitch.Chat.Requests Assembly AuxLabs.Twitch.Chat.Api.dll CreateRequest() public override IrcPayload CreateRequest() Returns IrcPayload"
  },
  "api/AuxLabs.Twitch.Chat.Requests.SendMessageRequest.html": {
    "href": "api/AuxLabs.Twitch.Chat.Requests.SendMessageRequest.html",
    "title": "Class SendMessageRequest | AuxLabs.Twitch Documentation",
    "keywords": "Class SendMessageRequest Namespace AuxLabs.Twitch.Chat.Requests Assembly AuxLabs.Twitch.Chat.Api.dll public class SendMessageRequest : BaseChatRequest Inheritance object BaseChatRequest SendMessageRequest Inherited Members BaseChatRequest.CancellationToken object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SendMessageRequest(string, string, string, CancellationToken?) SendMessageRequest(string, string, string) Properties ChannelName Message ReplyMessageId Methods CreateRequest() Validate(bool)"
  },
  "api/AuxLabs.Twitch.Chat.Requests.SendMessageRequest.Message.html": {
    "href": "api/AuxLabs.Twitch.Chat.Requests.SendMessageRequest.Message.html",
    "title": "Property Message | AuxLabs.Twitch Documentation",
    "keywords": "Property Message Namespace AuxLabs.Twitch.Chat.Requests Assembly AuxLabs.Twitch.Chat.Api.dll Message public string Message { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Requests.SendMessageRequest.ReplyMessageId.html": {
    "href": "api/AuxLabs.Twitch.Chat.Requests.SendMessageRequest.ReplyMessageId.html",
    "title": "Property ReplyMessageId | AuxLabs.Twitch Documentation",
    "keywords": "Property ReplyMessageId Namespace AuxLabs.Twitch.Chat.Requests Assembly AuxLabs.Twitch.Chat.Api.dll ReplyMessageId public string ReplyMessageId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.Requests.SendMessageRequest.Validate.html": {
    "href": "api/AuxLabs.Twitch.Chat.Requests.SendMessageRequest.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Chat.Requests Assembly AuxLabs.Twitch.Chat.Api.dll Validate(bool) public override void Validate(bool verified) Parameters verified bool"
  },
  "api/AuxLabs.Twitch.Chat.RitualType.html": {
    "href": "api/AuxLabs.Twitch.Chat.RitualType.html",
    "title": "Enum RitualType | AuxLabs.Twitch Documentation",
    "keywords": "Enum RitualType Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll public enum RitualType Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"new_chatter\")] NewChatter = 1 Unknown = 0"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.-ctor.html",
    "title": "Constructor TwitchChatClient | AuxLabs.Twitch Documentation",
    "keywords": "Constructor TwitchChatClient Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll TwitchChatClient(TwitchChatConfig) public TwitchChatClient(TwitchChatConfig config = null) Parameters config TwitchChatConfig TwitchChatClient(string, TwitchChatConfig) public TwitchChatClient(string url, TwitchChatConfig config = null) Parameters url string config TwitchChatConfig"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.ChannelBitsTierUnlocked.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.ChannelBitsTierUnlocked.html",
    "title": "Event ChannelBitsTierUnlocked | AuxLabs.Twitch Documentation",
    "keywords": "Event ChannelBitsTierUnlocked Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll Triggered when a user shares that they just unlocked a new bits tier. public event Func<Task> ChannelBitsTierUnlocked Returns Func<Task>"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.ChannelJoined.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.ChannelJoined.html",
    "title": "Event ChannelJoined | AuxLabs.Twitch Documentation",
    "keywords": "Event ChannelJoined Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll Triggered when the currently authorized user joins a channel. public event Func<string, Task> ChannelJoined Returns Func<string, Task> Remarks Provides a string that represents the channel's name."
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.ChannelLeft.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.ChannelLeft.html",
    "title": "Event ChannelLeft | AuxLabs.Twitch Documentation",
    "keywords": "Event ChannelLeft Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll Triggered when the currently authorized user leaves a channel. public event Func<ChatSimpleChannel, Task> ChannelLeft Returns Func<ChatSimpleChannel, Task> Remarks Provides an object that represents the channel, if cached."
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.ChannelRaided.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.ChannelRaided.html",
    "title": "Event ChannelRaided | AuxLabs.Twitch Documentation",
    "keywords": "Event ChannelRaided Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll Triggered when a user raids the specified channel. public event Func<ChatRaidUser, ChatSimpleChannel, int, Task> ChannelRaided Returns Func<ChatRaidUser, ChatSimpleChannel, int, Task> Remarks Provides an object that represents the raider, the channel that was raided, and the number of viewers."
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.ChannelRitual.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.ChannelRitual.html",
    "title": "Event ChannelRitual | AuxLabs.Twitch Documentation",
    "keywords": "Event ChannelRitual Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll public event Func<Task> ChannelRitual Returns Func<Task>"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.Channels.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.Channels.html",
    "title": "Property Channels | AuxLabs.Twitch Documentation",
    "keywords": "Property Channels Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll Channels public IReadOnlyCollection<ChatSimpleChannel> Channels { get; } Property Value IReadOnlyCollection<ChatSimpleChannel>"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.ChannelStateUpdated.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.ChannelStateUpdated.html",
    "title": "Event ChannelStateUpdated | AuxLabs.Twitch Documentation",
    "keywords": "Event ChannelStateUpdated Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll Triggered when the state of a channel is updated. public event Func<ChatChannel, ChatChannel, Task> ChannelStateUpdated Returns Func<ChatChannel, ChatChannel, Task> Remarks Provides the channel's state before the change, if cached, and the state after."
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.ChatCleared.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.ChatCleared.html",
    "title": "Event ChatCleared | AuxLabs.Twitch Documentation",
    "keywords": "Event ChatCleared Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll Triggered when the entire chat is cleared in a channel. public event Func<ChatChannel, IReadOnlyCollection<ChatMessage>, Task> ChatCleared Returns Func<ChatChannel, IReadOnlyCollection<ChatMessage>, Task> Remarks Provides an object that represents the channel and a collection of messages that were deleted, if cached."
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.CommandsRequested.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.CommandsRequested.html",
    "title": "Property CommandsRequested | AuxLabs.Twitch Documentation",
    "keywords": "Property CommandsRequested Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll CommandsRequested public bool CommandsRequested { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.Connected.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.Connected.html",
    "title": "Event Connected | AuxLabs.Twitch Documentation",
    "keywords": "Event Connected Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll Triggered when the socket connection is established public event Func<Task> Connected Returns Func<Task>"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.CurrentName.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.CurrentName.html",
    "title": "Property CurrentName | AuxLabs.Twitch Documentation",
    "keywords": "Property CurrentName Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll CurrentName public string CurrentName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.Disconnected.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.Disconnected.html",
    "title": "Event Disconnected | AuxLabs.Twitch Documentation",
    "keywords": "Event Disconnected Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll Triggered when the socket connection is closed public event Func<Exception, Task> Disconnected Returns Func<Exception, Task>"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.Dispose.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.Dispose.html",
    "title": "Method Dispose | AuxLabs.Twitch Documentation",
    "keywords": "Method Dispose Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.GetChannel.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.GetChannel.html",
    "title": "Method GetChannel | AuxLabs.Twitch Documentation",
    "keywords": "Method GetChannel Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll GetChannel(string) Get a channel from the cache public ChatSimpleChannel GetChannel(string id) Parameters id string Returns ChatSimpleChannel"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.GetChannelByName.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.GetChannelByName.html",
    "title": "Method GetChannelByName | AuxLabs.Twitch Documentation",
    "keywords": "Method GetChannelByName Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll GetChannelByName(string) public ChatSimpleChannel GetChannelByName(string name) Parameters name string Returns ChatSimpleChannel"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.html",
    "title": "Class TwitchChatClient | AuxLabs.Twitch Documentation",
    "keywords": "Class TwitchChatClient Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll public class TwitchChatClient Inheritance object TwitchChatClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TwitchChatClient(TwitchChatConfig) TwitchChatClient(string, TwitchChatConfig) Properties Channels CommandsRequested CurrentName Identity IRC IsReadOnly MessageCacheSize MyUser Rest TagsRequested ThrowOnUnknownEvent UseBufferedResponses UserCacheSize Methods Dispose(bool) GetChannel(string) Get a channel from the cache GetChannelByName(string) JoinChannelAsync(string, CancellationToken?) JoinChannelsAsync(string[], CancellationToken?) JoinChannelsAsync(params string[]) JoinMyChannelAsync(CancellationToken?) LeaveChannelAsync(string, CancellationToken?) LeaveChannelAsync(string) LeaveChannelsAsync(string[], CancellationToken?) LeaveChannelsAsync(params string[]) RunAsync() SendMessageAsync(string, string, string, CancellationToken?) ValidateAsync() ValidateAsync(string, string) Events ChannelBitsTierUnlocked Triggered when a user shares that they just unlocked a new bits tier. ChannelJoined Triggered when the currently authorized user joins a channel. ChannelLeft Triggered when the currently authorized user leaves a channel. ChannelRaided Triggered when a user raids the specified channel. ChannelRitual ChannelStateUpdated Triggered when the state of a channel is updated. ChatCleared Triggered when the entire chat is cleared in a channel. Connected Triggered when the socket connection is established Disconnected Triggered when the socket connection is closed LoggedIn Triggered when the socket connection is established MessageDeleted Triggered when a message is deleted in a channel. MessageReceived Triggered when a message is received in a channel Reconnect Triggered when the server tells the client to reconnect Subscription SubscriptionGifted SubscriptionGiftUpgraded SubscriptionMessageReceived Triggered when a subscription message is received in a channel UnknownEventReceived Triggered when an unknown event is received UserBanned Triggered when a user is banned in a channel. UserJoinedChannel Triggered when any user joins a channel. UserLeftChannel Triggered when any user leaves a channel. UserStateUpdated Triggered when the current user's state is updated. WhisperReceived"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.Identity.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.Identity.html",
    "title": "Property Identity | AuxLabs.Twitch Documentation",
    "keywords": "Property Identity Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll Identity public UserIdentity Identity { get; } Property Value UserIdentity"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.IRC.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.IRC.html",
    "title": "Property IRC | AuxLabs.Twitch Documentation",
    "keywords": "Property IRC Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll IRC protected TwitchChatApiClient IRC { get; } Property Value TwitchChatApiClient"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.IsReadOnly.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.IsReadOnly.html",
    "title": "Property IsReadOnly | AuxLabs.Twitch Documentation",
    "keywords": "Property IsReadOnly Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll IsReadOnly public bool IsReadOnly { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.JoinChannelAsync.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.JoinChannelAsync.html",
    "title": "Method JoinChannelAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method JoinChannelAsync Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll JoinChannelAsync(string, CancellationToken?) public Task<ChatChannel> JoinChannelAsync(string channelName, CancellationToken? cancelToken = null) Parameters channelName string cancelToken CancellationToken? Returns Task<ChatChannel>"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.JoinChannelsAsync.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.JoinChannelsAsync.html",
    "title": "Method JoinChannelsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method JoinChannelsAsync Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll JoinChannelsAsync(params string[]) public IAsyncEnumerable<ChatChannel> JoinChannelsAsync(params string[] channelNames) Parameters channelNames string[] Returns IAsyncEnumerable<ChatChannel> JoinChannelsAsync(string[], CancellationToken?) public IAsyncEnumerable<ChatChannel> JoinChannelsAsync(string[] channelNames, CancellationToken? cancelToken = null) Parameters channelNames string[] cancelToken CancellationToken? Returns IAsyncEnumerable<ChatChannel>"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.JoinMyChannelAsync.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.JoinMyChannelAsync.html",
    "title": "Method JoinMyChannelAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method JoinMyChannelAsync Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll JoinMyChannelAsync(CancellationToken?) public Task<ChatChannel> JoinMyChannelAsync(CancellationToken? cancelToken = null) Parameters cancelToken CancellationToken? Returns Task<ChatChannel>"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.LeaveChannelAsync.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.LeaveChannelAsync.html",
    "title": "Method LeaveChannelAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method LeaveChannelAsync Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll LeaveChannelAsync(string) public Task<ChatSimpleChannel> LeaveChannelAsync(string channelName) Parameters channelName string Returns Task<ChatSimpleChannel> LeaveChannelAsync(string, CancellationToken?) public Task<ChatSimpleChannel> LeaveChannelAsync(string channelName, CancellationToken? cancelToken = null) Parameters channelName string cancelToken CancellationToken? Returns Task<ChatSimpleChannel>"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.LeaveChannelsAsync.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.LeaveChannelsAsync.html",
    "title": "Method LeaveChannelsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method LeaveChannelsAsync Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll LeaveChannelsAsync(params string[]) public IAsyncEnumerable<ChatSimpleChannel> LeaveChannelsAsync(params string[] channelNames) Parameters channelNames string[] Returns IAsyncEnumerable<ChatSimpleChannel> LeaveChannelsAsync(string[], CancellationToken?) public IAsyncEnumerable<ChatSimpleChannel> LeaveChannelsAsync(string[] channelNames, CancellationToken? cancelToken = null) Parameters channelNames string[] cancelToken CancellationToken? Returns IAsyncEnumerable<ChatSimpleChannel>"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.LoggedIn.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.LoggedIn.html",
    "title": "Event LoggedIn | AuxLabs.Twitch Documentation",
    "keywords": "Event LoggedIn Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll Triggered when the socket connection is established public event Func<ChatSelfUser, Task> LoggedIn Returns Func<ChatSelfUser, Task>"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.MessageCacheSize.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.MessageCacheSize.html",
    "title": "Property MessageCacheSize | AuxLabs.Twitch Documentation",
    "keywords": "Property MessageCacheSize Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll MessageCacheSize public int MessageCacheSize { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.MessageDeleted.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.MessageDeleted.html",
    "title": "Event MessageDeleted | AuxLabs.Twitch Documentation",
    "keywords": "Event MessageDeleted Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll Triggered when a message is deleted in a channel. public event Func<ChatSimpleMessage, Task> MessageDeleted Returns Func<ChatSimpleMessage, Task> Remarks Provides an object that represents the deleted message."
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.MessageReceived.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.MessageReceived.html",
    "title": "Event MessageReceived | AuxLabs.Twitch Documentation",
    "keywords": "Event MessageReceived Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll Triggered when a message is received in a channel public event Func<ChatMessage, Task> MessageReceived Returns Func<ChatMessage, Task> Remarks Provides an object that represents the message."
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.MyUser.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.MyUser.html",
    "title": "Property MyUser | AuxLabs.Twitch Documentation",
    "keywords": "Property MyUser Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll MyUser public ChatSelfUser MyUser { get; } Property Value ChatSelfUser"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.Reconnect.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.Reconnect.html",
    "title": "Event Reconnect | AuxLabs.Twitch Documentation",
    "keywords": "Event Reconnect Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll Triggered when the server tells the client to reconnect public event Func<Task> Reconnect Returns Func<Task>"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.Rest.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.Rest.html",
    "title": "Property Rest | AuxLabs.Twitch Documentation",
    "keywords": "Property Rest Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll Rest public TwitchRestClient Rest { get; } Property Value TwitchRestClient"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.RunAsync.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.RunAsync.html",
    "title": "Method RunAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method RunAsync Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll RunAsync() public Task RunAsync() Returns Task"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.SendMessageAsync.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.SendMessageAsync.html",
    "title": "Method SendMessageAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method SendMessageAsync Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll SendMessageAsync(string, string, string, CancellationToken?) public Task<string> SendMessageAsync(string channelName, string text, string replyMessageId = null, CancellationToken? cancelToken = null) Parameters channelName string text string replyMessageId string cancelToken CancellationToken? Returns Task<string>"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.Subscription.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.Subscription.html",
    "title": "Event Subscription | AuxLabs.Twitch Documentation",
    "keywords": "Event Subscription Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll public event Func<Task> Subscription Returns Func<Task>"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.SubscriptionGifted.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.SubscriptionGifted.html",
    "title": "Event SubscriptionGifted | AuxLabs.Twitch Documentation",
    "keywords": "Event SubscriptionGifted Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll public event Func<Task> SubscriptionGifted Returns Func<Task>"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.SubscriptionGiftUpgraded.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.SubscriptionGiftUpgraded.html",
    "title": "Event SubscriptionGiftUpgraded | AuxLabs.Twitch Documentation",
    "keywords": "Event SubscriptionGiftUpgraded Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll public event Func<Task> SubscriptionGiftUpgraded Returns Func<Task>"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.SubscriptionMessageReceived.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.SubscriptionMessageReceived.html",
    "title": "Event SubscriptionMessageReceived | AuxLabs.Twitch Documentation",
    "keywords": "Event SubscriptionMessageReceived Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll Triggered when a subscription message is received in a channel public event Func<ChatMessage, Task> SubscriptionMessageReceived Returns Func<ChatMessage, Task> Remarks Provides an object that represents any type of subscription message."
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.TagsRequested.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.TagsRequested.html",
    "title": "Property TagsRequested | AuxLabs.Twitch Documentation",
    "keywords": "Property TagsRequested Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll TagsRequested public bool TagsRequested { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.ThrowOnUnknownEvent.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.ThrowOnUnknownEvent.html",
    "title": "Property ThrowOnUnknownEvent | AuxLabs.Twitch Documentation",
    "keywords": "Property ThrowOnUnknownEvent Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll ThrowOnUnknownEvent public bool ThrowOnUnknownEvent { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.UnknownEventReceived.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.UnknownEventReceived.html",
    "title": "Event UnknownEventReceived | AuxLabs.Twitch Documentation",
    "keywords": "Event UnknownEventReceived Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll Triggered when an unknown event is received public event Func<IrcPayload, Task> UnknownEventReceived Returns Func<IrcPayload, Task>"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.UseBufferedResponses.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.UseBufferedResponses.html",
    "title": "Property UseBufferedResponses | AuxLabs.Twitch Documentation",
    "keywords": "Property UseBufferedResponses Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll UseBufferedResponses public bool UseBufferedResponses { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.UserBanned.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.UserBanned.html",
    "title": "Event UserBanned | AuxLabs.Twitch Documentation",
    "keywords": "Event UserBanned Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll Triggered when a user is banned in a channel. public event Func<ChatChannel, Cacheable<IChatUser, string>, TimeSpan?, Task> UserBanned Returns Func<ChatChannel, Cacheable<IChatUser, string>, TimeSpan?, Task> Remarks Provides objects that represent the channel, the banned user if cached, or their user id, and the amount of time they were banned. The ban is permanent if time is null."
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.UserCacheSize.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.UserCacheSize.html",
    "title": "Property UserCacheSize | AuxLabs.Twitch Documentation",
    "keywords": "Property UserCacheSize Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll UserCacheSize public int UserCacheSize { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.UserJoinedChannel.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.UserJoinedChannel.html",
    "title": "Event UserJoinedChannel | AuxLabs.Twitch Documentation",
    "keywords": "Event UserJoinedChannel Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll Triggered when any user joins a channel. public event Func<ChatSimpleChannel, string, Task> UserJoinedChannel Returns Func<ChatSimpleChannel, string, Task> Remarks Provides an object that represents the channel, and a string that represents the user's name."
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.UserLeftChannel.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.UserLeftChannel.html",
    "title": "Event UserLeftChannel | AuxLabs.Twitch Documentation",
    "keywords": "Event UserLeftChannel Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll Triggered when any user leaves a channel. public event Func<ChatSimpleChannel, string, Task> UserLeftChannel Returns Func<ChatSimpleChannel, string, Task> Remarks Provides an object that represents the channel, and a string that represents the user's name."
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.UserStateUpdated.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.UserStateUpdated.html",
    "title": "Event UserStateUpdated | AuxLabs.Twitch Documentation",
    "keywords": "Event UserStateUpdated Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll Triggered when the current user's state is updated. public event Func<ChatChannelSelfUser, ChatChannelSelfUser, string, Task> UserStateUpdated Returns Func<ChatChannelSelfUser, ChatChannelSelfUser, string, Task> Remarks Provides the user's state before the change, if cached, the state after, and a message Id if one was sent."
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.ValidateAsync.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.ValidateAsync.html",
    "title": "Method ValidateAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method ValidateAsync Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll ValidateAsync() public Task ValidateAsync() Returns Task ValidateAsync(string, string) public Task ValidateAsync(string token, string refreshToken = null) Parameters token string refreshToken string Returns Task"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatClient.WhisperReceived.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatClient.WhisperReceived.html",
    "title": "Event WhisperReceived | AuxLabs.Twitch Documentation",
    "keywords": "Event WhisperReceived Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll public event Func<ChatWhisperMessage, Task> WhisperReceived Returns Func<ChatWhisperMessage, Task>"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatConfig.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatConfig.html",
    "title": "Class TwitchChatConfig | AuxLabs.Twitch Documentation",
    "keywords": "Class TwitchChatConfig Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll public class TwitchChatConfig : TwitchChatApiConfig Inheritance object TwitchChatApiConfig TwitchChatConfig Inherited Members TwitchChatApiConfig.RequestCommands TwitchChatApiConfig.RequestTags TwitchChatApiConfig.ThrowOnUnknownEvent TwitchChatApiConfig.ThrowOnUnhandledTags TwitchChatApiConfig.UseVerifiedRateLimits TwitchChatApiConfig.IrcSerializer object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties MessageCacheSize How many messages to keep in the cache per channel. RestConfig Configuration for the internal rest client UseBufferedResponses Should the client wait for and return relative event data after a request is submitted? UserCacheSize How many users to keep in the cache per channel."
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatConfig.MessageCacheSize.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatConfig.MessageCacheSize.html",
    "title": "Property MessageCacheSize | AuxLabs.Twitch Documentation",
    "keywords": "Property MessageCacheSize Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll MessageCacheSize How many messages to keep in the cache per channel. public int MessageCacheSize { get; set; } Property Value int Remarks Setting to 0 disables the message cache."
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatConfig.RestConfig.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatConfig.RestConfig.html",
    "title": "Property RestConfig | AuxLabs.Twitch Documentation",
    "keywords": "Property RestConfig Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll RestConfig Configuration for the internal rest client public TwitchRestConfig RestConfig { get; set; } Property Value TwitchRestConfig"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatConfig.UseBufferedResponses.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatConfig.UseBufferedResponses.html",
    "title": "Property UseBufferedResponses | AuxLabs.Twitch Documentation",
    "keywords": "Property UseBufferedResponses Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll UseBufferedResponses Should the client wait for and return relative event data after a request is submitted? public bool UseBufferedResponses { get; set; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Chat.TwitchChatConfig.UserCacheSize.html": {
    "href": "api/AuxLabs.Twitch.Chat.TwitchChatConfig.UserCacheSize.html",
    "title": "Property UserCacheSize | AuxLabs.Twitch Documentation",
    "keywords": "Property UserCacheSize Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.dll UserCacheSize How many users to keep in the cache per channel. public int UserCacheSize { get; set; } Property Value int Remarks Setting to 0 disables the user cache."
  },
  "api/AuxLabs.Twitch.Chat.UserNoticeType.html": {
    "href": "api/AuxLabs.Twitch.Chat.UserNoticeType.html",
    "title": "Enum UserNoticeType | AuxLabs.Twitch Documentation",
    "keywords": "Enum UserNoticeType Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll public enum UserNoticeType Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"announcement\")] Announcement = 1 [EnumMember(Value = \"bitsbadgetier\")] BitsBadgeTier = 12 [EnumMember(Value = \"raid\")] Raid = 9 [EnumMember(Value = \"resub\")] Resubscription = 3 [EnumMember(Value = \"rewardgift\")] RewardGift = 7 [EnumMember(Value = \"ritual\")] Ritual = 11 [EnumMember(Value = \"sub\")] Subscription = 2 [EnumMember(Value = \"subgift\")] SubscriptionGift = 4 [EnumMember(Value = \"giftpaidupgrade\")] SubscriptionGiftUpgrade = 6 [EnumMember(Value = \"anongiftpaidupgrade\")] SubscriptionGiftUpgradeAnonymous = 8 [EnumMember(Value = \"submysterygift\")] SubscriptionMysteryGift = 5 Unknown = 0 [EnumMember(Value = \"unraid\")] Unraid = 10"
  },
  "api/AuxLabs.Twitch.Chat.UserType.html": {
    "href": "api/AuxLabs.Twitch.Chat.UserType.html",
    "title": "Enum UserType | AuxLabs.Twitch Documentation",
    "keywords": "Enum UserType Namespace AuxLabs.Twitch.Chat Assembly AuxLabs.Twitch.Chat.Api.dll public enum UserType Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"admin\")] Admin = 1 [EnumMember(Value = \"global_mod\")] GlobalModerator = 2 [EnumMember(Value = \"\")] Normal = 0 [EnumMember(Value = \"staff\")] Staff = 3"
  },
  "api/AuxLabs.Twitch.ChatColor.html": {
    "href": "api/AuxLabs.Twitch.ChatColor.html",
    "title": "Enum ChatColor | AuxLabs.Twitch Documentation",
    "keywords": "Enum ChatColor Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum ChatColor Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"blue\")] Blue = 1 [EnumMember(Value = \"blue_violet\")] BlueViolet = 2 [EnumMember(Value = \"cadet_blue\")] CadetBlue = 3 [EnumMember(Value = \"chocolate\")] Chocolate = 4 [EnumMember(Value = \"coral\")] Coral = 5 [EnumMember(Value = \"dodger_blue\")] DodgerBlue = 6 [EnumMember(Value = \"firebrick\")] Firebrick = 7 [EnumMember(Value = \"golden_rod\")] GoldenRod = 8 [EnumMember(Value = \"green\")] Green = 9 [EnumMember(Value = \"hot_pink\")] HotPink = 10 None = 0 [EnumMember(Value = \"orange_red\")] OrangeRed = 11 [EnumMember(Value = \"red\")] Red = 12 [EnumMember(Value = \"sea_green\")] SeaGreen = 13 [EnumMember(Value = \"spring_green\")] SpringGreen = 14 [EnumMember(Value = \"yellow_green\")] YellowGreen = 15"
  },
  "api/AuxLabs.Twitch.CheermoteType.html": {
    "href": "api/AuxLabs.Twitch.CheermoteType.html",
    "title": "Enum CheermoteType | AuxLabs.Twitch Documentation",
    "keywords": "Enum CheermoteType Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum CheermoteType Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"channel_custom\")] ChannelCustom = 3 [EnumMember(Value = \"display_only\")] DisplayOnly = 4 [EnumMember(Value = \"global_first_party\")] GlobalFirstParty = 1 [EnumMember(Value = \"global_third_party\")] GlobalThirdParty = 2 None = 0 [EnumMember(Value = \"sponsored\")] Sponsored = 5"
  },
  "api/AuxLabs.Twitch.CostType.html": {
    "href": "api/AuxLabs.Twitch.CostType.html",
    "title": "Enum CostType | AuxLabs.Twitch Documentation",
    "keywords": "Enum CostType Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum CostType Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"bits\")] Bits = 1 None = 0"
  },
  "api/AuxLabs.Twitch.CultureInfoConverter.html": {
    "href": "api/AuxLabs.Twitch.CultureInfoConverter.html",
    "title": "Class CultureInfoConverter | AuxLabs.Twitch Documentation",
    "keywords": "Class CultureInfoConverter Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public class CultureInfoConverter : JsonConverter<CultureInfo> Inheritance object JsonConverter JsonConverter<CultureInfo> CultureInfoConverter Inherited Members JsonConverter<CultureInfo>.CanConvert(Type) JsonConverter<CultureInfo>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<CultureInfo>.WriteAsPropertyName(Utf8JsonWriter, CultureInfo, JsonSerializerOptions) JsonConverter<CultureInfo>.HandleNull object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Write(Utf8JsonWriter, CultureInfo, JsonSerializerOptions)"
  },
  "api/AuxLabs.Twitch.CultureInfoConverter.Read.html": {
    "href": "api/AuxLabs.Twitch.CultureInfoConverter.Read.html",
    "title": "Method Read | AuxLabs.Twitch Documentation",
    "keywords": "Method Read Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Read(ref Utf8JsonReader, Type, JsonSerializerOptions) public override CultureInfo Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader typeToConvert Type options JsonSerializerOptions Returns CultureInfo"
  },
  "api/AuxLabs.Twitch.CultureInfoConverter.Write.html": {
    "href": "api/AuxLabs.Twitch.CultureInfoConverter.Write.html",
    "title": "Method Write | AuxLabs.Twitch Documentation",
    "keywords": "Method Write Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Write(Utf8JsonWriter, CultureInfo, JsonSerializerOptions) public override void Write(Utf8JsonWriter writer, CultureInfo value, JsonSerializerOptions options) Parameters writer Utf8JsonWriter value CultureInfo options JsonSerializerOptions"
  },
  "api/AuxLabs.Twitch.DateRange.-ctor.html": {
    "href": "api/AuxLabs.Twitch.DateRange.-ctor.html",
    "title": "Constructor DateRange | AuxLabs.Twitch Documentation",
    "keywords": "Constructor DateRange Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll DateRange(DateTime, DateTime) [JsonConstructor] public DateRange(DateTime startedAt, DateTime endedAt) Parameters startedAt DateTime endedAt DateTime"
  },
  "api/AuxLabs.Twitch.DateRange.EndedAt.html": {
    "href": "api/AuxLabs.Twitch.DateRange.EndedAt.html",
    "title": "Property EndedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property EndedAt Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll EndedAt [JsonPropertyName(\"ended_at\")] public DateTime EndedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.DateRange.html": {
    "href": "api/AuxLabs.Twitch.DateRange.html",
    "title": "Struct DateRange | AuxLabs.Twitch Documentation",
    "keywords": "Struct DateRange Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public readonly struct DateRange Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors DateRange(DateTime, DateTime) Properties EndedAt StartedAt"
  },
  "api/AuxLabs.Twitch.DateRange.StartedAt.html": {
    "href": "api/AuxLabs.Twitch.DateRange.StartedAt.html",
    "title": "Property StartedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property StartedAt Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll StartedAt [JsonPropertyName(\"started_at\")] public DateTime StartedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.DefaultRateLimiter.-ctor.html": {
    "href": "api/AuxLabs.Twitch.DefaultRateLimiter.-ctor.html",
    "title": "Constructor DefaultRateLimiter | AuxLabs.Twitch Documentation",
    "keywords": "Constructor DefaultRateLimiter Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll DefaultRateLimiter() public DefaultRateLimiter()"
  },
  "api/AuxLabs.Twitch.DefaultRateLimiter.EnterBucketLockAsync.html": {
    "href": "api/AuxLabs.Twitch.DefaultRateLimiter.EnterBucketLockAsync.html",
    "title": "Method EnterBucketLockAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method EnterBucketLockAsync Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll EnterBucketLockAsync(string, CancellationToken) public virtual Task EnterBucketLockAsync(string bucketId, CancellationToken cancelToken) Parameters bucketId string cancelToken CancellationToken Returns Task"
  },
  "api/AuxLabs.Twitch.DefaultRateLimiter.EnterGlobalLockAsync.html": {
    "href": "api/AuxLabs.Twitch.DefaultRateLimiter.EnterGlobalLockAsync.html",
    "title": "Method EnterGlobalLockAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method EnterGlobalLockAsync Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll EnterGlobalLockAsync(CancellationToken) public virtual Task EnterGlobalLockAsync(CancellationToken cancelToken) Parameters cancelToken CancellationToken Returns Task"
  },
  "api/AuxLabs.Twitch.DefaultRateLimiter.EnterLockAsync.html": {
    "href": "api/AuxLabs.Twitch.DefaultRateLimiter.EnterLockAsync.html",
    "title": "Method EnterLockAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method EnterLockAsync Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll EnterLockAsync(string, CancellationToken) public Task EnterLockAsync(string bucketId, CancellationToken cancelToken) Parameters bucketId string cancelToken CancellationToken Returns Task"
  },
  "api/AuxLabs.Twitch.DefaultRateLimiter.html": {
    "href": "api/AuxLabs.Twitch.DefaultRateLimiter.html",
    "title": "Class DefaultRateLimiter | AuxLabs.Twitch Documentation",
    "keywords": "Class DefaultRateLimiter Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public class DefaultRateLimiter : IRateLimiter Inheritance object DefaultRateLimiter Implements IRateLimiter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DefaultRateLimiter() Methods EnterBucketLockAsync(string, CancellationToken) EnterGlobalLockAsync(CancellationToken) EnterLockAsync(string, CancellationToken) UpdateLimit(string, RateLimitInfo, bool)"
  },
  "api/AuxLabs.Twitch.DefaultRateLimiter.UpdateLimit.html": {
    "href": "api/AuxLabs.Twitch.DefaultRateLimiter.UpdateLimit.html",
    "title": "Method UpdateLimit | AuxLabs.Twitch Documentation",
    "keywords": "Method UpdateLimit Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll UpdateLimit(string, RateLimitInfo, bool) public virtual void UpdateLimit(string bucketId, RateLimitInfo info, bool isRatelimited = false) Parameters bucketId string info RateLimitInfo isRatelimited bool"
  },
  "api/AuxLabs.Twitch.DropStatus.html": {
    "href": "api/AuxLabs.Twitch.DropStatus.html",
    "title": "Enum DropStatus | AuxLabs.Twitch Documentation",
    "keywords": "Enum DropStatus Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum DropStatus Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"INVALID_ID\")] InvalidId = 0 The entitlement IDs are not valid. [EnumMember(Value = \"NOT_FOUND\")] NotFound = 1 The entitlement IDs were not found. [EnumMember(Value = \"SUCCESS\")] Success = 2 The status of the entitlements were successfully updated. [EnumMember(Value = \"UNAUTHORIZED\")] Unauthorized = 3 The user or organization identified by the user access token is not authorized to update the entitlements. [EnumMember(Value = \"UPDATE_FAILED\")] UpdateFailed = 4 The update failed. These are considered transient errors and the request should be retried later."
  },
  "api/AuxLabs.Twitch.EmoteFormat.html": {
    "href": "api/AuxLabs.Twitch.EmoteFormat.html",
    "title": "Enum EmoteFormat | AuxLabs.Twitch Documentation",
    "keywords": "Enum EmoteFormat Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum EmoteFormat Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"animated\")] Animated = 1 [EnumMember(Value = \"static\")] Static = 0"
  },
  "api/AuxLabs.Twitch.EmotePosition.-ctor.html": {
    "href": "api/AuxLabs.Twitch.EmotePosition.-ctor.html",
    "title": "Constructor EmotePosition | AuxLabs.Twitch Documentation",
    "keywords": "Constructor EmotePosition Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll EmotePosition(string, Range) public EmotePosition(string id, Range range) Parameters id string range Range"
  },
  "api/AuxLabs.Twitch.EmotePosition.html": {
    "href": "api/AuxLabs.Twitch.EmotePosition.html",
    "title": "Struct EmotePosition | AuxLabs.Twitch Documentation",
    "keywords": "Struct EmotePosition Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public readonly struct EmotePosition Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors EmotePosition(string, Range) Properties Id An ID that uniquely identifies this emote Range The position of this emote in a message Methods Parse(string, string, out EmotePosition) ToString() TryParseMany(string, out IReadOnlyCollection<EmotePosition>)"
  },
  "api/AuxLabs.Twitch.EmotePosition.Id.html": {
    "href": "api/AuxLabs.Twitch.EmotePosition.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Id An ID that uniquely identifies this emote public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EmotePosition.Parse.html": {
    "href": "api/AuxLabs.Twitch.EmotePosition.Parse.html",
    "title": "Method Parse | AuxLabs.Twitch Documentation",
    "keywords": "Method Parse Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Parse(string, string, out EmotePosition) public static void Parse(string id, string range, out EmotePosition emote) Parameters id string range string emote EmotePosition"
  },
  "api/AuxLabs.Twitch.EmotePosition.Range.html": {
    "href": "api/AuxLabs.Twitch.EmotePosition.Range.html",
    "title": "Property Range | AuxLabs.Twitch Documentation",
    "keywords": "Property Range Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Range The position of this emote in a message public Range Range { get; } Property Value Range"
  },
  "api/AuxLabs.Twitch.EmotePosition.ToString.html": {
    "href": "api/AuxLabs.Twitch.EmotePosition.ToString.html",
    "title": "Method ToString | AuxLabs.Twitch Documentation",
    "keywords": "Method ToString Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll ToString() public override string ToString() Returns string"
  },
  "api/AuxLabs.Twitch.EmotePosition.TryParseMany.html": {
    "href": "api/AuxLabs.Twitch.EmotePosition.TryParseMany.html",
    "title": "Method TryParseMany | AuxLabs.Twitch Documentation",
    "keywords": "Method TryParseMany Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll TryParseMany(string, out IReadOnlyCollection<EmotePosition>) public static bool TryParseMany(string value, out IReadOnlyCollection<EmotePosition> emotes) Parameters value string emotes IReadOnlyCollection<EmotePosition> Returns bool"
  },
  "api/AuxLabs.Twitch.EmotePositionConverter.html": {
    "href": "api/AuxLabs.Twitch.EmotePositionConverter.html",
    "title": "Class EmotePositionConverter | AuxLabs.Twitch Documentation",
    "keywords": "Class EmotePositionConverter Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public class EmotePositionConverter : JsonConverter<EmotePosition> Inheritance object JsonConverter JsonConverter<EmotePosition> EmotePositionConverter Inherited Members JsonConverter<EmotePosition>.CanConvert(Type) JsonConverter<EmotePosition>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<EmotePosition>.WriteAsPropertyName(Utf8JsonWriter, EmotePosition, JsonSerializerOptions) JsonConverter<EmotePosition>.HandleNull object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Write(Utf8JsonWriter, EmotePosition, JsonSerializerOptions)"
  },
  "api/AuxLabs.Twitch.EmotePositionConverter.Read.html": {
    "href": "api/AuxLabs.Twitch.EmotePositionConverter.Read.html",
    "title": "Method Read | AuxLabs.Twitch Documentation",
    "keywords": "Method Read Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Read(ref Utf8JsonReader, Type, JsonSerializerOptions) public override EmotePosition Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader typeToConvert Type options JsonSerializerOptions Returns EmotePosition"
  },
  "api/AuxLabs.Twitch.EmotePositionConverter.Write.html": {
    "href": "api/AuxLabs.Twitch.EmotePositionConverter.Write.html",
    "title": "Method Write | AuxLabs.Twitch Documentation",
    "keywords": "Method Write Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Write(Utf8JsonWriter, EmotePosition, JsonSerializerOptions) public override void Write(Utf8JsonWriter writer, EmotePosition value, JsonSerializerOptions options) Parameters writer Utf8JsonWriter value EmotePosition options JsonSerializerOptions"
  },
  "api/AuxLabs.Twitch.EmoteScale.html": {
    "href": "api/AuxLabs.Twitch.EmoteScale.html",
    "title": "Enum EmoteScale | AuxLabs.Twitch Documentation",
    "keywords": "Enum EmoteScale Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum EmoteScale Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"3.0\")] Large = 3 A large version (112px x 112px) is available. [EnumMember(Value = \"2.0\")] Medium = 2 A medium version (56px x 56px) is available. [EnumMember(Value = \"1.0\")] Small = 1 A small version (28px x 28px) is available."
  },
  "api/AuxLabs.Twitch.EmoteTheme.html": {
    "href": "api/AuxLabs.Twitch.EmoteTheme.html",
    "title": "Enum EmoteTheme | AuxLabs.Twitch Documentation",
    "keywords": "Enum EmoteTheme Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum EmoteTheme Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"dark\")] Dark = 0 [EnumMember(Value = \"light\")] Light = 1"
  },
  "api/AuxLabs.Twitch.EmoteType.html": {
    "href": "api/AuxLabs.Twitch.EmoteType.html",
    "title": "Enum EmoteType | AuxLabs.Twitch Documentation",
    "keywords": "Enum EmoteType Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum EmoteType Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"bitstier\")] BitsTier = 1 A custom bits tier emote. [EnumMember(Value = \"follower\")] Follower = 2 A custom follower emote. None = 0 [EnumMember(Value = \"subscriptions\")] Subscription = 3 A custom subscriber emote."
  },
  "api/AuxLabs.Twitch.EnumHelper.GetEnumValue.html": {
    "href": "api/AuxLabs.Twitch.EnumHelper.GetEnumValue.html",
    "title": "Method GetEnumValue | AuxLabs.Twitch Documentation",
    "keywords": "Method GetEnumValue Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll GetEnumValue<T>(string) public static T GetEnumValue<T>(string value) where T : Enum Parameters value string Returns T Type Parameters T"
  },
  "api/AuxLabs.Twitch.EnumHelper.GetStringValue.html": {
    "href": "api/AuxLabs.Twitch.EnumHelper.GetStringValue.html",
    "title": "Method GetStringValue | AuxLabs.Twitch Documentation",
    "keywords": "Method GetStringValue Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll GetStringValue<T>(T) public static string GetStringValue<T>(this T value) where T : Enum Parameters value T Returns string Type Parameters T"
  },
  "api/AuxLabs.Twitch.EnumHelper.html": {
    "href": "api/AuxLabs.Twitch.EnumHelper.html",
    "title": "Class EnumHelper | AuxLabs.Twitch Documentation",
    "keywords": "Class EnumHelper Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public static class EnumHelper Inheritance object EnumHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetEnumValue<T>(string) GetStringValue<T>(T)"
  },
  "api/AuxLabs.Twitch.EventSub.Api.EventSubFrame.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.EventSubFrame.html",
    "title": "Class EventSubFrame | AuxLabs.Twitch Documentation",
    "keywords": "Class EventSubFrame Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll public class EventSubFrame : IPayload Inheritance object EventSubFrame Implements IPayload Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsHelloEvent Metadata An object that identifies the message. Payload An object that contains the message."
  },
  "api/AuxLabs.Twitch.EventSub.Api.EventSubFrame.IsHelloEvent.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.EventSubFrame.IsHelloEvent.html",
    "title": "Property IsHelloEvent | AuxLabs.Twitch Documentation",
    "keywords": "Property IsHelloEvent Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll IsHelloEvent [JsonIgnore] public bool IsHelloEvent { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.EventSub.Api.EventSubFrame.Metadata.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.EventSubFrame.Metadata.html",
    "title": "Property Metadata | AuxLabs.Twitch Documentation",
    "keywords": "Property Metadata Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Metadata An object that identifies the message. [JsonPropertyName(\"metadata\")] public WebSocketMetadata Metadata { get; set; } Property Value WebSocketMetadata"
  },
  "api/AuxLabs.Twitch.EventSub.Api.EventSubFrame.Payload.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.EventSubFrame.Payload.html",
    "title": "Property Payload | AuxLabs.Twitch Documentation",
    "keywords": "Property Payload Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Payload An object that contains the message. [JsonPropertyName(\"payload\")] public EventSubWebSocketPayload Payload { get; set; } Property Value EventSubWebSocketPayload"
  },
  "api/AuxLabs.Twitch.EventSub.Api.EventSubPayload-1.Challenge.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.EventSubPayload-1.Challenge.html",
    "title": "Property Challenge | AuxLabs.Twitch Documentation",
    "keywords": "Property Challenge Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Challenge [JsonInclude] [JsonPropertyName(\"challenge\")] public string Challenge { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Api.EventSubPayload-1.Event.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.EventSubPayload-1.Event.html",
    "title": "Property Event | AuxLabs.Twitch Documentation",
    "keywords": "Property Event Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Event [JsonInclude] [JsonPropertyName(\"event\")] public TEvent Event { get; } Property Value TEvent"
  },
  "api/AuxLabs.Twitch.EventSub.Api.EventSubPayload-1.EventTypeSelector.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.EventSubPayload-1.EventTypeSelector.html",
    "title": "Property EventTypeSelector | AuxLabs.Twitch Documentation",
    "keywords": "Property EventTypeSelector Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll EventTypeSelector [JsonIgnore] public static Dictionary<EventSubType, Type> EventTypeSelector { get; } Property Value Dictionary<EventSubType, Type>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.EventSubPayload-1.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.EventSubPayload-1.html",
    "title": "Class EventSubPayload<TEvent> | AuxLabs.Twitch Documentation",
    "keywords": "Class EventSubPayload<TEvent> Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll public class EventSubPayload<TEvent> Type Parameters TEvent Inheritance object EventSubPayload<TEvent> Derived EventSubPayload Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Challenge Event EventTypeSelector Subscription"
  },
  "api/AuxLabs.Twitch.EventSub.Api.EventSubPayload-1.Subscription.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.EventSubPayload-1.Subscription.html",
    "title": "Property Subscription | AuxLabs.Twitch Documentation",
    "keywords": "Property Subscription Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Subscription [JsonInclude] [JsonPropertyName(\"subscription\")] public EventSubscription Subscription { get; } Property Value EventSubscription"
  },
  "api/AuxLabs.Twitch.EventSub.Api.EventSubPayload.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.EventSubPayload.html",
    "title": "Class EventSubPayload | AuxLabs.Twitch Documentation",
    "keywords": "Class EventSubPayload Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll public class EventSubPayload : EventSubPayload<object> Inheritance object EventSubPayload<object> EventSubPayload Derived EventSubWebSocketPayload Inherited Members EventSubPayload<object>.Challenge EventSubPayload<object>.Subscription EventSubPayload<object>.Event EventSubPayload<object>.EventTypeSelector object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/AuxLabs.Twitch.EventSub.Api.EventSubWebSocketPayload.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.EventSubWebSocketPayload.html",
    "title": "Class EventSubWebSocketPayload | AuxLabs.Twitch Documentation",
    "keywords": "Class EventSubWebSocketPayload Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll public class EventSubWebSocketPayload : EventSubPayload Inheritance object EventSubPayload<object> EventSubPayload EventSubWebSocketPayload Inherited Members EventSubPayload<object>.Challenge EventSubPayload<object>.Subscription EventSubPayload<object>.Event EventSubPayload<object>.EventTypeSelector object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Session"
  },
  "api/AuxLabs.Twitch.EventSub.Api.EventSubWebSocketPayload.Session.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.EventSubWebSocketPayload.Session.html",
    "title": "Property Session | AuxLabs.Twitch Documentation",
    "keywords": "Property Session Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Session [JsonPropertyName(\"session\")] public Session Session { get; set; } Property Value Session"
  },
  "api/AuxLabs.Twitch.EventSub.Api.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.html",
    "title": "Namespace AuxLabs.Twitch.EventSub.Api | AuxLabs.Twitch Documentation",
    "keywords": "Namespace AuxLabs.Twitch.EventSub.Api Classes EventSubFrame EventSubPayload EventSubPayload<TEvent> EventSubWebSocketPayload TwitchEventSubApiClient TwitchEventSubApiConfig"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.-ctor.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.-ctor.html",
    "title": "Constructor TwitchEventSubApiClient | AuxLabs.Twitch Documentation",
    "keywords": "Constructor TwitchEventSubApiClient Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll TwitchEventSubApiClient(TwitchEventSubApiConfig) public TwitchEventSubApiClient(TwitchEventSubApiConfig config = null) Parameters config TwitchEventSubApiConfig TwitchEventSubApiClient(string, TwitchEventSubApiConfig) public TwitchEventSubApiClient(string url, TwitchEventSubApiConfig config = null) Parameters url string config TwitchEventSubApiConfig"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.AuthorizationGranted.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.AuthorizationGranted.html",
    "title": "Event AuthorizationGranted | AuxLabs.Twitch Documentation",
    "keywords": "Event AuthorizationGranted Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A user’s authorization has been granted to your client id. public event Action<AuthorizationEventArgs, EventSubscription> AuthorizationGranted Returns Action<AuthorizationEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.AuthorizationRevoked.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.AuthorizationRevoked.html",
    "title": "Event AuthorizationRevoked | AuxLabs.Twitch Documentation",
    "keywords": "Event AuthorizationRevoked Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A user’s authorization has been revoked for your client id. public event Action<AuthorizationEventArgs, EventSubscription> AuthorizationRevoked Returns Action<AuthorizationEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.BitsCheered.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.BitsCheered.html",
    "title": "Event BitsCheered | AuxLabs.Twitch Documentation",
    "keywords": "Event BitsCheered Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A user cheers on the specified channel. public event Action<CheerEventArgs, EventSubscription> BitsCheered Returns Action<CheerEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.BitsTransactionCreated.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.BitsTransactionCreated.html",
    "title": "Event BitsTransactionCreated | AuxLabs.Twitch Documentation",
    "keywords": "Event BitsTransactionCreated Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A Bits transaction occurred for a specified Twitch Extension. public event Action<BitsTransactionEventArgs, EventSubscription> BitsTransactionCreated Returns Action<BitsTransactionEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.BroadcastEnded.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.BroadcastEnded.html",
    "title": "Event BroadcastEnded | AuxLabs.Twitch Documentation",
    "keywords": "Event BroadcastEnded Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll The specified broadcaster stops a stream. public event Action<BroadcastEndedEventArgs, EventSubscription> BroadcastEnded Returns Action<BroadcastEndedEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.BroadcastStarted.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.BroadcastStarted.html",
    "title": "Event BroadcastStarted | AuxLabs.Twitch Documentation",
    "keywords": "Event BroadcastStarted Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll The specified broadcaster starts a stream. public event Action<BroadcastStartedEventArgs, EventSubscription> BroadcastStarted Returns Action<BroadcastStartedEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.ChannelFollow.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.ChannelFollow.html",
    "title": "Event ChannelFollow | AuxLabs.Twitch Documentation",
    "keywords": "Event ChannelFollow Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A specified channel receives a follow. public event Action<ChannelFollowEventArgs, EventSubscription> ChannelFollow Returns Action<ChannelFollowEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.ChannelRaided.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.ChannelRaided.html",
    "title": "Event ChannelRaided | AuxLabs.Twitch Documentation",
    "keywords": "Event ChannelRaided Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A broadcaster raids another broadcaster’s channel. public event Action<RaidEventArgs, EventSubscription> ChannelRaided Returns Action<RaidEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.ChannelUpdated.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.ChannelUpdated.html",
    "title": "Event ChannelUpdated | AuxLabs.Twitch Documentation",
    "keywords": "Event ChannelUpdated Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A broadcaster updates their channel properties e.g., category, title, mature flag, broadcast, or language. public event Action<ChannelUpdateEventArgs, EventSubscription> ChannelUpdated Returns Action<ChannelUpdateEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.CharityCampaignEnded.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.CharityCampaignEnded.html",
    "title": "Event CharityCampaignEnded | AuxLabs.Twitch Documentation",
    "keywords": "Event CharityCampaignEnded Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Sends an event notification when the broadcaster stops a charity campaign. public event Action<CampaignEndedEventArgs, EventSubscription> CharityCampaignEnded Returns Action<CampaignEndedEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.CharityCampaignProgress.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.CharityCampaignProgress.html",
    "title": "Event CharityCampaignProgress | AuxLabs.Twitch Documentation",
    "keywords": "Event CharityCampaignProgress Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Sends an event notification when progress is made towards the campaign’s goal or when the broadcaster changes the fundraising goal. public event Action<CampaignProgressEventArgs, EventSubscription> CharityCampaignProgress Returns Action<CampaignProgressEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.CharityCampaignStarted.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.CharityCampaignStarted.html",
    "title": "Event CharityCampaignStarted | AuxLabs.Twitch Documentation",
    "keywords": "Event CharityCampaignStarted Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Sends an event notification when the broadcaster starts a charity campaign. public event Action<CampaignStartedEventArgs, EventSubscription> CharityCampaignStarted Returns Action<CampaignStartedEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.CharityDonation.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.CharityDonation.html",
    "title": "Event CharityDonation | AuxLabs.Twitch Documentation",
    "keywords": "Event CharityDonation Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Sends an event notification when a user donates to the broadcaster’s charity campaign. public event Action<DonationEventArgs, EventSubscription> CharityDonation Returns Action<DonationEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.Connected.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.Connected.html",
    "title": "Event Connected | AuxLabs.Twitch Documentation",
    "keywords": "Event Connected Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll The client has successfully made a connection to the server. public event Action Connected Returns Action"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.Disconnected.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.Disconnected.html",
    "title": "Event Disconnected | AuxLabs.Twitch Documentation",
    "keywords": "Event Disconnected Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll The client was forcibly disconnected from the server. public event Action<Exception> Disconnected Returns Action<Exception>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.Dispose.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.Dispose.html",
    "title": "Method Dispose | AuxLabs.Twitch Documentation",
    "keywords": "Method Dispose Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.DropEntitlementGranted.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.DropEntitlementGranted.html",
    "title": "Event DropEntitlementGranted | AuxLabs.Twitch Documentation",
    "keywords": "Event DropEntitlementGranted Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll An entitlement for a Drop is granted to a user. public event Action<EntitlementGrantEventArgs, EventSubscription> DropEntitlementGranted Returns Action<EntitlementGrantEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.GoalEnded.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.GoalEnded.html",
    "title": "Event GoalEnded | AuxLabs.Twitch Documentation",
    "keywords": "Event GoalEnded Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Get notified when a broadcaster ends a goal. public event Action<GoalEndedEventArgs, EventSubscription> GoalEnded Returns Action<GoalEndedEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.GoalProgress.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.GoalProgress.html",
    "title": "Event GoalProgress | AuxLabs.Twitch Documentation",
    "keywords": "Event GoalProgress Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Get notified when progress (either positive or negative) is made towards a broadcaster’s goal. public event Action<Goal, EventSubscription> GoalProgress Returns Action<Goal, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.GoalStarted.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.GoalStarted.html",
    "title": "Event GoalStarted | AuxLabs.Twitch Documentation",
    "keywords": "Event GoalStarted Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Get notified when a broadcaster begins a goal. public event Action<Goal, EventSubscription> GoalStarted Returns Action<Goal, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.html",
    "title": "Class TwitchEventSubApiClient | AuxLabs.Twitch Documentation",
    "keywords": "Class TwitchEventSubApiClient Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll public class TwitchEventSubApiClient : IDisposable Inheritance object TwitchEventSubApiClient Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TwitchEventSubApiClient(TwitchEventSubApiConfig) TwitchEventSubApiClient(string, TwitchEventSubApiConfig) Fields ThrowOnUnknownEvent Properties Session State Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Dispose(bool) Run() RunAsync() Events AuthorizationGranted A user’s authorization has been granted to your client id. AuthorizationRevoked A user’s authorization has been revoked for your client id. BitsCheered A user cheers on the specified channel. BitsTransactionCreated A Bits transaction occurred for a specified Twitch Extension. BroadcastEnded The specified broadcaster stops a stream. BroadcastStarted The specified broadcaster starts a stream. ChannelFollow A specified channel receives a follow. ChannelRaided A broadcaster raids another broadcaster’s channel. ChannelUpdated A broadcaster updates their channel properties e.g., category, title, mature flag, broadcast, or language. CharityCampaignEnded Sends an event notification when the broadcaster stops a charity campaign. CharityCampaignProgress Sends an event notification when progress is made towards the campaign’s goal or when the broadcaster changes the fundraising goal. CharityCampaignStarted Sends an event notification when the broadcaster starts a charity campaign. CharityDonation Sends an event notification when a user donates to the broadcaster’s charity campaign. Connected The client has successfully made a connection to the server. Disconnected The client was forcibly disconnected from the server. DropEntitlementGranted An entitlement for a Drop is granted to a user. GoalEnded Get notified when a broadcaster ends a goal. GoalProgress Get notified when progress (either positive or negative) is made towards a broadcaster’s goal. GoalStarted Get notified when a broadcaster begins a goal. HypeTrainEnded A Hype Train ends on the specified channel. HypeTrainProgress A Hype Train makes progress on the specified channel. HypeTrainStarted A Hype Train begins on the specified channel. ModeratorAdded Moderator privileges were added to a user on a specified channel. ModeratorRemoved Moderator privileges were removed from a user on a specified channel. NotificationReceived Triggered whenever a notification payload is received. PollEnded A poll ended on a specified channel. PollProgress Users respond to a poll on a specified channel. PollStarted A poll started on a specified channel. PredictionEnded A Prediction ended on a specified channel. PredictionLocked A Prediction was locked on a specified channel. PredictionProgress Users participated in a Prediction on a specified channel. PredictionStarted A Prediction started on a specified channel. Reconnect Triggered when the server needs to terminate the connection. RedemptionAdded A viewer has redeemed a custom channel points reward on the specified channel. RedemptionUpdated A redemption of a channel points custom reward has been updated for the specified channel. Revocation Triggered when the user no longer exists or they revoked the authorization token that the subscription relied on. RewardAdded A custom channel points reward has been created for the specified channel. RewardRemoved A custom channel points reward has been removed from the specified channel. RewardUpdated A custom channel points reward has been updated for the specified channel. SessionCreated Triggered when a session is created after connection. ShieldModeDisabled Sends a notification when the broadcaster deactivates Shield Mode. ShieldModeEnabled Sends a notification when the broadcaster activates Shield Mode. ShoutoutCreated Sends a notification when the specified broadcaster sends a Shoutout. ShoutoutReceived Sends a notification when the specified broadcaster receives a Shoutout. Subscription A notification when a specified channel receives a subscriber. This does not include resubscribes. SubscriptionEnded A notification when a subscription to the specified channel ends. SubscriptionGifted A notification when a viewer gives a gift subscription to one or more users in the specified channel. SubscriptionMessage A notification when a user sends a resubscription chat message in a specific channel. UnknownEventReceived An unhandled irc command was received. UserBanned A viewer is banned from the specified channel. UserUnbanned A viewer is unbanned from the specified channel. UserUpdated A user has updated their account."
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.HypeTrainEnded.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.HypeTrainEnded.html",
    "title": "Event HypeTrainEnded | AuxLabs.Twitch Documentation",
    "keywords": "Event HypeTrainEnded Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A Hype Train ends on the specified channel. public event Action<HypeTrainEndedEventArgs, EventSubscription> HypeTrainEnded Returns Action<HypeTrainEndedEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.HypeTrainProgress.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.HypeTrainProgress.html",
    "title": "Event HypeTrainProgress | AuxLabs.Twitch Documentation",
    "keywords": "Event HypeTrainProgress Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A Hype Train makes progress on the specified channel. public event Action<HypeTrainEventArgs, EventSubscription> HypeTrainProgress Returns Action<HypeTrainEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.HypeTrainStarted.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.HypeTrainStarted.html",
    "title": "Event HypeTrainStarted | AuxLabs.Twitch Documentation",
    "keywords": "Event HypeTrainStarted Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A Hype Train begins on the specified channel. public event Action<HypeTrainEventArgs, EventSubscription> HypeTrainStarted Returns Action<HypeTrainEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.ModeratorAdded.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.ModeratorAdded.html",
    "title": "Event ModeratorAdded | AuxLabs.Twitch Documentation",
    "keywords": "Event ModeratorAdded Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Moderator privileges were added to a user on a specified channel. public event Action<ModeratorEventArgs, EventSubscription> ModeratorAdded Returns Action<ModeratorEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.ModeratorRemoved.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.ModeratorRemoved.html",
    "title": "Event ModeratorRemoved | AuxLabs.Twitch Documentation",
    "keywords": "Event ModeratorRemoved Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Moderator privileges were removed from a user on a specified channel. public event Action<ModeratorEventArgs, EventSubscription> ModeratorRemoved Returns Action<ModeratorEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.NotificationReceived.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.NotificationReceived.html",
    "title": "Event NotificationReceived | AuxLabs.Twitch Documentation",
    "keywords": "Event NotificationReceived Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Triggered whenever a notification payload is received. public event Action<EventSubFrame> NotificationReceived Returns Action<EventSubFrame>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.PollEnded.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.PollEnded.html",
    "title": "Event PollEnded | AuxLabs.Twitch Documentation",
    "keywords": "Event PollEnded Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A poll ended on a specified channel. public event Action<PollEndedEventArgs, EventSubscription> PollEnded Returns Action<PollEndedEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.PollProgress.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.PollProgress.html",
    "title": "Event PollProgress | AuxLabs.Twitch Documentation",
    "keywords": "Event PollProgress Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Users respond to a poll on a specified channel. public event Action<PollEventArgs, EventSubscription> PollProgress Returns Action<PollEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.PollStarted.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.PollStarted.html",
    "title": "Event PollStarted | AuxLabs.Twitch Documentation",
    "keywords": "Event PollStarted Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A poll started on a specified channel. public event Action<PollEventArgs, EventSubscription> PollStarted Returns Action<PollEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.PredictionEnded.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.PredictionEnded.html",
    "title": "Event PredictionEnded | AuxLabs.Twitch Documentation",
    "keywords": "Event PredictionEnded Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A Prediction ended on a specified channel. public event Action<PredictionEndedEventArgs, EventSubscription> PredictionEnded Returns Action<PredictionEndedEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.PredictionLocked.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.PredictionLocked.html",
    "title": "Event PredictionLocked | AuxLabs.Twitch Documentation",
    "keywords": "Event PredictionLocked Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A Prediction was locked on a specified channel. public event Action<PredictionEventArgs, EventSubscription> PredictionLocked Returns Action<PredictionEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.PredictionProgress.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.PredictionProgress.html",
    "title": "Event PredictionProgress | AuxLabs.Twitch Documentation",
    "keywords": "Event PredictionProgress Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Users participated in a Prediction on a specified channel. public event Action<PredictionEventArgs, EventSubscription> PredictionProgress Returns Action<PredictionEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.PredictionStarted.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.PredictionStarted.html",
    "title": "Event PredictionStarted | AuxLabs.Twitch Documentation",
    "keywords": "Event PredictionStarted Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A Prediction started on a specified channel. public event Action<PredictionEventArgs, EventSubscription> PredictionStarted Returns Action<PredictionEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.Reconnect.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.Reconnect.html",
    "title": "Event Reconnect | AuxLabs.Twitch Documentation",
    "keywords": "Event Reconnect Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Triggered when the server needs to terminate the connection. public event Action<Session> Reconnect Returns Action<Session>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.RedemptionAdded.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.RedemptionAdded.html",
    "title": "Event RedemptionAdded | AuxLabs.Twitch Documentation",
    "keywords": "Event RedemptionAdded Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A viewer has redeemed a custom channel points reward on the specified channel. public event Action<RedemptionEventArgs, EventSubscription> RedemptionAdded Returns Action<RedemptionEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.RedemptionUpdated.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.RedemptionUpdated.html",
    "title": "Event RedemptionUpdated | AuxLabs.Twitch Documentation",
    "keywords": "Event RedemptionUpdated Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A redemption of a channel points custom reward has been updated for the specified channel. public event Action<RedemptionEventArgs, EventSubscription> RedemptionUpdated Returns Action<RedemptionEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.Revocation.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.Revocation.html",
    "title": "Event Revocation | AuxLabs.Twitch Documentation",
    "keywords": "Event Revocation Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Triggered when the user no longer exists or they revoked the authorization token that the subscription relied on. public event Action<EventSubscription> Revocation Returns Action<EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.RewardAdded.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.RewardAdded.html",
    "title": "Event RewardAdded | AuxLabs.Twitch Documentation",
    "keywords": "Event RewardAdded Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A custom channel points reward has been created for the specified channel. public event Action<RewardEventArgs, EventSubscription> RewardAdded Returns Action<RewardEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.RewardRemoved.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.RewardRemoved.html",
    "title": "Event RewardRemoved | AuxLabs.Twitch Documentation",
    "keywords": "Event RewardRemoved Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A custom channel points reward has been removed from the specified channel. public event Action<RewardEventArgs, EventSubscription> RewardRemoved Returns Action<RewardEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.RewardUpdated.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.RewardUpdated.html",
    "title": "Event RewardUpdated | AuxLabs.Twitch Documentation",
    "keywords": "Event RewardUpdated Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A custom channel points reward has been updated for the specified channel. public event Action<RewardEventArgs, EventSubscription> RewardUpdated Returns Action<RewardEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.Run.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.Run.html",
    "title": "Method Run | AuxLabs.Twitch Documentation",
    "keywords": "Method Run Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Run() public void Run()"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.RunAsync.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.RunAsync.html",
    "title": "Method RunAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method RunAsync Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll RunAsync() public Task RunAsync() Returns Task"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.Session.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.Session.html",
    "title": "Property Session | AuxLabs.Twitch Documentation",
    "keywords": "Property Session Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Session public Session Session { get; protected set; } Property Value Session"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.SessionCreated.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.SessionCreated.html",
    "title": "Event SessionCreated | AuxLabs.Twitch Documentation",
    "keywords": "Event SessionCreated Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Triggered when a session is created after connection. public event Action<Session> SessionCreated Returns Action<Session>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.ShieldModeDisabled.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.ShieldModeDisabled.html",
    "title": "Event ShieldModeDisabled | AuxLabs.Twitch Documentation",
    "keywords": "Event ShieldModeDisabled Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Sends a notification when the broadcaster deactivates Shield Mode. public event Action<ShieldModeEventArgs, EventSubscription> ShieldModeDisabled Returns Action<ShieldModeEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.ShieldModeEnabled.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.ShieldModeEnabled.html",
    "title": "Event ShieldModeEnabled | AuxLabs.Twitch Documentation",
    "keywords": "Event ShieldModeEnabled Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Sends a notification when the broadcaster activates Shield Mode. public event Action<ShieldModeEnabledEventArgs, EventSubscription> ShieldModeEnabled Returns Action<ShieldModeEnabledEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.ShoutoutCreated.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.ShoutoutCreated.html",
    "title": "Event ShoutoutCreated | AuxLabs.Twitch Documentation",
    "keywords": "Event ShoutoutCreated Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Sends a notification when the specified broadcaster sends a Shoutout. public event Action<ShoutoutCreatedEventArgs, EventSubscription> ShoutoutCreated Returns Action<ShoutoutCreatedEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.ShoutoutReceived.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.ShoutoutReceived.html",
    "title": "Event ShoutoutReceived | AuxLabs.Twitch Documentation",
    "keywords": "Event ShoutoutReceived Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll Sends a notification when the specified broadcaster receives a Shoutout. public event Action<ShoutoutReceivedEventArgs, EventSubscription> ShoutoutReceived Returns Action<ShoutoutReceivedEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.State.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.State.html",
    "title": "Property State | AuxLabs.Twitch Documentation",
    "keywords": "Property State Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll State public ConnectionState State { get; } Property Value ConnectionState"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.Subscription.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.Subscription.html",
    "title": "Event Subscription | AuxLabs.Twitch Documentation",
    "keywords": "Event Subscription Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A notification when a specified channel receives a subscriber. This does not include resubscribes. public event Action<SubscriptionEventArgs, EventSubscription> Subscription Returns Action<SubscriptionEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.SubscriptionEnded.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.SubscriptionEnded.html",
    "title": "Event SubscriptionEnded | AuxLabs.Twitch Documentation",
    "keywords": "Event SubscriptionEnded Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A notification when a subscription to the specified channel ends. public event Action<SubscriptionEventArgs, EventSubscription> SubscriptionEnded Returns Action<SubscriptionEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.SubscriptionGifted.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.SubscriptionGifted.html",
    "title": "Event SubscriptionGifted | AuxLabs.Twitch Documentation",
    "keywords": "Event SubscriptionGifted Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A notification when a viewer gives a gift subscription to one or more users in the specified channel. public event Action<SubscriptionGiftedEventArgs, EventSubscription> SubscriptionGifted Returns Action<SubscriptionGiftedEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.SubscriptionMessage.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.SubscriptionMessage.html",
    "title": "Event SubscriptionMessage | AuxLabs.Twitch Documentation",
    "keywords": "Event SubscriptionMessage Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A notification when a user sends a resubscription chat message in a specific channel. public event Action<SubscriptionMessageEventArgs, EventSubscription> SubscriptionMessage Returns Action<SubscriptionMessageEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.ThrowOnUnknownEvent.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.ThrowOnUnknownEvent.html",
    "title": "Field ThrowOnUnknownEvent | AuxLabs.Twitch Documentation",
    "keywords": "Field ThrowOnUnknownEvent Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll public readonly bool ThrowOnUnknownEvent Returns bool"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.UnknownEventReceived.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.UnknownEventReceived.html",
    "title": "Event UnknownEventReceived | AuxLabs.Twitch Documentation",
    "keywords": "Event UnknownEventReceived Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll An unhandled irc command was received. public event Action<EventSubFrame> UnknownEventReceived Returns Action<EventSubFrame>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.UserBanned.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.UserBanned.html",
    "title": "Event UserBanned | AuxLabs.Twitch Documentation",
    "keywords": "Event UserBanned Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A viewer is banned from the specified channel. public event Action<BanEventArgs, EventSubscription> UserBanned Returns Action<BanEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.UserUnbanned.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.UserUnbanned.html",
    "title": "Event UserUnbanned | AuxLabs.Twitch Documentation",
    "keywords": "Event UserUnbanned Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A viewer is unbanned from the specified channel. public event Action<UnbanEventArgs, EventSubscription> UserUnbanned Returns Action<UnbanEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.UserUpdated.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiClient.UserUpdated.html",
    "title": "Event UserUpdated | AuxLabs.Twitch Documentation",
    "keywords": "Event UserUpdated Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll A user has updated their account. public event Action<UserUpdatedEventArgs, EventSubscription> UserUpdated Returns Action<UserUpdatedEventArgs, EventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiConfig.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiConfig.html",
    "title": "Class TwitchEventSubApiConfig | AuxLabs.Twitch Documentation",
    "keywords": "Class TwitchEventSubApiConfig Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll public class TwitchEventSubApiConfig Inheritance object TwitchEventSubApiConfig Derived TwitchEventSubConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ThrowOnUnknownEvent Should an exception be raised if an unhandled event is received from twitch."
  },
  "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiConfig.ThrowOnUnknownEvent.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Api.TwitchEventSubApiConfig.ThrowOnUnknownEvent.html",
    "title": "Property ThrowOnUnknownEvent | AuxLabs.Twitch Documentation",
    "keywords": "Property ThrowOnUnknownEvent Namespace AuxLabs.Twitch.EventSub.Api Assembly AuxLabs.Twitch.EventSub.Api.dll ThrowOnUnknownEvent Should an exception be raised if an unhandled event is received from twitch. public bool ThrowOnUnknownEvent { get; set; } Property Value bool"
  },
  "api/AuxLabs.Twitch.EventSub.BanEventArgs.BannedAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.BanEventArgs.BannedAt.html",
    "title": "Property BannedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property BannedAt Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll BannedAt public DateTime BannedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.EventSub.BanEventArgs.Broadcaster.html": {
    "href": "api/AuxLabs.Twitch.EventSub.BanEventArgs.Broadcaster.html",
    "title": "Property Broadcaster | AuxLabs.Twitch Documentation",
    "keywords": "Property Broadcaster Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll Broadcaster public EventSubSimpleUser Broadcaster { get; } Property Value EventSubSimpleUser"
  },
  "api/AuxLabs.Twitch.EventSub.BanEventArgs.Create.html": {
    "href": "api/AuxLabs.Twitch.EventSub.BanEventArgs.Create.html",
    "title": "Method Create | AuxLabs.Twitch Documentation",
    "keywords": "Method Create Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll Create(TwitchEventSubClient, BanEventArgs) public static BanEventArgs Create(TwitchEventSubClient twitch, BanEventArgs model) Parameters twitch TwitchEventSubClient model BanEventArgs Returns BanEventArgs"
  },
  "api/AuxLabs.Twitch.EventSub.BanEventArgs.EndsAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.BanEventArgs.EndsAt.html",
    "title": "Property EndsAt | AuxLabs.Twitch Documentation",
    "keywords": "Property EndsAt Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll EndsAt public DateTime? EndsAt { get; } Property Value DateTime?"
  },
  "api/AuxLabs.Twitch.EventSub.BanEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.BanEventArgs.html",
    "title": "Class BanEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class BanEventArgs Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll public class BanEventArgs Inheritance object BanEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BannedAt Broadcaster EndsAt IsPermanent Moderator Reason User Methods Create(TwitchEventSubClient, BanEventArgs)"
  },
  "api/AuxLabs.Twitch.EventSub.BanEventArgs.IsPermanent.html": {
    "href": "api/AuxLabs.Twitch.EventSub.BanEventArgs.IsPermanent.html",
    "title": "Property IsPermanent | AuxLabs.Twitch Documentation",
    "keywords": "Property IsPermanent Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll IsPermanent public bool IsPermanent { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.EventSub.BanEventArgs.Moderator.html": {
    "href": "api/AuxLabs.Twitch.EventSub.BanEventArgs.Moderator.html",
    "title": "Property Moderator | AuxLabs.Twitch Documentation",
    "keywords": "Property Moderator Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll Moderator public EventSubSimpleUser Moderator { get; } Property Value EventSubSimpleUser"
  },
  "api/AuxLabs.Twitch.EventSub.BanEventArgs.Reason.html": {
    "href": "api/AuxLabs.Twitch.EventSub.BanEventArgs.Reason.html",
    "title": "Property Reason | AuxLabs.Twitch Documentation",
    "keywords": "Property Reason Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll Reason public string Reason { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.BanEventArgs.User.html": {
    "href": "api/AuxLabs.Twitch.EventSub.BanEventArgs.User.html",
    "title": "Property User | AuxLabs.Twitch Documentation",
    "keywords": "Property User Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll User public EventSubSimpleUser User { get; } Property Value EventSubSimpleUser"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubBroadcast.-ctor.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubBroadcast.-ctor.html",
    "title": "Constructor EventSubBroadcast | AuxLabs.Twitch Documentation",
    "keywords": "Constructor EventSubBroadcast Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll EventSubBroadcast(TwitchEventSubClient, string) public EventSubBroadcast(TwitchEventSubClient twitch, string id) Parameters twitch TwitchEventSubClient id string"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubBroadcast.Broadcaster.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubBroadcast.Broadcaster.html",
    "title": "Property Broadcaster | AuxLabs.Twitch Documentation",
    "keywords": "Property Broadcaster Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll Broadcaster public EventSubSimpleUser Broadcaster { get; } Property Value EventSubSimpleUser"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubBroadcast.BroadcastType.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubBroadcast.BroadcastType.html",
    "title": "Property BroadcastType | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcastType Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll BroadcastType public BroadcastType BroadcastType { get; } Property Value BroadcastType"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubBroadcast.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubBroadcast.html",
    "title": "Class EventSubBroadcast | AuxLabs.Twitch Documentation",
    "keywords": "Class EventSubBroadcast Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll public class EventSubBroadcast : EventSubEntity<string> Inheritance object EventSubEntity<string> EventSubBroadcast Inherited Members EventSubEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EventSubBroadcast(TwitchEventSubClient, string) Properties Broadcaster BroadcastType StartedAt"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubBroadcast.StartedAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubBroadcast.StartedAt.html",
    "title": "Property StartedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property StartedAt Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll StartedAt public DateTime StartedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubEntity-1.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubEntity-1.html",
    "title": "Class EventSubEntity<T> | AuxLabs.Twitch Documentation",
    "keywords": "Class EventSubEntity<T> Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll public abstract class EventSubEntity<T> where T : IEquatable<T> Type Parameters T Inheritance object EventSubEntity<T> Derived EventSubBroadcast EventSubEventSubscription EventSubSimpleUser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id An ID that uniquely identifies the entity."
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubEntity-1.Id.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubEntity-1.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll Id An ID that uniquely identifies the entity. public T Id { get; } Property Value T"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubEventSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubEventSubscription.-ctor.html",
    "title": "Constructor EventSubEventSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor EventSubEventSubscription Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll EventSubEventSubscription(TwitchEventSubClient, string) public EventSubEventSubscription(TwitchEventSubClient twitch, string id) Parameters twitch TwitchEventSubClient id string"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubEventSubscription.Condition.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubEventSubscription.Condition.html",
    "title": "Property Condition | AuxLabs.Twitch Documentation",
    "keywords": "Property Condition Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll Condition public IEventCondition Condition { get; } Property Value IEventCondition"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubEventSubscription.Cost.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubEventSubscription.Cost.html",
    "title": "Property Cost | AuxLabs.Twitch Documentation",
    "keywords": "Property Cost Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll Cost public int Cost { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubEventSubscription.CreatedAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubEventSubscription.CreatedAt.html",
    "title": "Property CreatedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property CreatedAt Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll CreatedAt public DateTime CreatedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubEventSubscription.DeleteAsync.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubEventSubscription.DeleteAsync.html",
    "title": "Method DeleteAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DeleteAsync Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll DeleteAsync() public Task DeleteAsync() Returns Task"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubEventSubscription.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubEventSubscription.html",
    "title": "Class EventSubEventSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class EventSubEventSubscription Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll public class EventSubEventSubscription : EventSubEntity<string> Inheritance object EventSubEntity<string> EventSubEventSubscription Inherited Members EventSubEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors EventSubEventSubscription(TwitchEventSubClient, string) Properties Condition Cost CreatedAt Status Transport Type Version Methods DeleteAsync() ToString()"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubEventSubscription.Status.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubEventSubscription.Status.html",
    "title": "Property Status | AuxLabs.Twitch Documentation",
    "keywords": "Property Status Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll Status public EventSubStatus Status { get; } Property Value EventSubStatus"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubEventSubscription.ToString.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubEventSubscription.ToString.html",
    "title": "Method ToString | AuxLabs.Twitch Documentation",
    "keywords": "Method ToString Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll ToString() public override string ToString() Returns string"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubEventSubscription.Transport.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubEventSubscription.Transport.html",
    "title": "Property Transport | AuxLabs.Twitch Documentation",
    "keywords": "Property Transport Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll Transport public AcceptedTransport Transport { get; } Property Value AcceptedTransport"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubEventSubscription.Type.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubEventSubscription.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll Type public EventSubType Type { get; } Property Value EventSubType"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubEventSubscription.Version.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubEventSubscription.Version.html",
    "title": "Property Version | AuxLabs.Twitch Documentation",
    "keywords": "Property Version Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll Version public string Version { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubSimpleUser.-ctor.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubSimpleUser.-ctor.html",
    "title": "Constructor EventSubSimpleUser | AuxLabs.Twitch Documentation",
    "keywords": "Constructor EventSubSimpleUser Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll EventSubSimpleUser(TwitchEventSubClient, string) public EventSubSimpleUser(TwitchEventSubClient twitch, string id) Parameters twitch TwitchEventSubClient id string"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubSimpleUser.DisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubSimpleUser.DisplayName.html",
    "title": "Property DisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property DisplayName Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll DisplayName public string DisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubSimpleUser.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubSimpleUser.html",
    "title": "Class EventSubSimpleUser | AuxLabs.Twitch Documentation",
    "keywords": "Class EventSubSimpleUser Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll public class EventSubSimpleUser : EventSubEntity<string>, ISimpleUser, IPartialUser, IEntity<string> Inheritance object EventSubEntity<string> EventSubSimpleUser Implements ISimpleUser IPartialUser IEntity<string> Derived EventSubUser Inherited Members EventSubEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EventSubSimpleUser(TwitchEventSubClient, string) Properties DisplayName Name"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubSimpleUser.Name.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubSimpleUser.Name.html",
    "title": "Property Name | AuxLabs.Twitch Documentation",
    "keywords": "Property Name Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll Name public string Name { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubUser.-ctor.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubUser.-ctor.html",
    "title": "Constructor EventSubUser | AuxLabs.Twitch Documentation",
    "keywords": "Constructor EventSubUser Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll EventSubUser(TwitchEventSubClient, string) public EventSubUser(TwitchEventSubClient twitch, string id) Parameters twitch TwitchEventSubClient id string"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubUser.Description.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubUser.Description.html",
    "title": "Property Description | AuxLabs.Twitch Documentation",
    "keywords": "Property Description Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll Description public string Description { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubUser.Email.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubUser.Email.html",
    "title": "Property Email | AuxLabs.Twitch Documentation",
    "keywords": "Property Email Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll Email public string Email { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubUser.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubUser.html",
    "title": "Class EventSubUser | AuxLabs.Twitch Documentation",
    "keywords": "Class EventSubUser Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll public class EventSubUser : EventSubSimpleUser, ISimpleUser, IPartialUser, IEntity<string> Inheritance object EventSubEntity<string> EventSubSimpleUser EventSubUser Implements ISimpleUser IPartialUser IEntity<string> Inherited Members EventSubSimpleUser.Name EventSubSimpleUser.DisplayName EventSubEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EventSubUser(TwitchEventSubClient, string) Properties Description Email IsEmailVerified"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.EventSubUser.IsEmailVerified.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.EventSubUser.IsEmailVerified.html",
    "title": "Property IsEmailVerified | AuxLabs.Twitch Documentation",
    "keywords": "Property IsEmailVerified Namespace AuxLabs.Twitch.EventSub.Entities Assembly AuxLabs.Twitch.EventSub.dll IsEmailVerified public bool IsEmailVerified { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.EventSub.Entities.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Entities.html",
    "title": "Namespace AuxLabs.Twitch.EventSub.Entities | AuxLabs.Twitch Documentation",
    "keywords": "Namespace AuxLabs.Twitch.EventSub.Entities Classes EventSubBroadcast EventSubEntity<T> EventSubEventSubscription EventSubSimpleUser EventSubUser"
  },
  "api/AuxLabs.Twitch.EventSub.html": {
    "href": "api/AuxLabs.Twitch.EventSub.html",
    "title": "Namespace AuxLabs.Twitch.EventSub | AuxLabs.Twitch Documentation",
    "keywords": "Namespace AuxLabs.Twitch.EventSub AuxLabs.Twitch.EventSub.Api AuxLabs.Twitch.EventSub.Entities AuxLabs.Twitch.EventSub.Models Classes BanEventArgs TwitchEventSubClient TwitchEventSubConfig Interfaces IBan"
  },
  "api/AuxLabs.Twitch.EventSub.IBan.Broadcaster.html": {
    "href": "api/AuxLabs.Twitch.EventSub.IBan.Broadcaster.html",
    "title": "Property Broadcaster | AuxLabs.Twitch Documentation",
    "keywords": "Property Broadcaster Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.Api.dll Broadcaster ISimpleUser Broadcaster { get; } Property Value ISimpleUser"
  },
  "api/AuxLabs.Twitch.EventSub.IBan.html": {
    "href": "api/AuxLabs.Twitch.EventSub.IBan.html",
    "title": "Interface IBan | AuxLabs.Twitch Documentation",
    "keywords": "Interface IBan Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.Api.dll public interface IBan Properties Broadcaster Moderator User"
  },
  "api/AuxLabs.Twitch.EventSub.IBan.Moderator.html": {
    "href": "api/AuxLabs.Twitch.EventSub.IBan.Moderator.html",
    "title": "Property Moderator | AuxLabs.Twitch Documentation",
    "keywords": "Property Moderator Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.Api.dll Moderator ISimpleUser Moderator { get; } Property Value ISimpleUser"
  },
  "api/AuxLabs.Twitch.EventSub.IBan.User.html": {
    "href": "api/AuxLabs.Twitch.EventSub.IBan.User.html",
    "title": "Property User | AuxLabs.Twitch Documentation",
    "keywords": "Property User Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.Api.dll User ISimpleUser User { get; } Property Value ISimpleUser"
  },
  "api/AuxLabs.Twitch.EventSub.Models.AuthorizationEventArgs.ClientId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.AuthorizationEventArgs.ClientId.html",
    "title": "Property ClientId | AuxLabs.Twitch Documentation",
    "keywords": "Property ClientId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll ClientId The client_id of the application that was granted user access. [JsonInclude] [JsonPropertyName(\"client_id\")] public string ClientId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.AuthorizationEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.AuthorizationEventArgs.html",
    "title": "Class AuthorizationEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class AuthorizationEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class AuthorizationEventArgs Inheritance object AuthorizationEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ClientId The client_id of the application that was granted user access. UserDisplayName The user display name for the user who has granted authorization for your client id. UserId The user id for the user who has granted authorization for your client id. UserName The user login for the user who has granted authorization for your client id."
  },
  "api/AuxLabs.Twitch.EventSub.Models.AuthorizationEventArgs.UserDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.AuthorizationEventArgs.UserDisplayName.html",
    "title": "Property UserDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserDisplayName The user display name for the user who has granted authorization for your client id. [JsonInclude] [JsonPropertyName(\"user_name\")] public string UserDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.AuthorizationEventArgs.UserId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.AuthorizationEventArgs.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserId The user id for the user who has granted authorization for your client id. [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.AuthorizationEventArgs.UserName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.AuthorizationEventArgs.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserName The user login for the user who has granted authorization for your client id. [JsonInclude] [JsonPropertyName(\"user_login\")] public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.BannedAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.BannedAt.html",
    "title": "Property BannedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property BannedAt Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BannedAt The UTC date and time of when the user was banned or put in a timeout. [JsonInclude] [JsonPropertyName(\"banned_at\")] public DateTime BannedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterDisplayName The requested broadcaster display name. [JsonInclude] [JsonPropertyName(\"broadcaster_user_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterId The requested broadcaster ID. [JsonInclude] [JsonPropertyName(\"broadcaster_user_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterName The requested broadcaster login. [JsonInclude] [JsonPropertyName(\"broadcaster_user_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.EndsAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.EndsAt.html",
    "title": "Property EndsAt | AuxLabs.Twitch Documentation",
    "keywords": "Property EndsAt Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll EndsAt The UTC date and time of when the timeout ends. [JsonInclude] [JsonPropertyName(\"ends_at\")] public DateTime? EndsAt { get; } Property Value DateTime?"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.html",
    "title": "Class BanEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class BanEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class BanEventArgs Inheritance object BanEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BannedAt The UTC date and time of when the user was banned or put in a timeout. BroadcasterDisplayName The requested broadcaster display name. BroadcasterId The requested broadcaster ID. BroadcasterName The requested broadcaster login. EndsAt The UTC date and time of when the timeout ends. IsPermanent Indicates whether the ban is permanent. ModeratorDisplayName The user name of the issuer of the ban. ModeratorId The user ID of the issuer of the ban. ModeratorName The user login of the issuer of the ban. Reason The reason behind the ban. UserDisplayName The user display name for the user who was banned on the specified channel. UserId The user ID for the user who was banned on the specified channel. UserName The user login for the user who was banned on the specified channel."
  },
  "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.IsPermanent.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.IsPermanent.html",
    "title": "Property IsPermanent | AuxLabs.Twitch Documentation",
    "keywords": "Property IsPermanent Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll IsPermanent Indicates whether the ban is permanent. [JsonInclude] [JsonPropertyName(\"is_permanent\")] public bool IsPermanent { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.ModeratorDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.ModeratorDisplayName.html",
    "title": "Property ModeratorDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll ModeratorDisplayName The user name of the issuer of the ban. [JsonInclude] [JsonPropertyName(\"moderator_user_name\")] public string ModeratorDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.ModeratorId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.ModeratorId.html",
    "title": "Property ModeratorId | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll ModeratorId The user ID of the issuer of the ban. [JsonInclude] [JsonPropertyName(\"moderator_user_id\")] public string ModeratorId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.ModeratorName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.ModeratorName.html",
    "title": "Property ModeratorName | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll ModeratorName The user login of the issuer of the ban. [JsonInclude] [JsonPropertyName(\"moderator_user_login\")] public string ModeratorName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.Reason.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.Reason.html",
    "title": "Property Reason | AuxLabs.Twitch Documentation",
    "keywords": "Property Reason Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Reason The reason behind the ban. [JsonInclude] [JsonPropertyName(\"reason\")] public string Reason { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.UserDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.UserDisplayName.html",
    "title": "Property UserDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserDisplayName The user display name for the user who was banned on the specified channel. [JsonInclude] [JsonPropertyName(\"user_name\")] public string UserDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.UserId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserId The user ID for the user who was banned on the specified channel. [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.UserName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BanEventArgs.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserName The user login for the user who was banned on the specified channel. [JsonInclude] [JsonPropertyName(\"user_login\")] public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BitsProduct.BitsAmount.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BitsProduct.BitsAmount.html",
    "title": "Property BitsAmount | AuxLabs.Twitch Documentation",
    "keywords": "Property BitsAmount Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BitsAmount Bits involved in the transaction. [JsonInclude] [JsonPropertyName(\"bits\")] public int BitsAmount { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BitsProduct.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BitsProduct.html",
    "title": "Class BitsProduct | AuxLabs.Twitch Documentation",
    "keywords": "Class BitsProduct Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class BitsProduct Inheritance object BitsProduct Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BitsAmount Bits involved in the transaction. IsDevelopment Flag indicating if the product is in development. Name Product name. Sku Unique identifier for the product acquired."
  },
  "api/AuxLabs.Twitch.EventSub.Models.BitsProduct.IsDevelopment.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BitsProduct.IsDevelopment.html",
    "title": "Property IsDevelopment | AuxLabs.Twitch Documentation",
    "keywords": "Property IsDevelopment Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll IsDevelopment Flag indicating if the product is in development. [JsonInclude] [JsonPropertyName(\"in_development\")] public bool IsDevelopment { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BitsProduct.Name.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BitsProduct.Name.html",
    "title": "Property Name | AuxLabs.Twitch Documentation",
    "keywords": "Property Name Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Name Product name. [JsonInclude] [JsonPropertyName(\"name\")] public string Name { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BitsProduct.Sku.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BitsProduct.Sku.html",
    "title": "Property Sku | AuxLabs.Twitch Documentation",
    "keywords": "Property Sku Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Sku Unique identifier for the product acquired. [JsonInclude] [JsonPropertyName(\"sku\")] public string Sku { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BitsTransactionEventArgs.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BitsTransactionEventArgs.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterDisplayName The transaction’s broadcaster display name. [JsonInclude] [JsonPropertyName(\"broadcaster_user_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BitsTransactionEventArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BitsTransactionEventArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterId The transaction’s broadcaster ID. [JsonInclude] [JsonPropertyName(\"broadcaster_user_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BitsTransactionEventArgs.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BitsTransactionEventArgs.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterName The transaction’s broadcaster login. [JsonInclude] [JsonPropertyName(\"broadcaster_user_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BitsTransactionEventArgs.ClientId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BitsTransactionEventArgs.ClientId.html",
    "title": "Property ClientId | AuxLabs.Twitch Documentation",
    "keywords": "Property ClientId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll ClientId Client ID of the extension. [JsonInclude] [JsonPropertyName(\"extension_client_id\")] public string ClientId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BitsTransactionEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BitsTransactionEventArgs.html",
    "title": "Class BitsTransactionEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class BitsTransactionEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class BitsTransactionEventArgs Inheritance object BitsTransactionEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterDisplayName The transaction’s broadcaster display name. BroadcasterId The transaction’s broadcaster ID. BroadcasterName The transaction’s broadcaster login. ClientId Client ID of the extension. Id Transaction ID. Product Additional extension product information. UserDisplayName The transaction’s user display name. UserId The transaction’s user ID. UserName The transaction’s user login."
  },
  "api/AuxLabs.Twitch.EventSub.Models.BitsTransactionEventArgs.Id.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BitsTransactionEventArgs.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Id Transaction ID. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BitsTransactionEventArgs.Product.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BitsTransactionEventArgs.Product.html",
    "title": "Property Product | AuxLabs.Twitch Documentation",
    "keywords": "Property Product Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Product Additional extension product information. [JsonInclude] [JsonPropertyName(\"product\")] public BitsProduct Product { get; } Property Value BitsProduct"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BitsTransactionEventArgs.UserDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BitsTransactionEventArgs.UserDisplayName.html",
    "title": "Property UserDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserDisplayName The transaction’s user display name. [JsonInclude] [JsonPropertyName(\"user_name\")] public string UserDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BitsTransactionEventArgs.UserId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BitsTransactionEventArgs.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserId The transaction’s user ID. [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BitsTransactionEventArgs.UserName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BitsTransactionEventArgs.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserName The transaction’s user login. [JsonInclude] [JsonPropertyName(\"user_login\")] public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BroadcastEndedEventArgs.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BroadcastEndedEventArgs.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterDisplayName The requested broadcaster display name. [JsonInclude] [JsonPropertyName(\"broadcaster_user_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BroadcastEndedEventArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BroadcastEndedEventArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterId The requested broadcaster ID. [JsonInclude] [JsonPropertyName(\"broadcaster_user_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BroadcastEndedEventArgs.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BroadcastEndedEventArgs.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterName The requested broadcaster login. [JsonInclude] [JsonPropertyName(\"broadcaster_user_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BroadcastEndedEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BroadcastEndedEventArgs.html",
    "title": "Class BroadcastEndedEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class BroadcastEndedEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class BroadcastEndedEventArgs Inheritance object BroadcastEndedEventArgs Derived BroadcastStartedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterDisplayName The requested broadcaster display name. BroadcasterId The requested broadcaster ID. BroadcasterName The requested broadcaster login."
  },
  "api/AuxLabs.Twitch.EventSub.Models.BroadcastStartedEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BroadcastStartedEventArgs.html",
    "title": "Class BroadcastStartedEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class BroadcastStartedEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class BroadcastStartedEventArgs : BroadcastEndedEventArgs Inheritance object BroadcastEndedEventArgs BroadcastStartedEventArgs Inherited Members BroadcastEndedEventArgs.BroadcasterId BroadcastEndedEventArgs.BroadcasterName BroadcastEndedEventArgs.BroadcasterDisplayName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id The id of the stream. StartedAt The timestamp at which the stream went online at. Type The stream type."
  },
  "api/AuxLabs.Twitch.EventSub.Models.BroadcastStartedEventArgs.Id.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BroadcastStartedEventArgs.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Id The id of the stream. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BroadcastStartedEventArgs.StartedAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BroadcastStartedEventArgs.StartedAt.html",
    "title": "Property StartedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property StartedAt Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll StartedAt The timestamp at which the stream went online at. [JsonInclude] [JsonPropertyName(\"started_at\")] public DateTime StartedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.EventSub.Models.BroadcastStartedEventArgs.Type.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.BroadcastStartedEventArgs.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Type The stream type. [JsonInclude] [JsonPropertyName(\"type\")] public BroadcastType Type { get; } Property Value BroadcastType"
  },
  "api/AuxLabs.Twitch.EventSub.Models.CampaignEndedEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.CampaignEndedEventArgs.html",
    "title": "Class CampaignEndedEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class CampaignEndedEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class CampaignEndedEventArgs : CampaignProgressEventArgs Inheritance object CampaignProgressEventArgs CampaignEndedEventArgs Inherited Members CampaignProgressEventArgs.Id CampaignProgressEventArgs.BroadcasterId CampaignProgressEventArgs.BroadcasterName CampaignProgressEventArgs.BroadcasterDisplayName CampaignProgressEventArgs.CharityName CampaignProgressEventArgs.CharityDescription CampaignProgressEventArgs.CharityLogoUrl CampaignProgressEventArgs.CharityUrl CampaignProgressEventArgs.CurrentAmount CampaignProgressEventArgs.TargetAmount object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties StoppedAt The UTC timestamp of when the broadcaster stopped the campaign."
  },
  "api/AuxLabs.Twitch.EventSub.Models.CampaignEndedEventArgs.StoppedAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.CampaignEndedEventArgs.StoppedAt.html",
    "title": "Property StoppedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property StoppedAt Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll StoppedAt The UTC timestamp of when the broadcaster stopped the campaign. [JsonInclude] [JsonPropertyName(\"stopped_at\")] public DateTime StoppedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.EventSub.Models.CampaignProgressEventArgs.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.CampaignProgressEventArgs.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterDisplayName The broadcaster’s display name. [JsonInclude] [JsonPropertyName(\"broadcaster_user_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.CampaignProgressEventArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.CampaignProgressEventArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterId An ID that identifies the broadcaster that’s running the campaign. [JsonInclude] [JsonPropertyName(\"broadcaster_user_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.CampaignProgressEventArgs.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.CampaignProgressEventArgs.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterName The broadcaster’s login name. [JsonInclude] [JsonPropertyName(\"broadcaster_user_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.CampaignProgressEventArgs.CharityDescription.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.CampaignProgressEventArgs.CharityDescription.html",
    "title": "Property CharityDescription | AuxLabs.Twitch Documentation",
    "keywords": "Property CharityDescription Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll CharityDescription A description of the charity. [JsonInclude] [JsonPropertyName(\"charity_description\")] public string CharityDescription { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.CampaignProgressEventArgs.CharityLogoUrl.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.CampaignProgressEventArgs.CharityLogoUrl.html",
    "title": "Property CharityLogoUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property CharityLogoUrl Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll CharityLogoUrl A URL to an image of the charity’s logo. [JsonInclude] [JsonPropertyName(\"charity_logo\")] public string CharityLogoUrl { get; } Property Value string Remarks The image’s type is PNG and its size is 100px X 100px."
  },
  "api/AuxLabs.Twitch.EventSub.Models.CampaignProgressEventArgs.CharityName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.CampaignProgressEventArgs.CharityName.html",
    "title": "Property CharityName | AuxLabs.Twitch Documentation",
    "keywords": "Property CharityName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll CharityName The charity’s name. [JsonInclude] [JsonPropertyName(\"charity_name\")] public string CharityName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.CampaignProgressEventArgs.CharityUrl.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.CampaignProgressEventArgs.CharityUrl.html",
    "title": "Property CharityUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property CharityUrl Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll CharityUrl A URL to the charity’s website. [JsonInclude] [JsonPropertyName(\"current_amount\")] public string CharityUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.CampaignProgressEventArgs.CurrentAmount.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.CampaignProgressEventArgs.CurrentAmount.html",
    "title": "Property CurrentAmount | AuxLabs.Twitch Documentation",
    "keywords": "Property CurrentAmount Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll CurrentAmount An object that contains the current amount of donations that the campaign has received. [JsonInclude] [JsonPropertyName(\"charity_website\")] public CharityAmount CurrentAmount { get; } Property Value CharityAmount"
  },
  "api/AuxLabs.Twitch.EventSub.Models.CampaignProgressEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.CampaignProgressEventArgs.html",
    "title": "Class CampaignProgressEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class CampaignProgressEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class CampaignProgressEventArgs Inheritance object CampaignProgressEventArgs Derived CampaignEndedEventArgs CampaignStartedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterDisplayName The broadcaster’s display name. BroadcasterId An ID that identifies the broadcaster that’s running the campaign. BroadcasterName The broadcaster’s login name. CharityDescription A description of the charity. CharityLogoUrl A URL to an image of the charity’s logo. CharityName The charity’s name. CharityUrl A URL to the charity’s website. CurrentAmount An object that contains the current amount of donations that the campaign has received. Id An ID that identifies the charity campaign. TargetAmount An object that contains the campaign’s target fundraising goal."
  },
  "api/AuxLabs.Twitch.EventSub.Models.CampaignProgressEventArgs.Id.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.CampaignProgressEventArgs.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Id An ID that identifies the charity campaign. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.CampaignProgressEventArgs.TargetAmount.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.CampaignProgressEventArgs.TargetAmount.html",
    "title": "Property TargetAmount | AuxLabs.Twitch Documentation",
    "keywords": "Property TargetAmount Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll TargetAmount An object that contains the campaign’s target fundraising goal. [JsonInclude] [JsonPropertyName(\"target_amount\")] public CharityAmount TargetAmount { get; } Property Value CharityAmount"
  },
  "api/AuxLabs.Twitch.EventSub.Models.CampaignStartedEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.CampaignStartedEventArgs.html",
    "title": "Class CampaignStartedEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class CampaignStartedEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class CampaignStartedEventArgs : CampaignProgressEventArgs Inheritance object CampaignProgressEventArgs CampaignStartedEventArgs Inherited Members CampaignProgressEventArgs.Id CampaignProgressEventArgs.BroadcasterId CampaignProgressEventArgs.BroadcasterName CampaignProgressEventArgs.BroadcasterDisplayName CampaignProgressEventArgs.CharityName CampaignProgressEventArgs.CharityDescription CampaignProgressEventArgs.CharityLogoUrl CampaignProgressEventArgs.CharityUrl CampaignProgressEventArgs.CurrentAmount CampaignProgressEventArgs.TargetAmount object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties StartedAt The UTC timestamp of when the broadcaster started the campaign."
  },
  "api/AuxLabs.Twitch.EventSub.Models.CampaignStartedEventArgs.StartedAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.CampaignStartedEventArgs.StartedAt.html",
    "title": "Property StartedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property StartedAt Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll StartedAt The UTC timestamp of when the broadcaster started the campaign. [JsonInclude] [JsonPropertyName(\"started_at\")] public DateTime StartedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ChannelFollowEventArgs.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ChannelFollowEventArgs.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterDisplayName The requested broadcaster display name. [JsonInclude] [JsonPropertyName(\"broadcaster_user_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ChannelFollowEventArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ChannelFollowEventArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterId The requested broadcaster ID. [JsonInclude] [JsonPropertyName(\"broadcaster_user_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ChannelFollowEventArgs.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ChannelFollowEventArgs.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterName The requested broadcaster login. [JsonInclude] [JsonPropertyName(\"broadcaster_user_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ChannelFollowEventArgs.FollowedAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ChannelFollowEventArgs.FollowedAt.html",
    "title": "Property FollowedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property FollowedAt Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll FollowedAt Timestamp of when the follow occurred. [JsonInclude] [JsonPropertyName(\"followed_at\")] public DateTime FollowedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ChannelFollowEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ChannelFollowEventArgs.html",
    "title": "Class ChannelFollowEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class ChannelFollowEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class ChannelFollowEventArgs Inheritance object ChannelFollowEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterDisplayName The requested broadcaster display name. BroadcasterId The requested broadcaster ID. BroadcasterName The requested broadcaster login. FollowedAt Timestamp of when the follow occurred. UserDisplayName The user display name for the user now following the specified channel. UserId The user ID for the user now following the specified channel. UserName The user login for the user now following the specified channel."
  },
  "api/AuxLabs.Twitch.EventSub.Models.ChannelFollowEventArgs.UserDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ChannelFollowEventArgs.UserDisplayName.html",
    "title": "Property UserDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserDisplayName The user display name for the user now following the specified channel. [JsonInclude] [JsonPropertyName(\"user_name\")] public string UserDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ChannelFollowEventArgs.UserId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ChannelFollowEventArgs.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserId The user ID for the user now following the specified channel. [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ChannelFollowEventArgs.UserName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ChannelFollowEventArgs.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserName The user login for the user now following the specified channel. [JsonInclude] [JsonPropertyName(\"user_login\")] public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ChannelUpdateEventArgs.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ChannelUpdateEventArgs.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterDisplayName The requested broadcaster display name. [JsonInclude] [JsonPropertyName(\"broadcaster_user_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ChannelUpdateEventArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ChannelUpdateEventArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterId The requested broadcaster ID. [JsonInclude] [JsonPropertyName(\"broadcaster_user_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ChannelUpdateEventArgs.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ChannelUpdateEventArgs.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterName The requested broadcaster login. [JsonInclude] [JsonPropertyName(\"broadcaster_user_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ChannelUpdateEventArgs.CategoryId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ChannelUpdateEventArgs.CategoryId.html",
    "title": "Property CategoryId | AuxLabs.Twitch Documentation",
    "keywords": "Property CategoryId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll CategoryId The channel’s category ID. [JsonInclude] [JsonPropertyName(\"category_id\")] public string CategoryId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ChannelUpdateEventArgs.CategoryName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ChannelUpdateEventArgs.CategoryName.html",
    "title": "Property CategoryName | AuxLabs.Twitch Documentation",
    "keywords": "Property CategoryName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll CategoryName The category name. [JsonInclude] [JsonPropertyName(\"category_name\")] public string CategoryName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ChannelUpdateEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ChannelUpdateEventArgs.html",
    "title": "Class ChannelUpdateEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class ChannelUpdateEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class ChannelUpdateEventArgs Inheritance object ChannelUpdateEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterDisplayName The requested broadcaster display name. BroadcasterId The requested broadcaster ID. BroadcasterName The requested broadcaster login. CategoryId The channel’s category ID. CategoryName The category name. IsMature Indicates whether the channel is flagged as mature. Language The channel’s broadcast language. Title The channel’s stream title."
  },
  "api/AuxLabs.Twitch.EventSub.Models.ChannelUpdateEventArgs.IsMature.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ChannelUpdateEventArgs.IsMature.html",
    "title": "Property IsMature | AuxLabs.Twitch Documentation",
    "keywords": "Property IsMature Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll IsMature Indicates whether the channel is flagged as mature. [JsonInclude] [JsonPropertyName(\"is_mature\")] public bool IsMature { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ChannelUpdateEventArgs.Language.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ChannelUpdateEventArgs.Language.html",
    "title": "Property Language | AuxLabs.Twitch Documentation",
    "keywords": "Property Language Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Language The channel’s broadcast language. [JsonInclude] [JsonPropertyName(\"language\")] public string Language { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ChannelUpdateEventArgs.Title.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ChannelUpdateEventArgs.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Title The channel’s stream title. [JsonInclude] [JsonPropertyName(\"title\")] public string Title { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.CheerEventArgs.BitsAmount.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.CheerEventArgs.BitsAmount.html",
    "title": "Property BitsAmount | AuxLabs.Twitch Documentation",
    "keywords": "Property BitsAmount Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BitsAmount The number of bits cheered. [JsonInclude] [JsonPropertyName(\"bits\")] public int BitsAmount { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.EventSub.Models.CheerEventArgs.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.CheerEventArgs.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterDisplayName The requested broadcaster display name. [JsonInclude] [JsonPropertyName(\"broadcaster_user_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.CheerEventArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.CheerEventArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterId The requested broadcaster ID. [JsonInclude] [JsonPropertyName(\"broadcaster_user_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.CheerEventArgs.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.CheerEventArgs.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterName The requested broadcaster login. [JsonInclude] [JsonPropertyName(\"broadcaster_user_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.CheerEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.CheerEventArgs.html",
    "title": "Class CheerEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class CheerEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class CheerEventArgs Inheritance object CheerEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BitsAmount The number of bits cheered. BroadcasterDisplayName The requested broadcaster display name. BroadcasterId The requested broadcaster ID. BroadcasterName The requested broadcaster login. IsAnonymous Whether the user cheered anonymously or not. Message The message sent with the cheer. UserDisplayName The user display name for the user who cheered on the specified channel. UserId The user ID for the user who cheered on the specified channel. UserName The user login for the user who cheered on the specified channel."
  },
  "api/AuxLabs.Twitch.EventSub.Models.CheerEventArgs.IsAnonymous.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.CheerEventArgs.IsAnonymous.html",
    "title": "Property IsAnonymous | AuxLabs.Twitch Documentation",
    "keywords": "Property IsAnonymous Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll IsAnonymous Whether the user cheered anonymously or not. [JsonInclude] [JsonPropertyName(\"is_anonymous\")] public bool IsAnonymous { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.EventSub.Models.CheerEventArgs.Message.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.CheerEventArgs.Message.html",
    "title": "Property Message | AuxLabs.Twitch Documentation",
    "keywords": "Property Message Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Message The message sent with the cheer. [JsonInclude] [JsonPropertyName(\"message\")] public string Message { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.CheerEventArgs.UserDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.CheerEventArgs.UserDisplayName.html",
    "title": "Property UserDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserDisplayName The user display name for the user who cheered on the specified channel. [JsonInclude] [JsonPropertyName(\"user_name\")] public string UserDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.CheerEventArgs.UserId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.CheerEventArgs.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserId The user ID for the user who cheered on the specified channel. [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.CheerEventArgs.UserName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.CheerEventArgs.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserName The user login for the user who cheered on the specified channel. [JsonInclude] [JsonPropertyName(\"user_login\")] public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.Amount.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.Amount.html",
    "title": "Property Amount | AuxLabs.Twitch Documentation",
    "keywords": "Property Amount Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Amount An object that contains the amount of money that the user donated. [JsonInclude] [JsonPropertyName(\"amount\")] public CharityAmount Amount { get; } Property Value CharityAmount"
  },
  "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterDisplayName The broadcaster’s display name. [JsonInclude] [JsonPropertyName(\"broadcaster_user_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterId An ID that identifies the broadcaster that’s running the campaign. [JsonInclude] [JsonPropertyName(\"broadcaster_user_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterName The broadcaster’s login name. [JsonInclude] [JsonPropertyName(\"broadcaster_user_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.CampaignId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.CampaignId.html",
    "title": "Property CampaignId | AuxLabs.Twitch Documentation",
    "keywords": "Property CampaignId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll CampaignId An ID that identifies the charity campaign. [JsonInclude] [JsonPropertyName(\"campaign_id\")] public string CampaignId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.CharityDescription.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.CharityDescription.html",
    "title": "Property CharityDescription | AuxLabs.Twitch Documentation",
    "keywords": "Property CharityDescription Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll CharityDescription A description of the charity. [JsonInclude] [JsonPropertyName(\"charity_description\")] public string CharityDescription { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.CharityLogoUrl.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.CharityLogoUrl.html",
    "title": "Property CharityLogoUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property CharityLogoUrl Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll CharityLogoUrl A URL to an image of the charity’s logo. [JsonInclude] [JsonPropertyName(\"charity_logo\")] public string CharityLogoUrl { get; } Property Value string Remarks The image’s type is PNG and its size is 100px X 100px."
  },
  "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.CharityName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.CharityName.html",
    "title": "Property CharityName | AuxLabs.Twitch Documentation",
    "keywords": "Property CharityName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll CharityName The charity’s name. [JsonInclude] [JsonPropertyName(\"charity_name\")] public string CharityName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.CharityUrl.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.CharityUrl.html",
    "title": "Property CharityUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property CharityUrl Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll CharityUrl A URL to the charity’s website. [JsonInclude] [JsonPropertyName(\"charity_website\")] public string CharityUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.html",
    "title": "Class DonationEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class DonationEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class DonationEventArgs Inheritance object DonationEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Amount An object that contains the amount of money that the user donated. BroadcasterDisplayName The broadcaster’s display name. BroadcasterId An ID that identifies the broadcaster that’s running the campaign. BroadcasterName The broadcaster’s login name. CampaignId An ID that identifies the charity campaign. CharityDescription A description of the charity. CharityLogoUrl A URL to an image of the charity’s logo. CharityName The charity’s name. CharityUrl A URL to the charity’s website. Id An ID that identifies the donation. The ID is unique across campaigns. UserDisplayName The user’s display name. UserId An ID that identifies the user that donated to the campaign. UserName The user’s login name."
  },
  "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.Id.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Id An ID that identifies the donation. The ID is unique across campaigns. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.UserDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.UserDisplayName.html",
    "title": "Property UserDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserDisplayName The user’s display name. [JsonInclude] [JsonPropertyName(\"user_name\")] public string UserDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.UserId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserId An ID that identifies the user that donated to the campaign. [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.UserName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.DonationEventArgs.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserName The user’s login name. [JsonInclude] [JsonPropertyName(\"user_login\")] public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventArgs.Data.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventArgs.Data.html",
    "title": "Property Data | AuxLabs.Twitch Documentation",
    "keywords": "Property Data Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Data A collection of entitlement objects. [JsonInclude] [JsonPropertyName(\"id\")] public IReadOnlyCollection<EntitlementGrantEventData> Data { get; } Property Value IReadOnlyCollection<EntitlementGrantEventData>"
  },
  "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventArgs.html",
    "title": "Class EntitlementGrantEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class EntitlementGrantEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class EntitlementGrantEventArgs Inheritance object EntitlementGrantEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data A collection of entitlement objects. Id Individual event ID, as assigned by EventSub."
  },
  "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventArgs.Id.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventArgs.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Id Individual event ID, as assigned by EventSub. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventData.BenefitId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventData.BenefitId.html",
    "title": "Property BenefitId | AuxLabs.Twitch Documentation",
    "keywords": "Property BenefitId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BenefitId Identifier of the Benefit. [JsonInclude] [JsonPropertyName(\"benefit_id\")] public string BenefitId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventData.CampaignId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventData.CampaignId.html",
    "title": "Property CampaignId | AuxLabs.Twitch Documentation",
    "keywords": "Property CampaignId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll CampaignId The campaign this entitlement is associated with. [JsonInclude] [JsonPropertyName(\"campaign_id\")] public string CampaignId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventData.CategoryId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventData.CategoryId.html",
    "title": "Property CategoryId | AuxLabs.Twitch Documentation",
    "keywords": "Property CategoryId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll CategoryId Twitch category ID of the game that was being played when this benefit was entitled. [JsonInclude] [JsonPropertyName(\"category_id\")] public string CategoryId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventData.CategoryName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventData.CategoryName.html",
    "title": "Property CategoryName | AuxLabs.Twitch Documentation",
    "keywords": "Property CategoryName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll CategoryName The category name. [JsonInclude] [JsonPropertyName(\"category_name\")] public string CategoryName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventData.CreatedAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventData.CreatedAt.html",
    "title": "Property CreatedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property CreatedAt Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll CreatedAt UTC timestamp when this entitlement was granted on Twitch. [JsonInclude] [JsonPropertyName(\"created_at\")] public DateTime CreatedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventData.EntitlementId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventData.EntitlementId.html",
    "title": "Property EntitlementId | AuxLabs.Twitch Documentation",
    "keywords": "Property EntitlementId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll EntitlementId Unique identifier of the entitlement. Use this to de-duplicate entitlements. [JsonInclude] [JsonPropertyName(\"entitlement_id\")] public string EntitlementId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventData.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventData.html",
    "title": "Class EntitlementGrantEventData | AuxLabs.Twitch Documentation",
    "keywords": "Class EntitlementGrantEventData Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class EntitlementGrantEventData Inheritance object EntitlementGrantEventData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BenefitId Identifier of the Benefit. CampaignId The campaign this entitlement is associated with. CategoryId Twitch category ID of the game that was being played when this benefit was entitled. CategoryName The category name. CreatedAt UTC timestamp when this entitlement was granted on Twitch. EntitlementId Unique identifier of the entitlement. Use this to de-duplicate entitlements. OrganizationId The ID of the organization that owns the game that has Drops enabled. UserDisplayName The user display name of the user who was granted the entitlement. UserId Twitch user ID of the user who was granted the entitlement. UserName The user login of the user who was granted the entitlement."
  },
  "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventData.OrganizationId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventData.OrganizationId.html",
    "title": "Property OrganizationId | AuxLabs.Twitch Documentation",
    "keywords": "Property OrganizationId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll OrganizationId The ID of the organization that owns the game that has Drops enabled. [JsonInclude] [JsonPropertyName(\"organization_id\")] public string OrganizationId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventData.UserDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventData.UserDisplayName.html",
    "title": "Property UserDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserDisplayName The user display name of the user who was granted the entitlement. [JsonInclude] [JsonPropertyName(\"user_name\")] public string UserDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventData.UserId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventData.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserId Twitch user ID of the user who was granted the entitlement. [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventData.UserName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.EntitlementGrantEventData.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserName The user login of the user who was granted the entitlement. [JsonInclude] [JsonPropertyName(\"user_login\")] public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.EventSubHypetrainContribution.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.EventSubHypetrainContribution.html",
    "title": "Class EventSubHypetrainContribution | AuxLabs.Twitch Documentation",
    "keywords": "Class EventSubHypetrainContribution Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class EventSubHypetrainContribution : HypeTrainContribution Inheritance object HypeTrainContribution EventSubHypetrainContribution Inherited Members HypeTrainContribution.Total HypeTrainContribution.Type HypeTrainContribution.UserId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties UserDisplayName The user’s display name. UserName The user’s login name."
  },
  "api/AuxLabs.Twitch.EventSub.Models.EventSubHypetrainContribution.UserDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.EventSubHypetrainContribution.UserDisplayName.html",
    "title": "Property UserDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserDisplayName The user’s display name. [JsonInclude] [JsonPropertyName(\"user_name\")] public string UserDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.EventSubHypetrainContribution.UserName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.EventSubHypetrainContribution.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserName The user’s login name. [JsonInclude] [JsonPropertyName(\"user_login\")] public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.GlobalCooldownSetting.-ctor.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.GlobalCooldownSetting.-ctor.html",
    "title": "Constructor GlobalCooldownSetting | AuxLabs.Twitch Documentation",
    "keywords": "Constructor GlobalCooldownSetting Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll GlobalCooldownSetting(int, bool) [JsonConstructor] public GlobalCooldownSetting(int seconds, bool isEnabled = false) Parameters seconds int isEnabled bool"
  },
  "api/AuxLabs.Twitch.EventSub.Models.GlobalCooldownSetting.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.GlobalCooldownSetting.html",
    "title": "Struct GlobalCooldownSetting | AuxLabs.Twitch Documentation",
    "keywords": "Struct GlobalCooldownSetting Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public readonly struct GlobalCooldownSetting Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors GlobalCooldownSetting(int, bool) Properties IsEnabled Is the setting enabled. Seconds The cooldown in seconds."
  },
  "api/AuxLabs.Twitch.EventSub.Models.GlobalCooldownSetting.IsEnabled.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.GlobalCooldownSetting.IsEnabled.html",
    "title": "Property IsEnabled | AuxLabs.Twitch Documentation",
    "keywords": "Property IsEnabled Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll IsEnabled Is the setting enabled. [JsonInclude] [JsonPropertyName(\"is_enabled\")] public bool IsEnabled { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.EventSub.Models.GlobalCooldownSetting.Seconds.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.GlobalCooldownSetting.Seconds.html",
    "title": "Property Seconds | AuxLabs.Twitch Documentation",
    "keywords": "Property Seconds Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Seconds The cooldown in seconds. [JsonInclude] [JsonPropertyName(\"seconds\")] public int Seconds { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.EventSub.Models.GoalEndedEventArgs.EndedAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.GoalEndedEventArgs.EndedAt.html",
    "title": "Property EndedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property EndedAt Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll EndedAt The UTC timestamp which indicates when the broadcaster ended the goal. [JsonInclude] [JsonPropertyName(\"ended_at\")] public bool EndedAt { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.EventSub.Models.GoalEndedEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.GoalEndedEventArgs.html",
    "title": "Class GoalEndedEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GoalEndedEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class GoalEndedEventArgs : Goal Inheritance object Goal GoalEndedEventArgs Inherited Members Goal.Id Goal.BroadcasterId Goal.BroadcasterDisplayName Goal.BroadcasterName Goal.Type Goal.Description Goal.CurrentAmount Goal.TargetAmount Goal.CreatedAt object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EndedAt The UTC timestamp which indicates when the broadcaster ended the goal. IsAchieved Indicates whether the broadcaster achieved their goal."
  },
  "api/AuxLabs.Twitch.EventSub.Models.GoalEndedEventArgs.IsAchieved.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.GoalEndedEventArgs.IsAchieved.html",
    "title": "Property IsAchieved | AuxLabs.Twitch Documentation",
    "keywords": "Property IsAchieved Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll IsAchieved Indicates whether the broadcaster achieved their goal. [JsonInclude] [JsonPropertyName(\"is_achieved\")] public bool IsAchieved { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.EventSub.Models.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.html",
    "title": "Namespace AuxLabs.Twitch.EventSub.Models | AuxLabs.Twitch Documentation",
    "keywords": "Namespace AuxLabs.Twitch.EventSub.Models Classes AuthorizationEventArgs BanEventArgs BitsProduct BitsTransactionEventArgs BroadcastEndedEventArgs BroadcastStartedEventArgs CampaignEndedEventArgs CampaignProgressEventArgs CampaignStartedEventArgs ChannelFollowEventArgs ChannelUpdateEventArgs CheerEventArgs DonationEventArgs EntitlementGrantEventArgs EntitlementGrantEventData EventSubHypetrainContribution GoalEndedEventArgs HypeTrainEndedEventArgs HypeTrainEventArgs ModeratorEventArgs PollEndedEventArgs PollEventArgs PredictionEndedEventArgs PredictionEventArgs RaidEventArgs RedemptionEventArgs RewardEventArgs Session ShieldModeEnabledEventArgs ShieldModeEndedEventArgs ShieldModeEventArgs ShoutoutCreatedEventArgs ShoutoutReceivedEventArgs SubscriptionEventArgs SubscriptionGiftedEventArgs SubscriptionMessage SubscriptionMessageEventArgs UnbanEventArgs UserUpdatedEventArgs VotingOption WebSocketMetadata Structs GlobalCooldownSetting RewardSetting Enums MessageType"
  },
  "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEndedEventArgs.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEndedEventArgs.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterDisplayName The requested broadcaster display name. [JsonInclude] [JsonPropertyName(\"broadcaster_user_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEndedEventArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEndedEventArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterId The requested broadcaster ID. [JsonInclude] [JsonPropertyName(\"broadcaster_user_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEndedEventArgs.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEndedEventArgs.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterName The requested broadcaster login. [JsonInclude] [JsonPropertyName(\"broadcaster_user_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEndedEventArgs.CooldownEndsAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEndedEventArgs.CooldownEndsAt.html",
    "title": "Property CooldownEndsAt | AuxLabs.Twitch Documentation",
    "keywords": "Property CooldownEndsAt Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll CooldownEndsAt The time when the Hype Train cooldown ends so that the next Hype Train can start. [JsonInclude] [JsonPropertyName(\"cooldown_ends_at\")] public DateTime CooldownEndsAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEndedEventArgs.EndedAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEndedEventArgs.EndedAt.html",
    "title": "Property EndedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property EndedAt Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll EndedAt The time when the Hype Train ended. [JsonInclude] [JsonPropertyName(\"ended_at\")] public DateTime EndedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEndedEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEndedEventArgs.html",
    "title": "Class HypeTrainEndedEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class HypeTrainEndedEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class HypeTrainEndedEventArgs Inheritance object HypeTrainEndedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterDisplayName The requested broadcaster display name. BroadcasterId The requested broadcaster ID. BroadcasterName The requested broadcaster login. CooldownEndsAt The time when the Hype Train cooldown ends so that the next Hype Train can start. EndedAt The time when the Hype Train ended. Id The Hype Train ID. Level The starting level of the Hype Train. StartedAt The time when the Hype Train started. TopContributions The contributors with the most points contributed. Total Total points contributed to the Hype Train."
  },
  "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEndedEventArgs.Id.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEndedEventArgs.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Id The Hype Train ID. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEndedEventArgs.Level.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEndedEventArgs.Level.html",
    "title": "Property Level | AuxLabs.Twitch Documentation",
    "keywords": "Property Level Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Level The starting level of the Hype Train. [JsonInclude] [JsonPropertyName(\"level\")] public int Level { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEndedEventArgs.StartedAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEndedEventArgs.StartedAt.html",
    "title": "Property StartedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property StartedAt Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll StartedAt The time when the Hype Train started. [JsonInclude] [JsonPropertyName(\"started_at\")] public DateTime StartedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEndedEventArgs.TopContributions.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEndedEventArgs.TopContributions.html",
    "title": "Property TopContributions | AuxLabs.Twitch Documentation",
    "keywords": "Property TopContributions Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll TopContributions The contributors with the most points contributed. [JsonInclude] [JsonPropertyName(\"top_contributions\")] public IReadOnlyCollection<EventSubHypetrainContribution> TopContributions { get; } Property Value IReadOnlyCollection<EventSubHypetrainContribution>"
  },
  "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEndedEventArgs.Total.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEndedEventArgs.Total.html",
    "title": "Property Total | AuxLabs.Twitch Documentation",
    "keywords": "Property Total Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Total Total points contributed to the Hype Train. [JsonInclude] [JsonPropertyName(\"total\")] public int Total { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEventArgs.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEventArgs.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterDisplayName The requested broadcaster display name. [JsonInclude] [JsonPropertyName(\"broadcaster_user_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEventArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEventArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterId The requested broadcaster ID. [JsonInclude] [JsonPropertyName(\"broadcaster_user_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEventArgs.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEventArgs.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterName The requested broadcaster login. [JsonInclude] [JsonPropertyName(\"broadcaster_user_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEventArgs.ExpiresAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEventArgs.ExpiresAt.html",
    "title": "Property ExpiresAt | AuxLabs.Twitch Documentation",
    "keywords": "Property ExpiresAt Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll ExpiresAt The time when the Hype Train expires. [JsonInclude] [JsonPropertyName(\"expires_at\")] public DateTime ExpiresAt { get; } Property Value DateTime Remarks The expiration is extended when the Hype Train reaches a new level."
  },
  "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEventArgs.Goal.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEventArgs.Goal.html",
    "title": "Property Goal | AuxLabs.Twitch Documentation",
    "keywords": "Property Goal Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Goal The number of points required to reach the next level. [JsonInclude] [JsonPropertyName(\"goal\")] public int Goal { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEventArgs.html",
    "title": "Class HypeTrainEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class HypeTrainEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class HypeTrainEventArgs Inheritance object HypeTrainEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterDisplayName The requested broadcaster display name. BroadcasterId The requested broadcaster ID. BroadcasterName The requested broadcaster login. ExpiresAt The time when the Hype Train expires. Goal The number of points required to reach the next level. Id The Hype Train ID. LatestContribution The most recent contribution. Level The starting level of the Hype Train. Progress The number of points contributed to the Hype Train at the current level. StartedAt The time when the Hype Train started. TopContributions The contributors with the most points contributed. Total Total points contributed to the Hype Train."
  },
  "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEventArgs.Id.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEventArgs.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Id The Hype Train ID. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEventArgs.LatestContribution.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEventArgs.LatestContribution.html",
    "title": "Property LatestContribution | AuxLabs.Twitch Documentation",
    "keywords": "Property LatestContribution Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll LatestContribution The most recent contribution. [JsonInclude] [JsonPropertyName(\"last_contribution\")] public EventSubHypetrainContribution LatestContribution { get; } Property Value EventSubHypetrainContribution"
  },
  "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEventArgs.Level.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEventArgs.Level.html",
    "title": "Property Level | AuxLabs.Twitch Documentation",
    "keywords": "Property Level Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Level The starting level of the Hype Train. [JsonInclude] [JsonPropertyName(\"level\")] public int Level { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEventArgs.Progress.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEventArgs.Progress.html",
    "title": "Property Progress | AuxLabs.Twitch Documentation",
    "keywords": "Property Progress Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Progress The number of points contributed to the Hype Train at the current level. [JsonInclude] [JsonPropertyName(\"progress\")] public int Progress { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEventArgs.StartedAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEventArgs.StartedAt.html",
    "title": "Property StartedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property StartedAt Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll StartedAt The time when the Hype Train started. [JsonInclude] [JsonPropertyName(\"started_at\")] public DateTime StartedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEventArgs.TopContributions.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEventArgs.TopContributions.html",
    "title": "Property TopContributions | AuxLabs.Twitch Documentation",
    "keywords": "Property TopContributions Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll TopContributions The contributors with the most points contributed. [JsonInclude] [JsonPropertyName(\"top_contributions\")] public IReadOnlyCollection<EventSubHypetrainContribution> TopContributions { get; } Property Value IReadOnlyCollection<EventSubHypetrainContribution>"
  },
  "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEventArgs.Total.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.HypeTrainEventArgs.Total.html",
    "title": "Property Total | AuxLabs.Twitch Documentation",
    "keywords": "Property Total Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Total Total points contributed to the Hype Train. [JsonInclude] [JsonPropertyName(\"total\")] public int Total { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.EventSub.Models.MessageType.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.MessageType.html",
    "title": "Enum MessageType | AuxLabs.Twitch Documentation",
    "keywords": "Enum MessageType Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public enum MessageType Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"session_keepalive\")] KeepAlive = 2 [EnumMember(Value = \"notification\")] Notification = 5 [EnumMember(Value = \"session_reconnect\")] Reconnect = 3 [EnumMember(Value = \"revocation\")] Revocation = 4 Unknown = 0 [EnumMember(Value = \"session_welcome\")] Welcome = 1"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ModeratorEventArgs.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ModeratorEventArgs.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterDisplayName The requested broadcaster display name. [JsonInclude] [JsonPropertyName(\"broadcaster_user_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ModeratorEventArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ModeratorEventArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterId The requested broadcaster ID. [JsonInclude] [JsonPropertyName(\"broadcaster_user_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ModeratorEventArgs.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ModeratorEventArgs.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterName The requested broadcaster login. [JsonInclude] [JsonPropertyName(\"broadcaster_user_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ModeratorEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ModeratorEventArgs.html",
    "title": "Class ModeratorEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class ModeratorEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class ModeratorEventArgs Inheritance object ModeratorEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterDisplayName The requested broadcaster display name. BroadcasterId The requested broadcaster ID. BroadcasterName The requested broadcaster login. UserDisplayName The display name of the moderator. UserId The user ID of the moderator. UserName The user login of the moderator."
  },
  "api/AuxLabs.Twitch.EventSub.Models.ModeratorEventArgs.UserDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ModeratorEventArgs.UserDisplayName.html",
    "title": "Property UserDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserDisplayName The display name of the moderator. [JsonInclude] [JsonPropertyName(\"user_name\")] public string UserDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ModeratorEventArgs.UserId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ModeratorEventArgs.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserId The user ID of the moderator. [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ModeratorEventArgs.UserName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ModeratorEventArgs.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserName The user login of the moderator. [JsonInclude] [JsonPropertyName(\"user_login\")] public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.PollEndedEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.PollEndedEventArgs.html",
    "title": "Class PollEndedEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PollEndedEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class PollEndedEventArgs : PollEventArgs Inheritance object PollEventArgs PollEndedEventArgs Inherited Members PollEventArgs.Id PollEventArgs.BroadcasterId PollEventArgs.BroadcasterName PollEventArgs.BroadcasterDisplayName PollEventArgs.Title PollEventArgs.Choices PollEventArgs.BitsVoting PollEventArgs.ChannelPointsVoting PollEventArgs.StartedAt PollEventArgs.EndsAt object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Status The status of the poll."
  },
  "api/AuxLabs.Twitch.EventSub.Models.PollEndedEventArgs.Status.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.PollEndedEventArgs.Status.html",
    "title": "Property Status | AuxLabs.Twitch Documentation",
    "keywords": "Property Status Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Status The status of the poll. [JsonInclude] [JsonPropertyName(\"status\")] public PollStatus Status { get; } Property Value PollStatus"
  },
  "api/AuxLabs.Twitch.EventSub.Models.PollEventArgs.BitsVoting.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.PollEventArgs.BitsVoting.html",
    "title": "Property BitsVoting | AuxLabs.Twitch Documentation",
    "keywords": "Property BitsVoting Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BitsVoting The Bits voting settings for the poll. [JsonInclude] [JsonPropertyName(\"bits_voting\")] public VotingOption BitsVoting { get; } Property Value VotingOption"
  },
  "api/AuxLabs.Twitch.EventSub.Models.PollEventArgs.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.PollEventArgs.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterDisplayName The requested broadcaster display name. [JsonInclude] [JsonPropertyName(\"broadcaster_user_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.PollEventArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.PollEventArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterId The requested broadcaster ID. [JsonInclude] [JsonPropertyName(\"broadcaster_user_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.PollEventArgs.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.PollEventArgs.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterName The requested broadcaster login. [JsonInclude] [JsonPropertyName(\"broadcaster_user_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.PollEventArgs.ChannelPointsVoting.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.PollEventArgs.ChannelPointsVoting.html",
    "title": "Property ChannelPointsVoting | AuxLabs.Twitch Documentation",
    "keywords": "Property ChannelPointsVoting Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll ChannelPointsVoting The Channel Points voting settings for the poll. [JsonInclude] [JsonPropertyName(\"channel_points_voting\")] public VotingOption ChannelPointsVoting { get; } Property Value VotingOption"
  },
  "api/AuxLabs.Twitch.EventSub.Models.PollEventArgs.Choices.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.PollEventArgs.Choices.html",
    "title": "Property Choices | AuxLabs.Twitch Documentation",
    "keywords": "Property Choices Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Choices A collection of choices for the poll. [JsonInclude] [JsonPropertyName(\"choices\")] public IReadOnlyCollection<PollOption> Choices { get; } Property Value IReadOnlyCollection<PollOption>"
  },
  "api/AuxLabs.Twitch.EventSub.Models.PollEventArgs.EndsAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.PollEventArgs.EndsAt.html",
    "title": "Property EndsAt | AuxLabs.Twitch Documentation",
    "keywords": "Property EndsAt Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll EndsAt The time the poll will end. [JsonInclude] [JsonPropertyName(\"ends_at\")] public DateTime EndsAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.EventSub.Models.PollEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.PollEventArgs.html",
    "title": "Class PollEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PollEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class PollEventArgs Inheritance object PollEventArgs Derived PollEndedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BitsVoting The Bits voting settings for the poll. BroadcasterDisplayName The requested broadcaster display name. BroadcasterId The requested broadcaster ID. BroadcasterName The requested broadcaster login. ChannelPointsVoting The Channel Points voting settings for the poll. Choices A collection of choices for the poll. EndsAt The time the poll will end. Id ID of the poll. StartedAt The time the poll started. Title Question displayed for the poll."
  },
  "api/AuxLabs.Twitch.EventSub.Models.PollEventArgs.Id.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.PollEventArgs.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Id ID of the poll. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.PollEventArgs.StartedAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.PollEventArgs.StartedAt.html",
    "title": "Property StartedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property StartedAt Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll StartedAt The time the poll started. [JsonInclude] [JsonPropertyName(\"started_at\")] public DateTime StartedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.EventSub.Models.PollEventArgs.Title.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.PollEventArgs.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Title Question displayed for the poll. [JsonInclude] [JsonPropertyName(\"title\")] public string Title { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.PredictionEndedEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.PredictionEndedEventArgs.html",
    "title": "Class PredictionEndedEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PredictionEndedEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class PredictionEndedEventArgs : PredictionEventArgs Inheritance object PredictionEventArgs PredictionEndedEventArgs Inherited Members PredictionEventArgs.Id PredictionEventArgs.BroadcasterId PredictionEventArgs.BroadcasterName PredictionEventArgs.BroadcasterDisplayName PredictionEventArgs.Title PredictionEventArgs.Options PredictionEventArgs.StartedAt PredictionEventArgs.LocksAt object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Status The status of the Channel Points Prediction. WinningOptionId ID of the winning outcome."
  },
  "api/AuxLabs.Twitch.EventSub.Models.PredictionEndedEventArgs.Status.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.PredictionEndedEventArgs.Status.html",
    "title": "Property Status | AuxLabs.Twitch Documentation",
    "keywords": "Property Status Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Status The status of the Channel Points Prediction. [JsonInclude] [JsonPropertyName(\"status\")] public PredictionStatus Status { get; } Property Value PredictionStatus"
  },
  "api/AuxLabs.Twitch.EventSub.Models.PredictionEndedEventArgs.WinningOptionId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.PredictionEndedEventArgs.WinningOptionId.html",
    "title": "Property WinningOptionId | AuxLabs.Twitch Documentation",
    "keywords": "Property WinningOptionId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll WinningOptionId ID of the winning outcome. [JsonInclude] [JsonPropertyName(\"winning_outcome_id\")] public string WinningOptionId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.PredictionEventArgs.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.PredictionEventArgs.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterDisplayName The requested broadcaster display name. [JsonInclude] [JsonPropertyName(\"broadcaster_user_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.PredictionEventArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.PredictionEventArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterId The requested broadcaster ID. [JsonInclude] [JsonPropertyName(\"broadcaster_user_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.PredictionEventArgs.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.PredictionEventArgs.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterName The requested broadcaster login. [JsonInclude] [JsonPropertyName(\"broadcaster_user_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.PredictionEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.PredictionEventArgs.html",
    "title": "Class PredictionEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PredictionEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class PredictionEventArgs Inheritance object PredictionEventArgs Derived PredictionEndedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterDisplayName The requested broadcaster display name. BroadcasterId The requested broadcaster ID. BroadcasterName The requested broadcaster login. Id The prediction identifier. LocksAt The time the Channel Points Prediction will automatically lock. Options A collection of outcomes for the Channel Points Prediction. StartedAt The time the Channel Points Prediction started. Title Title for the Channel Points Prediction."
  },
  "api/AuxLabs.Twitch.EventSub.Models.PredictionEventArgs.Id.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.PredictionEventArgs.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Id The prediction identifier. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.PredictionEventArgs.LocksAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.PredictionEventArgs.LocksAt.html",
    "title": "Property LocksAt | AuxLabs.Twitch Documentation",
    "keywords": "Property LocksAt Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll LocksAt The time the Channel Points Prediction will automatically lock. [JsonInclude] [JsonPropertyName(\"locks_at\")] public DateTime LocksAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.EventSub.Models.PredictionEventArgs.Options.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.PredictionEventArgs.Options.html",
    "title": "Property Options | AuxLabs.Twitch Documentation",
    "keywords": "Property Options Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Options A collection of outcomes for the Channel Points Prediction. [JsonInclude] [JsonPropertyName(\"outcomes\")] public IReadOnlyCollection<PredictionOption> Options { get; } Property Value IReadOnlyCollection<PredictionOption>"
  },
  "api/AuxLabs.Twitch.EventSub.Models.PredictionEventArgs.StartedAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.PredictionEventArgs.StartedAt.html",
    "title": "Property StartedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property StartedAt Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll StartedAt The time the Channel Points Prediction started. [JsonInclude] [JsonPropertyName(\"started_at\")] public DateTime StartedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.EventSub.Models.PredictionEventArgs.Title.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.PredictionEventArgs.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Title Title for the Channel Points Prediction. [JsonInclude] [JsonPropertyName(\"title\")] public string Title { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RaidEventArgs.FromBroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RaidEventArgs.FromBroadcasterDisplayName.html",
    "title": "Property FromBroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property FromBroadcasterDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll FromBroadcasterDisplayName The broadcaster display name that created the raid. [JsonInclude] [JsonPropertyName(\"from_broadcaster_user_name\")] public string FromBroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RaidEventArgs.FromBroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RaidEventArgs.FromBroadcasterId.html",
    "title": "Property FromBroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property FromBroadcasterId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll FromBroadcasterId The broadcaster ID that created the raid. [JsonInclude] [JsonPropertyName(\"from_broadcaster_user_id\")] public string FromBroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RaidEventArgs.FromBroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RaidEventArgs.FromBroadcasterName.html",
    "title": "Property FromBroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property FromBroadcasterName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll FromBroadcasterName The broadcaster login that created the raid. [JsonInclude] [JsonPropertyName(\"from_broadcaster_user_login\")] public string FromBroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RaidEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RaidEventArgs.html",
    "title": "Class RaidEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class RaidEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class RaidEventArgs Inheritance object RaidEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FromBroadcasterDisplayName The broadcaster display name that created the raid. FromBroadcasterId The broadcaster ID that created the raid. FromBroadcasterName The broadcaster login that created the raid. ToBroadcasterDisplayName The broadcaster display name that received the raid. ToBroadcasterId The broadcaster ID that received the raid. ToBroadcasterName The broadcaster login that received the raid. Viewers The number of viewers in the raid."
  },
  "api/AuxLabs.Twitch.EventSub.Models.RaidEventArgs.ToBroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RaidEventArgs.ToBroadcasterDisplayName.html",
    "title": "Property ToBroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property ToBroadcasterDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll ToBroadcasterDisplayName The broadcaster display name that received the raid. [JsonInclude] [JsonPropertyName(\"to_broadcaster_user_name\")] public string ToBroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RaidEventArgs.ToBroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RaidEventArgs.ToBroadcasterId.html",
    "title": "Property ToBroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property ToBroadcasterId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll ToBroadcasterId The broadcaster ID that received the raid. [JsonInclude] [JsonPropertyName(\"to_broadcaster_user_id\")] public string ToBroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RaidEventArgs.ToBroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RaidEventArgs.ToBroadcasterName.html",
    "title": "Property ToBroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property ToBroadcasterName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll ToBroadcasterName The broadcaster login that received the raid. [JsonInclude] [JsonPropertyName(\"to_broadcaster_user_login\")] public string ToBroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RaidEventArgs.Viewers.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RaidEventArgs.Viewers.html",
    "title": "Property Viewers | AuxLabs.Twitch Documentation",
    "keywords": "Property Viewers Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Viewers The number of viewers in the raid. [JsonInclude] [JsonPropertyName(\"viewers\")] public int Viewers { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RedemptionEventArgs.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RedemptionEventArgs.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterDisplayName The requested broadcaster display name. [JsonInclude] [JsonPropertyName(\"broadcaster_user_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RedemptionEventArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RedemptionEventArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterId The requested broadcaster ID. [JsonInclude] [JsonPropertyName(\"broadcaster_user_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RedemptionEventArgs.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RedemptionEventArgs.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterName The requested broadcaster login. [JsonInclude] [JsonPropertyName(\"broadcaster_user_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RedemptionEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RedemptionEventArgs.html",
    "title": "Class RedemptionEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class RedemptionEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class RedemptionEventArgs Inheritance object RedemptionEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterDisplayName The requested broadcaster display name. BroadcasterId The requested broadcaster ID. BroadcasterName The requested broadcaster login. Id The redemption identifier. RedeemedAt Timestamp of when the reward was redeemed. Reward Basic information about the reward that was redeemed, at the time it was redeemed. Status Defaults to Unfulfilled. UserDisplayName The user display name for the user now following the specified channel. UserId The user ID for the user now following the specified channel. UserInput The user input provided. Empty string if not provided. UserName The user login for the user now following the specified channel."
  },
  "api/AuxLabs.Twitch.EventSub.Models.RedemptionEventArgs.Id.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RedemptionEventArgs.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Id The redemption identifier. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RedemptionEventArgs.RedeemedAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RedemptionEventArgs.RedeemedAt.html",
    "title": "Property RedeemedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property RedeemedAt Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll RedeemedAt Timestamp of when the reward was redeemed. [JsonInclude] [JsonPropertyName(\"redeemed_at\")] public DateTime RedeemedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RedemptionEventArgs.Reward.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RedemptionEventArgs.Reward.html",
    "title": "Property Reward | AuxLabs.Twitch Documentation",
    "keywords": "Property Reward Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Reward Basic information about the reward that was redeemed, at the time it was redeemed. [JsonInclude] [JsonPropertyName(\"reward\")] public SimpleReward Reward { get; } Property Value SimpleReward"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RedemptionEventArgs.Status.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RedemptionEventArgs.Status.html",
    "title": "Property Status | AuxLabs.Twitch Documentation",
    "keywords": "Property Status Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Status Defaults to Unfulfilled. [JsonInclude] [JsonPropertyName(\"status\")] public RedemptionStatus Status { get; } Property Value RedemptionStatus"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RedemptionEventArgs.UserDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RedemptionEventArgs.UserDisplayName.html",
    "title": "Property UserDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserDisplayName The user display name for the user now following the specified channel. [JsonInclude] [JsonPropertyName(\"user_name\")] public string UserDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RedemptionEventArgs.UserId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RedemptionEventArgs.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserId The user ID for the user now following the specified channel. [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RedemptionEventArgs.UserInput.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RedemptionEventArgs.UserInput.html",
    "title": "Property UserInput | AuxLabs.Twitch Documentation",
    "keywords": "Property UserInput Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserInput The user input provided. Empty string if not provided. [JsonInclude] [JsonPropertyName(\"user_input\")] public string UserInput { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RedemptionEventArgs.UserName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RedemptionEventArgs.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserName The user login for the user now following the specified channel. [JsonInclude] [JsonPropertyName(\"user_login\")] public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.BackgroundColor.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.BackgroundColor.html",
    "title": "Property BackgroundColor | AuxLabs.Twitch Documentation",
    "keywords": "Property BackgroundColor Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BackgroundColor Custom background color for the reward. [JsonInclude] [JsonPropertyName(\"background_color\")] public Color BackgroundColor { get; } Property Value Color"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterDisplayName The requested broadcaster display name. [JsonInclude] [JsonPropertyName(\"broadcaster_user_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterId The requested broadcaster ID. [JsonInclude] [JsonPropertyName(\"broadcaster_user_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterName The requested broadcaster login. [JsonInclude] [JsonPropertyName(\"broadcaster_user_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.CooldownEndsAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.CooldownEndsAt.html",
    "title": "Property CooldownEndsAt | AuxLabs.Twitch Documentation",
    "keywords": "Property CooldownEndsAt Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll CooldownEndsAt Timestamp of the cooldown expiration. [JsonInclude] [JsonPropertyName(\"cooldown_expires_at\")] public DateTime? CooldownEndsAt { get; } Property Value DateTime? Remarks null if the reward isn’t on cooldown."
  },
  "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.Cost.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.Cost.html",
    "title": "Property Cost | AuxLabs.Twitch Documentation",
    "keywords": "Property Cost Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Cost The reward cost. [JsonInclude] [JsonPropertyName(\"cost\")] public int Cost { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.CurrentRedeemsTotal.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.CurrentRedeemsTotal.html",
    "title": "Property CurrentRedeemsTotal | AuxLabs.Twitch Documentation",
    "keywords": "Property CurrentRedeemsTotal Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll CurrentRedeemsTotal The number of redemptions redeemed during the current live stream. [JsonInclude] [JsonPropertyName(\"redemptions_redeemed_current_stream\")] public int CurrentRedeemsTotal { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.DefaultImage.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.DefaultImage.html",
    "title": "Property DefaultImage | AuxLabs.Twitch Documentation",
    "keywords": "Property DefaultImage Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll DefaultImage Set of default images of 1x, 2x and 4x sizes for the reward. [JsonInclude] [JsonPropertyName(\"default_image\")] public TwitchImage DefaultImage { get; } Property Value TwitchImage"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.GlobalCooldown.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.GlobalCooldown.html",
    "title": "Property GlobalCooldown | AuxLabs.Twitch Documentation",
    "keywords": "Property GlobalCooldown Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll GlobalCooldown Whether a cooldown is enabled and what the cooldown is in seconds. [JsonInclude] [JsonPropertyName(\"global_cooldown\")] public GlobalCooldownSetting GlobalCooldown { get; } Property Value GlobalCooldownSetting"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.html",
    "title": "Class RewardEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class RewardEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class RewardEventArgs Inheritance object RewardEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BackgroundColor Custom background color for the reward. BroadcasterDisplayName The requested broadcaster display name. BroadcasterId The requested broadcaster ID. BroadcasterName The requested broadcaster login. CooldownEndsAt Timestamp of the cooldown expiration. Cost The reward cost. CurrentRedeemsTotal The number of redemptions redeemed during the current live stream. DefaultImage Set of default images of 1x, 2x and 4x sizes for the reward. GlobalCooldown Whether a cooldown is enabled and what the cooldown is in seconds. Id The reward identifier. Image Set of custom images of 1x, 2x and 4x sizes for the reward. IsEnabled Is the reward currently enabled. IsInStock Is the reward currently in stock. IsPaused Is the reward currently paused. IsUserInputRequired Does the viewer need to enter information when redeeming the reward. MaxPerStream Whether a maximum per stream is enabled and what the maximum is. MaxPerUser Whether a maximum per user per stream is enabled and what the maximum is. Prompt The reward description. ShouldSkipRequestQueue Should redemptions be set to fulfilled status immediately when redeemed and skip the request queue instead of the normal unfulfilled status. Title The reward title."
  },
  "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.Id.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Id The reward identifier. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.Image.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.Image.html",
    "title": "Property Image | AuxLabs.Twitch Documentation",
    "keywords": "Property Image Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Image Set of custom images of 1x, 2x and 4x sizes for the reward. [JsonInclude] [JsonPropertyName(\"image\")] public TwitchImage Image { get; } Property Value TwitchImage Remarks Can be null if no images have been uploaded."
  },
  "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.IsEnabled.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.IsEnabled.html",
    "title": "Property IsEnabled | AuxLabs.Twitch Documentation",
    "keywords": "Property IsEnabled Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll IsEnabled Is the reward currently enabled. [JsonInclude] [JsonPropertyName(\"is_enabled\")] public bool IsEnabled { get; } Property Value bool Remarks If false, the reward won’t show up to viewers."
  },
  "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.IsInStock.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.IsInStock.html",
    "title": "Property IsInStock | AuxLabs.Twitch Documentation",
    "keywords": "Property IsInStock Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll IsInStock Is the reward currently in stock. [JsonInclude] [JsonPropertyName(\"is_in_stock\")] public bool IsInStock { get; } Property Value bool Remarks If false, viewers can’t redeem."
  },
  "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.IsPaused.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.IsPaused.html",
    "title": "Property IsPaused | AuxLabs.Twitch Documentation",
    "keywords": "Property IsPaused Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll IsPaused Is the reward currently paused. [JsonInclude] [JsonPropertyName(\"is_paused\")] public bool IsPaused { get; } Property Value bool Remarks If true, viewers can’t redeem."
  },
  "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.IsUserInputRequired.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.IsUserInputRequired.html",
    "title": "Property IsUserInputRequired | AuxLabs.Twitch Documentation",
    "keywords": "Property IsUserInputRequired Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll IsUserInputRequired Does the viewer need to enter information when redeeming the reward. [JsonInclude] [JsonPropertyName(\"is_user_input_required\")] public bool IsUserInputRequired { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.MaxPerStream.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.MaxPerStream.html",
    "title": "Property MaxPerStream | AuxLabs.Twitch Documentation",
    "keywords": "Property MaxPerStream Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll MaxPerStream Whether a maximum per stream is enabled and what the maximum is. [JsonInclude] [JsonPropertyName(\"max_per_stream\")] public RewardSetting MaxPerStream { get; } Property Value RewardSetting"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.MaxPerUser.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.MaxPerUser.html",
    "title": "Property MaxPerUser | AuxLabs.Twitch Documentation",
    "keywords": "Property MaxPerUser Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll MaxPerUser Whether a maximum per user per stream is enabled and what the maximum is. [JsonInclude] [JsonPropertyName(\"max_per_user_per_stream\")] public RewardSetting MaxPerUser { get; } Property Value RewardSetting"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.Prompt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.Prompt.html",
    "title": "Property Prompt | AuxLabs.Twitch Documentation",
    "keywords": "Property Prompt Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Prompt The reward description. [JsonInclude] [JsonPropertyName(\"prompt\")] public string Prompt { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.ShouldSkipRequestQueue.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.ShouldSkipRequestQueue.html",
    "title": "Property ShouldSkipRequestQueue | AuxLabs.Twitch Documentation",
    "keywords": "Property ShouldSkipRequestQueue Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll ShouldSkipRequestQueue Should redemptions be set to fulfilled status immediately when redeemed and skip the request queue instead of the normal unfulfilled status. [JsonInclude] [JsonPropertyName(\"should_redemptions_skip_request_queue\")] public bool ShouldSkipRequestQueue { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.Title.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RewardEventArgs.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Title The reward title. [JsonInclude] [JsonPropertyName(\"title\")] public string Title { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RewardSetting.-ctor.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RewardSetting.-ctor.html",
    "title": "Constructor RewardSetting | AuxLabs.Twitch Documentation",
    "keywords": "Constructor RewardSetting Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll RewardSetting(int, bool) [JsonConstructor] public RewardSetting(int value, bool isEnabled = false) Parameters value int isEnabled bool"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RewardSetting.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RewardSetting.html",
    "title": "Struct RewardSetting | AuxLabs.Twitch Documentation",
    "keywords": "Struct RewardSetting Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public readonly struct RewardSetting Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors RewardSetting(int, bool) Properties IsEnabled Is the setting enabled. Value The setting's value."
  },
  "api/AuxLabs.Twitch.EventSub.Models.RewardSetting.IsEnabled.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RewardSetting.IsEnabled.html",
    "title": "Property IsEnabled | AuxLabs.Twitch Documentation",
    "keywords": "Property IsEnabled Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll IsEnabled Is the setting enabled. [JsonInclude] [JsonPropertyName(\"is_enabled\")] public bool IsEnabled { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.EventSub.Models.RewardSetting.Value.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.RewardSetting.Value.html",
    "title": "Property Value | AuxLabs.Twitch Documentation",
    "keywords": "Property Value Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Value The setting's value. [JsonInclude] [JsonPropertyName(\"value\")] public int Value { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.EventSub.Models.Session.ConnectedAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.Session.ConnectedAt.html",
    "title": "Property ConnectedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property ConnectedAt Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll ConnectedAt The UTC date and time that the connection was created. [JsonPropertyName(\"connected_at\")] public DateTime ConnectedAt { get; set; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.EventSub.Models.Session.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.Session.html",
    "title": "Class Session | AuxLabs.Twitch Documentation",
    "keywords": "Class Session Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class Session Inheritance object Session Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ConnectedAt The UTC date and time that the connection was created. Id An ID that uniquely identifies this WebSocket connection. KeepaliveTimeoutSeconds The maximum number of seconds that you should expect silence before receiving a keepalive message. ReconnectUrl The URL to reconnect to if you get a Reconnect message. Status The connection’s status."
  },
  "api/AuxLabs.Twitch.EventSub.Models.Session.Id.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.Session.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Id An ID that uniquely identifies this WebSocket connection. [JsonPropertyName(\"id\")] public string Id { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.Session.KeepaliveTimeoutSeconds.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.Session.KeepaliveTimeoutSeconds.html",
    "title": "Property KeepaliveTimeoutSeconds | AuxLabs.Twitch Documentation",
    "keywords": "Property KeepaliveTimeoutSeconds Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll KeepaliveTimeoutSeconds The maximum number of seconds that you should expect silence before receiving a keepalive message. [JsonPropertyName(\"keepalive_timeout_seconds\")] public int? KeepaliveTimeoutSeconds { get; set; } Property Value int?"
  },
  "api/AuxLabs.Twitch.EventSub.Models.Session.ReconnectUrl.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.Session.ReconnectUrl.html",
    "title": "Property ReconnectUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property ReconnectUrl Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll ReconnectUrl The URL to reconnect to if you get a Reconnect message. [JsonPropertyName(\"reconnect_url\")] public string ReconnectUrl { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.Session.Status.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.Session.Status.html",
    "title": "Property Status | AuxLabs.Twitch Documentation",
    "keywords": "Property Status Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Status The connection’s status. [JsonPropertyName(\"status\")] public string Status { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ShieldModeEnabledEventArgs.EnabledAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ShieldModeEnabledEventArgs.EnabledAt.html",
    "title": "Property EnabledAt | AuxLabs.Twitch Documentation",
    "keywords": "Property EnabledAt Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll EnabledAt The UTC timestamp of when the moderator activated Shield Mode. [JsonInclude] [JsonPropertyName(\"started_at\")] public DateTime EnabledAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ShieldModeEnabledEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ShieldModeEnabledEventArgs.html",
    "title": "Class ShieldModeEnabledEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class ShieldModeEnabledEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class ShieldModeEnabledEventArgs : ShieldModeEventArgs Inheritance object ShieldModeEventArgs ShieldModeEnabledEventArgs Inherited Members ShieldModeEventArgs.BroadcasterId ShieldModeEventArgs.BroadcasterName ShieldModeEventArgs.BroadcasterDisplayName ShieldModeEventArgs.ModeratorId ShieldModeEventArgs.ModeratorName ShieldModeEventArgs.ModeratorDisplayName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EnabledAt The UTC timestamp of when the moderator activated Shield Mode."
  },
  "api/AuxLabs.Twitch.EventSub.Models.ShieldModeEndedEventArgs.EndedAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ShieldModeEndedEventArgs.EndedAt.html",
    "title": "Property EndedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property EndedAt Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll EndedAt The UTC timestamp of when the moderator deactivated Shield Mode. [JsonInclude] [JsonPropertyName(\"ended_at\")] public DateTime EndedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ShieldModeEndedEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ShieldModeEndedEventArgs.html",
    "title": "Class ShieldModeEndedEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class ShieldModeEndedEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class ShieldModeEndedEventArgs : ShieldModeEventArgs Inheritance object ShieldModeEventArgs ShieldModeEndedEventArgs Inherited Members ShieldModeEventArgs.BroadcasterId ShieldModeEventArgs.BroadcasterName ShieldModeEventArgs.BroadcasterDisplayName ShieldModeEventArgs.ModeratorId ShieldModeEventArgs.ModeratorName ShieldModeEventArgs.ModeratorDisplayName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EndedAt The UTC timestamp of when the moderator deactivated Shield Mode."
  },
  "api/AuxLabs.Twitch.EventSub.Models.ShieldModeEventArgs.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ShieldModeEventArgs.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterDisplayName The requested broadcaster display name. [JsonInclude] [JsonPropertyName(\"broadcaster_user_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ShieldModeEventArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ShieldModeEventArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterId The requested broadcaster ID. [JsonInclude] [JsonPropertyName(\"broadcaster_user_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ShieldModeEventArgs.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ShieldModeEventArgs.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterName The requested broadcaster login. [JsonInclude] [JsonPropertyName(\"broadcaster_user_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ShieldModeEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ShieldModeEventArgs.html",
    "title": "Class ShieldModeEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class ShieldModeEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class ShieldModeEventArgs Inheritance object ShieldModeEventArgs Derived ShieldModeEnabledEventArgs ShieldModeEndedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterDisplayName The requested broadcaster display name. BroadcasterId The requested broadcaster ID. BroadcasterName The requested broadcaster login. ModeratorDisplayName The moderator’s display name. ModeratorId An ID that identifies the moderator that updated the Shield Mode’s status. ModeratorName The moderator’s login name."
  },
  "api/AuxLabs.Twitch.EventSub.Models.ShieldModeEventArgs.ModeratorDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ShieldModeEventArgs.ModeratorDisplayName.html",
    "title": "Property ModeratorDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll ModeratorDisplayName The moderator’s display name. [JsonInclude] [JsonPropertyName(\"moderator_user_name\")] public string ModeratorDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ShieldModeEventArgs.ModeratorId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ShieldModeEventArgs.ModeratorId.html",
    "title": "Property ModeratorId | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll ModeratorId An ID that identifies the moderator that updated the Shield Mode’s status. [JsonInclude] [JsonPropertyName(\"moderator_user_id\")] public string ModeratorId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ShieldModeEventArgs.ModeratorName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ShieldModeEventArgs.ModeratorName.html",
    "title": "Property ModeratorName | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll ModeratorName The moderator’s login name. [JsonInclude] [JsonPropertyName(\"moderator_user_login\")] public string ModeratorName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ShoutoutCreatedEventArgs.CooldownEndsAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ShoutoutCreatedEventArgs.CooldownEndsAt.html",
    "title": "Property CooldownEndsAt | AuxLabs.Twitch Documentation",
    "keywords": "Property CooldownEndsAt Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll CooldownEndsAt The UTC timestamp of when the broadcaster may send a Shoutout to a different broadcaster. [JsonInclude] [JsonPropertyName(\"moderator_user_name\")] public DateTime CooldownEndsAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ShoutoutCreatedEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ShoutoutCreatedEventArgs.html",
    "title": "Class ShoutoutCreatedEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class ShoutoutCreatedEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class ShoutoutCreatedEventArgs : ShoutoutReceivedEventArgs Inheritance object ShoutoutReceivedEventArgs ShoutoutCreatedEventArgs Inherited Members ShoutoutReceivedEventArgs.BroadcasterId ShoutoutReceivedEventArgs.BroadcasterName ShoutoutReceivedEventArgs.BroadcasterDisplayName ShoutoutReceivedEventArgs.FromBroadcasterId ShoutoutReceivedEventArgs.FromBroadcasterName ShoutoutReceivedEventArgs.FromBroadcasterDisplayName ShoutoutReceivedEventArgs.ViewerCount ShoutoutReceivedEventArgs.StartedAt object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CooldownEndsAt The UTC timestamp of when the broadcaster may send a Shoutout to a different broadcaster. ModeratorDisplayName The moderator’s display name. ModeratorId An ID that identifies the moderator that sent the Shoutout. ModeratorName The moderator’s login name. TargetCooldownEndsAt The UTC timestamp of when the broadcaster may send another Shoutout to BroadcasterId"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ShoutoutCreatedEventArgs.ModeratorDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ShoutoutCreatedEventArgs.ModeratorDisplayName.html",
    "title": "Property ModeratorDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll ModeratorDisplayName The moderator’s display name. [JsonInclude] [JsonPropertyName(\"moderator_user_name\")] public string ModeratorDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ShoutoutCreatedEventArgs.ModeratorId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ShoutoutCreatedEventArgs.ModeratorId.html",
    "title": "Property ModeratorId | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll ModeratorId An ID that identifies the moderator that sent the Shoutout. [JsonInclude] [JsonPropertyName(\"moderator_user_id\")] public string ModeratorId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ShoutoutCreatedEventArgs.ModeratorName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ShoutoutCreatedEventArgs.ModeratorName.html",
    "title": "Property ModeratorName | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll ModeratorName The moderator’s login name. [JsonInclude] [JsonPropertyName(\"moderator_user_login\")] public string ModeratorName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ShoutoutCreatedEventArgs.TargetCooldownEndsAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ShoutoutCreatedEventArgs.TargetCooldownEndsAt.html",
    "title": "Property TargetCooldownEndsAt | AuxLabs.Twitch Documentation",
    "keywords": "Property TargetCooldownEndsAt Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll TargetCooldownEndsAt The UTC timestamp of when the broadcaster may send another Shoutout to BroadcasterId [JsonInclude] [JsonPropertyName(\"moderator_user_name\")] public DateTime TargetCooldownEndsAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ShoutoutReceivedEventArgs.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ShoutoutReceivedEventArgs.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterDisplayName The broadcaster display name. [JsonInclude] [JsonPropertyName(\"broadcaster_user_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ShoutoutReceivedEventArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ShoutoutReceivedEventArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterId An ID that identifies the broadcaster that received the Shoutout. [JsonInclude] [JsonPropertyName(\"broadcaster_user_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ShoutoutReceivedEventArgs.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ShoutoutReceivedEventArgs.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterName The broadcaster login. [JsonInclude] [JsonPropertyName(\"broadcaster_user_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ShoutoutReceivedEventArgs.FromBroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ShoutoutReceivedEventArgs.FromBroadcasterDisplayName.html",
    "title": "Property FromBroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property FromBroadcasterDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll FromBroadcasterDisplayName The broadcaster display name. [JsonInclude] [JsonPropertyName(\"from_broadcaster_user_name\")] public string FromBroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ShoutoutReceivedEventArgs.FromBroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ShoutoutReceivedEventArgs.FromBroadcasterId.html",
    "title": "Property FromBroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property FromBroadcasterId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll FromBroadcasterId An ID that identifies the broadcaster that sent the Shoutout. [JsonInclude] [JsonPropertyName(\"from_broadcaster_user_id\")] public string FromBroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ShoutoutReceivedEventArgs.FromBroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ShoutoutReceivedEventArgs.FromBroadcasterName.html",
    "title": "Property FromBroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property FromBroadcasterName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll FromBroadcasterName The broadcaster login. [JsonInclude] [JsonPropertyName(\"from_broadcaster_user_login\")] public string FromBroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ShoutoutReceivedEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ShoutoutReceivedEventArgs.html",
    "title": "Class ShoutoutReceivedEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class ShoutoutReceivedEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class ShoutoutReceivedEventArgs Inheritance object ShoutoutReceivedEventArgs Derived ShoutoutCreatedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterDisplayName The broadcaster display name. BroadcasterId An ID that identifies the broadcaster that received the Shoutout. BroadcasterName The broadcaster login. FromBroadcasterDisplayName The broadcaster display name. FromBroadcasterId An ID that identifies the broadcaster that sent the Shoutout. FromBroadcasterName The broadcaster login. StartedAt The UTC timestamp of when the moderator sent the Shoutout. ViewerCount The number of users that were watching the from-broadcaster’s stream at the time of the Shoutout."
  },
  "api/AuxLabs.Twitch.EventSub.Models.ShoutoutReceivedEventArgs.StartedAt.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ShoutoutReceivedEventArgs.StartedAt.html",
    "title": "Property StartedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property StartedAt Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll StartedAt The UTC timestamp of when the moderator sent the Shoutout. [JsonInclude] [JsonPropertyName(\"started_at\")] public DateTime StartedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.EventSub.Models.ShoutoutReceivedEventArgs.ViewerCount.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.ShoutoutReceivedEventArgs.ViewerCount.html",
    "title": "Property ViewerCount | AuxLabs.Twitch Documentation",
    "keywords": "Property ViewerCount Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll ViewerCount The number of users that were watching the from-broadcaster’s stream at the time of the Shoutout. [JsonInclude] [JsonPropertyName(\"viewer_count\")] public int ViewerCount { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.EventSub.Models.SubscriptionEventArgs.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.SubscriptionEventArgs.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterDisplayName The requested broadcaster display name. [JsonInclude] [JsonPropertyName(\"broadcaster_user_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.SubscriptionEventArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.SubscriptionEventArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterId The requested broadcaster ID. [JsonInclude] [JsonPropertyName(\"broadcaster_user_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.SubscriptionEventArgs.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.SubscriptionEventArgs.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterName The requested broadcaster login. [JsonInclude] [JsonPropertyName(\"broadcaster_user_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.SubscriptionEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.SubscriptionEventArgs.html",
    "title": "Class SubscriptionEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class SubscriptionEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class SubscriptionEventArgs Inheritance object SubscriptionEventArgs Derived SubscriptionGiftedEventArgs SubscriptionMessageEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterDisplayName The requested broadcaster display name. BroadcasterId The requested broadcaster ID. BroadcasterName The requested broadcaster login. IsGift Whether the subscription is a gift. Tier The tier of the subscription. UserDisplayName The user display name for the user who subscribed to the specified channel. UserId The user ID for the user who subscribed to the specified channel. UserName The user login for the user who subscribed to the specified channel."
  },
  "api/AuxLabs.Twitch.EventSub.Models.SubscriptionEventArgs.IsGift.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.SubscriptionEventArgs.IsGift.html",
    "title": "Property IsGift | AuxLabs.Twitch Documentation",
    "keywords": "Property IsGift Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll IsGift Whether the subscription is a gift. [JsonInclude] [JsonPropertyName(\"is_gift\")] public bool IsGift { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.EventSub.Models.SubscriptionEventArgs.Tier.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.SubscriptionEventArgs.Tier.html",
    "title": "Property Tier | AuxLabs.Twitch Documentation",
    "keywords": "Property Tier Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Tier The tier of the subscription. [JsonInclude] [JsonPropertyName(\"tier\")] public SubscriptionType Tier { get; } Property Value SubscriptionType"
  },
  "api/AuxLabs.Twitch.EventSub.Models.SubscriptionEventArgs.UserDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.SubscriptionEventArgs.UserDisplayName.html",
    "title": "Property UserDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserDisplayName The user display name for the user who subscribed to the specified channel. [JsonInclude] [JsonPropertyName(\"user_name\")] public string UserDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.SubscriptionEventArgs.UserId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.SubscriptionEventArgs.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserId The user ID for the user who subscribed to the specified channel. [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.SubscriptionEventArgs.UserName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.SubscriptionEventArgs.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserName The user login for the user who subscribed to the specified channel. [JsonInclude] [JsonPropertyName(\"user_login\")] public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.SubscriptionGiftedEventArgs.CumulativeTotal.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.SubscriptionGiftedEventArgs.CumulativeTotal.html",
    "title": "Property CumulativeTotal | AuxLabs.Twitch Documentation",
    "keywords": "Property CumulativeTotal Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll CumulativeTotal The number of subscriptions gifted by this user in the channel. [JsonInclude] [JsonPropertyName(\"cumulative_total\")] public int? CumulativeTotal { get; } Property Value int? Remarks This value is null for anonymous gifts or if the gifter has opted out of sharing this information."
  },
  "api/AuxLabs.Twitch.EventSub.Models.SubscriptionGiftedEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.SubscriptionGiftedEventArgs.html",
    "title": "Class SubscriptionGiftedEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class SubscriptionGiftedEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class SubscriptionGiftedEventArgs : SubscriptionEventArgs Inheritance object SubscriptionEventArgs SubscriptionGiftedEventArgs Inherited Members SubscriptionEventArgs.UserId SubscriptionEventArgs.UserName SubscriptionEventArgs.UserDisplayName SubscriptionEventArgs.BroadcasterId SubscriptionEventArgs.BroadcasterName SubscriptionEventArgs.BroadcasterDisplayName SubscriptionEventArgs.Tier SubscriptionEventArgs.IsGift object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CumulativeTotal The number of subscriptions gifted by this user in the channel. IsAnonymous Whether the subscription gift was anonymous."
  },
  "api/AuxLabs.Twitch.EventSub.Models.SubscriptionGiftedEventArgs.IsAnonymous.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.SubscriptionGiftedEventArgs.IsAnonymous.html",
    "title": "Property IsAnonymous | AuxLabs.Twitch Documentation",
    "keywords": "Property IsAnonymous Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll IsAnonymous Whether the subscription gift was anonymous. [JsonInclude] [JsonPropertyName(\"is_anonymous\")] public bool IsAnonymous { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.EventSub.Models.SubscriptionMessage.Emotes.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.SubscriptionMessage.Emotes.html",
    "title": "Property Emotes | AuxLabs.Twitch Documentation",
    "keywords": "Property Emotes Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Emotes A collection that includes the emote ID and start and end positions for where the emote appears in the text. [JsonInclude] [JsonPropertyName(\"emotes\")] public IReadOnlyCollection<EmotePosition> Emotes { get; } Property Value IReadOnlyCollection<EmotePosition>"
  },
  "api/AuxLabs.Twitch.EventSub.Models.SubscriptionMessage.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.SubscriptionMessage.html",
    "title": "Class SubscriptionMessage | AuxLabs.Twitch Documentation",
    "keywords": "Class SubscriptionMessage Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class SubscriptionMessage Inheritance object SubscriptionMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Emotes A collection that includes the emote ID and start and end positions for where the emote appears in the text. Text The text of the resubscription chat message."
  },
  "api/AuxLabs.Twitch.EventSub.Models.SubscriptionMessage.Text.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.SubscriptionMessage.Text.html",
    "title": "Property Text | AuxLabs.Twitch Documentation",
    "keywords": "Property Text Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Text The text of the resubscription chat message. [JsonInclude] [JsonPropertyName(\"text\")] public string Text { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.SubscriptionMessageEventArgs.CumulativeMonths.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.SubscriptionMessageEventArgs.CumulativeMonths.html",
    "title": "Property CumulativeMonths | AuxLabs.Twitch Documentation",
    "keywords": "Property CumulativeMonths Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll CumulativeMonths The total number of months the user has been subscribed to the channel. [JsonInclude] [JsonPropertyName(\"cumulative_months\")] public int CumulativeMonths { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.EventSub.Models.SubscriptionMessageEventArgs.DurationMonths.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.SubscriptionMessageEventArgs.DurationMonths.html",
    "title": "Property DurationMonths | AuxLabs.Twitch Documentation",
    "keywords": "Property DurationMonths Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll DurationMonths The month duration of the subscription. [JsonInclude] [JsonPropertyName(\"duration_months\")] public int DurationMonths { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.EventSub.Models.SubscriptionMessageEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.SubscriptionMessageEventArgs.html",
    "title": "Class SubscriptionMessageEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class SubscriptionMessageEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class SubscriptionMessageEventArgs : SubscriptionEventArgs Inheritance object SubscriptionEventArgs SubscriptionMessageEventArgs Inherited Members SubscriptionEventArgs.UserId SubscriptionEventArgs.UserName SubscriptionEventArgs.UserDisplayName SubscriptionEventArgs.BroadcasterId SubscriptionEventArgs.BroadcasterName SubscriptionEventArgs.BroadcasterDisplayName SubscriptionEventArgs.Tier SubscriptionEventArgs.IsGift object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CumulativeMonths The total number of months the user has been subscribed to the channel. DurationMonths The month duration of the subscription. Message An object that contains the resubscription message and emote information needed to recreate the message. StreakMonths The number of consecutive months the user’s current subscription has been active."
  },
  "api/AuxLabs.Twitch.EventSub.Models.SubscriptionMessageEventArgs.Message.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.SubscriptionMessageEventArgs.Message.html",
    "title": "Property Message | AuxLabs.Twitch Documentation",
    "keywords": "Property Message Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Message An object that contains the resubscription message and emote information needed to recreate the message. [JsonInclude] [JsonPropertyName(\"message\")] public SubscriptionMessage Message { get; } Property Value SubscriptionMessage"
  },
  "api/AuxLabs.Twitch.EventSub.Models.SubscriptionMessageEventArgs.StreakMonths.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.SubscriptionMessageEventArgs.StreakMonths.html",
    "title": "Property StreakMonths | AuxLabs.Twitch Documentation",
    "keywords": "Property StreakMonths Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll StreakMonths The number of consecutive months the user’s current subscription has been active. [JsonInclude] [JsonPropertyName(\"streak_months\")] public int? StreakMonths { get; } Property Value int? Remarks This value is null if the user has opted out of sharing this information."
  },
  "api/AuxLabs.Twitch.EventSub.Models.UnbanEventArgs.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.UnbanEventArgs.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterDisplayName The requested broadcaster display name. [JsonInclude] [JsonPropertyName(\"broadcaster_user_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.UnbanEventArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.UnbanEventArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterId The requested broadcaster ID. [JsonInclude] [JsonPropertyName(\"broadcaster_user_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.UnbanEventArgs.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.UnbanEventArgs.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll BroadcasterName The requested broadcaster login. [JsonInclude] [JsonPropertyName(\"broadcaster_user_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.UnbanEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.UnbanEventArgs.html",
    "title": "Class UnbanEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class UnbanEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class UnbanEventArgs Inheritance object UnbanEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterDisplayName The requested broadcaster display name. BroadcasterId The requested broadcaster ID. BroadcasterName The requested broadcaster login. ModeratorDisplayName The user name of the issuer of the unban. ModeratorId The user ID of the issuer of the unban. ModeratorName The user login of the issuer of the unban. UserDisplayName The user display name for the user who was unbanned on the specified channel. UserId The user id for the user who was unbanned on the specified channel. UserName The user login for the user who was unbanned on the specified channel."
  },
  "api/AuxLabs.Twitch.EventSub.Models.UnbanEventArgs.ModeratorDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.UnbanEventArgs.ModeratorDisplayName.html",
    "title": "Property ModeratorDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll ModeratorDisplayName The user name of the issuer of the unban. [JsonInclude] [JsonPropertyName(\"moderator_user_name\")] public string ModeratorDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.UnbanEventArgs.ModeratorId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.UnbanEventArgs.ModeratorId.html",
    "title": "Property ModeratorId | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll ModeratorId The user ID of the issuer of the unban. [JsonInclude] [JsonPropertyName(\"moderator_user_id\")] public string ModeratorId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.UnbanEventArgs.ModeratorName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.UnbanEventArgs.ModeratorName.html",
    "title": "Property ModeratorName | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll ModeratorName The user login of the issuer of the unban. [JsonInclude] [JsonPropertyName(\"moderator_user_login\")] public string ModeratorName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.UnbanEventArgs.UserDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.UnbanEventArgs.UserDisplayName.html",
    "title": "Property UserDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserDisplayName The user display name for the user who was unbanned on the specified channel. [JsonInclude] [JsonPropertyName(\"user_name\")] public string UserDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.UnbanEventArgs.UserId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.UnbanEventArgs.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserId The user id for the user who was unbanned on the specified channel. [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.UnbanEventArgs.UserName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.UnbanEventArgs.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserName The user login for the user who was unbanned on the specified channel. [JsonInclude] [JsonPropertyName(\"user_login\")] public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.UserUpdatedEventArgs.Description.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.UserUpdatedEventArgs.Description.html",
    "title": "Property Description | AuxLabs.Twitch Documentation",
    "keywords": "Property Description Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Description The user’s description. [JsonInclude] [JsonPropertyName(\"description\")] public string Description { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.UserUpdatedEventArgs.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.UserUpdatedEventArgs.html",
    "title": "Class UserUpdatedEventArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class UserUpdatedEventArgs Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class UserUpdatedEventArgs Inheritance object UserUpdatedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description The user’s description. IsEmailVerified Determines whether Twitch has verified the user’s email address. UserDisplayName The user’s user display name. UserEmail The user’s email address. UserId The user’s user id. UserName The user’s user login."
  },
  "api/AuxLabs.Twitch.EventSub.Models.UserUpdatedEventArgs.IsEmailVerified.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.UserUpdatedEventArgs.IsEmailVerified.html",
    "title": "Property IsEmailVerified | AuxLabs.Twitch Documentation",
    "keywords": "Property IsEmailVerified Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll IsEmailVerified Determines whether Twitch has verified the user’s email address. [JsonInclude] [JsonPropertyName(\"email_verified\")] public bool IsEmailVerified { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.EventSub.Models.UserUpdatedEventArgs.UserDisplayName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.UserUpdatedEventArgs.UserDisplayName.html",
    "title": "Property UserDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserDisplayName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserDisplayName The user’s user display name. [JsonInclude] [JsonPropertyName(\"user_name\")] public string UserDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.UserUpdatedEventArgs.UserEmail.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.UserUpdatedEventArgs.UserEmail.html",
    "title": "Property UserEmail | AuxLabs.Twitch Documentation",
    "keywords": "Property UserEmail Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserEmail The user’s email address. [JsonInclude] [JsonPropertyName(\"email\")] public string UserEmail { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.UserUpdatedEventArgs.UserId.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.UserUpdatedEventArgs.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserId The user’s user id. [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.UserUpdatedEventArgs.UserName.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.UserUpdatedEventArgs.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll UserName The user’s user login. [JsonInclude] [JsonPropertyName(\"user_login\")] public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.VotingOption.AmountPerVote.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.VotingOption.AmountPerVote.html",
    "title": "Property AmountPerVote | AuxLabs.Twitch Documentation",
    "keywords": "Property AmountPerVote Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll AmountPerVote Number of specified currency required to vote once. [JsonInclude] [JsonPropertyName(\"amount_per_vote\")] public int AmountPerVote { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.EventSub.Models.VotingOption.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.VotingOption.html",
    "title": "Class VotingOption | AuxLabs.Twitch Documentation",
    "keywords": "Class VotingOption Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class VotingOption Inheritance object VotingOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AmountPerVote Number of specified currency required to vote once. IsEnabled Indicates if this option is enabled."
  },
  "api/AuxLabs.Twitch.EventSub.Models.VotingOption.IsEnabled.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.VotingOption.IsEnabled.html",
    "title": "Property IsEnabled | AuxLabs.Twitch Documentation",
    "keywords": "Property IsEnabled Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll IsEnabled Indicates if this option is enabled. [JsonInclude] [JsonPropertyName(\"is_enabled\")] public bool IsEnabled { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.EventSub.Models.WebSocketMetadata.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.WebSocketMetadata.html",
    "title": "Class WebSocketMetadata | AuxLabs.Twitch Documentation",
    "keywords": "Class WebSocketMetadata Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll public class WebSocketMetadata Inheritance object WebSocketMetadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id An ID that uniquely identifies the message. SubscriptionType The type of event sent in the message. SubscriptionVersion The version number of the subscription type’s definition. This is the same value specified in the subscription request. Timestamp The UTC date and time that the message was sent. Type The type of message. TypeRaw The type of message, in a raw string format."
  },
  "api/AuxLabs.Twitch.EventSub.Models.WebSocketMetadata.Id.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.WebSocketMetadata.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Id An ID that uniquely identifies the message. [JsonPropertyName(\"message_id\")] public string Id { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.WebSocketMetadata.SubscriptionType.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.WebSocketMetadata.SubscriptionType.html",
    "title": "Property SubscriptionType | AuxLabs.Twitch Documentation",
    "keywords": "Property SubscriptionType Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll SubscriptionType The type of event sent in the message. [JsonPropertyName(\"subscription_type\")] public string SubscriptionType { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.WebSocketMetadata.SubscriptionVersion.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.WebSocketMetadata.SubscriptionVersion.html",
    "title": "Property SubscriptionVersion | AuxLabs.Twitch Documentation",
    "keywords": "Property SubscriptionVersion Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll SubscriptionVersion The version number of the subscription type’s definition. This is the same value specified in the subscription request. [JsonPropertyName(\"subscription_version\")] public string SubscriptionVersion { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.Models.WebSocketMetadata.Timestamp.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.WebSocketMetadata.Timestamp.html",
    "title": "Property Timestamp | AuxLabs.Twitch Documentation",
    "keywords": "Property Timestamp Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Timestamp The UTC date and time that the message was sent. [JsonPropertyName(\"message_timestamp\")] public DateTime Timestamp { get; set; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.EventSub.Models.WebSocketMetadata.Type.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.WebSocketMetadata.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll Type The type of message. [JsonIgnore] public MessageType Type { get; } Property Value MessageType"
  },
  "api/AuxLabs.Twitch.EventSub.Models.WebSocketMetadata.TypeRaw.html": {
    "href": "api/AuxLabs.Twitch.EventSub.Models.WebSocketMetadata.TypeRaw.html",
    "title": "Property TypeRaw | AuxLabs.Twitch Documentation",
    "keywords": "Property TypeRaw Namespace AuxLabs.Twitch.EventSub.Models Assembly AuxLabs.Twitch.EventSub.Api.dll TypeRaw The type of message, in a raw string format. [JsonPropertyName(\"message_type\")] public string TypeRaw { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.-ctor.html": {
    "href": "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.-ctor.html",
    "title": "Constructor TwitchEventSubClient | AuxLabs.Twitch Documentation",
    "keywords": "Constructor TwitchEventSubClient Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll TwitchEventSubClient(TwitchEventSubConfig) public TwitchEventSubClient(TwitchEventSubConfig config = null) Parameters config TwitchEventSubConfig TwitchEventSubClient(string, TwitchEventSubConfig) public TwitchEventSubClient(string url, TwitchEventSubConfig config = null) Parameters url string config TwitchEventSubConfig"
  },
  "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.BroadcastEnded.html": {
    "href": "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.BroadcastEnded.html",
    "title": "Event BroadcastEnded | AuxLabs.Twitch Documentation",
    "keywords": "Event BroadcastEnded Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll public event Func<EventSubSimpleUser, EventSubEventSubscription, Task> BroadcastEnded Returns Func<EventSubSimpleUser, EventSubEventSubscription, Task>"
  },
  "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.BroadcastStarted.html": {
    "href": "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.BroadcastStarted.html",
    "title": "Event BroadcastStarted | AuxLabs.Twitch Documentation",
    "keywords": "Event BroadcastStarted Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll public event Func<EventSubBroadcast, EventSubEventSubscription, Task> BroadcastStarted Returns Func<EventSubBroadcast, EventSubEventSubscription, Task>"
  },
  "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.Connected.html": {
    "href": "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.Connected.html",
    "title": "Event Connected | AuxLabs.Twitch Documentation",
    "keywords": "Event Connected Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll Triggered when the socket connection is established public event Func<Task> Connected Returns Func<Task>"
  },
  "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.DeleteSubscriptionAsync.html": {
    "href": "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.DeleteSubscriptionAsync.html",
    "title": "Method DeleteSubscriptionAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DeleteSubscriptionAsync Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll DeleteSubscriptionAsync(string) public Task DeleteSubscriptionAsync(string subscriptionId) Parameters subscriptionId string Returns Task"
  },
  "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.Disconnected.html": {
    "href": "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.Disconnected.html",
    "title": "Event Disconnected | AuxLabs.Twitch Documentation",
    "keywords": "Event Disconnected Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll Triggered when the socket connection is closed public event Func<Exception, Task> Disconnected Returns Func<Exception, Task>"
  },
  "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.Dispose.html": {
    "href": "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.Dispose.html",
    "title": "Method Dispose | AuxLabs.Twitch Documentation",
    "keywords": "Method Dispose Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.EventSub.html": {
    "href": "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.EventSub.html",
    "title": "Property EventSub | AuxLabs.Twitch Documentation",
    "keywords": "Property EventSub Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll EventSub protected TwitchEventSubApiClient EventSub { get; } Property Value TwitchEventSubApiClient"
  },
  "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.GetSubscriptionsAsync.html": {
    "href": "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.GetSubscriptionsAsync.html",
    "title": "Method GetSubscriptionsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetSubscriptionsAsync Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll GetSubscriptionsAsync(string, EventSubStatus?, EventSubType?) public Task<IReadOnlyCollection<RestEventSubscription>> GetSubscriptionsAsync(string userId = null, EventSubStatus? status = null, EventSubType? type = null) Parameters userId string status EventSubStatus? type EventSubType? Returns Task<IReadOnlyCollection<RestEventSubscription>>"
  },
  "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.html": {
    "href": "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.html",
    "title": "Class TwitchEventSubClient | AuxLabs.Twitch Documentation",
    "keywords": "Class TwitchEventSubClient Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll public class TwitchEventSubClient : IDisposable Inheritance object TwitchEventSubClient Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TwitchEventSubClient(TwitchEventSubConfig) TwitchEventSubClient(string, TwitchEventSubConfig) Properties EventSub Identity Rest Session Methods DeleteSubscriptionAsync(string) Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Dispose(bool) GetSubscriptionsAsync(string, EventSubStatus?, EventSubType?) SubscribeAsync(AuthorizationGrantedSubscription) SubscribeAsync(AuthorizationRevokedSubscription) SubscribeAsync(BanSubscription) SubscribeAsync(BitsTransactionSubscription) SubscribeAsync(BroadcastEndedSubscription) SubscribeAsync(BroadcastStartedSubscription) SubscribeAsync(CampaignProgressSubscription) SubscribeAsync(CampaignStartSubscription) SubscribeAsync(CampaignStopSubscription) SubscribeAsync(ChannelUpdateSubscription) SubscribeAsync(CheerSubscription) SubscribeAsync(DonationSubscription) SubscribeAsync(EntitlementGrantSubscription) SubscribeAsync(FollowSubscription) SubscribeAsync(GoalEndSubscription) SubscribeAsync(GoalProgressSubscription) SubscribeAsync(GoalStartSubscription) SubscribeAsync(HypetrainEndSubscription) SubscribeAsync(HypetrainProgressSubscription) SubscribeAsync(HypetrainStartSubscription) SubscribeAsync(ModeratorAddSubscription) SubscribeAsync(ModeratorRemoveSubscription) SubscribeAsync(PollEndSubscription) SubscribeAsync(PollProgressSubscription) SubscribeAsync(PollStartSubscription) SubscribeAsync(PredictionEndSubscription) SubscribeAsync(PredictionLockSubscription) SubscribeAsync(PredictionProgressSubscription) SubscribeAsync(PredictionStartSubscription) SubscribeAsync(RaidSubscription) SubscribeAsync(RedemptionAddSubscription) SubscribeAsync(RedemptionUpdateSubscription) SubscribeAsync(RewardAddSubscription) SubscribeAsync(RewardRemoveSubscription) SubscribeAsync(RewardUpdateSubscription) SubscribeAsync(ShieldModeEndSubscription) SubscribeAsync(ShieldModeStartSubscription) SubscribeAsync(ShoutoutCreateSubscription) SubscribeAsync(ShoutoutReceiveSubscription) SubscribeAsync(SubscribeSubscription) SubscribeAsync(SubscriptionEndSubscription) SubscribeAsync(SubscriptionGiftSubscription) SubscribeAsync(SubscriptionMessageSubscription) SubscribeAsync(UnbanSubscription) SubscribeAsync(UserUpdateSubscription) ValidateAsync(string) Events BroadcastEnded BroadcastStarted Connected Triggered when the socket connection is established Disconnected Triggered when the socket connection is closed NotificationReceived Triggered when a notification payload is received. Reconnect Triggered when the server tells the client to reconnect Revocation SessionCreated UserBanned UserUpdated"
  },
  "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.Identity.html": {
    "href": "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.Identity.html",
    "title": "Property Identity | AuxLabs.Twitch Documentation",
    "keywords": "Property Identity Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll Identity public AppIdentity Identity { get; } Property Value AppIdentity"
  },
  "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.NotificationReceived.html": {
    "href": "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.NotificationReceived.html",
    "title": "Event NotificationReceived | AuxLabs.Twitch Documentation",
    "keywords": "Event NotificationReceived Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll Triggered when a notification payload is received. public event Func<EventSubFrame, Task> NotificationReceived Returns Func<EventSubFrame, Task>"
  },
  "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.Reconnect.html": {
    "href": "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.Reconnect.html",
    "title": "Event Reconnect | AuxLabs.Twitch Documentation",
    "keywords": "Event Reconnect Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll Triggered when the server tells the client to reconnect public event Func<Session, Task> Reconnect Returns Func<Session, Task>"
  },
  "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.Rest.html": {
    "href": "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.Rest.html",
    "title": "Property Rest | AuxLabs.Twitch Documentation",
    "keywords": "Property Rest Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll Rest public TwitchRestClient Rest { get; } Property Value TwitchRestClient"
  },
  "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.Revocation.html": {
    "href": "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.Revocation.html",
    "title": "Event Revocation | AuxLabs.Twitch Documentation",
    "keywords": "Event Revocation Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll public event Func<EventSubEventSubscription, Task> Revocation Returns Func<EventSubEventSubscription, Task>"
  },
  "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.Session.html": {
    "href": "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.Session.html",
    "title": "Property Session | AuxLabs.Twitch Documentation",
    "keywords": "Property Session Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll Session public Session Session { get; } Property Value Session"
  },
  "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.SessionCreated.html": {
    "href": "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.SessionCreated.html",
    "title": "Event SessionCreated | AuxLabs.Twitch Documentation",
    "keywords": "Event SessionCreated Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll public event Func<Session, Task> SessionCreated Returns Func<Session, Task>"
  },
  "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.SubscribeAsync.html": {
    "href": "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.SubscribeAsync.html",
    "title": "Method SubscribeAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method SubscribeAsync Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll SubscribeAsync(BroadcastEndedSubscription) public Task<RestEventSubscription> SubscribeAsync(BroadcastEndedSubscription args) Parameters args BroadcastEndedSubscription Returns Task<RestEventSubscription> SubscribeAsync(BroadcastStartedSubscription) public Task<RestEventSubscription> SubscribeAsync(BroadcastStartedSubscription args) Parameters args BroadcastStartedSubscription Returns Task<RestEventSubscription> SubscribeAsync(ChannelUpdateSubscription) public Task<RestEventSubscription> SubscribeAsync(ChannelUpdateSubscription args) Parameters args ChannelUpdateSubscription Returns Task<RestEventSubscription> SubscribeAsync(CheerSubscription) public Task<RestEventSubscription> SubscribeAsync(CheerSubscription args) Parameters args CheerSubscription Returns Task<RestEventSubscription> SubscribeAsync(FollowSubscription) public Task<RestEventSubscription> SubscribeAsync(FollowSubscription args) Parameters args FollowSubscription Returns Task<RestEventSubscription> SubscribeAsync(RaidSubscription) public Task<RestEventSubscription> SubscribeAsync(RaidSubscription args) Parameters args RaidSubscription Returns Task<RestEventSubscription> SubscribeAsync(ShoutoutCreateSubscription) public Task<RestEventSubscription> SubscribeAsync(ShoutoutCreateSubscription args) Parameters args ShoutoutCreateSubscription Returns Task<RestEventSubscription> SubscribeAsync(ShoutoutReceiveSubscription) public Task<RestEventSubscription> SubscribeAsync(ShoutoutReceiveSubscription args) Parameters args ShoutoutReceiveSubscription Returns Task<RestEventSubscription> SubscribeAsync(CampaignProgressSubscription) public Task<RestEventSubscription> SubscribeAsync(CampaignProgressSubscription args) Parameters args CampaignProgressSubscription Returns Task<RestEventSubscription> SubscribeAsync(CampaignStartSubscription) public Task<RestEventSubscription> SubscribeAsync(CampaignStartSubscription args) Parameters args CampaignStartSubscription Returns Task<RestEventSubscription> SubscribeAsync(CampaignStopSubscription) public Task<RestEventSubscription> SubscribeAsync(CampaignStopSubscription args) Parameters args CampaignStopSubscription Returns Task<RestEventSubscription> SubscribeAsync(DonationSubscription) public Task<RestEventSubscription> SubscribeAsync(DonationSubscription args) Parameters args DonationSubscription Returns Task<RestEventSubscription> SubscribeAsync(EntitlementGrantSubscription) public Task<RestEventSubscription> SubscribeAsync(EntitlementGrantSubscription args) Parameters args EntitlementGrantSubscription Returns Task<RestEventSubscription> SubscribeAsync(BitsTransactionSubscription) public Task<RestEventSubscription> SubscribeAsync(BitsTransactionSubscription args) Parameters args BitsTransactionSubscription Returns Task<RestEventSubscription> SubscribeAsync(GoalEndSubscription) public Task<RestEventSubscription> SubscribeAsync(GoalEndSubscription args) Parameters args GoalEndSubscription Returns Task<RestEventSubscription> SubscribeAsync(GoalProgressSubscription) public Task<RestEventSubscription> SubscribeAsync(GoalProgressSubscription args) Parameters args GoalProgressSubscription Returns Task<RestEventSubscription> SubscribeAsync(GoalStartSubscription) public Task<RestEventSubscription> SubscribeAsync(GoalStartSubscription args) Parameters args GoalStartSubscription Returns Task<RestEventSubscription> SubscribeAsync(HypetrainEndSubscription) public Task<RestEventSubscription> SubscribeAsync(HypetrainEndSubscription args) Parameters args HypetrainEndSubscription Returns Task<RestEventSubscription> SubscribeAsync(HypetrainProgressSubscription) public Task<RestEventSubscription> SubscribeAsync(HypetrainProgressSubscription args) Parameters args HypetrainProgressSubscription Returns Task<RestEventSubscription> SubscribeAsync(HypetrainStartSubscription) public Task<RestEventSubscription> SubscribeAsync(HypetrainStartSubscription args) Parameters args HypetrainStartSubscription Returns Task<RestEventSubscription> SubscribeAsync(BanSubscription) public Task<RestEventSubscription> SubscribeAsync(BanSubscription args) Parameters args BanSubscription Returns Task<RestEventSubscription> SubscribeAsync(ModeratorAddSubscription) public Task<RestEventSubscription> SubscribeAsync(ModeratorAddSubscription args) Parameters args ModeratorAddSubscription Returns Task<RestEventSubscription> SubscribeAsync(ModeratorRemoveSubscription) public Task<RestEventSubscription> SubscribeAsync(ModeratorRemoveSubscription args) Parameters args ModeratorRemoveSubscription Returns Task<RestEventSubscription> SubscribeAsync(ShieldModeEndSubscription) public Task<RestEventSubscription> SubscribeAsync(ShieldModeEndSubscription args) Parameters args ShieldModeEndSubscription Returns Task<RestEventSubscription> SubscribeAsync(ShieldModeStartSubscription) public Task<RestEventSubscription> SubscribeAsync(ShieldModeStartSubscription args) Parameters args ShieldModeStartSubscription Returns Task<RestEventSubscription> SubscribeAsync(UnbanSubscription) public Task<RestEventSubscription> SubscribeAsync(UnbanSubscription args) Parameters args UnbanSubscription Returns Task<RestEventSubscription> SubscribeAsync(PollEndSubscription) public Task<RestEventSubscription> SubscribeAsync(PollEndSubscription args) Parameters args PollEndSubscription Returns Task<RestEventSubscription> SubscribeAsync(PollProgressSubscription) public Task<RestEventSubscription> SubscribeAsync(PollProgressSubscription args) Parameters args PollProgressSubscription Returns Task<RestEventSubscription> SubscribeAsync(PollStartSubscription) public Task<RestEventSubscription> SubscribeAsync(PollStartSubscription args) Parameters args PollStartSubscription Returns Task<RestEventSubscription> SubscribeAsync(PredictionEndSubscription) public Task<RestEventSubscription> SubscribeAsync(PredictionEndSubscription args) Parameters args PredictionEndSubscription Returns Task<RestEventSubscription> SubscribeAsync(PredictionLockSubscription) public Task<RestEventSubscription> SubscribeAsync(PredictionLockSubscription args) Parameters args PredictionLockSubscription Returns Task<RestEventSubscription> SubscribeAsync(PredictionProgressSubscription) public Task<RestEventSubscription> SubscribeAsync(PredictionProgressSubscription args) Parameters args PredictionProgressSubscription Returns Task<RestEventSubscription> SubscribeAsync(PredictionStartSubscription) public Task<RestEventSubscription> SubscribeAsync(PredictionStartSubscription args) Parameters args PredictionStartSubscription Returns Task<RestEventSubscription> SubscribeAsync(RedemptionAddSubscription) public Task<RestEventSubscription> SubscribeAsync(RedemptionAddSubscription args) Parameters args RedemptionAddSubscription Returns Task<RestEventSubscription> SubscribeAsync(RedemptionUpdateSubscription) public Task<RestEventSubscription> SubscribeAsync(RedemptionUpdateSubscription args) Parameters args RedemptionUpdateSubscription Returns Task<RestEventSubscription> SubscribeAsync(RewardAddSubscription) public Task<RestEventSubscription> SubscribeAsync(RewardAddSubscription args) Parameters args RewardAddSubscription Returns Task<RestEventSubscription> SubscribeAsync(RewardRemoveSubscription) public Task<RestEventSubscription> SubscribeAsync(RewardRemoveSubscription args) Parameters args RewardRemoveSubscription Returns Task<RestEventSubscription> SubscribeAsync(RewardUpdateSubscription) public Task<RestEventSubscription> SubscribeAsync(RewardUpdateSubscription args) Parameters args RewardUpdateSubscription Returns Task<RestEventSubscription> SubscribeAsync(SubscribeSubscription) public Task<RestEventSubscription> SubscribeAsync(SubscribeSubscription args) Parameters args SubscribeSubscription Returns Task<RestEventSubscription> SubscribeAsync(SubscriptionEndSubscription) public Task<RestEventSubscription> SubscribeAsync(SubscriptionEndSubscription args) Parameters args SubscriptionEndSubscription Returns Task<RestEventSubscription> SubscribeAsync(SubscriptionGiftSubscription) public Task<RestEventSubscription> SubscribeAsync(SubscriptionGiftSubscription args) Parameters args SubscriptionGiftSubscription Returns Task<RestEventSubscription> SubscribeAsync(SubscriptionMessageSubscription) public Task<RestEventSubscription> SubscribeAsync(SubscriptionMessageSubscription args) Parameters args SubscriptionMessageSubscription Returns Task<RestEventSubscription> SubscribeAsync(AuthorizationGrantedSubscription) public Task<RestEventSubscription> SubscribeAsync(AuthorizationGrantedSubscription args) Parameters args AuthorizationGrantedSubscription Returns Task<RestEventSubscription> SubscribeAsync(AuthorizationRevokedSubscription) public Task<RestEventSubscription> SubscribeAsync(AuthorizationRevokedSubscription args) Parameters args AuthorizationRevokedSubscription Returns Task<RestEventSubscription> SubscribeAsync(UserUpdateSubscription) public Task<RestEventSubscription> SubscribeAsync(UserUpdateSubscription args) Parameters args UserUpdateSubscription Returns Task<RestEventSubscription>"
  },
  "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.UserBanned.html": {
    "href": "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.UserBanned.html",
    "title": "Event UserBanned | AuxLabs.Twitch Documentation",
    "keywords": "Event UserBanned Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll public event Func<BanEventArgs, EventSubEventSubscription, Task> UserBanned Returns Func<BanEventArgs, EventSubEventSubscription, Task>"
  },
  "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.UserUpdated.html": {
    "href": "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.UserUpdated.html",
    "title": "Event UserUpdated | AuxLabs.Twitch Documentation",
    "keywords": "Event UserUpdated Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll public event Func<EventSubUser, EventSubEventSubscription, Task> UserUpdated Returns Func<EventSubUser, EventSubEventSubscription, Task>"
  },
  "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.ValidateAsync.html": {
    "href": "api/AuxLabs.Twitch.EventSub.TwitchEventSubClient.ValidateAsync.html",
    "title": "Method ValidateAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method ValidateAsync Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll ValidateAsync(string) public Task<AccessTokenInfo> ValidateAsync(string token) Parameters token string Returns Task<AccessTokenInfo>"
  },
  "api/AuxLabs.Twitch.EventSub.TwitchEventSubConfig.html": {
    "href": "api/AuxLabs.Twitch.EventSub.TwitchEventSubConfig.html",
    "title": "Class TwitchEventSubConfig | AuxLabs.Twitch Documentation",
    "keywords": "Class TwitchEventSubConfig Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll public class TwitchEventSubConfig : TwitchEventSubApiConfig Inheritance object TwitchEventSubApiConfig TwitchEventSubConfig Inherited Members TwitchEventSubApiConfig.ThrowOnUnknownEvent object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties RestConfig Configuration for the internal rest client"
  },
  "api/AuxLabs.Twitch.EventSub.TwitchEventSubConfig.RestConfig.html": {
    "href": "api/AuxLabs.Twitch.EventSub.TwitchEventSubConfig.RestConfig.html",
    "title": "Property RestConfig | AuxLabs.Twitch Documentation",
    "keywords": "Property RestConfig Namespace AuxLabs.Twitch.EventSub Assembly AuxLabs.Twitch.EventSub.dll RestConfig Configuration for the internal rest client public TwitchRestConfig RestConfig { get; set; } Property Value TwitchRestConfig"
  },
  "api/AuxLabs.Twitch.EventSubStatus.html": {
    "href": "api/AuxLabs.Twitch.EventSubStatus.html",
    "title": "Enum EventSubStatus | AuxLabs.Twitch Documentation",
    "keywords": "Enum EventSubStatus Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum EventSubStatus Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"authorization_revoked\")] AuthorizationRevoked = 5 The authorization was revoked for one or more users specified in the Condition object. [EnumMember(Value = \"webhook_callback_verification_failed\")] CallbackVerificationFailed = 3 The specified callback URL failed verification. [EnumMember(Value = \"webhook_callback_verification_pending\")] CallbackVerificationPending = 2 The subscription is pending verification of the specified callback URL. [EnumMember(Value = \"enabled\")] Enabled = 1 The subscription is enabled. [EnumMember(Value = \"notification_failures_exceeded\")] FailuresExceeded = 4 The notification delivery failure rate was too high. [EnumMember(Value = \"moderator_removed\")] ModeratorRemoved = 6 The moderator that authorized the subscription is no longer one of the broadcaster's moderators. Unknown = 0 [EnumMember(Value = \"user_removed\")] UserRemoved = 7 One of the users specified in the Condition object was removed. [EnumMember(Value = \"version_removed\")] VersionRemoved = 8 The subscribed to subscription type and version is no longer supported. [EnumMember(Value = \"websocket_disconnected\")] WebSocketDisconnected = 9 The client closed the connection. [EnumMember(Value = \"websocket_failed_ping_pong\")] WebSocketFailedHeartbeat = 10 The client failed to respond to a ping message. [EnumMember(Value = \"webhook_callback_verification_pending\")] WebSocketInboundTraffic = 11 The client sent a non-pong message. [EnumMember(Value = \"websocket_internal_error \")] WebSocketInternalError = 13 The Twitch WebSocket server experienced an unexpected error. [EnumMember(Value = \"websocket_network_error \")] WebSocketNetworkError = 15 The Twitch WebSocket server experienced a network error writing the message to the client. [EnumMember(Value = \"websocket_network_timeout \")] WebSocketTimeout = 14 The Twitch WebSocket server timed out writing the message to the client. [EnumMember(Value = \"websocket_connection_unused\")] WebSocketUnused = 12 The client failed to subscribe to events within the required time."
  },
  "api/AuxLabs.Twitch.EventSubType.html": {
    "href": "api/AuxLabs.Twitch.EventSubType.html",
    "title": "Enum EventSubType | AuxLabs.Twitch Documentation",
    "keywords": "Enum EventSubType Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum EventSubType Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"channel.ban\")] ChannelBan = 9 A viewer is banned from the specified channel. [EnumMember(Value = \"channel.cheer\")] ChannelCheer = 7 A user cheers on the specified channel. [EnumMember(Value = \"channel.follow\")] ChannelFollow = 2 A specified channel receives a follow. [EnumMember(Value = \"channel.moderator.add\")] ChannelModeratorAdd = 11 Moderator privileges were added to a user on a specified channel. [EnumMember(Value = \"channel.moderator.remove\")] ChannelModeratorRemove = 12 Moderator privileges were removed from a user on a specified channel. [EnumMember(Value = \"channel.channel_points_custom_reward_redemption.add\")] ChannelPointsRedemptionAdd = 16 A viewer has redeemed a custom channel points reward on the specified channel. [EnumMember(Value = \"channel.channel_points_custom_reward_redemption.update\")] ChannelPointsRedemptionUpdate = 17 A redemption of a channel points custom reward has been updated for the specified channel. [EnumMember(Value = \"channel.channel_points_custom_reward.add\")] ChannelPointsRewardAdd = 13 A custom channel points reward has been created for the specified channel. [EnumMember(Value = \"channel.channel_points_custom_reward.remove\")] ChannelPointsRewardRemove = 15 A custom channel points reward has been removed from the specified channel. [EnumMember(Value = \"channel.channel_points_custom_reward.update\")] ChannelPointsRewardUpdate = 14 A custom channel points reward has been updated for the specified channel. [EnumMember(Value = \"channel.poll.end\")] ChannelPollEnd = 20 A poll ended on a specified channel. [EnumMember(Value = \"channel.poll.progress\")] ChannelPollProgress = 19 Users respond to a poll on a specified channel. [EnumMember(Value = \"channel.poll.Start\")] ChannelPollStart = 18 A poll started on a specified channel. [EnumMember(Value = \"channel.prediction.end\")] ChannelPredictionEnd = 24 A Prediction ended on a specified channel. [EnumMember(Value = \"channel.prediction.lock\")] ChannelPredictionLock = 23 A Prediction was locked on a specified channel. [EnumMember(Value = \"channel.prediction.progress\")] ChannelPredictionProgress = 22 Users participated in a Prediction on a specified channel. [EnumMember(Value = \"channel.prediction.Start\")] ChannelPredictionStart = 21 A Prediction started on a specified channel. [EnumMember(Value = \"channel.raid\")] ChannelRaid = 8 A broadcaster raids another broadcaster’s channel. [EnumMember(Value = \"channel.subscribe\")] ChannelSubscribe = 3 A notification when a specified channel receives a subscriber. This does not include resubscribes. [EnumMember(Value = \"channel.subscription.end\")] ChannelSubscriptionEnd = 4 A notification when a subscription to the specified channel ends. [EnumMember(Value = \"channel.subscription.gift\")] ChannelSubscriptionGift = 5 A notification when a viewer gives a gift subscription to one or more users in the specified channel. [EnumMember(Value = \"channel.subscription.message\")] ChannelSubscriptionMessage = 6 A notification when a user sends a resubscription chat message in a specific channel. [EnumMember(Value = \"channel.unban\")] ChannelUnban = 10 A viewer is unbanned from the specified channel. [EnumMember(Value = \"channel.update\")] ChannelUpdate = 1 A broadcaster updates their channel properties e.g., category, title, mature flag, broadcast, or language. [EnumMember(Value = \"channel.charity_campaign.progress\")] CharityCampaignProgress = 27 Sends an event notification when progress is made towards the campaign’s goal or when the broadcaster changes the fundraising goal. [EnumMember(Value = \"channel.charity_campaign.start\")] CharityCampaignStart = 26 Sends an event notification when the broadcaster starts a charity campaign. [EnumMember(Value = \"channel.charity_campaign.stop\")] CharityCampaignStop = 28 Sends an event notification when the broadcaster stops a charity campaign. [EnumMember(Value = \"channel.charity_campaign.donate\")] CharityDonation = 25 Sends an event notification when a user donates to the broadcaster’s charity campaign. [EnumMember(Value = \"drop.entitlement.grant\")] DropEntitlementGrant = 29 An entitlement for a Drop is granted to a user. [EnumMember(Value = \"extension.bits_transaction.create\")] ExtensionBitsTransactionCreate = 30 A Bits transaction occurred for a specified Twitch Extension. [EnumMember(Value = \"channel.goal.end\")] GoalEnd = 33 Get notified when a broadcaster ends a goal. [EnumMember(Value = \"channel.goal.progress\")] GoalProgress = 32 Get notified when progress (either positive or negative) is made towards a broadcaster’s goal. [EnumMember(Value = \"channel.goal.Start\")] GoalStart = 31 Get notified when a broadcaster Starts a goal. [EnumMember(Value = \"channel.hype_train.end\")] HypeTrainEnd = 36 A Hype Train ends on the specified channel. [EnumMember(Value = \"channel.hype_train.progress\")] HypeTrainProgress = 35 A Hype Train makes progress on the specified channel. [EnumMember(Value = \"channel.hype_train.Start\")] HypeTrainStart = 34 A Hype Train Starts on the specified channel. None = 0 [EnumMember(Value = \"channel.shield_mode.end\")] ShieldModeEnd = 38 Sends a notification when the broadcaster deactivates Shield Mode. [EnumMember(Value = \"channel.shield_mode.Start\")] ShieldModeStart = 37 Sends a notification when the broadcaster activates Shield Mode. [EnumMember(Value = \"channel.shoutout.create\")] ShoutoutCreate = 39 Sends a notification when the specified broadcaster sends a Shoutout. [EnumMember(Value = \"channel.shoutout.receive\")] ShoutoutReceived = 40 Sends a notification when the specified broadcaster receives a Shoutout. [EnumMember(Value = \"stream.offline\")] StreamOffline = 42 The specified broadcaster stops a stream. [EnumMember(Value = \"stream.online\")] StreamOnline = 41 The specified broadcaster starts a stream. [EnumMember(Value = \"user.authorization.grant\")] UserAuthorizationGrant = 43 A user’s authorization has been granted to your client id. [EnumMember(Value = \"user.authorization.revoke\")] UserAuthorizationRevoke = 44 A user’s authorization has been revoked for your client id. [EnumMember(Value = \"user.update\")] UserUpdate = 45 A user has updated their account."
  },
  "api/AuxLabs.Twitch.ExtensionType.html": {
    "href": "api/AuxLabs.Twitch.ExtensionType.html",
    "title": "Enum ExtensionType | AuxLabs.Twitch Documentation",
    "keywords": "Enum ExtensionType Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum ExtensionType Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"component\")] Component = 1 [EnumMember(Value = \"mobile\")] Mobile = 2 [EnumMember(Value = \"overlay\")] Overlay = 3 [EnumMember(Value = \"panel\")] Panel = 4 Unknown = 0"
  },
  "api/AuxLabs.Twitch.FulfillmentStatus.html": {
    "href": "api/AuxLabs.Twitch.FulfillmentStatus.html",
    "title": "Enum FulfillmentStatus | AuxLabs.Twitch Documentation",
    "keywords": "Enum FulfillmentStatus Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum FulfillmentStatus Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"CLAIMED\")] Claimed = 0 [EnumMember(Value = \"FULFILLED\")] Fulfilled = 1"
  },
  "api/AuxLabs.Twitch.GoalType.html": {
    "href": "api/AuxLabs.Twitch.GoalType.html",
    "title": "Enum GoalType | AuxLabs.Twitch Documentation",
    "keywords": "Enum GoalType Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum GoalType Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"follower\")] Follower = 1 The goal is to increase followers. [EnumMember(Value = \"new_subscription\")] NewSubscription = 4 The goal is to increase subscriptions. [EnumMember(Value = \"new_subscription_count\")] NewSubscriptionCount = 5 The goal is to increase subscriptions. None = 0 [EnumMember(Value = \"subscription\")] Subscription = 2 The goal is to increase subscriptions. [EnumMember(Value = \"subscription_count\")] SusbcriptionCount = 3 The goal is to increase subscriptions."
  },
  "api/AuxLabs.Twitch.html": {
    "href": "api/AuxLabs.Twitch.html",
    "title": "Namespace AuxLabs.Twitch | AuxLabs.Twitch Documentation",
    "keywords": "Namespace AuxLabs.Twitch AuxLabs.Twitch.Chat AuxLabs.Twitch.EventSub AuxLabs.Twitch.PubSub AuxLabs.Twitch.Rest AuxLabs.Twitch.WebSockets Classes AsyncEnumerableExtensions An extension class for squashing IAsyncEnumerable<T>. CDN CultureInfoConverter DefaultRateLimiter EmotePositionConverter EnumHelper HttpException InterfaceConverter<TImpl, TInter> InterfaceConverterFactory<TImpl, TInter> MissingScopeException NoEqualityComparer QueryMap RateLimitedException Require RFCDateTimeConverter SimpleReward TwitchConstants TwitchException TwitchRestException UnexpectedTagsException WebSocketClosedException Structs Cacheable<TEntity, TId> DateRange EmotePosition RateLimitInfo Title TwitchImage Interfaces IChannel IChatUser IEntity<TId> IPartialUser IRateLimiter ISimpleUser IUpdatable IUserFollow IUserInfo IUserRelation Enums AnalyticType AnnouncementColor AutomodAction AutomodFilter BitsPeriod BlockContext BroadcasterType BroadcastType ChatColor CheermoteType CostType DropStatus EmoteFormat EmoteScale EmoteTheme EmoteType EventSubStatus EventSubType ExtensionType FulfillmentStatus GoalType HypeTrainContributionType PollStatus PredictionColor PredictionStatus ProductType RedemptionSort RedemptionStatus SubscriptionType TokenType TrackSourceType TransportMethod UserType VideoPeriod VideoSort VideoType"
  },
  "api/AuxLabs.Twitch.HttpException.-ctor.html": {
    "href": "api/AuxLabs.Twitch.HttpException.-ctor.html",
    "title": "Constructor HttpException | AuxLabs.Twitch Documentation",
    "keywords": "Constructor HttpException Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll HttpException(HttpStatusCode, string) public HttpException(HttpStatusCode httpCode, string reason = null) Parameters httpCode HttpStatusCode reason string"
  },
  "api/AuxLabs.Twitch.HttpException.html": {
    "href": "api/AuxLabs.Twitch.HttpException.html",
    "title": "Class HttpException | AuxLabs.Twitch Documentation",
    "keywords": "Class HttpException Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public class HttpException : Exception, ISerializable Inheritance object Exception HttpException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors HttpException(HttpStatusCode, string) Properties HttpCode Reason"
  },
  "api/AuxLabs.Twitch.HttpException.HttpCode.html": {
    "href": "api/AuxLabs.Twitch.HttpException.HttpCode.html",
    "title": "Property HttpCode | AuxLabs.Twitch Documentation",
    "keywords": "Property HttpCode Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll HttpCode public HttpStatusCode HttpCode { get; } Property Value HttpStatusCode"
  },
  "api/AuxLabs.Twitch.HttpException.Reason.html": {
    "href": "api/AuxLabs.Twitch.HttpException.Reason.html",
    "title": "Property Reason | AuxLabs.Twitch Documentation",
    "keywords": "Property Reason Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Reason public string Reason { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.HypeTrainContributionType.html": {
    "href": "api/AuxLabs.Twitch.HypeTrainContributionType.html",
    "title": "Enum HypeTrainContributionType | AuxLabs.Twitch Documentation",
    "keywords": "Enum HypeTrainContributionType Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum HypeTrainContributionType Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"BITS\")] Bits = 1 [EnumMember(Value = \"OTHER\")] Other = 0 [EnumMember(Value = \"SUBS\")] Subscriptions = 2"
  },
  "api/AuxLabs.Twitch.IChannel.html": {
    "href": "api/AuxLabs.Twitch.IChannel.html",
    "title": "Interface IChannel | AuxLabs.Twitch Documentation",
    "keywords": "Interface IChannel Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public interface IChannel : IEntity<string> Inherited Members IEntity<string>.Id Properties Name"
  },
  "api/AuxLabs.Twitch.IChannel.Name.html": {
    "href": "api/AuxLabs.Twitch.IChannel.Name.html",
    "title": "Property Name | AuxLabs.Twitch Documentation",
    "keywords": "Property Name Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Name string Name { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.IChatUser.Color.html": {
    "href": "api/AuxLabs.Twitch.IChatUser.Color.html",
    "title": "Property Color | AuxLabs.Twitch Documentation",
    "keywords": "Property Color Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Color Color? Color { get; } Property Value Color?"
  },
  "api/AuxLabs.Twitch.IChatUser.html": {
    "href": "api/AuxLabs.Twitch.IChatUser.html",
    "title": "Interface IChatUser | AuxLabs.Twitch Documentation",
    "keywords": "Interface IChatUser Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public interface IChatUser : ISimpleUser, IPartialUser, IEntity<string> Inherited Members ISimpleUser.DisplayName IPartialUser.Name IEntity<string>.Id Properties Color"
  },
  "api/AuxLabs.Twitch.IEntity-1.html": {
    "href": "api/AuxLabs.Twitch.IEntity-1.html",
    "title": "Interface IEntity<TId> | AuxLabs.Twitch Documentation",
    "keywords": "Interface IEntity<TId> Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public interface IEntity<TId> Type Parameters TId Properties Id"
  },
  "api/AuxLabs.Twitch.IEntity-1.Id.html": {
    "href": "api/AuxLabs.Twitch.IEntity-1.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Id TId Id { get; } Property Value TId"
  },
  "api/AuxLabs.Twitch.InterfaceConverter-2.html": {
    "href": "api/AuxLabs.Twitch.InterfaceConverter-2.html",
    "title": "Class InterfaceConverter<TImpl, TInter> | AuxLabs.Twitch Documentation",
    "keywords": "Class InterfaceConverter<TImpl, TInter> Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public class InterfaceConverter<TImpl, TInter> : JsonConverter<TInter> where TImpl : class, TInter Type Parameters TImpl TInter Inheritance object JsonConverter JsonConverter<TInter> InterfaceConverter<TImpl, TInter> Inherited Members JsonConverter<TInter>.CanConvert(Type) JsonConverter<TInter>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<TInter>.WriteAsPropertyName(Utf8JsonWriter, TInter, JsonSerializerOptions) JsonConverter<TInter>.HandleNull object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Write(Utf8JsonWriter, TInter, JsonSerializerOptions)"
  },
  "api/AuxLabs.Twitch.InterfaceConverter-2.Read.html": {
    "href": "api/AuxLabs.Twitch.InterfaceConverter-2.Read.html",
    "title": "Method Read | AuxLabs.Twitch Documentation",
    "keywords": "Method Read Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Read(ref Utf8JsonReader, Type, JsonSerializerOptions) public override TInter Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader typeToConvert Type options JsonSerializerOptions Returns TInter"
  },
  "api/AuxLabs.Twitch.InterfaceConverter-2.Write.html": {
    "href": "api/AuxLabs.Twitch.InterfaceConverter-2.Write.html",
    "title": "Method Write | AuxLabs.Twitch Documentation",
    "keywords": "Method Write Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Write(Utf8JsonWriter, TInter, JsonSerializerOptions) public override void Write(Utf8JsonWriter writer, TInter value, JsonSerializerOptions options) Parameters writer Utf8JsonWriter value TInter options JsonSerializerOptions"
  },
  "api/AuxLabs.Twitch.InterfaceConverterFactory-2.-ctor.html": {
    "href": "api/AuxLabs.Twitch.InterfaceConverterFactory-2.-ctor.html",
    "title": "Constructor InterfaceConverterFactory | AuxLabs.Twitch Documentation",
    "keywords": "Constructor InterfaceConverterFactory Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll InterfaceConverterFactory() public InterfaceConverterFactory()"
  },
  "api/AuxLabs.Twitch.InterfaceConverterFactory-2.CanConvert.html": {
    "href": "api/AuxLabs.Twitch.InterfaceConverterFactory-2.CanConvert.html",
    "title": "Method CanConvert | AuxLabs.Twitch Documentation",
    "keywords": "Method CanConvert Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll CanConvert(Type) public override bool CanConvert(Type typeToConvert) Parameters typeToConvert Type Returns bool"
  },
  "api/AuxLabs.Twitch.InterfaceConverterFactory-2.CreateConverter.html": {
    "href": "api/AuxLabs.Twitch.InterfaceConverterFactory-2.CreateConverter.html",
    "title": "Method CreateConverter | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateConverter Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll CreateConverter(Type, JsonSerializerOptions) public override JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options) Parameters typeToConvert Type options JsonSerializerOptions Returns JsonConverter"
  },
  "api/AuxLabs.Twitch.InterfaceConverterFactory-2.html": {
    "href": "api/AuxLabs.Twitch.InterfaceConverterFactory-2.html",
    "title": "Class InterfaceConverterFactory<TImpl, TInter> | AuxLabs.Twitch Documentation",
    "keywords": "Class InterfaceConverterFactory<TImpl, TInter> Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public class InterfaceConverterFactory<TImpl, TInter> : JsonConverterFactory where TImpl : class, TInter Type Parameters TImpl TInter Inheritance object JsonConverter JsonConverterFactory InterfaceConverterFactory<TImpl, TInter> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InterfaceConverterFactory() Properties ImplementationType InterfaceType Methods CanConvert(Type) CreateConverter(Type, JsonSerializerOptions)"
  },
  "api/AuxLabs.Twitch.InterfaceConverterFactory-2.ImplementationType.html": {
    "href": "api/AuxLabs.Twitch.InterfaceConverterFactory-2.ImplementationType.html",
    "title": "Property ImplementationType | AuxLabs.Twitch Documentation",
    "keywords": "Property ImplementationType Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll ImplementationType public Type ImplementationType { get; } Property Value Type"
  },
  "api/AuxLabs.Twitch.InterfaceConverterFactory-2.InterfaceType.html": {
    "href": "api/AuxLabs.Twitch.InterfaceConverterFactory-2.InterfaceType.html",
    "title": "Property InterfaceType | AuxLabs.Twitch Documentation",
    "keywords": "Property InterfaceType Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll InterfaceType public Type InterfaceType { get; } Property Value Type"
  },
  "api/AuxLabs.Twitch.IPartialUser.html": {
    "href": "api/AuxLabs.Twitch.IPartialUser.html",
    "title": "Interface IPartialUser | AuxLabs.Twitch Documentation",
    "keywords": "Interface IPartialUser Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public interface IPartialUser : IEntity<string> Inherited Members IEntity<string>.Id Properties Name"
  },
  "api/AuxLabs.Twitch.IPartialUser.Name.html": {
    "href": "api/AuxLabs.Twitch.IPartialUser.Name.html",
    "title": "Property Name | AuxLabs.Twitch Documentation",
    "keywords": "Property Name Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Name string Name { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.IRateLimiter.EnterLockAsync.html": {
    "href": "api/AuxLabs.Twitch.IRateLimiter.EnterLockAsync.html",
    "title": "Method EnterLockAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method EnterLockAsync Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll EnterLockAsync(string, CancellationToken) Task EnterLockAsync(string bucketId, CancellationToken cancelToken) Parameters bucketId string cancelToken CancellationToken Returns Task"
  },
  "api/AuxLabs.Twitch.IRateLimiter.html": {
    "href": "api/AuxLabs.Twitch.IRateLimiter.html",
    "title": "Interface IRateLimiter | AuxLabs.Twitch Documentation",
    "keywords": "Interface IRateLimiter Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public interface IRateLimiter Methods EnterLockAsync(string, CancellationToken) UpdateLimit(string, RateLimitInfo, bool)"
  },
  "api/AuxLabs.Twitch.IRateLimiter.UpdateLimit.html": {
    "href": "api/AuxLabs.Twitch.IRateLimiter.UpdateLimit.html",
    "title": "Method UpdateLimit | AuxLabs.Twitch Documentation",
    "keywords": "Method UpdateLimit Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll UpdateLimit(string, RateLimitInfo, bool) void UpdateLimit(string bucketId, RateLimitInfo info, bool isRatelimited) Parameters bucketId string info RateLimitInfo isRatelimited bool"
  },
  "api/AuxLabs.Twitch.ISimpleUser.DisplayName.html": {
    "href": "api/AuxLabs.Twitch.ISimpleUser.DisplayName.html",
    "title": "Property DisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property DisplayName Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll DisplayName string DisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.ISimpleUser.html": {
    "href": "api/AuxLabs.Twitch.ISimpleUser.html",
    "title": "Interface ISimpleUser | AuxLabs.Twitch Documentation",
    "keywords": "Interface ISimpleUser Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public interface ISimpleUser : IPartialUser, IEntity<string> Inherited Members IPartialUser.Name IEntity<string>.Id Properties DisplayName"
  },
  "api/AuxLabs.Twitch.IUpdatable.html": {
    "href": "api/AuxLabs.Twitch.IUpdatable.html",
    "title": "Interface IUpdatable | AuxLabs.Twitch Documentation",
    "keywords": "Interface IUpdatable Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public interface IUpdatable Methods UpdateAsync()"
  },
  "api/AuxLabs.Twitch.IUpdatable.UpdateAsync.html": {
    "href": "api/AuxLabs.Twitch.IUpdatable.UpdateAsync.html",
    "title": "Method UpdateAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method UpdateAsync Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll UpdateAsync() Task UpdateAsync() Returns Task"
  },
  "api/AuxLabs.Twitch.IUserFollow.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.IUserFollow.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll BroadcasterDisplayName The display name of the user that’s being followed. string BroadcasterDisplayName { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.IUserFollow.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.IUserFollow.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll BroadcasterId The ID of the user that’s being followed by UserId. string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.IUserFollow.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.IUserFollow.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll BroadcasterName The login name of the user that’s being followed. string BroadcasterName { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.IUserFollow.FollowedAt.html": {
    "href": "api/AuxLabs.Twitch.IUserFollow.FollowedAt.html",
    "title": "Property FollowedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property FollowedAt Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll FollowedAt The UTC date and time of when UserId began following BroadcasterId. DateTime FollowedAt { get; set; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.IUserFollow.html": {
    "href": "api/AuxLabs.Twitch.IUserFollow.html",
    "title": "Interface IUserFollow | AuxLabs.Twitch Documentation",
    "keywords": "Interface IUserFollow Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public interface IUserFollow Properties BroadcasterDisplayName The display name of the user that’s being followed. BroadcasterId The ID of the user that’s being followed by UserId. BroadcasterName The login name of the user that’s being followed. FollowedAt The UTC date and time of when UserId began following BroadcasterId. UserDisplayName The follower’s display name. UserId The ID of the user that's following BroadcasterId. UserName The follower’s login name."
  },
  "api/AuxLabs.Twitch.IUserFollow.UserDisplayName.html": {
    "href": "api/AuxLabs.Twitch.IUserFollow.UserDisplayName.html",
    "title": "Property UserDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserDisplayName Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll UserDisplayName The follower’s display name. string UserDisplayName { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.IUserFollow.UserId.html": {
    "href": "api/AuxLabs.Twitch.IUserFollow.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll UserId The ID of the user that's following BroadcasterId. string UserId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.IUserFollow.UserName.html": {
    "href": "api/AuxLabs.Twitch.IUserFollow.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll UserName The follower’s login name. string UserName { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.IUserInfo.html": {
    "href": "api/AuxLabs.Twitch.IUserInfo.html",
    "title": "Interface IUserInfo | AuxLabs.Twitch Documentation",
    "keywords": "Interface IUserInfo Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public interface IUserInfo : ISimpleUser, IPartialUser, IEntity<string> Inherited Members ISimpleUser.DisplayName IPartialUser.Name IEntity<string>.Id"
  },
  "api/AuxLabs.Twitch.IUserRelation.html": {
    "href": "api/AuxLabs.Twitch.IUserRelation.html",
    "title": "Interface IUserRelation | AuxLabs.Twitch Documentation",
    "keywords": "Interface IUserRelation Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public interface IUserRelation : ISimpleUser, IPartialUser, IEntity<string> Inherited Members ISimpleUser.DisplayName IPartialUser.Name IEntity<string>.Id Properties RelatedDisplayName RelatedId RelatedName"
  },
  "api/AuxLabs.Twitch.IUserRelation.RelatedDisplayName.html": {
    "href": "api/AuxLabs.Twitch.IUserRelation.RelatedDisplayName.html",
    "title": "Property RelatedDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property RelatedDisplayName Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll RelatedDisplayName string RelatedDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.IUserRelation.RelatedId.html": {
    "href": "api/AuxLabs.Twitch.IUserRelation.RelatedId.html",
    "title": "Property RelatedId | AuxLabs.Twitch Documentation",
    "keywords": "Property RelatedId Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll RelatedId string RelatedId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.IUserRelation.RelatedName.html": {
    "href": "api/AuxLabs.Twitch.IUserRelation.RelatedName.html",
    "title": "Property RelatedName | AuxLabs.Twitch Documentation",
    "keywords": "Property RelatedName Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll RelatedName string RelatedName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.MissingScopeException.-ctor.html": {
    "href": "api/AuxLabs.Twitch.MissingScopeException.-ctor.html",
    "title": "Constructor MissingScopeException | AuxLabs.Twitch Documentation",
    "keywords": "Constructor MissingScopeException Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll MissingScopeException(params string[]) public MissingScopeException(params string[] scopes) Parameters scopes string[]"
  },
  "api/AuxLabs.Twitch.MissingScopeException.html": {
    "href": "api/AuxLabs.Twitch.MissingScopeException.html",
    "title": "Class MissingScopeException | AuxLabs.Twitch Documentation",
    "keywords": "Class MissingScopeException Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public class MissingScopeException : TwitchException, ISerializable Inheritance object Exception TwitchException MissingScopeException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MissingScopeException(params string[]) Properties Scopes"
  },
  "api/AuxLabs.Twitch.MissingScopeException.Scopes.html": {
    "href": "api/AuxLabs.Twitch.MissingScopeException.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Scopes public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.NoEqualityComparer.Equals.html": {
    "href": "api/AuxLabs.Twitch.NoEqualityComparer.Equals.html",
    "title": "Method Equals | AuxLabs.Twitch Documentation",
    "keywords": "Method Equals Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Equals(string, string) public bool Equals(string x, string y) Parameters x string y string Returns bool"
  },
  "api/AuxLabs.Twitch.NoEqualityComparer.GetHashCode.html": {
    "href": "api/AuxLabs.Twitch.NoEqualityComparer.GetHashCode.html",
    "title": "Method GetHashCode | AuxLabs.Twitch Documentation",
    "keywords": "Method GetHashCode Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll GetHashCode(string) public int GetHashCode(string obj) Parameters obj string Returns int"
  },
  "api/AuxLabs.Twitch.NoEqualityComparer.html": {
    "href": "api/AuxLabs.Twitch.NoEqualityComparer.html",
    "title": "Class NoEqualityComparer | AuxLabs.Twitch Documentation",
    "keywords": "Class NoEqualityComparer Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public class NoEqualityComparer : IEqualityComparer<string> Inheritance object NoEqualityComparer Implements IEqualityComparer<string> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Instance Methods Equals(string, string) GetHashCode(string)"
  },
  "api/AuxLabs.Twitch.NoEqualityComparer.Instance.html": {
    "href": "api/AuxLabs.Twitch.NoEqualityComparer.Instance.html",
    "title": "Field Instance | AuxLabs.Twitch Documentation",
    "keywords": "Field Instance Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public static readonly NoEqualityComparer Instance Returns NoEqualityComparer"
  },
  "api/AuxLabs.Twitch.PollStatus.html": {
    "href": "api/AuxLabs.Twitch.PollStatus.html",
    "title": "Enum PollStatus | AuxLabs.Twitch Documentation",
    "keywords": "Enum PollStatus Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum PollStatus Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"ACTIVE\")] Active = 1 The poll is running. [EnumMember(Value = \"ARCHIVED\")] Archived = 4 The poll has been archived and is no longer visible on the channel. [EnumMember(Value = \"COMPLETED\")] Completed = 2 The poll ended on schedule. [EnumMember(Value = \"INVALID\")] Invalid = 0 Something went wrong while determining the state. [EnumMember(Value = \"MODERATED\")] Moderated = 5 The poll was deleted. [EnumMember(Value = \"TERMINATED\")] Terminated = 3 The poll was terminated before its scheduled end."
  },
  "api/AuxLabs.Twitch.PredictionColor.html": {
    "href": "api/AuxLabs.Twitch.PredictionColor.html",
    "title": "Enum PredictionColor | AuxLabs.Twitch Documentation",
    "keywords": "Enum PredictionColor Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum PredictionColor Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"BLUE\")] Blue = 0 [EnumMember(Value = \"PINK\")] Pink = 1"
  },
  "api/AuxLabs.Twitch.PredictionStatus.html": {
    "href": "api/AuxLabs.Twitch.PredictionStatus.html",
    "title": "Enum PredictionStatus | AuxLabs.Twitch Documentation",
    "keywords": "Enum PredictionStatus Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum PredictionStatus Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"ACTIVE\")] Active = 0 The Prediction is running and viewers can make predictions. [EnumMember(Value = \"CANCELED\")] Cancelled = 1 The broadcaster canceled the Prediction and refunded the Channel Points to the participants. [EnumMember(Value = \"LOCKED\")] Locked = 2 The broadcaster locked the Prediction, which means viewers can no longer make predictions. [EnumMember(Value = \"RESOLVED\")] Resolved = 3 The winning outcome was determined and the Channel Points were distributed to the viewers who predicted the correct outcome."
  },
  "api/AuxLabs.Twitch.ProductType.html": {
    "href": "api/AuxLabs.Twitch.ProductType.html",
    "title": "Enum ProductType | AuxLabs.Twitch Documentation",
    "keywords": "Enum ProductType Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum ProductType Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"BITS_IN_EXTENSION\")] BitsInExtension = 1 None = 0"
  },
  "api/AuxLabs.Twitch.PubSub.html": {
    "href": "api/AuxLabs.Twitch.PubSub.html",
    "title": "Namespace AuxLabs.Twitch.PubSub | AuxLabs.Twitch Documentation",
    "keywords": "Namespace AuxLabs.Twitch.PubSub Classes PubSubPayload PubSubPayload<TPayload> PubSubRequest PubSubResponse TwitchPubSubApiClient TwitchPubSubApiConfig Structs PubSubTopic Enums PubSubPayloadType PubSubTopicType"
  },
  "api/AuxLabs.Twitch.PubSub.PubSubPayload-1.Data.html": {
    "href": "api/AuxLabs.Twitch.PubSub.PubSubPayload-1.Data.html",
    "title": "Property Data | AuxLabs.Twitch Documentation",
    "keywords": "Property Data Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll Data [JsonPropertyName(\"data\")] public TPayload Data { get; set; } Property Value TPayload"
  },
  "api/AuxLabs.Twitch.PubSub.PubSubPayload-1.Error.html": {
    "href": "api/AuxLabs.Twitch.PubSub.PubSubPayload-1.Error.html",
    "title": "Property Error | AuxLabs.Twitch Documentation",
    "keywords": "Property Error Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll Error [JsonPropertyName(\"error\")] public string Error { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.PubSub.PubSubPayload-1.html": {
    "href": "api/AuxLabs.Twitch.PubSub.PubSubPayload-1.html",
    "title": "Class PubSubPayload<TPayload> | AuxLabs.Twitch Documentation",
    "keywords": "Class PubSubPayload<TPayload> Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll public class PubSubPayload<TPayload> : IPayload Type Parameters TPayload Inheritance object PubSubPayload<TPayload> Implements IPayload Derived PubSubPayload Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data Error IsHelloEvent Nonce Type"
  },
  "api/AuxLabs.Twitch.PubSub.PubSubPayload-1.IsHelloEvent.html": {
    "href": "api/AuxLabs.Twitch.PubSub.PubSubPayload-1.IsHelloEvent.html",
    "title": "Property IsHelloEvent | AuxLabs.Twitch Documentation",
    "keywords": "Property IsHelloEvent Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll IsHelloEvent public bool IsHelloEvent { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.PubSub.PubSubPayload-1.Nonce.html": {
    "href": "api/AuxLabs.Twitch.PubSub.PubSubPayload-1.Nonce.html",
    "title": "Property Nonce | AuxLabs.Twitch Documentation",
    "keywords": "Property Nonce Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll Nonce [JsonPropertyName(\"nonce\")] public string Nonce { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.PubSub.PubSubPayload-1.Type.html": {
    "href": "api/AuxLabs.Twitch.PubSub.PubSubPayload-1.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll Type [JsonPropertyName(\"type\")] public PubSubPayloadType Type { get; set; } Property Value PubSubPayloadType"
  },
  "api/AuxLabs.Twitch.PubSub.PubSubPayload.html": {
    "href": "api/AuxLabs.Twitch.PubSub.PubSubPayload.html",
    "title": "Class PubSubPayload | AuxLabs.Twitch Documentation",
    "keywords": "Class PubSubPayload Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll public class PubSubPayload : PubSubPayload<PubSubResponse>, IPayload Inheritance object PubSubPayload<PubSubResponse> PubSubPayload Implements IPayload Inherited Members PubSubPayload<PubSubResponse>.IsHelloEvent PubSubPayload<PubSubResponse>.Type PubSubPayload<PubSubResponse>.Nonce PubSubPayload<PubSubResponse>.Error PubSubPayload<PubSubResponse>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/AuxLabs.Twitch.PubSub.PubSubPayloadType.html": {
    "href": "api/AuxLabs.Twitch.PubSub.PubSubPayloadType.html",
    "title": "Enum PubSubPayloadType | AuxLabs.Twitch Documentation",
    "keywords": "Enum PubSubPayloadType Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll public enum PubSubPayloadType Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"LISTEN\")] Listen = 1 [EnumMember(Value = \"MESSAGE\")] Message = 4 [EnumMember(Value = \"RESPONSE\")] Response = 3 Unknown = 0 [EnumMember(Value = \"UNLISTEN\")] Unlisten = 2"
  },
  "api/AuxLabs.Twitch.PubSub.PubSubRequest.html": {
    "href": "api/AuxLabs.Twitch.PubSub.PubSubRequest.html",
    "title": "Class PubSubRequest | AuxLabs.Twitch Documentation",
    "keywords": "Class PubSubRequest Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll public class PubSubRequest Inheritance object PubSubRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Token Topics"
  },
  "api/AuxLabs.Twitch.PubSub.PubSubRequest.Token.html": {
    "href": "api/AuxLabs.Twitch.PubSub.PubSubRequest.Token.html",
    "title": "Property Token | AuxLabs.Twitch Documentation",
    "keywords": "Property Token Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll Token [JsonPropertyName(\"auth_token\")] public string Token { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.PubSub.PubSubRequest.Topics.html": {
    "href": "api/AuxLabs.Twitch.PubSub.PubSubRequest.Topics.html",
    "title": "Property Topics | AuxLabs.Twitch Documentation",
    "keywords": "Property Topics Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll Topics [JsonPropertyName(\"topics\")] public List<PubSubTopic> Topics { get; set; } Property Value List<PubSubTopic>"
  },
  "api/AuxLabs.Twitch.PubSub.PubSubResponse.html": {
    "href": "api/AuxLabs.Twitch.PubSub.PubSubResponse.html",
    "title": "Class PubSubResponse | AuxLabs.Twitch Documentation",
    "keywords": "Class PubSubResponse Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll public class PubSubResponse Inheritance object PubSubResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties MessageData Topic"
  },
  "api/AuxLabs.Twitch.PubSub.PubSubResponse.MessageData.html": {
    "href": "api/AuxLabs.Twitch.PubSub.PubSubResponse.MessageData.html",
    "title": "Property MessageData | AuxLabs.Twitch Documentation",
    "keywords": "Property MessageData Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll MessageData [JsonPropertyName(\"message\")] public string MessageData { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.PubSub.PubSubResponse.Topic.html": {
    "href": "api/AuxLabs.Twitch.PubSub.PubSubResponse.Topic.html",
    "title": "Property Topic | AuxLabs.Twitch Documentation",
    "keywords": "Property Topic Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll Topic [JsonPropertyName(\"topic\")] public PubSubTopic Topic { get; set; } Property Value PubSubTopic"
  },
  "api/AuxLabs.Twitch.PubSub.PubSubTopic.-ctor.html": {
    "href": "api/AuxLabs.Twitch.PubSub.PubSubTopic.-ctor.html",
    "title": "Constructor PubSubTopic | AuxLabs.Twitch Documentation",
    "keywords": "Constructor PubSubTopic Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll PubSubTopic(string) public PubSubTopic(string topic) Parameters topic string"
  },
  "api/AuxLabs.Twitch.PubSub.PubSubTopic.html": {
    "href": "api/AuxLabs.Twitch.PubSub.PubSubTopic.html",
    "title": "Struct PubSubTopic | AuxLabs.Twitch Documentation",
    "keywords": "Struct PubSubTopic Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll public readonly struct PubSubTopic Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors PubSubTopic(string) Properties Ids Type Methods ToString()"
  },
  "api/AuxLabs.Twitch.PubSub.PubSubTopic.Ids.html": {
    "href": "api/AuxLabs.Twitch.PubSub.PubSubTopic.Ids.html",
    "title": "Property Ids | AuxLabs.Twitch Documentation",
    "keywords": "Property Ids Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll Ids public IReadOnlyCollection<string> Ids { get; } Property Value IReadOnlyCollection<string>"
  },
  "api/AuxLabs.Twitch.PubSub.PubSubTopic.ToString.html": {
    "href": "api/AuxLabs.Twitch.PubSub.PubSubTopic.ToString.html",
    "title": "Method ToString | AuxLabs.Twitch Documentation",
    "keywords": "Method ToString Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll ToString() public override string ToString() Returns string"
  },
  "api/AuxLabs.Twitch.PubSub.PubSubTopic.Type.html": {
    "href": "api/AuxLabs.Twitch.PubSub.PubSubTopic.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll Type public PubSubTopicType Type { get; } Property Value PubSubTopicType"
  },
  "api/AuxLabs.Twitch.PubSub.PubSubTopicType.html": {
    "href": "api/AuxLabs.Twitch.PubSub.PubSubTopicType.html",
    "title": "Enum PubSubTopicType | AuxLabs.Twitch Documentation",
    "keywords": "Enum PubSubTopicType Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll public enum PubSubTopicType Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"automod-queue\")] AutoModQueue = 6 AutoMod flags a message as potentially inappropriate, and when a moderator takes action on a message. [EnumMember(Value = \"channel-bits-badge-unlocks\")] BitsBadgeUnlocks = 3 Message sent when a user earns a new Bits badge in a particular channel, and chooses to share the notification with chat. [EnumMember(Value = \"channel-bits-events-v1\")] BitsV1 = 1 Anyone cheers in a specified channel. [EnumMember(Value = \"channel-bits-events-v2\")] BitsV2 = 2 Anyone cheers in a specified channel. [EnumMember(Value = \"channel-points-channel-v1\")] ChannelPointRedemptions = 4 A custom reward is redeemed in a channel. [EnumMember(Value = \"channel-subscribe-events-v1\")] ChannelSubscriptions = 5 Anyone subscribes (first month), resubscribes (subsequent months), or gifts a subscription to a channel. [EnumMember(Value = \"low-trust-users\")] LowTrustUserStatus = 8 The broadcaster or a moderator updates the low trust status of a user, or a new message has been sent in chat by a potential ban evader or a bans shared user. [EnumMember(Value = \"user-moderation-notifications\")] ModerationNotifications = 9 A user’s message held by AutoMod has been approved or denied. [EnumMember(Value = \"chat_moderator_actions\")] ModeratorActions = 7 Examples of moderator actions are bans, unbans, timeouts, deleting messages, changing chat mode (followers-only, subs-only), changing AutoMod levels, and adding a mod. Unknown = 0 [EnumMember(Value = \"whispers\")] Whispers = 10 Anyone whispers the specified user."
  },
  "api/AuxLabs.Twitch.PubSub.TwitchPubSubApiClient.-ctor.html": {
    "href": "api/AuxLabs.Twitch.PubSub.TwitchPubSubApiClient.-ctor.html",
    "title": "Constructor TwitchPubSubApiClient | AuxLabs.Twitch Documentation",
    "keywords": "Constructor TwitchPubSubApiClient Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll TwitchPubSubApiClient(TwitchPubSubApiConfig) public TwitchPubSubApiClient(TwitchPubSubApiConfig config = null) Parameters config TwitchPubSubApiConfig TwitchPubSubApiClient(string, TwitchPubSubApiConfig) public TwitchPubSubApiClient(string url, TwitchPubSubApiConfig config = null) Parameters url string config TwitchPubSubApiConfig"
  },
  "api/AuxLabs.Twitch.PubSub.TwitchPubSubApiClient.Connected.html": {
    "href": "api/AuxLabs.Twitch.PubSub.TwitchPubSubApiClient.Connected.html",
    "title": "Event Connected | AuxLabs.Twitch Documentation",
    "keywords": "Event Connected Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll The client has successfully made a connection to the server. public event Action Connected Returns Action"
  },
  "api/AuxLabs.Twitch.PubSub.TwitchPubSubApiClient.Disconnected.html": {
    "href": "api/AuxLabs.Twitch.PubSub.TwitchPubSubApiClient.Disconnected.html",
    "title": "Event Disconnected | AuxLabs.Twitch Documentation",
    "keywords": "Event Disconnected Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll The client was forcibly disconnected from the server. public event Action<Exception> Disconnected Returns Action<Exception>"
  },
  "api/AuxLabs.Twitch.PubSub.TwitchPubSubApiClient.Dispose.html": {
    "href": "api/AuxLabs.Twitch.PubSub.TwitchPubSubApiClient.Dispose.html",
    "title": "Method Dispose | AuxLabs.Twitch Documentation",
    "keywords": "Method Dispose Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "api/AuxLabs.Twitch.PubSub.TwitchPubSubApiClient.html": {
    "href": "api/AuxLabs.Twitch.PubSub.TwitchPubSubApiClient.html",
    "title": "Class TwitchPubSubApiClient | AuxLabs.Twitch Documentation",
    "keywords": "Class TwitchPubSubApiClient Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll public class TwitchPubSubApiClient : IDisposable Inheritance object TwitchPubSubApiClient Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TwitchPubSubApiClient(TwitchPubSubApiConfig) TwitchPubSubApiClient(string, TwitchPubSubApiConfig) Fields ThrowOnUnknownEvent Properties State Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Dispose(bool) Run() RunAsync() Events Connected The client has successfully made a connection to the server. Disconnected The client was forcibly disconnected from the server. UnknownEventReceived An unhandled irc command was received."
  },
  "api/AuxLabs.Twitch.PubSub.TwitchPubSubApiClient.Run.html": {
    "href": "api/AuxLabs.Twitch.PubSub.TwitchPubSubApiClient.Run.html",
    "title": "Method Run | AuxLabs.Twitch Documentation",
    "keywords": "Method Run Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll Run() public void Run()"
  },
  "api/AuxLabs.Twitch.PubSub.TwitchPubSubApiClient.RunAsync.html": {
    "href": "api/AuxLabs.Twitch.PubSub.TwitchPubSubApiClient.RunAsync.html",
    "title": "Method RunAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method RunAsync Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll RunAsync() public Task RunAsync() Returns Task"
  },
  "api/AuxLabs.Twitch.PubSub.TwitchPubSubApiClient.State.html": {
    "href": "api/AuxLabs.Twitch.PubSub.TwitchPubSubApiClient.State.html",
    "title": "Property State | AuxLabs.Twitch Documentation",
    "keywords": "Property State Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll State public ConnectionState State { get; } Property Value ConnectionState"
  },
  "api/AuxLabs.Twitch.PubSub.TwitchPubSubApiClient.ThrowOnUnknownEvent.html": {
    "href": "api/AuxLabs.Twitch.PubSub.TwitchPubSubApiClient.ThrowOnUnknownEvent.html",
    "title": "Field ThrowOnUnknownEvent | AuxLabs.Twitch Documentation",
    "keywords": "Field ThrowOnUnknownEvent Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll public readonly bool ThrowOnUnknownEvent Returns bool"
  },
  "api/AuxLabs.Twitch.PubSub.TwitchPubSubApiClient.UnknownEventReceived.html": {
    "href": "api/AuxLabs.Twitch.PubSub.TwitchPubSubApiClient.UnknownEventReceived.html",
    "title": "Event UnknownEventReceived | AuxLabs.Twitch Documentation",
    "keywords": "Event UnknownEventReceived Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll An unhandled irc command was received. public event Action<PubSubPayload> UnknownEventReceived Returns Action<PubSubPayload>"
  },
  "api/AuxLabs.Twitch.PubSub.TwitchPubSubApiConfig.html": {
    "href": "api/AuxLabs.Twitch.PubSub.TwitchPubSubApiConfig.html",
    "title": "Class TwitchPubSubApiConfig | AuxLabs.Twitch Documentation",
    "keywords": "Class TwitchPubSubApiConfig Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll public class TwitchPubSubApiConfig Inheritance object TwitchPubSubApiConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ThrowOnUnknownEvent Should an exception be raised if an unhandled event is received from twitch."
  },
  "api/AuxLabs.Twitch.PubSub.TwitchPubSubApiConfig.ThrowOnUnknownEvent.html": {
    "href": "api/AuxLabs.Twitch.PubSub.TwitchPubSubApiConfig.ThrowOnUnknownEvent.html",
    "title": "Property ThrowOnUnknownEvent | AuxLabs.Twitch Documentation",
    "keywords": "Property ThrowOnUnknownEvent Namespace AuxLabs.Twitch.PubSub Assembly AuxLabs.Twitch.PubSub.Api.dll ThrowOnUnknownEvent Should an exception be raised if an unhandled event is received from twitch. public bool ThrowOnUnknownEvent { get; set; } Property Value bool"
  },
  "api/AuxLabs.Twitch.QueryMap.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.QueryMap.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll CreateQueryMap() public abstract IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.QueryMap.html": {
    "href": "api/AuxLabs.Twitch.QueryMap.html",
    "title": "Class QueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Class QueryMap Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public abstract class QueryMap : IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Derived BaseTags AutomodSettingsArgs DeleteBanArgs DeleteBlockArgs DeleteBlockedTermsArgs DeleteEventSubscriptionArgs DeleteMessageArgs DeleteRaidArgs DeleteVideosArgs GetActiveExtensionsArgs GetAnalyticsArgs GetBadgesArgs GetBannedUsersArgs GetBitsLeaderboardArgs GetBlockedTermsArgs GetBlocksArgs GetBroadcastKeyArgs GetBroadcastMarkersArgs GetBroadcastsArgs GetChannelEditorsArgs GetChannelsArgs GetChannelTeamsArgs GetCharityCampaignArgs GetCharityDonationsArgs GetChatSettingsArgs GetChattersArgs GetCheermotesArgs GetClipsArgs GetCurrentTrackArgs GetDropStatusArgs GetEmotesArgs GetEmoteSetsArgs GetEventSubscriptionsArgs GetExtensionTransactionsArgs GetFollowedBroadcastsArgs GetFollowsArgs GetGamesArgs GetGoalsArgs GetHypeTrainsArgs GetPlaylistsArgs GetPlaylistTracksArgs GetPollsArgs GetPredictionsArgs GetRedemptionsArgs GetRewardArgs GetRolesArgs GetScheduleArgs GetSubscriberArgs GetSubscriptionsArgs GetTeamArgs GetTopGamesArgs GetUserColorArgs GetUsersArgs GetVideosArgs ManageRewardArgs ManageRolesArgs ManageSegmentArgs ModifyRedemptionsArgs PatchChannelArgs PatchChatSettingsArgs PatchScheduleArgs PostAnnouncementArgs PostAppAccessTokenArgs PostAutomodMessageArgs PostBanArgs PostBlockedTermArgs PostClipArgs PostCommercialBody PostEnforcementStatusArgs PostRaidArgs PostRevokeTokenArgs PostRewardArgs PostSegmentArgs PostShoutoutArgs PostWhisperArgs PutBlockArgs PutShieldModeArgs PutUserArgs PutUserChatColorArgs SearchCategoriesArgs SearchChannelsArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateQueryMap()"
  },
  "api/AuxLabs.Twitch.RateLimitedException.-ctor.html": {
    "href": "api/AuxLabs.Twitch.RateLimitedException.-ctor.html",
    "title": "Constructor RateLimitedException | AuxLabs.Twitch Documentation",
    "keywords": "Constructor RateLimitedException Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll RateLimitedException() public RateLimitedException()"
  },
  "api/AuxLabs.Twitch.RateLimitedException.html": {
    "href": "api/AuxLabs.Twitch.RateLimitedException.html",
    "title": "Class RateLimitedException | AuxLabs.Twitch Documentation",
    "keywords": "Class RateLimitedException Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public class RateLimitedException : TimeoutException, ISerializable Inheritance object Exception SystemException TimeoutException RateLimitedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RateLimitedException()"
  },
  "api/AuxLabs.Twitch.RateLimitInfo.html": {
    "href": "api/AuxLabs.Twitch.RateLimitInfo.html",
    "title": "Struct RateLimitInfo | AuxLabs.Twitch Documentation",
    "keywords": "Struct RateLimitInfo Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public readonly struct RateLimitInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties IsGlobal Lag Limit Path Remaining Reset"
  },
  "api/AuxLabs.Twitch.RateLimitInfo.IsGlobal.html": {
    "href": "api/AuxLabs.Twitch.RateLimitInfo.IsGlobal.html",
    "title": "Property IsGlobal | AuxLabs.Twitch Documentation",
    "keywords": "Property IsGlobal Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll IsGlobal public bool IsGlobal { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.RateLimitInfo.Lag.html": {
    "href": "api/AuxLabs.Twitch.RateLimitInfo.Lag.html",
    "title": "Property Lag | AuxLabs.Twitch Documentation",
    "keywords": "Property Lag Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Lag public TimeSpan? Lag { get; } Property Value TimeSpan?"
  },
  "api/AuxLabs.Twitch.RateLimitInfo.Limit.html": {
    "href": "api/AuxLabs.Twitch.RateLimitInfo.Limit.html",
    "title": "Property Limit | AuxLabs.Twitch Documentation",
    "keywords": "Property Limit Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Limit public int? Limit { get; } Property Value int?"
  },
  "api/AuxLabs.Twitch.RateLimitInfo.Path.html": {
    "href": "api/AuxLabs.Twitch.RateLimitInfo.Path.html",
    "title": "Property Path | AuxLabs.Twitch Documentation",
    "keywords": "Property Path Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Path public string Path { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.RateLimitInfo.Remaining.html": {
    "href": "api/AuxLabs.Twitch.RateLimitInfo.Remaining.html",
    "title": "Property Remaining | AuxLabs.Twitch Documentation",
    "keywords": "Property Remaining Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Remaining public int? Remaining { get; } Property Value int?"
  },
  "api/AuxLabs.Twitch.RateLimitInfo.Reset.html": {
    "href": "api/AuxLabs.Twitch.RateLimitInfo.Reset.html",
    "title": "Property Reset | AuxLabs.Twitch Documentation",
    "keywords": "Property Reset Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Reset public DateTimeOffset? Reset { get; } Property Value DateTimeOffset?"
  },
  "api/AuxLabs.Twitch.RedemptionSort.html": {
    "href": "api/AuxLabs.Twitch.RedemptionSort.html",
    "title": "Enum RedemptionSort | AuxLabs.Twitch Documentation",
    "keywords": "Enum RedemptionSort Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum RedemptionSort Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"NEWEST\")] Newest = 1 [EnumMember(Value = \"OLDEST\")] Oldest = 0"
  },
  "api/AuxLabs.Twitch.RedemptionStatus.html": {
    "href": "api/AuxLabs.Twitch.RedemptionStatus.html",
    "title": "Enum RedemptionStatus | AuxLabs.Twitch Documentation",
    "keywords": "Enum RedemptionStatus Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum RedemptionStatus Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"CANCELED\")] Cancelled = 1 [EnumMember(Value = \"FULFILLED\")] Fulfilled = 2 [EnumMember(Value = \"UNFULFILLED\")] Unfulfilled = 0"
  },
  "api/AuxLabs.Twitch.Require.After.html": {
    "href": "api/AuxLabs.Twitch.Require.After.html",
    "title": "Method After | AuxLabs.Twitch Documentation",
    "keywords": "Method After Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll After(DateTime, DateTime, string, string) public static void After(DateTime obj, DateTime value, string name, string msg = null) Parameters obj DateTime value DateTime name string msg string After(DateTime?, DateTime, string, string) public static void After(DateTime? obj, DateTime value, string name, string msg = null) Parameters obj DateTime? value DateTime name string msg string"
  },
  "api/AuxLabs.Twitch.Require.AtLeast.html": {
    "href": "api/AuxLabs.Twitch.Require.AtLeast.html",
    "title": "Method AtLeast | AuxLabs.Twitch Documentation",
    "keywords": "Method AtLeast Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll AtLeast(int, int, string, string) public static void AtLeast(int obj, int value, string name, string msg = null) Parameters obj int value int name string msg string AtLeast(int?, int, string, string) public static void AtLeast(int? obj, int value, string name, string msg = null) Parameters obj int? value int name string msg string AtLeast(uint, int, string, string) public static void AtLeast(uint obj, int value, string name, string msg = null) Parameters obj uint value int name string msg string AtLeast(uint?, int, string, string) public static void AtLeast(uint? obj, int value, string name, string msg = null) Parameters obj uint? value int name string msg string"
  },
  "api/AuxLabs.Twitch.Require.AtMost.html": {
    "href": "api/AuxLabs.Twitch.Require.AtMost.html",
    "title": "Method AtMost | AuxLabs.Twitch Documentation",
    "keywords": "Method AtMost Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll AtMost(int, int, string, string) public static void AtMost(int obj, int value, string name, string msg = null) Parameters obj int value int name string msg string AtMost(int?, int, string, string) public static void AtMost(int? obj, int value, string name, string msg = null) Parameters obj int? value int name string msg string AtMost(uint, int, string, string) public static void AtMost(uint obj, int value, string name, string msg = null) Parameters obj uint value int name string msg string AtMost(uint?, int, string, string) public static void AtMost(uint? obj, int value, string name, string msg = null) Parameters obj uint? value int name string msg string"
  },
  "api/AuxLabs.Twitch.Require.Before.html": {
    "href": "api/AuxLabs.Twitch.Require.Before.html",
    "title": "Method Before | AuxLabs.Twitch Documentation",
    "keywords": "Method Before Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Before(DateTime, DateTime, string, string) public static void Before(DateTime obj, DateTime value, string name, string msg = null) Parameters obj DateTime value DateTime name string msg string Before(DateTime?, DateTime, string, string) public static void Before(DateTime? obj, DateTime value, string name, string msg = null) Parameters obj DateTime? value DateTime name string msg string"
  },
  "api/AuxLabs.Twitch.Require.Equal.html": {
    "href": "api/AuxLabs.Twitch.Require.Equal.html",
    "title": "Method Equal | AuxLabs.Twitch Documentation",
    "keywords": "Method Equal Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Equal(object, object, string, string) public static void Equal(object obj, object value, string name, string msg = null) Parameters obj object value object name string msg string"
  },
  "api/AuxLabs.Twitch.Require.Exclusive.html": {
    "href": "api/AuxLabs.Twitch.Require.Exclusive.html",
    "title": "Method Exclusive | AuxLabs.Twitch Documentation",
    "keywords": "Method Exclusive Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Exclusive(object[], string[], bool, string) public static void Exclusive(object[] objs, string[] names, bool requireOne = false, string msg = null) Parameters objs object[] names string[] requireOne bool msg string"
  },
  "api/AuxLabs.Twitch.Require.GreaterThan.html": {
    "href": "api/AuxLabs.Twitch.Require.GreaterThan.html",
    "title": "Method GreaterThan | AuxLabs.Twitch Documentation",
    "keywords": "Method GreaterThan Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll GreaterThan(int, int, string, string) public static void GreaterThan(int obj, int value, string name, string msg = null) Parameters obj int value int name string msg string GreaterThan(int?, int, string, string) public static void GreaterThan(int? obj, int value, string name, string msg = null) Parameters obj int? value int name string msg string GreaterThan(uint, int, string, string) public static void GreaterThan(uint obj, int value, string name, string msg = null) Parameters obj uint value int name string msg string GreaterThan(uint?, int, string, string) public static void GreaterThan(uint? obj, int value, string name, string msg = null) Parameters obj uint? value int name string msg string"
  },
  "api/AuxLabs.Twitch.Require.HasAtLeast.html": {
    "href": "api/AuxLabs.Twitch.Require.HasAtLeast.html",
    "title": "Method HasAtLeast | AuxLabs.Twitch Documentation",
    "keywords": "Method HasAtLeast Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll HasAtLeast<T>(IEnumerable<T>, int, string, string) public static void HasAtLeast<T>(IEnumerable<T> obj, int value, string name, string msg = null) Parameters obj IEnumerable<T> value int name string msg string Type Parameters T"
  },
  "api/AuxLabs.Twitch.Require.HasAtMost.html": {
    "href": "api/AuxLabs.Twitch.Require.HasAtMost.html",
    "title": "Method HasAtMost | AuxLabs.Twitch Documentation",
    "keywords": "Method HasAtMost Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll HasAtMost<T>(IEnumerable<T>, int, string, string) public static void HasAtMost<T>(IEnumerable<T> obj, int value, string name, string msg = null) Parameters obj IEnumerable<T> value int name string msg string Type Parameters T"
  },
  "api/AuxLabs.Twitch.Require.HasGreaterThan.html": {
    "href": "api/AuxLabs.Twitch.Require.HasGreaterThan.html",
    "title": "Method HasGreaterThan | AuxLabs.Twitch Documentation",
    "keywords": "Method HasGreaterThan Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll HasGreaterThan<T>(IEnumerable<T>, int, string, string) public static void HasGreaterThan<T>(IEnumerable<T> obj, int value, string name, string msg = null) Parameters obj IEnumerable<T> value int name string msg string Type Parameters T"
  },
  "api/AuxLabs.Twitch.Require.HasLessThan.html": {
    "href": "api/AuxLabs.Twitch.Require.HasLessThan.html",
    "title": "Method HasLessThan | AuxLabs.Twitch Documentation",
    "keywords": "Method HasLessThan Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll HasLessThan<T>(IEnumerable<T>, int, string, string) public static void HasLessThan<T>(IEnumerable<T> obj, int value, string name, string msg = null) Parameters obj IEnumerable<T> value int name string msg string Type Parameters T"
  },
  "api/AuxLabs.Twitch.Require.html": {
    "href": "api/AuxLabs.Twitch.Require.html",
    "title": "Class Require | AuxLabs.Twitch Documentation",
    "keywords": "Class Require Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public static class Require Inheritance object Require Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods After(DateTime, DateTime, string, string) After(DateTime?, DateTime, string, string) AtLeast(int, int, string, string) AtLeast(int?, int, string, string) AtLeast(uint?, int, string, string) AtLeast(uint, int, string, string) AtMost(int, int, string, string) AtMost(int?, int, string, string) AtMost(uint?, int, string, string) AtMost(uint, int, string, string) Before(DateTime, DateTime, string, string) Before(DateTime?, DateTime, string, string) Equal(object, object, string, string) Exclusive(object[], string[], bool, string) GreaterThan(int, int, string, string) GreaterThan(int?, int, string, string) GreaterThan(uint?, int, string, string) GreaterThan(uint, int, string, string) HasAtLeast<T>(IEnumerable<T>, int, string, string) HasAtMost<T>(IEnumerable<T>, int, string, string) HasGreaterThan<T>(IEnumerable<T>, int, string, string) HasLessThan<T>(IEnumerable<T>, int, string, string) LengthAtLeast(string, int, string, string) LengthAtMost(string, int, string, string) LengthGreaterThan(string, int, string, string) LengthLessThan(string, int, string, string) LessThan(int, int, string, string) LessThan(int?, int, string, string) LessThan(uint?, int, string, string) LessThan(uint, int, string, string) NotEmpty(string, string, string) NotEmptyOrWhitespace(string, string, string) NotNull(object, string, string) NotNullOrEmpty(string, string, string) NotNullOrWhitespace(string, string, string) NotZero(int, string, string) NotZero(int?, string, string) NotZero(uint?, string, string) NotZero(uint, string, string) OnOrAfter(DateTime, DateTime, string, string) OnOrAfter(DateTime?, DateTime, string, string) OnOrBefore(DateTime, DateTime, string, string) OnOrBefore(DateTime?, DateTime, string, string) Scopes(IEnumerable<string>, string[])"
  },
  "api/AuxLabs.Twitch.Require.LengthAtLeast.html": {
    "href": "api/AuxLabs.Twitch.Require.LengthAtLeast.html",
    "title": "Method LengthAtLeast | AuxLabs.Twitch Documentation",
    "keywords": "Method LengthAtLeast Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll LengthAtLeast(string, int, string, string) public static void LengthAtLeast(string obj, int value, string name, string msg = null) Parameters obj string value int name string msg string"
  },
  "api/AuxLabs.Twitch.Require.LengthAtMost.html": {
    "href": "api/AuxLabs.Twitch.Require.LengthAtMost.html",
    "title": "Method LengthAtMost | AuxLabs.Twitch Documentation",
    "keywords": "Method LengthAtMost Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll LengthAtMost(string, int, string, string) public static void LengthAtMost(string obj, int value, string name, string msg = null) Parameters obj string value int name string msg string"
  },
  "api/AuxLabs.Twitch.Require.LengthGreaterThan.html": {
    "href": "api/AuxLabs.Twitch.Require.LengthGreaterThan.html",
    "title": "Method LengthGreaterThan | AuxLabs.Twitch Documentation",
    "keywords": "Method LengthGreaterThan Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll LengthGreaterThan(string, int, string, string) public static void LengthGreaterThan(string obj, int value, string name, string msg = null) Parameters obj string value int name string msg string"
  },
  "api/AuxLabs.Twitch.Require.LengthLessThan.html": {
    "href": "api/AuxLabs.Twitch.Require.LengthLessThan.html",
    "title": "Method LengthLessThan | AuxLabs.Twitch Documentation",
    "keywords": "Method LengthLessThan Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll LengthLessThan(string, int, string, string) public static void LengthLessThan(string obj, int value, string name, string msg = null) Parameters obj string value int name string msg string"
  },
  "api/AuxLabs.Twitch.Require.LessThan.html": {
    "href": "api/AuxLabs.Twitch.Require.LessThan.html",
    "title": "Method LessThan | AuxLabs.Twitch Documentation",
    "keywords": "Method LessThan Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll LessThan(int, int, string, string) public static void LessThan(int obj, int value, string name, string msg = null) Parameters obj int value int name string msg string LessThan(int?, int, string, string) public static void LessThan(int? obj, int value, string name, string msg = null) Parameters obj int? value int name string msg string LessThan(uint, int, string, string) public static void LessThan(uint obj, int value, string name, string msg = null) Parameters obj uint value int name string msg string LessThan(uint?, int, string, string) public static void LessThan(uint? obj, int value, string name, string msg = null) Parameters obj uint? value int name string msg string"
  },
  "api/AuxLabs.Twitch.Require.NotEmpty.html": {
    "href": "api/AuxLabs.Twitch.Require.NotEmpty.html",
    "title": "Method NotEmpty | AuxLabs.Twitch Documentation",
    "keywords": "Method NotEmpty Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll NotEmpty(string, string, string) public static void NotEmpty(string obj, string name, string msg = null) Parameters obj string name string msg string"
  },
  "api/AuxLabs.Twitch.Require.NotEmptyOrWhitespace.html": {
    "href": "api/AuxLabs.Twitch.Require.NotEmptyOrWhitespace.html",
    "title": "Method NotEmptyOrWhitespace | AuxLabs.Twitch Documentation",
    "keywords": "Method NotEmptyOrWhitespace Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll NotEmptyOrWhitespace(string, string, string) public static void NotEmptyOrWhitespace(string obj, string name, string msg = null) Parameters obj string name string msg string"
  },
  "api/AuxLabs.Twitch.Require.NotNull.html": {
    "href": "api/AuxLabs.Twitch.Require.NotNull.html",
    "title": "Method NotNull | AuxLabs.Twitch Documentation",
    "keywords": "Method NotNull Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll NotNull(object, string, string) public static void NotNull(object obj, string name, string msg = null) Parameters obj object name string msg string"
  },
  "api/AuxLabs.Twitch.Require.NotNullOrEmpty.html": {
    "href": "api/AuxLabs.Twitch.Require.NotNullOrEmpty.html",
    "title": "Method NotNullOrEmpty | AuxLabs.Twitch Documentation",
    "keywords": "Method NotNullOrEmpty Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll NotNullOrEmpty(string, string, string) public static void NotNullOrEmpty(string obj, string name, string msg = null) Parameters obj string name string msg string"
  },
  "api/AuxLabs.Twitch.Require.NotNullOrWhitespace.html": {
    "href": "api/AuxLabs.Twitch.Require.NotNullOrWhitespace.html",
    "title": "Method NotNullOrWhitespace | AuxLabs.Twitch Documentation",
    "keywords": "Method NotNullOrWhitespace Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll NotNullOrWhitespace(string, string, string) public static void NotNullOrWhitespace(string obj, string name, string msg = null) Parameters obj string name string msg string"
  },
  "api/AuxLabs.Twitch.Require.NotZero.html": {
    "href": "api/AuxLabs.Twitch.Require.NotZero.html",
    "title": "Method NotZero | AuxLabs.Twitch Documentation",
    "keywords": "Method NotZero Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll NotZero(int, string, string) public static void NotZero(int obj, string name, string msg = null) Parameters obj int name string msg string NotZero(int?, string, string) public static void NotZero(int? obj, string name, string msg = null) Parameters obj int? name string msg string NotZero(uint, string, string) public static void NotZero(uint obj, string name, string msg = null) Parameters obj uint name string msg string NotZero(uint?, string, string) public static void NotZero(uint? obj, string name, string msg = null) Parameters obj uint? name string msg string"
  },
  "api/AuxLabs.Twitch.Require.OnOrAfter.html": {
    "href": "api/AuxLabs.Twitch.Require.OnOrAfter.html",
    "title": "Method OnOrAfter | AuxLabs.Twitch Documentation",
    "keywords": "Method OnOrAfter Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll OnOrAfter(DateTime, DateTime, string, string) public static void OnOrAfter(DateTime obj, DateTime value, string name, string msg = null) Parameters obj DateTime value DateTime name string msg string OnOrAfter(DateTime?, DateTime, string, string) public static void OnOrAfter(DateTime? obj, DateTime value, string name, string msg = null) Parameters obj DateTime? value DateTime name string msg string"
  },
  "api/AuxLabs.Twitch.Require.OnOrBefore.html": {
    "href": "api/AuxLabs.Twitch.Require.OnOrBefore.html",
    "title": "Method OnOrBefore | AuxLabs.Twitch Documentation",
    "keywords": "Method OnOrBefore Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll OnOrBefore(DateTime, DateTime, string, string) public static void OnOrBefore(DateTime obj, DateTime value, string name, string msg = null) Parameters obj DateTime value DateTime name string msg string OnOrBefore(DateTime?, DateTime, string, string) public static void OnOrBefore(DateTime? obj, DateTime value, string name, string msg = null) Parameters obj DateTime? value DateTime name string msg string"
  },
  "api/AuxLabs.Twitch.Require.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Require.Scopes.html",
    "title": "Method Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Method Scopes Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Scopes(IEnumerable<string>, string[]) public static void Scopes(IEnumerable<string> has, string[] value) Parameters has IEnumerable<string> value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Api.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.html",
    "title": "Namespace AuxLabs.Twitch.Rest.Api | AuxLabs.Twitch Documentation",
    "keywords": "Namespace AuxLabs.Twitch.Rest.Api Classes RestError TwitchIdentityApiClient A client that implements Twitch's identity api for manging access tokens. TwitchJsonSerializerOptions TwitchRestApiClient TwitchRestApiConfig Interfaces ITwitchApi ITwitchIdentityApi"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.Authorization.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.Authorization.html",
    "title": "Property Authorization | AuxLabs.Twitch Documentation",
    "keywords": "Property Authorization Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll Authorization [Header(\"Authorization\")] AuthenticationHeaderValue Authorization { get; set; } Property Value AuthenticationHeaderValue"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.ClientId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.ClientId.html",
    "title": "Property ClientId | AuxLabs.Twitch Documentation",
    "keywords": "Property ClientId Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll ClientId [Header(\"Client-ID\")] string ClientId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBanAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBanAsync.html",
    "title": "Method DeleteBanAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DeleteBanAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll DeleteBanAsync(DeleteBanArgs, CancellationToken?) Removes the ban or timeout that was placed on the specified user. [Delete(\"moderation/bans\")] Task DeleteBanAsync(DeleteBanArgs args, CancellationToken? cancelToken = null) Parameters args DeleteBanArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the moderator:manage:banned_users scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Fordbidden, 409 Conflict MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBlockAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBlockAsync.html",
    "title": "Method DeleteBlockAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DeleteBlockAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll DeleteBlockAsync(DeleteBlockArgs, CancellationToken?) Removes the user from the broadcaster’s list of blocked users. [Delete(\"users/blocks\")] Task DeleteBlockAsync(DeleteBlockArgs args, CancellationToken? cancelToken = null) Parameters args DeleteBlockArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the user:manage:blocked_users scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBlockedTermAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBlockedTermAsync.html",
    "title": "Method DeleteBlockedTermAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DeleteBlockedTermAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll DeleteBlockedTermAsync(DeleteBlockedTermsArgs, CancellationToken?) Removes the word or phrase from the broadcaster’s list of blocked terms. [Delete(\"moderation/blocked_term\")] Task DeleteBlockedTermAsync(DeleteBlockedTermsArgs args, CancellationToken? cancelToken = null) Parameters args DeleteBlockedTermsArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the moderator:manage:blocked_terms scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Fordbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteChatMessagesAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteChatMessagesAsync.html",
    "title": "Method DeleteChatMessagesAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DeleteChatMessagesAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll DeleteChatMessagesAsync(DeleteMessageArgs, CancellationToken?) Removes a single chat message or all chat messages from the broadcaster’s chat room. [Delete(\"moderation/chat\")] Task DeleteChatMessagesAsync(DeleteMessageArgs args, CancellationToken? cancelToken = null) Parameters args DeleteMessageArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the moderator:manage:chat_messages scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Fordbidden, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteEventSubscriptionAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteEventSubscriptionAsync.html",
    "title": "Method DeleteEventSubscriptionAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DeleteEventSubscriptionAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll DeleteEventSubscriptionAsync(DeleteEventSubscriptionArgs, CancellationToken?) Deletes an EventSub subscription. [Delete(\"eventsub/subscriptions\")] Task DeleteEventSubscriptionAsync(DeleteEventSubscriptionArgs args, CancellationToken? cancelToken = null) Parameters args DeleteEventSubscriptionArgs cancelToken CancellationToken? Returns Task Remarks Webhook transports require a app access token and Websocket transports require a user access token. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteModeratorAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteModeratorAsync.html",
    "title": "Method DeleteModeratorAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DeleteModeratorAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll DeleteModeratorAsync(ManageModeratorArgs, CancellationToken?) Removes a moderator from the broadcaster’s chat room. [Delete(\"moderation/moderators\")] Task DeleteModeratorAsync(ManageModeratorArgs args, CancellationToken? cancelToken = null) Parameters args ManageModeratorArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the channel:manage:moderators scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 422 Unprocessable MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteRaidAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteRaidAsync.html",
    "title": "Method DeleteRaidAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DeleteRaidAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll DeleteRaidAsync(DeleteRaidArgs, CancellationToken?) Cancel a pending raid. [Delete(\"raids\")] Task DeleteRaidAsync(DeleteRaidArgs args, CancellationToken? cancelToken = null) Parameters args DeleteRaidArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the channel:manage:raids scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteRewardAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteRewardAsync.html",
    "title": "Method DeleteRewardAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DeleteRewardAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll DeleteRewardAsync(ManageRewardArgs, CancellationToken?) Deletes a custom reward that the broadcaster created. Only the app that created a reward is able to delete it. [Delete(\"channel_points/custom_rewards\")] Task DeleteRewardAsync(ManageRewardArgs args, CancellationToken? cancelToken = null) Parameters args ManageRewardArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the channel:manage:redemptions scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteSegmentAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteSegmentAsync.html",
    "title": "Method DeleteSegmentAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DeleteSegmentAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll DeleteSegmentAsync(ManageSegmentArgs, CancellationToken?) Updates a scheduled broadcast segment. [Delete(\"schedule/segment\")] Task DeleteSegmentAsync(ManageSegmentArgs args, CancellationToken? cancelToken = null) Parameters args ManageSegmentArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the channel:manage:schedule scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteVideoAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteVideoAsync.html",
    "title": "Method DeleteVideoAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DeleteVideoAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll DeleteVideoAsync(DeleteVideosArgs, CancellationToken?) Deletes one or more videos. You may delete past broadcasts, highlights, or uploads. [Delete(\"videos\")] Task<TwitchResponse<string>> DeleteVideoAsync(DeleteVideosArgs args, CancellationToken? cancelToken = null) Parameters args DeleteVideosArgs cancelToken CancellationToken? Returns Task<TwitchResponse<string>> A collection of string that represent the deleted videos' ids. Remarks Requires a user access token with the channel:manage:videos scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteVipAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteVipAsync.html",
    "title": "Method DeleteVipAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DeleteVipAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll DeleteVipAsync(ManageVipArgs, CancellationToken?) Removes the specified user as a VIP in the broadcaster’s channel. [Delete(\"channels/vips\")] Task DeleteVipAsync(ManageVipArgs args, CancellationToken? cancelToken = null) Parameters args ManageVipArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the channel:manage:vips scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, 422 Unprocessable MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetActiveExtensionsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetActiveExtensionsAsync.html",
    "title": "Method GetActiveExtensionsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetActiveExtensionsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetActiveExtensionsAsync(GetActiveExtensionsArgs, CancellationToken?) Gets a list of all extensions (both active and inactive) that the broadcaster has installed. [Get(\"users/extensions\")] Task<TwitchResponse<ExtensionMap>> GetActiveExtensionsAsync(GetActiveExtensionsArgs args, CancellationToken? cancelToken = null) Parameters args GetActiveExtensionsArgs cancelToken CancellationToken? Returns Task<TwitchResponse<ExtensionMap>> A single ExtensionMap object. Remarks Requires an app access token or a user access token with the user:read:broadcast or user:edit:broadcast scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetAutomodSettingsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetAutomodSettingsAsync.html",
    "title": "Method GetAutomodSettingsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetAutomodSettingsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetAutomodSettingsAsync(AutomodSettingsArgs, CancellationToken?) Gets the broadcaster’s AutoMod settings. [Get(\"moderation/automod/settings\")] Task<TwitchResponse<AutomodSettings>> GetAutomodSettingsAsync(AutomodSettingsArgs args, CancellationToken? cancelToken = null) Parameters args AutomodSettingsArgs cancelToken CancellationToken? Returns Task<TwitchResponse<AutomodSettings>> A single AutomodSettings object. Remarks Requires a user access token with the moderator:read:automod_settings scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBadgesAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBadgesAsync.html",
    "title": "Method GetBadgesAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetBadgesAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetBadgesAsync(GetBadgesArgs, CancellationToken?) Gets the broadcaster’s list of custom chat badges. [Get(\"chat/badges\")] Task<TwitchResponse<BadgeSet>> GetBadgesAsync(GetBadgesArgs args, CancellationToken? cancelToken = null) Parameters args GetBadgesArgs cancelToken CancellationToken? Returns Task<TwitchResponse<BadgeSet>> A collection of BadgeSet objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized GetBadgesAsync(CancellationToken?) Gets Twitch’s list of chat badges, which users may use in any channel’s chat room. [Get(\"chat/badges/global\")] Task<TwitchResponse<BadgeSet>> GetBadgesAsync(CancellationToken? cancelToken = null) Parameters cancelToken CancellationToken? Returns Task<TwitchResponse<BadgeSet>> A collection of BadgeSet objects. Exceptions TwitchRestException 401 Unauthorized"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBannedUsersAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBannedUsersAsync.html",
    "title": "Method GetBannedUsersAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetBannedUsersAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetBannedUsersAsync(GetBannedUsersArgs, CancellationToken?) Gets all users that the broadcaster banned or put in a timeout. [Get(\"moderation/banned\")] Task<TwitchMetaResponse<BannedUser>> GetBannedUsersAsync(GetBannedUsersArgs args, CancellationToken? cancelToken = null) Parameters args GetBannedUsersArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<BannedUser>> A single BannedUser object. Remarks Requires a user access token with the moderation:read or moderator:manage:banned_users scopes. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBitsLeaderboardAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBitsLeaderboardAsync.html",
    "title": "Method GetBitsLeaderboardAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetBitsLeaderboardAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetBitsLeaderboardAsync(GetBitsLeaderboardArgs, CancellationToken?) Gets the Bits leaderboard for the authenticated broadcaster. [Get(\"bits/leaderboard\")] Task<TwitchMetaResponse<BitsUser>> GetBitsLeaderboardAsync(GetBitsLeaderboardArgs args, CancellationToken? cancelToken = null) Parameters args GetBitsLeaderboardArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<BitsUser>> A collection of BitsUser objects. Remarks Requires a user access token with the bits:read scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBlockedTermsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBlockedTermsAsync.html",
    "title": "Method GetBlockedTermsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetBlockedTermsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetBlockedTermsAsync(GetBlockedTermsArgs, CancellationToken?) Gets the broadcaster’s list of non-private, blocked words or phrases. [Get(\"moderation/blocked_terms\")] Task<TwitchMetaResponse<BlockedTerm>> GetBlockedTermsAsync(GetBlockedTermsArgs args, CancellationToken? cancelToken = null) Parameters args GetBlockedTermsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<BlockedTerm>> A collection of BlockedTerm objects. Remarks Requires a user access token with the moderator:read:blocked_terms or moderator:manage:blocked_terms scopes. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Fordbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBlocksAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBlocksAsync.html",
    "title": "Method GetBlocksAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetBlocksAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetBlocksAsync(GetBlocksArgs, CancellationToken?) Gets the list of users that the broadcaster has blocked. [Get(\"users/blocks\")] Task<TwitchMetaResponse<SimpleUser>> GetBlocksAsync(GetBlocksArgs args, CancellationToken? cancelToken = null) Parameters args GetBlocksArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<SimpleUser>> A collection of SimpleUser objects. Remarks Requires a user access token with the user:read:blocked_users scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastKeyAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastKeyAsync.html",
    "title": "Method GetBroadcastKeyAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetBroadcastKeyAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetBroadcastKeyAsync(GetBroadcastKeyArgs, CancellationToken?) Gets the channel’s broadcast key. [Get(\"stream/key\")] Task<TwitchResponse<string>> GetBroadcastKeyAsync(GetBroadcastKeyArgs args, CancellationToken? cancelToken = null) Parameters args GetBroadcastKeyArgs cancelToken CancellationToken? Returns Task<TwitchResponse<string>> A single string object that represents the broadcaster's stream key. Remarks Requires a user access token with the channel:read:stream_key scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastMarkersAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastMarkersAsync.html",
    "title": "Method GetBroadcastMarkersAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetBroadcastMarkersAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetBroadcastMarkersAsync(GetBroadcastMarkersArgs, CancellationToken?) Gets a list of markers from the user’s most recent stream or from the specified VOD/video. [Get(\"streams/markers\")] Task<TwitchMetaResponse<BroadcastMarker>> GetBroadcastMarkersAsync(GetBroadcastMarkersArgs args, CancellationToken? cancelToken = null) Parameters args GetBroadcastMarkersArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<BroadcastMarker>> A collection of BroadcastMarker objects. Remarks Requires a user access token with the user:read:broadcast or channel:manage:broadcast scopes. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastsAsync.html",
    "title": "Method GetBroadcastsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetBroadcastsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetBroadcastsAsync(GetBroadcastsArgs, CancellationToken?) Gets a list of all broadcasts. [Get(\"streams\")] Task<TwitchMetaResponse<Broadcast>> GetBroadcastsAsync(GetBroadcastsArgs args, CancellationToken? cancelToken = null) Parameters args GetBroadcastsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Broadcast>> A collection of Broadcast objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCategoriesAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCategoriesAsync.html",
    "title": "Method GetCategoriesAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetCategoriesAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetCategoriesAsync(SearchCategoriesArgs, CancellationToken?) Gets the games or categories that match the specified query. [Get(\"search/categories\")] Task<TwitchMetaResponse<Category>> GetCategoriesAsync(SearchCategoriesArgs args, CancellationToken? cancelToken = null) Parameters args SearchCategoriesArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Category>> A collection of Category objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelEditorsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelEditorsAsync.html",
    "title": "Method GetChannelEditorsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetChannelEditorsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetChannelEditorsAsync(GetChannelEditorsArgs, CancellationToken?) Gets the broadcaster’s list editors. [Get(\"channels/editors\")] Task<TwitchResponse<ChannelEditor>> GetChannelEditorsAsync(GetChannelEditorsArgs args, CancellationToken? cancelToken = null) Parameters args GetChannelEditorsArgs cancelToken CancellationToken? Returns Task<TwitchResponse<ChannelEditor>> A collection of ChannelEditor objects. Remarks Requires a user access token with the channel:read:editors scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelsAsync.html",
    "title": "Method GetChannelsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetChannelsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetChannelsAsync(GetChannelsArgs, CancellationToken?) Gets information about one or more channels. [Get(\"channels\")] Task<TwitchResponse<Channel>> GetChannelsAsync(GetChannelsArgs args, CancellationToken? cancelToken = null) Parameters args GetChannelsArgs cancelToken CancellationToken? Returns Task<TwitchResponse<Channel>> A collection of Channel objects. Exceptions TwitchRestException 400 Bad Request, 404 Not Found GetChannelsAsync(SearchChannelsArgs, CancellationToken?) Gets the channels that match the specified query and have streamed content within the past 6 months. [Get(\"search/channels\")] Task<TwitchMetaResponse<ChannelBroadcast>> GetChannelsAsync(SearchChannelsArgs args, CancellationToken? cancelToken = null) Parameters args SearchChannelsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<ChannelBroadcast>> A collection of ChannelBroadcast objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCharityCampaignAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCharityCampaignAsync.html",
    "title": "Method GetCharityCampaignAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetCharityCampaignAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetCharityCampaignAsync(GetCharityCampaignArgs, CancellationToken?) Gets information about the charity campaign that a broadcaster is running. [Get(\"charity/campaigns\")] Task<TwitchResponse<CharityCampaign>> GetCharityCampaignAsync(GetCharityCampaignArgs args, CancellationToken? cancelToken = null) Parameters args GetCharityCampaignArgs cancelToken CancellationToken? Returns Task<TwitchResponse<CharityCampaign>> A CharityCampaign object. Remarks Requires a user access token with the channel:read:charity scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCharityDonationsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCharityDonationsAsync.html",
    "title": "Method GetCharityDonationsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetCharityDonationsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetCharityDonationsAsync(GetCharityDonationsArgs, CancellationToken?) Gets the list of donations that users have made to the broadcaster’s active charity campaign. [Get(\"charity/donations\")] Task<TwitchMetaResponse<CharityDonation>> GetCharityDonationsAsync(GetCharityDonationsArgs args, CancellationToken? cancelToken = null) Parameters args GetCharityDonationsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<CharityDonation>> A CharityDonation object. Remarks Requires a user access token with the channel:read:charity scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChatSettingsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChatSettingsAsync.html",
    "title": "Method GetChatSettingsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetChatSettingsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetChatSettingsAsync(GetChatSettingsArgs, CancellationToken?) Gets the broadcaster’s chat settings. [Get(\"chat/settings\")] Task<TwitchResponse<ChatSettings>> GetChatSettingsAsync(GetChatSettingsArgs args, CancellationToken? cancelToken = null) Parameters args GetChatSettingsArgs cancelToken CancellationToken? Returns Task<TwitchResponse<ChatSettings>> A single ChatSettings object. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChattersAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChattersAsync.html",
    "title": "Method GetChattersAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetChattersAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetChattersAsync(GetChattersArgs, CancellationToken?) Gets the list of users that are connected to the broadcaster’s chat session. [Get(\"chat/chatters\")] Task<TwitchMetaResponse<SimpleUser>> GetChattersAsync(GetChattersArgs args, CancellationToken? cancelToken = null) Parameters args GetChattersArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<SimpleUser>> A collection of SimpleUser objects. Remarks Requires a user access token with the moderator:read:chatters scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCheermotesAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCheermotesAsync.html",
    "title": "Method GetCheermotesAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetCheermotesAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetCheermotesAsync(GetCheermotesArgs, CancellationToken?) Gets a collection of Cheermotes that can be used to cheer bits in any bits-enabled channel. [Get(\"bits/cheermotes\")] Task<TwitchResponse<Cheermote>> GetCheermotesAsync(GetCheermotesArgs args = null, CancellationToken? cancelToken = null) Parameters args GetCheermotesArgs cancelToken CancellationToken? Returns Task<TwitchResponse<Cheermote>> A collection of Cheermote objects."
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetClipsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetClipsAsync.html",
    "title": "Method GetClipsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetClipsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetClipsAsync(GetClipsArgs, CancellationToken?) Gets one or more video clips that were captured from streams. [Get(\"clips\")] Task<TwitchMetaResponse<Clip>> GetClipsAsync(GetClipsArgs args, CancellationToken? cancelToken = null) Parameters args GetClipsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Clip>> A collection of Clip objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCurrentTrackAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCurrentTrackAsync.html",
    "title": "Method GetCurrentTrackAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetCurrentTrackAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetCurrentTrackAsync(GetCurrentTrackArgs, CancellationToken?) Gets the Soundtrack track that the broadcaster is playing. [Get(\"soundtrack/current_track\")] Task<TwitchResponse<Soundtrack>> GetCurrentTrackAsync(GetCurrentTrackArgs args, CancellationToken? cancelToken = null) Parameters args GetCurrentTrackArgs cancelToken CancellationToken? Returns Task<TwitchResponse<Soundtrack>> A single Soundtrack object. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetDropsStatusAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetDropsStatusAsync.html",
    "title": "Method GetDropsStatusAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetDropsStatusAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetDropsStatusAsync(GetDropStatusArgs, CancellationToken?) Gets an organization’s list of entitlements that have been granted to a game, a user, or both. [Get(\"entitlements/drops\")] Task<TwitchMetaResponse<Entitlement>> GetDropsStatusAsync(GetDropStatusArgs args, CancellationToken? cancelToken = null) Parameters args GetDropStatusArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Entitlement>> A collection of Entitlement objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmotesAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmotesAsync.html",
    "title": "Method GetEmotesAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetEmotesAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetEmotesAsync(GetEmotesArgs, CancellationToken?) Gets the broadcaster’s list of custom emotes. [Get(\"chat/emotes\")] Task<TwitchResponse<Emote>> GetEmotesAsync(GetEmotesArgs args, CancellationToken? cancelToken = null) Parameters args GetEmotesArgs cancelToken CancellationToken? Returns Task<TwitchResponse<Emote>> A collection of Emote objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized GetEmotesAsync(CancellationToken?) Gets the list of global emotes. [Get(\"chat/emotes/global\")] Task<TwitchResponse<GlobalEmote>> GetEmotesAsync(CancellationToken? cancelToken = null) Parameters cancelToken CancellationToken? Returns Task<TwitchResponse<GlobalEmote>> A collection of GlobalEmote objects. Exceptions TwitchRestException 401 Unauthorized"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmoteSetsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmoteSetsAsync.html",
    "title": "Method GetEmoteSetsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetEmoteSetsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetEmoteSetsAsync(GetEmoteSetsArgs, CancellationToken?) Gets emotes for one or more specified emote sets. [Get(\"chat/emotes/set\")] Task<TwitchResponse<Emote>> GetEmoteSetsAsync(GetEmoteSetsArgs args, CancellationToken? cancelToken = null) Parameters args GetEmoteSetsArgs cancelToken CancellationToken? Returns Task<TwitchResponse<Emote>> A collection of Emote objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEventSubscriptionsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEventSubscriptionsAsync.html",
    "title": "Method GetEventSubscriptionsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetEventSubscriptionsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetEventSubscriptionsAsync(GetEventSubscriptionsArgs, CancellationToken?) Gets a collection of EventSub subscriptions that the client in the access token created. [Get(\"eventsub/subscriptions\")] Task<EventSubResponse> GetEventSubscriptionsAsync(GetEventSubscriptionsArgs args, CancellationToken? cancelToken = null) Parameters args GetEventSubscriptionsArgs cancelToken CancellationToken? Returns Task<EventSubResponse> An EventSubResponse object. Remarks Webhook transports require a app access token and Websocket transports require a user access token. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetExtensionAnalyticsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetExtensionAnalyticsAsync.html",
    "title": "Method GetExtensionAnalyticsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetExtensionAnalyticsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetExtensionAnalyticsAsync(GetExtensionAnalyticsArgs, CancellationToken?) Gets an analytics report for one or more extensions. The response contains the URLs used to download the reports (CSV files). [Get(\"analytics/extensions\")] Task<TwitchMetaResponse<ExtensionAnalytic>> GetExtensionAnalyticsAsync(GetExtensionAnalyticsArgs args, CancellationToken? cancelToken = null) Parameters args GetExtensionAnalyticsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<ExtensionAnalytic>> A collection of ExtensionAnalytic objects. Remarks Requires a user access token with the analytics:read:extensions scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetExtensionTransactionsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetExtensionTransactionsAsync.html",
    "title": "Method GetExtensionTransactionsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetExtensionTransactionsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetExtensionTransactionsAsync(GetExtensionTransactionsArgs, CancellationToken?) Gets an extension’s list of transactions. [Get(\"extensions/transactions\")] Task<TwitchMetaResponse<ExtensionTransaction>> GetExtensionTransactionsAsync(GetExtensionTransactionsArgs args, CancellationToken? cancelToken = null) Parameters args GetExtensionTransactionsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<ExtensionTransaction>> A collection of ExtensionTransaction objects. Remarks Requires an app access token. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowedBroadcastsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowedBroadcastsAsync.html",
    "title": "Method GetFollowedBroadcastsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetFollowedBroadcastsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetFollowedBroadcastsAsync(GetFollowedBroadcastsArgs, CancellationToken?) Gets the list of broadcasters that the user follows and that are streaming live. [Get(\"streams/followed\")] Task<TwitchMetaResponse<Broadcast>> GetFollowedBroadcastsAsync(GetFollowedBroadcastsArgs args, CancellationToken? cancelToken = null) Parameters args GetFollowedBroadcastsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Broadcast>> A collection of Broadcast objects. Remarks Requires a user access token with the user:read:follows scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowedChannelsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowedChannelsAsync.html",
    "title": "Method GetFollowedChannelsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetFollowedChannelsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetFollowedChannelsAsync(GetFollowedChannelsArgs, CancellationToken?) Gets a list of broadcasters that the specified user follows. [Get(\"channels/followed\")] Task<TwitchMetaResponse<FollowedChannel>> GetFollowedChannelsAsync(GetFollowedChannelsArgs args, CancellationToken? cancelToken = null) Parameters args GetFollowedChannelsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<FollowedChannel>> A collection of FollowedChannel objects. Remarks Requires a user access token with the user:read:follows scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowersAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowersAsync.html",
    "title": "Method GetFollowersAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetFollowersAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetFollowersAsync(GetFollowersArgs, CancellationToken?) Gets a list of users that follow the specified broadcaster. [Get(\"channels/followed\")] Task<TwitchMetaResponse<Follower>> GetFollowersAsync(GetFollowersArgs args, CancellationToken? cancelToken = null) Parameters args GetFollowersArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Follower>> A collection of Follower objects. Remarks Requires a user access token with the moderator:read:followers scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGameAnalyticsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGameAnalyticsAsync.html",
    "title": "Method GetGameAnalyticsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetGameAnalyticsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetGameAnalyticsAsync(GetGameAnalyticsArgs, CancellationToken?) Gets an analytics report for one or more games. The response contains the URLs used to download the reports (CSV files). [Get(\"analytics/games\")] Task<TwitchMetaResponse<GameAnalytic>> GetGameAnalyticsAsync(GetGameAnalyticsArgs args, CancellationToken? cancelToken = null) Parameters args GetGameAnalyticsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<GameAnalytic>> A collection of GameAnalytic objects. Remarks Requires a user access token with the analytics:read:games scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGamesAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGamesAsync.html",
    "title": "Method GetGamesAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetGamesAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetGamesAsync(GetGamesArgs, CancellationToken?) Gets information about specified categories or games. [Get(\"games\")] Task<TwitchMetaResponse<Game>> GetGamesAsync(GetGamesArgs args, CancellationToken? cancelToken = null) Parameters args GetGamesArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Game>> A collection of Game objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGoalsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGoalsAsync.html",
    "title": "Method GetGoalsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetGoalsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetGoalsAsync(GetGoalsArgs, CancellationToken?) Gets the broadcaster’s list of active goals. [Get(\"goals\")] Task<TwitchResponse<Goal>> GetGoalsAsync(GetGoalsArgs args, CancellationToken? cancelToken = null) Parameters args GetGoalsArgs cancelToken CancellationToken? Returns Task<TwitchResponse<Goal>> A collection of Goal objects. Remarks Requires a user access token with the channel:read:goals scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetHypetrainEventsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetHypetrainEventsAsync.html",
    "title": "Method GetHypetrainEventsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetHypetrainEventsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetHypetrainEventsAsync(GetHypeTrainsArgs, CancellationToken?) Gets information about the broadcaster’s current or most recent Hype Train event. [Get(\"hypetrain/events\")] Task<TwitchMetaResponse<HypeTrainInfo>> GetHypetrainEventsAsync(GetHypeTrainsArgs args, CancellationToken? cancelToken = null) Parameters args GetHypeTrainsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<HypeTrainInfo>> A collection of HypeTrainInfo objects. Remarks Requires a user access token with the channel:read:hype_train scope. Exceptions TwitchRestException 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetModeratorsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetModeratorsAsync.html",
    "title": "Method GetModeratorsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetModeratorsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetModeratorsAsync(GetModeratorsArgs, CancellationToken?) Gets all users allowed to moderate the broadcaster’s chat room. [Get(\"moderation/moderators\")] Task<TwitchMetaResponse<SimpleUser>> GetModeratorsAsync(GetModeratorsArgs args, CancellationToken? cancelToken = null) Parameters args GetModeratorsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<SimpleUser>> A collection of SimpleUser objects. Remarks Requires a user access token with the moderation:read or channel:manage:moderators scopes. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Fordbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPlaylistsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPlaylistsAsync.html",
    "title": "Method GetPlaylistsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetPlaylistsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetPlaylistsAsync(GetPlaylistsArgs, CancellationToken?) Gets a list of Soundtrack playlists. [Get(\"soundtrack/playlists\")] Task<TwitchMetaResponse<Playlist>> GetPlaylistsAsync(GetPlaylistsArgs args, CancellationToken? cancelToken = null) Parameters args GetPlaylistsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Playlist>> A collection of Track objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPlaylistTracksAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPlaylistTracksAsync.html",
    "title": "Method GetPlaylistTracksAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetPlaylistTracksAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetPlaylistTracksAsync(GetPlaylistTracksArgs, CancellationToken?) Gets the Soundtrack playlist’s tracks. [Get(\"soundtrack/playlist\")] Task<TwitchMetaResponse<Track>> GetPlaylistTracksAsync(GetPlaylistTracksArgs args, CancellationToken? cancelToken = null) Parameters args GetPlaylistTracksArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Track>> A collection of Track objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPollAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPollAsync.html",
    "title": "Method GetPollAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetPollAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetPollAsync(GetPredictionsArgs, CancellationToken?) Gets a list of polls that the broadcaster created. [Get(\"polls\")] Task<TwitchMetaResponse<Poll>> GetPollAsync(GetPredictionsArgs args, CancellationToken? cancelToken = null) Parameters args GetPredictionsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Poll>> A collection of Poll objects. Remarks Requires a user access token with the channel:read:polls or channel:manage:polls scopes. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPredictionAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPredictionAsync.html",
    "title": "Method GetPredictionAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetPredictionAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetPredictionAsync(GetPredictionsArgs, CancellationToken?) Gets a list of Channel Points Predictions that the broadcaster created. [Get(\"predictions\")] Task<TwitchMetaResponse<Prediction>> GetPredictionAsync(GetPredictionsArgs args, CancellationToken? cancelToken = null) Parameters args GetPredictionsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Prediction>> A collection of Prediction objects. Remarks Requires a user access token with the channel:read:predictions or channel:manage:predictions scopes. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetRewardRedemptionAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetRewardRedemptionAsync.html",
    "title": "Method GetRewardRedemptionAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetRewardRedemptionAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetRewardRedemptionAsync(GetRedemptionsArgs, CancellationToken?) Gets a list of redemptions for the specified custom reward. Only the app that created a reward is able to see it's redemptions. [Get(\"channel_points/custom_rewards/redemptions\")] Task<TwitchResponse<Redemption>> GetRewardRedemptionAsync(GetRedemptionsArgs args, CancellationToken? cancelToken = null) Parameters args GetRedemptionsArgs cancelToken CancellationToken? Returns Task<TwitchResponse<Redemption>> A collection of Redemption objects. Remarks Requires a user access token with either the channel:read:redemptions or channel:manage:redemptions scopes. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetRewardsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetRewardsAsync.html",
    "title": "Method GetRewardsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetRewardsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetRewardsAsync(GetRewardArgs, CancellationToken?) Gets a list of custom rewards that the specified broadcaster created. [Get(\"channel_points/custom_rewards\")] Task<TwitchResponse<Reward>> GetRewardsAsync(GetRewardArgs args, CancellationToken? cancelToken = null) Parameters args GetRewardArgs cancelToken CancellationToken? Returns Task<TwitchResponse<Reward>> A collection of Reward objects. Remarks Requires a user access token with either the channel:read:redemptions or channel:manage:redemptions scopes. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetScheduleAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetScheduleAsync.html",
    "title": "Method GetScheduleAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetScheduleAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetScheduleAsync(GetScheduleArgs, CancellationToken?) Gets the broadcaster’s streaming schedule. [Get(\"schedule\")] Task<TwitchMetaResponse<Schedule>> GetScheduleAsync(GetScheduleArgs args, CancellationToken? cancelToken = null) Parameters args GetScheduleArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Schedule>> A single Schedule object with a collection of ScheduleSegment objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetShieldModeAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetShieldModeAsync.html",
    "title": "Method GetShieldModeAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetShieldModeAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetShieldModeAsync(GetShieldModeArgs, CancellationToken?) Activates or deactivates the broadcaster’s Shield Mode. [Get(\"moderation/shield_mode\")] Task<TwitchResponse<ShieldMode>> GetShieldModeAsync(GetShieldModeArgs args, CancellationToken? cancelToken = null) Parameters args GetShieldModeArgs cancelToken CancellationToken? Returns Task<TwitchResponse<ShieldMode>> A single ShieldMode object. Remarks Requires a user access token with the moderator:read:shield_mode or moderator:manage:shield_mode scopes. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetSubscriberAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetSubscriberAsync.html",
    "title": "Method GetSubscriberAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetSubscriberAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetSubscriberAsync(GetSubscriberArgs, CancellationToken?) Checks whether the user subscribes to the broadcaster’s channel. [Get(\"subscriptions/user\")] Task<TwitchResponse<SimpleSubscription>> GetSubscriberAsync(GetSubscriberArgs args, CancellationToken? cancelToken = null) Parameters args GetSubscriberArgs cancelToken CancellationToken? Returns Task<TwitchResponse<SimpleSubscription>> A single SimpleSubscription object. Remarks Requires a user access token or app access token with the channel:read:subscriptions scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetSubscriptionsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetSubscriptionsAsync.html",
    "title": "Method GetSubscriptionsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetSubscriptionsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetSubscriptionsAsync(GetSubscriptionsArgs, CancellationToken?) Updates the specified user’s information. [Get(\"subscriptions\")] Task<TwitchMetaResponse<Subscription>> GetSubscriptionsAsync(GetSubscriptionsArgs args, CancellationToken? cancelToken = null) Parameters args GetSubscriptionsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Subscription>> A collection of Subscription objects. Remarks Requires a user access token or app access token with the channel:read:subscriptions scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTeamAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTeamAsync.html",
    "title": "Method GetTeamAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetTeamAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetTeamAsync(GetTeamArgs, CancellationToken?) Gets information about the specified Twitch team. [Get(\"teams\")] Task<TwitchResponse<Team>> GetTeamAsync(GetTeamArgs args, CancellationToken? cancelToken = null) Parameters args GetTeamArgs cancelToken CancellationToken? Returns Task<TwitchResponse<Team>> A single Team object. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTeamsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTeamsAsync.html",
    "title": "Method GetTeamsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetTeamsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetTeamsAsync(GetChannelTeamsArgs, CancellationToken?) Gets information about one or more users. [Get(\"teams/channel\")] Task<TwitchResponse<ChannelTeam>> GetTeamsAsync(GetChannelTeamsArgs args, CancellationToken? cancelToken = null) Parameters args GetChannelTeamsArgs cancelToken CancellationToken? Returns Task<TwitchResponse<ChannelTeam>> A collection of ChannelTeam objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTopGamesAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTopGamesAsync.html",
    "title": "Method GetTopGamesAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetTopGamesAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetTopGamesAsync(GetTopGamesArgs, CancellationToken?) Gets information about all broadcasts on Twitch. [Get(\"games/top\")] Task<TwitchMetaResponse<Game>> GetTopGamesAsync(GetTopGamesArgs args, CancellationToken? cancelToken = null) Parameters args GetTopGamesArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Game>> A collection of Game objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUserChatColorsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUserChatColorsAsync.html",
    "title": "Method GetUserChatColorsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetUserChatColorsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetUserChatColorsAsync(GetUserColorArgs, CancellationToken?) Gets the color used for the user’s name in chat. [Get(\"chat/color\")] Task<TwitchResponse<SimpleChatUser>> GetUserChatColorsAsync(GetUserColorArgs args, CancellationToken? cancelToken = null) Parameters args GetUserColorArgs cancelToken CancellationToken? Returns Task<TwitchResponse<SimpleChatUser>> A collection of SimpleChatUser objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUserExtensionsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUserExtensionsAsync.html",
    "title": "Method GetUserExtensionsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetUserExtensionsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetUserExtensionsAsync(CancellationToken?) Gets a list of all extensions (both active and inactive) that the broadcaster has installed. [Get(\"users/extensions/list\")] Task<TwitchResponse<Extension>> GetUserExtensionsAsync(CancellationToken? cancelToken = null) Parameters cancelToken CancellationToken? Returns Task<TwitchResponse<Extension>> A collection of Extension objects. Remarks Requires a user access token with the user:read:broadcast or user:edit:broadcast scope. Inactive extensions are only included with the user:edit:broadcast scope. Exceptions TwitchRestException 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUsersAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUsersAsync.html",
    "title": "Method GetUsersAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetUsersAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetUsersAsync(GetUsersArgs, CancellationToken?) Gets information about one or more users. [Get(\"users\")] Task<TwitchResponse<User>> GetUsersAsync(GetUsersArgs args, CancellationToken? cancelToken = null) Parameters args GetUsersArgs cancelToken CancellationToken? Returns Task<TwitchResponse<User>> A collection of User objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetVideosAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetVideosAsync.html",
    "title": "Method GetVideosAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetVideosAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetVideosAsync(GetVideosArgs, CancellationToken?) Gets information about one or more published videos. [Get(\"videos\")] Task<TwitchMetaResponse<Video>> GetVideosAsync(GetVideosArgs args, CancellationToken? cancelToken = null) Parameters args GetVideosArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Video>> A collection of Video objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetVipsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.GetVipsAsync.html",
    "title": "Method GetVipsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetVipsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetVipsAsync(GetVipsArgs, CancellationToken?) Gets a list of the broadcaster’s VIPs. [Get(\"channels/vips\")] Task<TwitchMetaResponse<SimpleUser>> GetVipsAsync(GetVipsArgs args, CancellationToken? cancelToken = null) Parameters args GetVipsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<SimpleUser>> A collection of SimpleUser objects. Remarks Requires a user access token with the moderation:read or channel:manage:moderators scopes. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.html",
    "title": "Interface ITwitchApi | AuxLabs.Twitch Documentation",
    "keywords": "Interface ITwitchApi Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll [Header(\"User-Agent\", \"AuxLabs (https://github.com/AuxLabs/Twitch)\")] public interface ITwitchApi : IDisposable Inherited Members IDisposable.Dispose() Properties Authorization ClientId Methods DeleteBanAsync(DeleteBanArgs, CancellationToken?) Removes the ban or timeout that was placed on the specified user. DeleteBlockAsync(DeleteBlockArgs, CancellationToken?) Removes the user from the broadcaster’s list of blocked users. DeleteBlockedTermAsync(DeleteBlockedTermsArgs, CancellationToken?) Removes the word or phrase from the broadcaster’s list of blocked terms. DeleteChatMessagesAsync(DeleteMessageArgs, CancellationToken?) Removes a single chat message or all chat messages from the broadcaster’s chat room. DeleteEventSubscriptionAsync(DeleteEventSubscriptionArgs, CancellationToken?) Deletes an EventSub subscription. DeleteModeratorAsync(ManageModeratorArgs, CancellationToken?) Removes a moderator from the broadcaster’s chat room. DeleteRaidAsync(DeleteRaidArgs, CancellationToken?) Cancel a pending raid. DeleteRewardAsync(ManageRewardArgs, CancellationToken?) Deletes a custom reward that the broadcaster created. Only the app that created a reward is able to delete it. DeleteSegmentAsync(ManageSegmentArgs, CancellationToken?) Updates a scheduled broadcast segment. DeleteVideoAsync(DeleteVideosArgs, CancellationToken?) Deletes one or more videos. You may delete past broadcasts, highlights, or uploads. DeleteVipAsync(ManageVipArgs, CancellationToken?) Removes the specified user as a VIP in the broadcaster’s channel. GetActiveExtensionsAsync(GetActiveExtensionsArgs, CancellationToken?) Gets a list of all extensions (both active and inactive) that the broadcaster has installed. GetAutomodSettingsAsync(AutomodSettingsArgs, CancellationToken?) Gets the broadcaster’s AutoMod settings. GetBadgesAsync(GetBadgesArgs, CancellationToken?) Gets the broadcaster’s list of custom chat badges. GetBadgesAsync(CancellationToken?) Gets Twitch’s list of chat badges, which users may use in any channel’s chat room. GetBannedUsersAsync(GetBannedUsersArgs, CancellationToken?) Gets all users that the broadcaster banned or put in a timeout. GetBitsLeaderboardAsync(GetBitsLeaderboardArgs, CancellationToken?) Gets the Bits leaderboard for the authenticated broadcaster. GetBlockedTermsAsync(GetBlockedTermsArgs, CancellationToken?) Gets the broadcaster’s list of non-private, blocked words or phrases. GetBlocksAsync(GetBlocksArgs, CancellationToken?) Gets the list of users that the broadcaster has blocked. GetBroadcastKeyAsync(GetBroadcastKeyArgs, CancellationToken?) Gets the channel’s broadcast key. GetBroadcastMarkersAsync(GetBroadcastMarkersArgs, CancellationToken?) Gets a list of markers from the user’s most recent stream or from the specified VOD/video. GetBroadcastsAsync(GetBroadcastsArgs, CancellationToken?) Gets a list of all broadcasts. GetCategoriesAsync(SearchCategoriesArgs, CancellationToken?) Gets the games or categories that match the specified query. GetChannelEditorsAsync(GetChannelEditorsArgs, CancellationToken?) Gets the broadcaster’s list editors. GetChannelsAsync(GetChannelsArgs, CancellationToken?) Gets information about one or more channels. GetChannelsAsync(SearchChannelsArgs, CancellationToken?) Gets the channels that match the specified query and have streamed content within the past 6 months. GetCharityCampaignAsync(GetCharityCampaignArgs, CancellationToken?) Gets information about the charity campaign that a broadcaster is running. GetCharityDonationsAsync(GetCharityDonationsArgs, CancellationToken?) Gets the list of donations that users have made to the broadcaster’s active charity campaign. GetChatSettingsAsync(GetChatSettingsArgs, CancellationToken?) Gets the broadcaster’s chat settings. GetChattersAsync(GetChattersArgs, CancellationToken?) Gets the list of users that are connected to the broadcaster’s chat session. GetCheermotesAsync(GetCheermotesArgs, CancellationToken?) Gets a collection of Cheermotes that can be used to cheer bits in any bits-enabled channel. GetClipsAsync(GetClipsArgs, CancellationToken?) Gets one or more video clips that were captured from streams. GetCurrentTrackAsync(GetCurrentTrackArgs, CancellationToken?) Gets the Soundtrack track that the broadcaster is playing. GetDropsStatusAsync(GetDropStatusArgs, CancellationToken?) Gets an organization’s list of entitlements that have been granted to a game, a user, or both. GetEmotesAsync(GetEmotesArgs, CancellationToken?) Gets the broadcaster’s list of custom emotes. GetEmotesAsync(CancellationToken?) Gets the list of global emotes. GetEmoteSetsAsync(GetEmoteSetsArgs, CancellationToken?) Gets emotes for one or more specified emote sets. GetEventSubscriptionsAsync(GetEventSubscriptionsArgs, CancellationToken?) Gets a collection of EventSub subscriptions that the client in the access token created. GetExtensionAnalyticsAsync(GetExtensionAnalyticsArgs, CancellationToken?) Gets an analytics report for one or more extensions. The response contains the URLs used to download the reports (CSV files). GetExtensionTransactionsAsync(GetExtensionTransactionsArgs, CancellationToken?) Gets an extension’s list of transactions. GetFollowedBroadcastsAsync(GetFollowedBroadcastsArgs, CancellationToken?) Gets the list of broadcasters that the user follows and that are streaming live. GetFollowedChannelsAsync(GetFollowedChannelsArgs, CancellationToken?) Gets a list of broadcasters that the specified user follows. GetFollowersAsync(GetFollowersArgs, CancellationToken?) Gets a list of users that follow the specified broadcaster. GetGameAnalyticsAsync(GetGameAnalyticsArgs, CancellationToken?) Gets an analytics report for one or more games. The response contains the URLs used to download the reports (CSV files). GetGamesAsync(GetGamesArgs, CancellationToken?) Gets information about specified categories or games. GetGoalsAsync(GetGoalsArgs, CancellationToken?) Gets the broadcaster’s list of active goals. GetHypetrainEventsAsync(GetHypeTrainsArgs, CancellationToken?) Gets information about the broadcaster’s current or most recent Hype Train event. GetModeratorsAsync(GetModeratorsArgs, CancellationToken?) Gets all users allowed to moderate the broadcaster’s chat room. GetPlaylistsAsync(GetPlaylistsArgs, CancellationToken?) Gets a list of Soundtrack playlists. GetPlaylistTracksAsync(GetPlaylistTracksArgs, CancellationToken?) Gets the Soundtrack playlist’s tracks. GetPollAsync(GetPredictionsArgs, CancellationToken?) Gets a list of polls that the broadcaster created. GetPredictionAsync(GetPredictionsArgs, CancellationToken?) Gets a list of Channel Points Predictions that the broadcaster created. GetRewardRedemptionAsync(GetRedemptionsArgs, CancellationToken?) Gets a list of redemptions for the specified custom reward. Only the app that created a reward is able to see it's redemptions. GetRewardsAsync(GetRewardArgs, CancellationToken?) Gets a list of custom rewards that the specified broadcaster created. GetScheduleAsync(GetScheduleArgs, CancellationToken?) Gets the broadcaster’s streaming schedule. GetShieldModeAsync(GetShieldModeArgs, CancellationToken?) Activates or deactivates the broadcaster’s Shield Mode. GetSubscriberAsync(GetSubscriberArgs, CancellationToken?) Checks whether the user subscribes to the broadcaster’s channel. GetSubscriptionsAsync(GetSubscriptionsArgs, CancellationToken?) Updates the specified user’s information. GetTeamAsync(GetTeamArgs, CancellationToken?) Gets information about the specified Twitch team. GetTeamsAsync(GetChannelTeamsArgs, CancellationToken?) Gets information about one or more users. GetTopGamesAsync(GetTopGamesArgs, CancellationToken?) Gets information about all broadcasts on Twitch. GetUserChatColorsAsync(GetUserColorArgs, CancellationToken?) Gets the color used for the user’s name in chat. GetUserExtensionsAsync(CancellationToken?) Gets a list of all extensions (both active and inactive) that the broadcaster has installed. GetUsersAsync(GetUsersArgs, CancellationToken?) Gets information about one or more users. GetVideosAsync(GetVideosArgs, CancellationToken?) Gets information about one or more published videos. GetVipsAsync(GetVipsArgs, CancellationToken?) Gets a list of the broadcaster’s VIPs. PatchChannelAsync(PatchChannelArgs, PatchChannelBody, CancellationToken?) Updates a channel’s properties. PatchChatSettingsAsync(PatchChatSettingsArgs, PatchChatSettingsBody, CancellationToken?) Updates the broadcaster’s chat settings. PatchDropsStatusAsync(PatchDropsStatusArgs, CancellationToken?) Updates the Drop entitlement’s fulfillment status. PatchPollAsync(PatchPollBody, CancellationToken?) Ends an active poll. PatchPredictionaAsync(PostPredictionBody, CancellationToken?) Locks, resolves, or cancels a Channel Points Prediction. PatchRewardAsync(ManageRewardArgs, PostRewardBody, CancellationToken?) Updates a custom reward. The app used to create the reward is the only app that may update the reward. PatchRewardRedemptionAsync(RedemptionStatus, ModifyRedemptionsArgs, CancellationToken?) Updates a redemption’s status. The app used to create the reward is the only app that may update the redemption. PatchScheduleAsync(PatchScheduleArgs, CancellationToken?) Updates the broadcaster’s schedule settings, such as scheduling a vacation. PatchSegmentAsync(ManageSegmentArgs, PatchSegmentBody, CancellationToken?) Updates a scheduled broadcast segment. PostAutomodMessageAsync(PostAutomodMessageArgs, CancellationToken?) Allow or deny the message that AutoMod flagged for review. PostBanAsync(PostBanArgs, PostBanBody, CancellationToken?) Bans a user from participating in the specified broadcaster’s chat room or puts them in a timeout. PostBlockedTermAsync(PostBlockedTermArgs, PostBlockedTermBody, CancellationToken?) Gets the broadcaster’s list of non-private, blocked words or phrases. PostBroadcastMarkerAsync(PostBroadcastMarkerBody, CancellationToken?) Adds a marker to a live stream. PostChatAnnouncementAsync(PostAnnouncementArgs, PostAnnouncementBody, CancellationToken?) Sends an announcement to the broadcaster’s chat room. PostClipAsync(PostClipArgs, CancellationToken?) Creates a clip from the broadcaster’s stream. PostCommercialAsync(PostCommercialBody, CancellationToken?) Starts a commercial on the specified channel. PostEnforcementStatusAsync(PostEnforcementStatusArgs, PostEnforcementStatusBody, CancellationToken?) Checks whether AutoMod would flag the specified message for review. PostEventSubscriptionAsync<TCondition>(PostEventSubscriptionBody<TCondition>, CancellationToken?) Creates an EventSub subscription. PostModeratorAsync(ManageModeratorArgs, CancellationToken?) Adds a moderator to the broadcaster’s chat room. PostPollAsync(PutPollBody, CancellationToken?) Creates a poll that viewers in the broadcaster’s channel can vote on. PostPredictionAsync(PostPredictionBody, CancellationToken?) Creates a Channel Points Prediction. PostRaidAsync(PostRaidArgs, CancellationToken?) Raid another channel by sending the broadcaster’s viewers to the targeted channel. PostRewardsAsync(PostRewardArgs, PostRewardBody, CancellationToken?) Creates a custom reward in the broadcaster’s channel. PostSegmentAsync(PostSegmentArgs, PostSegmentBody, CancellationToken?) Adds a single or recurring broadcast to the broadcaster’s streaming schedule. PostShoutoutAsync(PostShoutoutArgs, CancellationToken?) Sends a shoutout to the specified broadcaster. PostVipAsync(ManageVipArgs, CancellationToken?) Adds the specified user as a VIP in the broadcaster’s channel. PostWhisperAsync(PostWhisperArgs, PostWhisperBody, CancellationToken?) Sends a whisper message to the specified user. PutAutomodSettingsAsync(AutomodSettingsArgs, PutAutomodSettingsBody, CancellationToken?) Updates the broadcaster’s AutoMod settings. PutBlockAsync(PutBlockArgs, CancellationToken?) Blocks the specified user from interacting with or having contact with the broadcaster. PutExtensionsAsync(ExtensionMap, CancellationToken?) Updates an installed extension’s information. PutShieldModeAsync(PutShieldModeArgs, PutShieldModeBody, CancellationToken?) Activates or deactivates the broadcaster’s Shield Mode. PutUserAsync(PutUserArgs, CancellationToken?) Updates the specified user’s information. PutUserChatColorAsync(PutUserChatColorArgs, CancellationToken?) Updates the color used for the user's name in chat."
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchChannelAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchChannelAsync.html",
    "title": "Method PatchChannelAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PatchChannelAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PatchChannelAsync(PatchChannelArgs, PatchChannelBody, CancellationToken?) Updates a channel’s properties. [Patch(\"channels\")] Task PatchChannelAsync(PatchChannelArgs args, PatchChannelBody body, CancellationToken? cancelToken = null) Parameters args PatchChannelArgs body PatchChannelBody cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the channel:manage:broadcast scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchChatSettingsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchChatSettingsAsync.html",
    "title": "Method PatchChatSettingsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PatchChatSettingsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PatchChatSettingsAsync(PatchChatSettingsArgs, PatchChatSettingsBody, CancellationToken?) Updates the broadcaster’s chat settings. [Patch(\"chat/settings\")] Task<TwitchResponse<ChatSettings>> PatchChatSettingsAsync(PatchChatSettingsArgs args, PatchChatSettingsBody body, CancellationToken? cancelToken = null) Parameters args PatchChatSettingsArgs body PatchChatSettingsBody cancelToken CancellationToken? Returns Task<TwitchResponse<ChatSettings>> A single ChatSettings object. Remarks Requires a user access token with the moderator:manage:chat_settings scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchDropsStatusAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchDropsStatusAsync.html",
    "title": "Method PatchDropsStatusAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PatchDropsStatusAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PatchDropsStatusAsync(PatchDropsStatusArgs, CancellationToken?) Updates the Drop entitlement’s fulfillment status. [Patch(\"entitlements/drops\")] Task<TwitchResponse<EntitlementDrop>> PatchDropsStatusAsync(PatchDropsStatusArgs args, CancellationToken? cancelToken = null) Parameters args PatchDropsStatusArgs cancelToken CancellationToken? Returns Task<TwitchResponse<EntitlementDrop>> A collection of EntitlementDrop objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchPollAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchPollAsync.html",
    "title": "Method PatchPollAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PatchPollAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PatchPollAsync(PatchPollBody, CancellationToken?) Ends an active poll. [Patch(\"polls\")] Task<TwitchResponse<Poll>> PatchPollAsync(PatchPollBody args, CancellationToken? cancelToken = null) Parameters args PatchPollBody cancelToken CancellationToken? Returns Task<TwitchResponse<Poll>> A single Poll object. Remarks Requires a user access token with the channel:manage:polls scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchPredictionaAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchPredictionaAsync.html",
    "title": "Method PatchPredictionaAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PatchPredictionaAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PatchPredictionaAsync(PostPredictionBody, CancellationToken?) Locks, resolves, or cancels a Channel Points Prediction. [Patch(\"predictions\")] Task<TwitchResponse<Prediction>> PatchPredictionaAsync(PostPredictionBody args, CancellationToken? cancelToken = null) Parameters args PostPredictionBody cancelToken CancellationToken? Returns Task<TwitchResponse<Prediction>> A single Prediction object. Remarks Requires a user access token with the channel:manage:predictions scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchRewardAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchRewardAsync.html",
    "title": "Method PatchRewardAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PatchRewardAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PatchRewardAsync(ManageRewardArgs, PostRewardBody, CancellationToken?) Updates a custom reward. The app used to create the reward is the only app that may update the reward. [Patch(\"channel_points/custom_rewards\")] Task<TwitchResponse<Reward>> PatchRewardAsync(ManageRewardArgs args, PostRewardBody body, CancellationToken? cancelToken = null) Parameters args ManageRewardArgs body PostRewardBody cancelToken CancellationToken? Returns Task<TwitchResponse<Reward>> A collection of Reward objects. Remarks Requires a user access token with the channel:manage:redemptions scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchRewardRedemptionAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchRewardRedemptionAsync.html",
    "title": "Method PatchRewardRedemptionAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PatchRewardRedemptionAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PatchRewardRedemptionAsync(RedemptionStatus, ModifyRedemptionsArgs, CancellationToken?) Updates a redemption’s status. The app used to create the reward is the only app that may update the redemption. [Patch(\"channel_points/custom_rewards/redemptions\")] Task<TwitchResponse<Redemption>> PatchRewardRedemptionAsync(RedemptionStatus status, ModifyRedemptionsArgs args, CancellationToken? cancelToken = null) Parameters status RedemptionStatus args ModifyRedemptionsArgs cancelToken CancellationToken? Returns Task<TwitchResponse<Redemption>> A collection of Reward objects. Remarks Requires a user access token with the channel:manage:redemptions scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchScheduleAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchScheduleAsync.html",
    "title": "Method PatchScheduleAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PatchScheduleAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PatchScheduleAsync(PatchScheduleArgs, CancellationToken?) Updates the broadcaster’s schedule settings, such as scheduling a vacation. [Patch(\"schedule/settings\")] Task PatchScheduleAsync(PatchScheduleArgs args, CancellationToken? cancelToken = null) Parameters args PatchScheduleArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the channel:manage:schedule scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchSegmentAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchSegmentAsync.html",
    "title": "Method PatchSegmentAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PatchSegmentAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PatchSegmentAsync(ManageSegmentArgs, PatchSegmentBody, CancellationToken?) Updates a scheduled broadcast segment. [Patch(\"schedule/segment\")] Task<TwitchResponse<Schedule>> PatchSegmentAsync(ManageSegmentArgs args, PatchSegmentBody body, CancellationToken? cancelToken = null) Parameters args ManageSegmentArgs body PatchSegmentBody cancelToken CancellationToken? Returns Task<TwitchResponse<Schedule>> A single Schedule object. Remarks Requires a user access token with the channel:manage:schedule scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostAutomodMessageAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostAutomodMessageAsync.html",
    "title": "Method PostAutomodMessageAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostAutomodMessageAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostAutomodMessageAsync(PostAutomodMessageArgs, CancellationToken?) Allow or deny the message that AutoMod flagged for review. [Post(\"moderation/automod/message\")] Task PostAutomodMessageAsync(PostAutomodMessageArgs args, CancellationToken? cancelToken = null) Parameters args PostAutomodMessageArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the moderator:manage:automod scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBanAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBanAsync.html",
    "title": "Method PostBanAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostBanAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostBanAsync(PostBanArgs, PostBanBody, CancellationToken?) Bans a user from participating in the specified broadcaster’s chat room or puts them in a timeout. [Post(\"moderation/bans\")] Task<TwitchResponse<Ban>> PostBanAsync(PostBanArgs args, PostBanBody body, CancellationToken? cancelToken = null) Parameters args PostBanArgs body PostBanBody cancelToken CancellationToken? Returns Task<TwitchResponse<Ban>> A collection of Ban objects. Remarks Requires a user access token with the moderator:manage:banned_users scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Fordbidden, 409 Conflict MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBlockedTermAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBlockedTermAsync.html",
    "title": "Method PostBlockedTermAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostBlockedTermAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostBlockedTermAsync(PostBlockedTermArgs, PostBlockedTermBody, CancellationToken?) Gets the broadcaster’s list of non-private, blocked words or phrases. [Post(\"moderation/blocked_terms\")] Task<TwitchResponse<BlockedTerm>> PostBlockedTermAsync(PostBlockedTermArgs args, PostBlockedTermBody body, CancellationToken? cancelToken = null) Parameters args PostBlockedTermArgs body PostBlockedTermBody cancelToken CancellationToken? Returns Task<TwitchResponse<BlockedTerm>> A single BlockedTerm object. Remarks Requires a user access token with the moderator:manage:blocked_terms scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Fordbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBroadcastMarkerAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBroadcastMarkerAsync.html",
    "title": "Method PostBroadcastMarkerAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostBroadcastMarkerAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostBroadcastMarkerAsync(PostBroadcastMarkerBody, CancellationToken?) Adds a marker to a live stream. [Post(\"streams/markers\")] Task<TwitchResponse<BroadcastMarker>> PostBroadcastMarkerAsync(PostBroadcastMarkerBody body, CancellationToken? cancelToken = null) Parameters body PostBroadcastMarkerBody cancelToken CancellationToken? Returns Task<TwitchResponse<BroadcastMarker>> A single BroadcastMarker object. Remarks Requires a user access token with the channel:manage:broadcast scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostChatAnnouncementAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostChatAnnouncementAsync.html",
    "title": "Method PostChatAnnouncementAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostChatAnnouncementAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostChatAnnouncementAsync(PostAnnouncementArgs, PostAnnouncementBody, CancellationToken?) Sends an announcement to the broadcaster’s chat room. [Post(\"chat/announcements\")] Task PostChatAnnouncementAsync(PostAnnouncementArgs args, PostAnnouncementBody body, CancellationToken? cancelToken = null) Parameters args PostAnnouncementArgs body PostAnnouncementBody cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the moderator:manage:announcements scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostClipAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostClipAsync.html",
    "title": "Method PostClipAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostClipAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostClipAsync(PostClipArgs, CancellationToken?) Creates a clip from the broadcaster’s stream. [Post(\"clips\")] Task<TwitchResponse<SimpleClip>> PostClipAsync(PostClipArgs args, CancellationToken? cancelToken = null) Parameters args PostClipArgs cancelToken CancellationToken? Returns Task<TwitchResponse<SimpleClip>> A single SimpleClip object. Remarks Requires a user access token with the clips:edit scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostCommercialAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostCommercialAsync.html",
    "title": "Method PostCommercialAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostCommercialAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostCommercialAsync(PostCommercialBody, CancellationToken?) Starts a commercial on the specified channel. [Post(\"channels/commercial\")] Task<TwitchResponse<Commercial>> PostCommercialAsync(PostCommercialBody args, CancellationToken? cancelToken = null) Parameters args PostCommercialBody cancelToken CancellationToken? Returns Task<TwitchResponse<Commercial>> A single Commercial object. Remarks Requires a user access token with the channel:edit:commercial scope. Exceptions TwitchRestException 400 Bad Request The specified broadcaster is not currently live. The internal commercial ratelimit has been exceeded. MissingScopeException The authorized user does not have the channel:edit:commercial scope."
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostEnforcementStatusAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostEnforcementStatusAsync.html",
    "title": "Method PostEnforcementStatusAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostEnforcementStatusAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostEnforcementStatusAsync(PostEnforcementStatusArgs, PostEnforcementStatusBody, CancellationToken?) Checks whether AutoMod would flag the specified message for review. [Post(\"moderation/enforcements/status\")] Task<TwitchResponse<MockMessage>> PostEnforcementStatusAsync(PostEnforcementStatusArgs args, PostEnforcementStatusBody body, CancellationToken? cancelToken = null) Parameters args PostEnforcementStatusArgs body PostEnforcementStatusBody cancelToken CancellationToken? Returns Task<TwitchResponse<MockMessage>> A collection of MockMessage objects. Remarks Requires a user access token with the moderation:read scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostEventSubscriptionAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostEventSubscriptionAsync.html",
    "title": "Method PostEventSubscriptionAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostEventSubscriptionAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostEventSubscriptionAsync<TCondition>(PostEventSubscriptionBody<TCondition>, CancellationToken?) Creates an EventSub subscription. [Post(\"eventsub/subscriptions\")] Task<EventSubResponse> PostEventSubscriptionAsync<TCondition>(PostEventSubscriptionBody<TCondition> args, CancellationToken? cancelToken = null) where TCondition : IEventCondition Parameters args PostEventSubscriptionBody<TCondition> cancelToken CancellationToken? Returns Task<EventSubResponse> An EventSubResponse object. Type Parameters TCondition Remarks Webhook transports require a app access token and Websocket transports require a user access token. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 409 Conflict MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostModeratorAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostModeratorAsync.html",
    "title": "Method PostModeratorAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostModeratorAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostModeratorAsync(ManageModeratorArgs, CancellationToken?) Adds a moderator to the broadcaster’s chat room. [Post(\"moderation/moderators\")] Task PostModeratorAsync(ManageModeratorArgs args, CancellationToken? cancelToken = null) Parameters args ManageModeratorArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the channel:manage:moderators scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 422 Unprocessable MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostPollAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostPollAsync.html",
    "title": "Method PostPollAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostPollAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostPollAsync(PutPollBody, CancellationToken?) Creates a poll that viewers in the broadcaster’s channel can vote on. [Post(\"polls\")] Task<TwitchResponse<Poll>> PostPollAsync(PutPollBody args, CancellationToken? cancelToken = null) Parameters args PutPollBody cancelToken CancellationToken? Returns Task<TwitchResponse<Poll>> A single Poll object. Remarks Requires a user access token with the channel:manage:polls scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostPredictionAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostPredictionAsync.html",
    "title": "Method PostPredictionAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostPredictionAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostPredictionAsync(PostPredictionBody, CancellationToken?) Creates a Channel Points Prediction. [Post(\"predictions\")] Task<TwitchResponse<Prediction>> PostPredictionAsync(PostPredictionBody args, CancellationToken? cancelToken = null) Parameters args PostPredictionBody cancelToken CancellationToken? Returns Task<TwitchResponse<Prediction>> A single Prediction object. Remarks Requires a user access token with the channel:manage:predictions scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostRaidAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostRaidAsync.html",
    "title": "Method PostRaidAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostRaidAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostRaidAsync(PostRaidArgs, CancellationToken?) Raid another channel by sending the broadcaster’s viewers to the targeted channel. [Post(\"raids\")] Task<TwitchResponse<Raid>> PostRaidAsync(PostRaidArgs args, CancellationToken? cancelToken = null) Parameters args PostRaidArgs cancelToken CancellationToken? Returns Task<TwitchResponse<Raid>> A single Raid object. Remarks Requires a user access token with the channel:manage:raids scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found, 409 Conflict MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostRewardsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostRewardsAsync.html",
    "title": "Method PostRewardsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostRewardsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostRewardsAsync(PostRewardArgs, PostRewardBody, CancellationToken?) Creates a custom reward in the broadcaster’s channel. [Post(\"channel_points/custom_rewards\")] Task<TwitchResponse<Reward>> PostRewardsAsync(PostRewardArgs args, PostRewardBody body, CancellationToken? cancelToken = null) Parameters args PostRewardArgs body PostRewardBody cancelToken CancellationToken? Returns Task<TwitchResponse<Reward>> A single Reward object. Remarks Requires a user access token with the channel:manage:redemptions scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostSegmentAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostSegmentAsync.html",
    "title": "Method PostSegmentAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostSegmentAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostSegmentAsync(PostSegmentArgs, PostSegmentBody, CancellationToken?) Adds a single or recurring broadcast to the broadcaster’s streaming schedule. [Post(\"schedule/segment\")] Task<TwitchResponse<Schedule>> PostSegmentAsync(PostSegmentArgs args, PostSegmentBody body, CancellationToken? cancelToken = null) Parameters args PostSegmentArgs body PostSegmentBody cancelToken CancellationToken? Returns Task<TwitchResponse<Schedule>> A single Schedule object. Remarks Requires a user access token with the channel:manage:schedule scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostShoutoutAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostShoutoutAsync.html",
    "title": "Method PostShoutoutAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostShoutoutAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostShoutoutAsync(PostShoutoutArgs, CancellationToken?) Sends a shoutout to the specified broadcaster. [Post(\"chat/shoutouts\")] Task PostShoutoutAsync(PostShoutoutArgs args, CancellationToken? cancelToken = null) Parameters args PostShoutoutArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the moderator:manage:shoutouts scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostVipAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostVipAsync.html",
    "title": "Method PostVipAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostVipAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostVipAsync(ManageVipArgs, CancellationToken?) Adds the specified user as a VIP in the broadcaster’s channel. [Post(\"channels/vips\")] Task PostVipAsync(ManageVipArgs args, CancellationToken? cancelToken = null) Parameters args ManageVipArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the channel:manage:vips scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, 409 Conflict, 422 Unprocessable, 425 Too Early MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostWhisperAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PostWhisperAsync.html",
    "title": "Method PostWhisperAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostWhisperAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostWhisperAsync(PostWhisperArgs, PostWhisperBody, CancellationToken?) Sends a whisper message to the specified user. [Post(\"whispers\")] Task PostWhisperAsync(PostWhisperArgs args, PostWhisperBody body, CancellationToken? cancelToken = null) Parameters args PostWhisperArgs body PostWhisperBody cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the user:manage:whispers scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PutAutomodSettingsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PutAutomodSettingsAsync.html",
    "title": "Method PutAutomodSettingsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PutAutomodSettingsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PutAutomodSettingsAsync(AutomodSettingsArgs, PutAutomodSettingsBody, CancellationToken?) Updates the broadcaster’s AutoMod settings. [Put(\"moderation/automod/settings\")] Task<TwitchResponse<AutomodSettings>> PutAutomodSettingsAsync(AutomodSettingsArgs args, PutAutomodSettingsBody body, CancellationToken? cancelToken = null) Parameters args AutomodSettingsArgs body PutAutomodSettingsBody cancelToken CancellationToken? Returns Task<TwitchResponse<AutomodSettings>> A single AutomodSettings object. Remarks Requires a user access token with the moderator:manage:automod_settings scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PutBlockAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PutBlockAsync.html",
    "title": "Method PutBlockAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PutBlockAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PutBlockAsync(PutBlockArgs, CancellationToken?) Blocks the specified user from interacting with or having contact with the broadcaster. [Put(\"users/blocks\")] Task PutBlockAsync(PutBlockArgs args, CancellationToken? cancelToken = null) Parameters args PutBlockArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the user:manage:blocked_users scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PutExtensionsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PutExtensionsAsync.html",
    "title": "Method PutExtensionsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PutExtensionsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PutExtensionsAsync(ExtensionMap, CancellationToken?) Updates an installed extension’s information. [Put(\"users/extensions\")] Task<TwitchResponse<ExtensionMap>> PutExtensionsAsync(ExtensionMap args, CancellationToken? cancelToken = null) Parameters args ExtensionMap cancelToken CancellationToken? Returns Task<TwitchResponse<ExtensionMap>> A single ExtensionMap object. Remarks Requires a user access token with the user:read:broadcast or user:edit:broadcast scope. Exceptions TwitchRestException 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PutShieldModeAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PutShieldModeAsync.html",
    "title": "Method PutShieldModeAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PutShieldModeAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PutShieldModeAsync(PutShieldModeArgs, PutShieldModeBody, CancellationToken?) Activates or deactivates the broadcaster’s Shield Mode. [Put(\"moderation/shield_mode\")] Task<TwitchResponse<ShieldMode>> PutShieldModeAsync(PutShieldModeArgs args, PutShieldModeBody body, CancellationToken? cancelToken = null) Parameters args PutShieldModeArgs body PutShieldModeBody cancelToken CancellationToken? Returns Task<TwitchResponse<ShieldMode>> A single ShieldMode object. Remarks Requires a user access token with the moderator:manage:shield_mode scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PutUserAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PutUserAsync.html",
    "title": "Method PutUserAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PutUserAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PutUserAsync(PutUserArgs, CancellationToken?) Updates the specified user’s information. [Put(\"users\")] Task<TwitchResponse<User>> PutUserAsync(PutUserArgs args, CancellationToken? cancelToken = null) Parameters args PutUserArgs cancelToken CancellationToken? Returns Task<TwitchResponse<User>> A single User object. Remarks Requires a user access token with the user:edit scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PutUserChatColorAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchApi.PutUserChatColorAsync.html",
    "title": "Method PutUserChatColorAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PutUserChatColorAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PutUserChatColorAsync(PutUserChatColorArgs, CancellationToken?) Updates the color used for the user's name in chat. [Put(\"chat/color\")] Task PutUserChatColorAsync(PutUserChatColorArgs args, CancellationToken? cancelToken = null) Parameters args PutUserChatColorArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the user:manage:chat_color scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchIdentityApi.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchIdentityApi.html",
    "title": "Interface ITwitchIdentityApi | AuxLabs.Twitch Documentation",
    "keywords": "Interface ITwitchIdentityApi Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll [Header(\"User-Agent\", \"AuxLabs (https://github.com/AuxLabs/Twitch)\")] public interface ITwitchIdentityApi : IDisposable Inherited Members IDisposable.Dispose() Methods PostAccessTokenAsync(PostAppAccessTokenArgs, CancellationToken?) PostAccessTokenAsync(PostUserAccessTokenArgs, CancellationToken?) PostRefreshTokenAsync(PostRefreshTokenArgs, CancellationToken?) RevokeTokenAsync(PostRevokeTokenArgs, CancellationToken?) ValidateAsync(string, CancellationToken?)"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchIdentityApi.PostAccessTokenAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchIdentityApi.PostAccessTokenAsync.html",
    "title": "Method PostAccessTokenAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostAccessTokenAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostAccessTokenAsync(PostAppAccessTokenArgs, CancellationToken?) [Post(\"token\")] [Header(\"Content-Type\", \"application/x-www-form-urlencoded\")] Task<AppIdentity> PostAccessTokenAsync(PostAppAccessTokenArgs args, CancellationToken? cancelToken = null) Parameters args PostAppAccessTokenArgs cancelToken CancellationToken? Returns Task<AppIdentity> PostAccessTokenAsync(PostUserAccessTokenArgs, CancellationToken?) [Post(\"token\")] [Header(\"Content-Type\", \"application/x-www-form-urlencoded\")] Task<UserIdentity> PostAccessTokenAsync(PostUserAccessTokenArgs args, CancellationToken? cancelToken = null) Parameters args PostUserAccessTokenArgs cancelToken CancellationToken? Returns Task<UserIdentity>"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchIdentityApi.PostRefreshTokenAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchIdentityApi.PostRefreshTokenAsync.html",
    "title": "Method PostRefreshTokenAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostRefreshTokenAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostRefreshTokenAsync(PostRefreshTokenArgs, CancellationToken?) [Post(\"token\")] [Header(\"Content-Type\", \"application/x-www-form-urlencoded\")] Task<UserIdentity> PostRefreshTokenAsync(PostRefreshTokenArgs args, CancellationToken? cancelToken = null) Parameters args PostRefreshTokenArgs cancelToken CancellationToken? Returns Task<UserIdentity>"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchIdentityApi.RevokeTokenAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchIdentityApi.RevokeTokenAsync.html",
    "title": "Method RevokeTokenAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method RevokeTokenAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll RevokeTokenAsync(PostRevokeTokenArgs, CancellationToken?) [Get(\"revoke\")] Task RevokeTokenAsync(PostRevokeTokenArgs args, CancellationToken? cancelToken = null) Parameters args PostRevokeTokenArgs cancelToken CancellationToken? Returns Task"
  },
  "api/AuxLabs.Twitch.Rest.Api.ITwitchIdentityApi.ValidateAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.ITwitchIdentityApi.ValidateAsync.html",
    "title": "Method ValidateAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method ValidateAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll ValidateAsync(string, CancellationToken?) [Get(\"validate\")] Task<AccessTokenInfo> ValidateAsync(string token, CancellationToken? cancelToken = null) Parameters token string cancelToken CancellationToken? Returns Task<AccessTokenInfo>"
  },
  "api/AuxLabs.Twitch.Rest.Api.RestError.Code.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.RestError.Code.html",
    "title": "Property Code | AuxLabs.Twitch Documentation",
    "keywords": "Property Code Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll Code [JsonInclude] [JsonPropertyName(\"status\")] public int? Code { get; } Property Value int?"
  },
  "api/AuxLabs.Twitch.Rest.Api.RestError.Error.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.RestError.Error.html",
    "title": "Property Error | AuxLabs.Twitch Documentation",
    "keywords": "Property Error Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll Error [JsonInclude] [JsonPropertyName(\"error\")] public string Error { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Api.RestError.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.RestError.html",
    "title": "Class RestError | AuxLabs.Twitch Documentation",
    "keywords": "Class RestError Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll public class RestError Inheritance object RestError Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Code Error Message"
  },
  "api/AuxLabs.Twitch.Rest.Api.RestError.Message.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.RestError.Message.html",
    "title": "Property Message | AuxLabs.Twitch Documentation",
    "keywords": "Property Message Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll Message [JsonInclude] [JsonPropertyName(\"message\")] public string Message { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchIdentityApiClient.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchIdentityApiClient.-ctor.html",
    "title": "Constructor TwitchIdentityApiClient | AuxLabs.Twitch Documentation",
    "keywords": "Constructor TwitchIdentityApiClient Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll TwitchIdentityApiClient() public TwitchIdentityApiClient() TwitchIdentityApiClient(string, string) public TwitchIdentityApiClient(string clientId, string clientSecret) Parameters clientId string clientSecret string TwitchIdentityApiClient(string) public TwitchIdentityApiClient(string url) Parameters url string TwitchIdentityApiClient(string, string, string) public TwitchIdentityApiClient(string clientId, string clientSecret, string url) Parameters clientId string clientSecret string url string"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchIdentityApiClient.ClientId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchIdentityApiClient.ClientId.html",
    "title": "Property ClientId | AuxLabs.Twitch Documentation",
    "keywords": "Property ClientId Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll ClientId Your app’s registered client ID. public string ClientId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchIdentityApiClient.ClientSecret.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchIdentityApiClient.ClientSecret.html",
    "title": "Property ClientSecret | AuxLabs.Twitch Documentation",
    "keywords": "Property ClientSecret Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll ClientSecret Your app’s registered client secret. public string ClientSecret { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchIdentityApiClient.Dispose.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchIdentityApiClient.Dispose.html",
    "title": "Method Dispose | AuxLabs.Twitch Documentation",
    "keywords": "Method Dispose Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchIdentityApiClient.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchIdentityApiClient.html",
    "title": "Class TwitchIdentityApiClient | AuxLabs.Twitch Documentation",
    "keywords": "Class TwitchIdentityApiClient Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll A client that implements Twitch's identity api for manging access tokens. public class TwitchIdentityApiClient : ITwitchIdentityApi, IDisposable Inheritance object TwitchIdentityApiClient Implements ITwitchIdentityApi IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TwitchIdentityApiClient() TwitchIdentityApiClient(string, string, string) TwitchIdentityApiClient(string, string) TwitchIdentityApiClient(string) Properties ClientId Your app’s registered client ID. ClientSecret Your app’s registered client secret. Identity Information about the currently authorized user. RefreshToken Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Dispose(bool) PostAccessTokenAsync(PostAppAccessTokenArgs, CancellationToken?) Get an access token that identifies you as the specified application PostAccessTokenAsync(PostUserAccessTokenArgs, CancellationToken?) Get an access token that identifies you as the specified user PostRefreshTokenAsync(PostRefreshTokenArgs, CancellationToken?) Refresh an expired user access token RevokeTokenAsync(PostRevokeTokenArgs, CancellationToken?) Revoke an access token that is no longer needed ValidateAsync(CancellationToken?) Get an app identity using the provided app credentials. ValidateAsync(string, CancellationToken?) Get information relating to a user access token ValidateAsync(string, string, CancellationToken?) Get information relating to a user access token"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchIdentityApiClient.Identity.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchIdentityApiClient.Identity.html",
    "title": "Property Identity | AuxLabs.Twitch Documentation",
    "keywords": "Property Identity Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll Identity Information about the currently authorized user. public AppIdentity Identity { get; } Property Value AppIdentity"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchIdentityApiClient.PostAccessTokenAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchIdentityApiClient.PostAccessTokenAsync.html",
    "title": "Method PostAccessTokenAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostAccessTokenAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostAccessTokenAsync(PostAppAccessTokenArgs, CancellationToken?) Get an access token that identifies you as the specified application public Task<AppIdentity> PostAccessTokenAsync(PostAppAccessTokenArgs args, CancellationToken? cancelToken = null) Parameters args PostAppAccessTokenArgs cancelToken CancellationToken? Returns Task<AppIdentity> PostAccessTokenAsync(PostUserAccessTokenArgs, CancellationToken?) Get an access token that identifies you as the specified user public Task<UserIdentity> PostAccessTokenAsync(PostUserAccessTokenArgs args, CancellationToken? cancelToken = null) Parameters args PostUserAccessTokenArgs cancelToken CancellationToken? Returns Task<UserIdentity>"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchIdentityApiClient.PostRefreshTokenAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchIdentityApiClient.PostRefreshTokenAsync.html",
    "title": "Method PostRefreshTokenAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostRefreshTokenAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostRefreshTokenAsync(PostRefreshTokenArgs, CancellationToken?) Refresh an expired user access token public Task<UserIdentity> PostRefreshTokenAsync(PostRefreshTokenArgs args, CancellationToken? cancelToken = null) Parameters args PostRefreshTokenArgs cancelToken CancellationToken? Returns Task<UserIdentity>"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchIdentityApiClient.RefreshToken.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchIdentityApiClient.RefreshToken.html",
    "title": "Property RefreshToken | AuxLabs.Twitch Documentation",
    "keywords": "Property RefreshToken Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll RefreshToken public string RefreshToken { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchIdentityApiClient.RevokeTokenAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchIdentityApiClient.RevokeTokenAsync.html",
    "title": "Method RevokeTokenAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method RevokeTokenAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll RevokeTokenAsync(PostRevokeTokenArgs, CancellationToken?) Revoke an access token that is no longer needed public Task RevokeTokenAsync(PostRevokeTokenArgs args, CancellationToken? cancelToken = null) Parameters args PostRevokeTokenArgs cancelToken CancellationToken? Returns Task"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchIdentityApiClient.ValidateAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchIdentityApiClient.ValidateAsync.html",
    "title": "Method ValidateAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method ValidateAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll ValidateAsync(CancellationToken?) Get an app identity using the provided app credentials. public Task<AppIdentity> ValidateAsync(CancellationToken? cancelToken = null) Parameters cancelToken CancellationToken? Returns Task<AppIdentity> ValidateAsync(string, string, CancellationToken?) Get information relating to a user access token public Task<AccessTokenInfo> ValidateAsync(string token, string refreshToken, CancellationToken? cancelToken = null) Parameters token string refreshToken string cancelToken CancellationToken? Returns Task<AccessTokenInfo> ValidateAsync(string, CancellationToken?) Get information relating to a user access token public Task<AccessTokenInfo> ValidateAsync(string token, CancellationToken? cancelToken = null) Parameters token string cancelToken CancellationToken? Returns Task<AccessTokenInfo>"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchJsonSerializerOptions.Default.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchJsonSerializerOptions.Default.html",
    "title": "Property Default | AuxLabs.Twitch Documentation",
    "keywords": "Property Default Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll Default public static JsonSerializerOptions Default { get; } Property Value JsonSerializerOptions"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchJsonSerializerOptions.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchJsonSerializerOptions.html",
    "title": "Class TwitchJsonSerializerOptions | AuxLabs.Twitch Documentation",
    "keywords": "Class TwitchJsonSerializerOptions Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll public static class TwitchJsonSerializerOptions Inheritance object TwitchJsonSerializerOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Default"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.-ctor.html",
    "title": "Constructor TwitchRestApiClient | AuxLabs.Twitch Documentation",
    "keywords": "Constructor TwitchRestApiClient Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll TwitchRestApiClient(TwitchRestApiConfig) public TwitchRestApiClient(TwitchRestApiConfig config = null) Parameters config TwitchRestApiConfig TwitchRestApiClient(string, TwitchRestApiConfig) public TwitchRestApiClient(string url, TwitchRestApiConfig config = null) Parameters url string config TwitchRestApiConfig"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.Authorization.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.Authorization.html",
    "title": "Property Authorization | AuxLabs.Twitch Documentation",
    "keywords": "Property Authorization Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll Authorization public AuthenticationHeaderValue Authorization { get; set; } Property Value AuthenticationHeaderValue"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.ClientId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.ClientId.html",
    "title": "Property ClientId | AuxLabs.Twitch Documentation",
    "keywords": "Property ClientId Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll ClientId public string ClientId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.DeleteBanAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.DeleteBanAsync.html",
    "title": "Method DeleteBanAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DeleteBanAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll DeleteBanAsync(DeleteBanArgs, CancellationToken?) Removes the ban or timeout that was placed on the specified user. public Task DeleteBanAsync(DeleteBanArgs args, CancellationToken? cancelToken = null) Parameters args DeleteBanArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the moderator:manage:banned_users scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Fordbidden, 409 Conflict MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.DeleteBlockAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.DeleteBlockAsync.html",
    "title": "Method DeleteBlockAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DeleteBlockAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll DeleteBlockAsync(DeleteBlockArgs, CancellationToken?) Removes the user from the broadcaster’s list of blocked users. public Task DeleteBlockAsync(DeleteBlockArgs args, CancellationToken? cancelToken = null) Parameters args DeleteBlockArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the user:manage:blocked_users scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.DeleteBlockedTermAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.DeleteBlockedTermAsync.html",
    "title": "Method DeleteBlockedTermAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DeleteBlockedTermAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll DeleteBlockedTermAsync(DeleteBlockedTermsArgs, CancellationToken?) Removes the word or phrase from the broadcaster’s list of blocked terms. public Task DeleteBlockedTermAsync(DeleteBlockedTermsArgs args, CancellationToken? cancelToken = null) Parameters args DeleteBlockedTermsArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the moderator:manage:blocked_terms scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Fordbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.DeleteChatMessagesAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.DeleteChatMessagesAsync.html",
    "title": "Method DeleteChatMessagesAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DeleteChatMessagesAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll DeleteChatMessagesAsync(DeleteMessageArgs, CancellationToken?) Removes a single chat message or all chat messages from the broadcaster’s chat room. public Task DeleteChatMessagesAsync(DeleteMessageArgs args, CancellationToken? cancelToken = null) Parameters args DeleteMessageArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the moderator:manage:chat_messages scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Fordbidden, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.DeleteEventSubscriptionAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.DeleteEventSubscriptionAsync.html",
    "title": "Method DeleteEventSubscriptionAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DeleteEventSubscriptionAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll DeleteEventSubscriptionAsync(DeleteEventSubscriptionArgs, CancellationToken?) Deletes an EventSub subscription. public Task DeleteEventSubscriptionAsync(DeleteEventSubscriptionArgs args, CancellationToken? cancelToken = null) Parameters args DeleteEventSubscriptionArgs cancelToken CancellationToken? Returns Task Remarks Webhook transports require a app access token and Websocket transports require a user access token. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.DeleteModeratorAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.DeleteModeratorAsync.html",
    "title": "Method DeleteModeratorAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DeleteModeratorAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll DeleteModeratorAsync(ManageModeratorArgs, CancellationToken?) Removes a moderator from the broadcaster’s chat room. public Task DeleteModeratorAsync(ManageModeratorArgs args, CancellationToken? cancelToken = null) Parameters args ManageModeratorArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the channel:manage:moderators scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 422 Unprocessable MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.DeleteRaidAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.DeleteRaidAsync.html",
    "title": "Method DeleteRaidAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DeleteRaidAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll DeleteRaidAsync(DeleteRaidArgs, CancellationToken?) Cancel a pending raid. public Task DeleteRaidAsync(DeleteRaidArgs args, CancellationToken? cancelToken = null) Parameters args DeleteRaidArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the channel:manage:raids scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.DeleteRewardAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.DeleteRewardAsync.html",
    "title": "Method DeleteRewardAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DeleteRewardAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll DeleteRewardAsync(ManageRewardArgs, CancellationToken?) Deletes a custom reward that the broadcaster created. Only the app that created a reward is able to delete it. public Task DeleteRewardAsync(ManageRewardArgs args, CancellationToken? cancelToken = null) Parameters args ManageRewardArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the channel:manage:redemptions scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.DeleteSegmentAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.DeleteSegmentAsync.html",
    "title": "Method DeleteSegmentAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DeleteSegmentAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll DeleteSegmentAsync(ManageSegmentArgs, CancellationToken?) Updates a scheduled broadcast segment. public Task DeleteSegmentAsync(ManageSegmentArgs args, CancellationToken? cancelToken = null) Parameters args ManageSegmentArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the channel:manage:schedule scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.DeleteVideoAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.DeleteVideoAsync.html",
    "title": "Method DeleteVideoAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DeleteVideoAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll DeleteVideoAsync(DeleteVideosArgs, CancellationToken?) Deletes one or more videos. You may delete past broadcasts, highlights, or uploads. public Task<TwitchResponse<string>> DeleteVideoAsync(DeleteVideosArgs args, CancellationToken? cancelToken = null) Parameters args DeleteVideosArgs cancelToken CancellationToken? Returns Task<TwitchResponse<string>> A collection of string that represent the deleted videos' ids. Remarks Requires a user access token with the channel:manage:videos scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.DeleteVipAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.DeleteVipAsync.html",
    "title": "Method DeleteVipAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DeleteVipAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll DeleteVipAsync(ManageVipArgs, CancellationToken?) Removes the specified user as a VIP in the broadcaster’s channel. public Task DeleteVipAsync(ManageVipArgs args, CancellationToken? cancelToken = null) Parameters args ManageVipArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the channel:manage:vips scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, 422 Unprocessable MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.Dispose.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.Dispose.html",
    "title": "Method Dispose | AuxLabs.Twitch Documentation",
    "keywords": "Method Dispose Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetActiveExtensionsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetActiveExtensionsAsync.html",
    "title": "Method GetActiveExtensionsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetActiveExtensionsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetActiveExtensionsAsync(GetActiveExtensionsArgs, CancellationToken?) Gets a list of all extensions (both active and inactive) that the broadcaster has installed. public Task<TwitchResponse<ExtensionMap>> GetActiveExtensionsAsync(GetActiveExtensionsArgs args, CancellationToken? cancelToken = null) Parameters args GetActiveExtensionsArgs cancelToken CancellationToken? Returns Task<TwitchResponse<ExtensionMap>> A single ExtensionMap object. Remarks Requires an app access token or a user access token with the user:read:broadcast or user:edit:broadcast scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetAutomodSettingsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetAutomodSettingsAsync.html",
    "title": "Method GetAutomodSettingsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetAutomodSettingsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetAutomodSettingsAsync(AutomodSettingsArgs, CancellationToken?) Gets the broadcaster’s AutoMod settings. public Task<TwitchResponse<AutomodSettings>> GetAutomodSettingsAsync(AutomodSettingsArgs args, CancellationToken? cancelToken = null) Parameters args AutomodSettingsArgs cancelToken CancellationToken? Returns Task<TwitchResponse<AutomodSettings>> A single AutomodSettings object. Remarks Requires a user access token with the moderator:read:automod_settings scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetBadgesAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetBadgesAsync.html",
    "title": "Method GetBadgesAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetBadgesAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetBadgesAsync(GetBadgesArgs, CancellationToken?) Gets the broadcaster’s list of custom chat badges. public Task<TwitchResponse<BadgeSet>> GetBadgesAsync(GetBadgesArgs args, CancellationToken? cancelToken = null) Parameters args GetBadgesArgs cancelToken CancellationToken? Returns Task<TwitchResponse<BadgeSet>> A collection of BadgeSet objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized GetBadgesAsync(CancellationToken?) Gets Twitch’s list of chat badges, which users may use in any channel’s chat room. public Task<TwitchResponse<BadgeSet>> GetBadgesAsync(CancellationToken? cancelToken = null) Parameters cancelToken CancellationToken? Returns Task<TwitchResponse<BadgeSet>> A collection of BadgeSet objects. Exceptions TwitchRestException 401 Unauthorized"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetBannedUsersAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetBannedUsersAsync.html",
    "title": "Method GetBannedUsersAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetBannedUsersAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetBannedUsersAsync(GetBannedUsersArgs, CancellationToken?) Gets all users that the broadcaster banned or put in a timeout. public Task<TwitchMetaResponse<BannedUser>> GetBannedUsersAsync(GetBannedUsersArgs args, CancellationToken? cancelToken = null) Parameters args GetBannedUsersArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<BannedUser>> A single BannedUser object. Remarks Requires a user access token with the moderation:read or moderator:manage:banned_users scopes. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetBitsLeaderboardAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetBitsLeaderboardAsync.html",
    "title": "Method GetBitsLeaderboardAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetBitsLeaderboardAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetBitsLeaderboardAsync(GetBitsLeaderboardArgs, CancellationToken?) Gets the Bits leaderboard for the authenticated broadcaster. public Task<TwitchMetaResponse<BitsUser>> GetBitsLeaderboardAsync(GetBitsLeaderboardArgs args, CancellationToken? cancelToken = null) Parameters args GetBitsLeaderboardArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<BitsUser>> A collection of BitsUser objects. Remarks Requires a user access token with the bits:read scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetBlockedTermsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetBlockedTermsAsync.html",
    "title": "Method GetBlockedTermsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetBlockedTermsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetBlockedTermsAsync(GetBlockedTermsArgs, CancellationToken?) Gets the broadcaster’s list of non-private, blocked words or phrases. public Task<TwitchMetaResponse<BlockedTerm>> GetBlockedTermsAsync(GetBlockedTermsArgs args, CancellationToken? cancelToken = null) Parameters args GetBlockedTermsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<BlockedTerm>> A collection of BlockedTerm objects. Remarks Requires a user access token with the moderator:read:blocked_terms or moderator:manage:blocked_terms scopes. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Fordbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetBlocksAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetBlocksAsync.html",
    "title": "Method GetBlocksAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetBlocksAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetBlocksAsync(GetBlocksArgs, CancellationToken?) Gets the list of users that the broadcaster has blocked. public Task<TwitchMetaResponse<SimpleUser>> GetBlocksAsync(GetBlocksArgs args, CancellationToken? cancelToken = null) Parameters args GetBlocksArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<SimpleUser>> A collection of SimpleUser objects. Remarks Requires a user access token with the user:read:blocked_users scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetBroadcastKeyAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetBroadcastKeyAsync.html",
    "title": "Method GetBroadcastKeyAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetBroadcastKeyAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetBroadcastKeyAsync(GetBroadcastKeyArgs, CancellationToken?) Gets the channel’s broadcast key. public Task<TwitchResponse<string>> GetBroadcastKeyAsync(GetBroadcastKeyArgs args, CancellationToken? cancelToken = null) Parameters args GetBroadcastKeyArgs cancelToken CancellationToken? Returns Task<TwitchResponse<string>> A single string object that represents the broadcaster's stream key. Remarks Requires a user access token with the channel:read:stream_key scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetBroadcastMarkersAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetBroadcastMarkersAsync.html",
    "title": "Method GetBroadcastMarkersAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetBroadcastMarkersAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetBroadcastMarkersAsync(GetBroadcastMarkersArgs, CancellationToken?) Gets a list of markers from the user’s most recent stream or from the specified VOD/video. public Task<TwitchMetaResponse<BroadcastMarker>> GetBroadcastMarkersAsync(GetBroadcastMarkersArgs args, CancellationToken? cancelToken = null) Parameters args GetBroadcastMarkersArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<BroadcastMarker>> A collection of BroadcastMarker objects. Remarks Requires a user access token with the user:read:broadcast or channel:manage:broadcast scopes. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetBroadcastsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetBroadcastsAsync.html",
    "title": "Method GetBroadcastsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetBroadcastsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetBroadcastsAsync(GetBroadcastsArgs, CancellationToken?) Gets a list of all broadcasts. public Task<TwitchMetaResponse<Broadcast>> GetBroadcastsAsync(GetBroadcastsArgs args, CancellationToken? cancelToken = null) Parameters args GetBroadcastsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Broadcast>> A collection of Broadcast objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetCategoriesAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetCategoriesAsync.html",
    "title": "Method GetCategoriesAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetCategoriesAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetCategoriesAsync(SearchCategoriesArgs, CancellationToken?) Gets the games or categories that match the specified query. public Task<TwitchMetaResponse<Category>> GetCategoriesAsync(SearchCategoriesArgs args, CancellationToken? cancelToken = null) Parameters args SearchCategoriesArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Category>> A collection of Category objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetChannelEditorsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetChannelEditorsAsync.html",
    "title": "Method GetChannelEditorsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetChannelEditorsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetChannelEditorsAsync(GetChannelEditorsArgs, CancellationToken?) Gets the broadcaster’s list editors. public Task<TwitchResponse<ChannelEditor>> GetChannelEditorsAsync(GetChannelEditorsArgs args, CancellationToken? cancelToken = null) Parameters args GetChannelEditorsArgs cancelToken CancellationToken? Returns Task<TwitchResponse<ChannelEditor>> A collection of ChannelEditor objects. Remarks Requires a user access token with the channel:read:editors scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetChannelsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetChannelsAsync.html",
    "title": "Method GetChannelsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetChannelsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetChannelsAsync(GetChannelsArgs, CancellationToken?) Gets information about one or more channels. public Task<TwitchResponse<Channel>> GetChannelsAsync(GetChannelsArgs args, CancellationToken? cancelToken = null) Parameters args GetChannelsArgs cancelToken CancellationToken? Returns Task<TwitchResponse<Channel>> A collection of Channel objects. Exceptions TwitchRestException 400 Bad Request, 404 Not Found GetChannelsAsync(SearchChannelsArgs, CancellationToken?) Gets the channels that match the specified query and have streamed content within the past 6 months. public Task<TwitchMetaResponse<ChannelBroadcast>> GetChannelsAsync(SearchChannelsArgs args, CancellationToken? cancelToken = null) Parameters args SearchChannelsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<ChannelBroadcast>> A collection of ChannelBroadcast objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetCharityCampaignAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetCharityCampaignAsync.html",
    "title": "Method GetCharityCampaignAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetCharityCampaignAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetCharityCampaignAsync(GetCharityCampaignArgs, CancellationToken?) Gets information about the charity campaign that a broadcaster is running. public Task<TwitchResponse<CharityCampaign>> GetCharityCampaignAsync(GetCharityCampaignArgs args, CancellationToken? cancelToken = null) Parameters args GetCharityCampaignArgs cancelToken CancellationToken? Returns Task<TwitchResponse<CharityCampaign>> A CharityCampaign object. Remarks Requires a user access token with the channel:read:charity scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetCharityDonationsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetCharityDonationsAsync.html",
    "title": "Method GetCharityDonationsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetCharityDonationsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetCharityDonationsAsync(GetCharityDonationsArgs, CancellationToken?) Gets the list of donations that users have made to the broadcaster’s active charity campaign. public Task<TwitchMetaResponse<CharityDonation>> GetCharityDonationsAsync(GetCharityDonationsArgs args, CancellationToken? cancelToken = null) Parameters args GetCharityDonationsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<CharityDonation>> A CharityDonation object. Remarks Requires a user access token with the channel:read:charity scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetChatSettingsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetChatSettingsAsync.html",
    "title": "Method GetChatSettingsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetChatSettingsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetChatSettingsAsync(GetChatSettingsArgs, CancellationToken?) Gets the broadcaster’s chat settings. public Task<TwitchResponse<ChatSettings>> GetChatSettingsAsync(GetChatSettingsArgs args, CancellationToken? cancelToken = null) Parameters args GetChatSettingsArgs cancelToken CancellationToken? Returns Task<TwitchResponse<ChatSettings>> A single ChatSettings object. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetChattersAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetChattersAsync.html",
    "title": "Method GetChattersAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetChattersAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetChattersAsync(GetChattersArgs, CancellationToken?) Gets the list of users that are connected to the broadcaster’s chat session. public Task<TwitchMetaResponse<SimpleUser>> GetChattersAsync(GetChattersArgs args, CancellationToken? cancelToken = null) Parameters args GetChattersArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<SimpleUser>> A collection of SimpleUser objects. Remarks Requires a user access token with the moderator:read:chatters scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetCheermotesAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetCheermotesAsync.html",
    "title": "Method GetCheermotesAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetCheermotesAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetCheermotesAsync(GetCheermotesArgs, CancellationToken?) Gets a collection of Cheermotes that can be used to cheer bits in any bits-enabled channel. public Task<TwitchResponse<Cheermote>> GetCheermotesAsync(GetCheermotesArgs args, CancellationToken? cancelToken = null) Parameters args GetCheermotesArgs cancelToken CancellationToken? Returns Task<TwitchResponse<Cheermote>> A collection of Cheermote objects."
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetClipsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetClipsAsync.html",
    "title": "Method GetClipsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetClipsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetClipsAsync(GetClipsArgs, CancellationToken?) Gets one or more video clips that were captured from streams. public Task<TwitchMetaResponse<Clip>> GetClipsAsync(GetClipsArgs args, CancellationToken? cancelToken = null) Parameters args GetClipsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Clip>> A collection of Clip objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetCurrentTrackAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetCurrentTrackAsync.html",
    "title": "Method GetCurrentTrackAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetCurrentTrackAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetCurrentTrackAsync(GetCurrentTrackArgs, CancellationToken?) Gets the Soundtrack track that the broadcaster is playing. public Task<TwitchResponse<Soundtrack>> GetCurrentTrackAsync(GetCurrentTrackArgs args, CancellationToken? cancelToken = null) Parameters args GetCurrentTrackArgs cancelToken CancellationToken? Returns Task<TwitchResponse<Soundtrack>> A single Soundtrack object. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetDropsStatusAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetDropsStatusAsync.html",
    "title": "Method GetDropsStatusAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetDropsStatusAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetDropsStatusAsync(GetDropStatusArgs, CancellationToken?) Gets an organization’s list of entitlements that have been granted to a game, a user, or both. public Task<TwitchMetaResponse<Entitlement>> GetDropsStatusAsync(GetDropStatusArgs args, CancellationToken? cancelToken = null) Parameters args GetDropStatusArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Entitlement>> A collection of Entitlement objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetEmotesAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetEmotesAsync.html",
    "title": "Method GetEmotesAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetEmotesAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetEmotesAsync(GetEmotesArgs, CancellationToken?) Gets the broadcaster’s list of custom emotes. public Task<TwitchResponse<Emote>> GetEmotesAsync(GetEmotesArgs args, CancellationToken? cancelToken = null) Parameters args GetEmotesArgs cancelToken CancellationToken? Returns Task<TwitchResponse<Emote>> A collection of Emote objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized GetEmotesAsync(CancellationToken?) Gets the list of global emotes. public Task<TwitchResponse<GlobalEmote>> GetEmotesAsync(CancellationToken? cancelToken = null) Parameters cancelToken CancellationToken? Returns Task<TwitchResponse<GlobalEmote>> A collection of GlobalEmote objects. Exceptions TwitchRestException 401 Unauthorized"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetEmoteSetsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetEmoteSetsAsync.html",
    "title": "Method GetEmoteSetsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetEmoteSetsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetEmoteSetsAsync(GetEmoteSetsArgs, CancellationToken?) Gets emotes for one or more specified emote sets. public Task<TwitchResponse<Emote>> GetEmoteSetsAsync(GetEmoteSetsArgs args, CancellationToken? cancelToken = null) Parameters args GetEmoteSetsArgs cancelToken CancellationToken? Returns Task<TwitchResponse<Emote>> A collection of Emote objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetEventSubscriptionsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetEventSubscriptionsAsync.html",
    "title": "Method GetEventSubscriptionsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetEventSubscriptionsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetEventSubscriptionsAsync(GetEventSubscriptionsArgs, CancellationToken?) Gets a collection of EventSub subscriptions that the client in the access token created. public Task<EventSubResponse> GetEventSubscriptionsAsync(GetEventSubscriptionsArgs args, CancellationToken? cancelToken = null) Parameters args GetEventSubscriptionsArgs cancelToken CancellationToken? Returns Task<EventSubResponse> An EventSubResponse object. Remarks Webhook transports require a app access token and Websocket transports require a user access token. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetExtensionAnalyticsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetExtensionAnalyticsAsync.html",
    "title": "Method GetExtensionAnalyticsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetExtensionAnalyticsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetExtensionAnalyticsAsync(GetExtensionAnalyticsArgs, CancellationToken?) Gets an analytics report for one or more extensions. The response contains the URLs used to download the reports (CSV files). public Task<TwitchMetaResponse<ExtensionAnalytic>> GetExtensionAnalyticsAsync(GetExtensionAnalyticsArgs args, CancellationToken? cancelToken = null) Parameters args GetExtensionAnalyticsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<ExtensionAnalytic>> A collection of ExtensionAnalytic objects. Remarks Requires a user access token with the analytics:read:extensions scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetExtensionTransactionsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetExtensionTransactionsAsync.html",
    "title": "Method GetExtensionTransactionsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetExtensionTransactionsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetExtensionTransactionsAsync(GetExtensionTransactionsArgs, CancellationToken?) Gets an extension’s list of transactions. public Task<TwitchMetaResponse<ExtensionTransaction>> GetExtensionTransactionsAsync(GetExtensionTransactionsArgs args, CancellationToken? cancelToken = null) Parameters args GetExtensionTransactionsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<ExtensionTransaction>> A collection of ExtensionTransaction objects. Remarks Requires an app access token. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetFollowedBroadcastsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetFollowedBroadcastsAsync.html",
    "title": "Method GetFollowedBroadcastsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetFollowedBroadcastsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetFollowedBroadcastsAsync(GetFollowedBroadcastsArgs, CancellationToken?) Gets the list of broadcasters that the user follows and that are streaming live. public Task<TwitchMetaResponse<Broadcast>> GetFollowedBroadcastsAsync(GetFollowedBroadcastsArgs args, CancellationToken? cancelToken = null) Parameters args GetFollowedBroadcastsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Broadcast>> A collection of Broadcast objects. Remarks Requires a user access token with the user:read:follows scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetFollowedChannelsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetFollowedChannelsAsync.html",
    "title": "Method GetFollowedChannelsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetFollowedChannelsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetFollowedChannelsAsync(GetFollowedChannelsArgs, CancellationToken?) Gets a list of broadcasters that the specified user follows. public Task<TwitchMetaResponse<FollowedChannel>> GetFollowedChannelsAsync(GetFollowedChannelsArgs args, CancellationToken? cancelToken = null) Parameters args GetFollowedChannelsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<FollowedChannel>> A collection of FollowedChannel objects. Remarks Requires a user access token with the user:read:follows scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetFollowersAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetFollowersAsync.html",
    "title": "Method GetFollowersAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetFollowersAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetFollowersAsync(GetFollowersArgs, CancellationToken?) Gets a list of users that follow the specified broadcaster. public Task<TwitchMetaResponse<Follower>> GetFollowersAsync(GetFollowersArgs args, CancellationToken? cancelToken = null) Parameters args GetFollowersArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Follower>> A collection of Follower objects. Remarks Requires a user access token with the moderator:read:followers scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetGameAnalyticsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetGameAnalyticsAsync.html",
    "title": "Method GetGameAnalyticsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetGameAnalyticsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetGameAnalyticsAsync(GetGameAnalyticsArgs, CancellationToken?) Gets an analytics report for one or more games. The response contains the URLs used to download the reports (CSV files). public Task<TwitchMetaResponse<GameAnalytic>> GetGameAnalyticsAsync(GetGameAnalyticsArgs args, CancellationToken? cancelToken = null) Parameters args GetGameAnalyticsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<GameAnalytic>> A collection of GameAnalytic objects. Remarks Requires a user access token with the analytics:read:games scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetGamesAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetGamesAsync.html",
    "title": "Method GetGamesAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetGamesAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetGamesAsync(GetGamesArgs, CancellationToken?) Gets information about specified categories or games. public Task<TwitchMetaResponse<Game>> GetGamesAsync(GetGamesArgs args, CancellationToken? cancelToken = null) Parameters args GetGamesArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Game>> A collection of Game objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetGoalsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetGoalsAsync.html",
    "title": "Method GetGoalsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetGoalsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetGoalsAsync(GetGoalsArgs, CancellationToken?) Gets the broadcaster’s list of active goals. public Task<TwitchResponse<Goal>> GetGoalsAsync(GetGoalsArgs args, CancellationToken? cancelToken = null) Parameters args GetGoalsArgs cancelToken CancellationToken? Returns Task<TwitchResponse<Goal>> A collection of Goal objects. Remarks Requires a user access token with the channel:read:goals scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetHypetrainEventsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetHypetrainEventsAsync.html",
    "title": "Method GetHypetrainEventsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetHypetrainEventsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetHypetrainEventsAsync(GetHypeTrainsArgs, CancellationToken?) Gets information about the broadcaster’s current or most recent Hype Train event. public Task<TwitchMetaResponse<HypeTrainInfo>> GetHypetrainEventsAsync(GetHypeTrainsArgs args, CancellationToken? cancelToken = null) Parameters args GetHypeTrainsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<HypeTrainInfo>> A collection of HypeTrainInfo objects. Remarks Requires a user access token with the channel:read:hype_train scope. Exceptions TwitchRestException 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetModeratorsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetModeratorsAsync.html",
    "title": "Method GetModeratorsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetModeratorsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetModeratorsAsync(GetModeratorsArgs, CancellationToken?) Gets all users allowed to moderate the broadcaster’s chat room. public Task<TwitchMetaResponse<SimpleUser>> GetModeratorsAsync(GetModeratorsArgs args, CancellationToken? cancelToken = null) Parameters args GetModeratorsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<SimpleUser>> A collection of SimpleUser objects. Remarks Requires a user access token with the moderation:read or channel:manage:moderators scopes. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Fordbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetPlaylistsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetPlaylistsAsync.html",
    "title": "Method GetPlaylistsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetPlaylistsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetPlaylistsAsync(GetPlaylistsArgs, CancellationToken?) Gets a list of Soundtrack playlists. public Task<TwitchMetaResponse<Playlist>> GetPlaylistsAsync(GetPlaylistsArgs args, CancellationToken? cancelToken = null) Parameters args GetPlaylistsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Playlist>> A collection of Track objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetPlaylistTracksAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetPlaylistTracksAsync.html",
    "title": "Method GetPlaylistTracksAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetPlaylistTracksAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetPlaylistTracksAsync(GetPlaylistTracksArgs, CancellationToken?) Gets the Soundtrack playlist’s tracks. public Task<TwitchMetaResponse<Track>> GetPlaylistTracksAsync(GetPlaylistTracksArgs args, CancellationToken? cancelToken = null) Parameters args GetPlaylistTracksArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Track>> A collection of Track objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetPollAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetPollAsync.html",
    "title": "Method GetPollAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetPollAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetPollAsync(GetPredictionsArgs, CancellationToken?) Gets a list of polls that the broadcaster created. public Task<TwitchMetaResponse<Poll>> GetPollAsync(GetPredictionsArgs args, CancellationToken? cancelToken = null) Parameters args GetPredictionsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Poll>> A collection of Poll objects. Remarks Requires a user access token with the channel:read:polls or channel:manage:polls scopes. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetPredictionAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetPredictionAsync.html",
    "title": "Method GetPredictionAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetPredictionAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetPredictionAsync(GetPredictionsArgs, CancellationToken?) Gets a list of Channel Points Predictions that the broadcaster created. public Task<TwitchMetaResponse<Prediction>> GetPredictionAsync(GetPredictionsArgs args, CancellationToken? cancelToken = null) Parameters args GetPredictionsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Prediction>> A collection of Prediction objects. Remarks Requires a user access token with the channel:read:predictions or channel:manage:predictions scopes. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetRewardRedemptionAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetRewardRedemptionAsync.html",
    "title": "Method GetRewardRedemptionAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetRewardRedemptionAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetRewardRedemptionAsync(GetRedemptionsArgs, CancellationToken?) Gets a list of redemptions for the specified custom reward. Only the app that created a reward is able to see it's redemptions. public Task<TwitchResponse<Redemption>> GetRewardRedemptionAsync(GetRedemptionsArgs args, CancellationToken? cancelToken = null) Parameters args GetRedemptionsArgs cancelToken CancellationToken? Returns Task<TwitchResponse<Redemption>> A collection of Redemption objects. Remarks Requires a user access token with either the channel:read:redemptions or channel:manage:redemptions scopes. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetRewardsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetRewardsAsync.html",
    "title": "Method GetRewardsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetRewardsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetRewardsAsync(GetRewardArgs, CancellationToken?) Gets a list of custom rewards that the specified broadcaster created. public Task<TwitchResponse<Reward>> GetRewardsAsync(GetRewardArgs args, CancellationToken? cancelToken = null) Parameters args GetRewardArgs cancelToken CancellationToken? Returns Task<TwitchResponse<Reward>> A collection of Reward objects. Remarks Requires a user access token with either the channel:read:redemptions or channel:manage:redemptions scopes. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetScheduleAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetScheduleAsync.html",
    "title": "Method GetScheduleAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetScheduleAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetScheduleAsync(GetScheduleArgs, CancellationToken?) Gets the broadcaster’s streaming schedule. public Task<TwitchMetaResponse<Schedule>> GetScheduleAsync(GetScheduleArgs args, CancellationToken? cancelToken = null) Parameters args GetScheduleArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Schedule>> A single Schedule object with a collection of ScheduleSegment objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetShieldModeAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetShieldModeAsync.html",
    "title": "Method GetShieldModeAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetShieldModeAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetShieldModeAsync(GetShieldModeArgs, CancellationToken?) Activates or deactivates the broadcaster’s Shield Mode. public Task<TwitchResponse<ShieldMode>> GetShieldModeAsync(GetShieldModeArgs args, CancellationToken? cancelToken = null) Parameters args GetShieldModeArgs cancelToken CancellationToken? Returns Task<TwitchResponse<ShieldMode>> A single ShieldMode object. Remarks Requires a user access token with the moderator:read:shield_mode or moderator:manage:shield_mode scopes. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetSubscriberAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetSubscriberAsync.html",
    "title": "Method GetSubscriberAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetSubscriberAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetSubscriberAsync(GetSubscriberArgs, CancellationToken?) Checks whether the user subscribes to the broadcaster’s channel. public Task<TwitchResponse<SimpleSubscription>> GetSubscriberAsync(GetSubscriberArgs args, CancellationToken? cancelToken = null) Parameters args GetSubscriberArgs cancelToken CancellationToken? Returns Task<TwitchResponse<SimpleSubscription>> A single SimpleSubscription object. Remarks Requires a user access token or app access token with the channel:read:subscriptions scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetSubscriptionsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetSubscriptionsAsync.html",
    "title": "Method GetSubscriptionsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetSubscriptionsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetSubscriptionsAsync(GetSubscriptionsArgs, CancellationToken?) Updates the specified user’s information. public Task<TwitchMetaResponse<Subscription>> GetSubscriptionsAsync(GetSubscriptionsArgs args, CancellationToken? cancelToken = null) Parameters args GetSubscriptionsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Subscription>> A collection of Subscription objects. Remarks Requires a user access token or app access token with the channel:read:subscriptions scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetTeamAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetTeamAsync.html",
    "title": "Method GetTeamAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetTeamAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetTeamAsync(GetTeamArgs, CancellationToken?) Gets information about the specified Twitch team. public Task<TwitchResponse<Team>> GetTeamAsync(GetTeamArgs args, CancellationToken? cancelToken = null) Parameters args GetTeamArgs cancelToken CancellationToken? Returns Task<TwitchResponse<Team>> A single Team object. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetTeamsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetTeamsAsync.html",
    "title": "Method GetTeamsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetTeamsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetTeamsAsync(GetChannelTeamsArgs, CancellationToken?) Gets information about one or more users. public Task<TwitchResponse<ChannelTeam>> GetTeamsAsync(GetChannelTeamsArgs args, CancellationToken? cancelToken = null) Parameters args GetChannelTeamsArgs cancelToken CancellationToken? Returns Task<TwitchResponse<ChannelTeam>> A collection of ChannelTeam objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetTopGamesAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetTopGamesAsync.html",
    "title": "Method GetTopGamesAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetTopGamesAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetTopGamesAsync(GetTopGamesArgs, CancellationToken?) Gets information about all broadcasts on Twitch. public Task<TwitchMetaResponse<Game>> GetTopGamesAsync(GetTopGamesArgs args, CancellationToken? cancelToken = null) Parameters args GetTopGamesArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Game>> A collection of Game objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetUserChatColorsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetUserChatColorsAsync.html",
    "title": "Method GetUserChatColorsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetUserChatColorsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetUserChatColorsAsync(GetUserColorArgs, CancellationToken?) Gets the color used for the user’s name in chat. public Task<TwitchResponse<SimpleChatUser>> GetUserChatColorsAsync(GetUserColorArgs args, CancellationToken? cancelToken = null) Parameters args GetUserColorArgs cancelToken CancellationToken? Returns Task<TwitchResponse<SimpleChatUser>> A collection of SimpleChatUser objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetUserExtensionsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetUserExtensionsAsync.html",
    "title": "Method GetUserExtensionsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetUserExtensionsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetUserExtensionsAsync(CancellationToken?) Gets a list of all extensions (both active and inactive) that the broadcaster has installed. public Task<TwitchResponse<Extension>> GetUserExtensionsAsync(CancellationToken? cancelToken = null) Parameters cancelToken CancellationToken? Returns Task<TwitchResponse<Extension>> A collection of Extension objects. Remarks Requires a user access token with the user:read:broadcast or user:edit:broadcast scope. Inactive extensions are only included with the user:edit:broadcast scope. Exceptions TwitchRestException 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetUsersAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetUsersAsync.html",
    "title": "Method GetUsersAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetUsersAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetUsersAsync(GetUsersArgs, CancellationToken?) Gets information about one or more users. public Task<TwitchResponse<User>> GetUsersAsync(GetUsersArgs args, CancellationToken? cancelToken = null) Parameters args GetUsersArgs cancelToken CancellationToken? Returns Task<TwitchResponse<User>> A collection of User objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetVideosAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetVideosAsync.html",
    "title": "Method GetVideosAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetVideosAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetVideosAsync(GetVideosArgs, CancellationToken?) Gets information about one or more published videos. public Task<TwitchMetaResponse<Video>> GetVideosAsync(GetVideosArgs args, CancellationToken? cancelToken = null) Parameters args GetVideosArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<Video>> A collection of Video objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetVipsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.GetVipsAsync.html",
    "title": "Method GetVipsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetVipsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll GetVipsAsync(GetVipsArgs, CancellationToken?) Gets a list of the broadcaster’s VIPs. public Task<TwitchMetaResponse<SimpleUser>> GetVipsAsync(GetVipsArgs args, CancellationToken? cancelToken = null) Parameters args GetVipsArgs cancelToken CancellationToken? Returns Task<TwitchMetaResponse<SimpleUser>> A collection of SimpleUser objects. Remarks Requires a user access token with the moderation:read or channel:manage:moderators scopes. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.html",
    "title": "Class TwitchRestApiClient | AuxLabs.Twitch Documentation",
    "keywords": "Class TwitchRestApiClient Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll public class TwitchRestApiClient : ITwitchApi, IDisposable Inheritance object TwitchRestApiClient Implements ITwitchApi IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TwitchRestApiClient(TwitchRestApiConfig) TwitchRestApiClient(string, TwitchRestApiConfig) Properties Authorization ClientId Identity Methods DeleteBanAsync(DeleteBanArgs, CancellationToken?) Removes the ban or timeout that was placed on the specified user. DeleteBlockAsync(DeleteBlockArgs, CancellationToken?) Removes the user from the broadcaster’s list of blocked users. DeleteBlockedTermAsync(DeleteBlockedTermsArgs, CancellationToken?) Removes the word or phrase from the broadcaster’s list of blocked terms. DeleteChatMessagesAsync(DeleteMessageArgs, CancellationToken?) Removes a single chat message or all chat messages from the broadcaster’s chat room. DeleteEventSubscriptionAsync(DeleteEventSubscriptionArgs, CancellationToken?) Deletes an EventSub subscription. DeleteModeratorAsync(ManageModeratorArgs, CancellationToken?) Removes a moderator from the broadcaster’s chat room. DeleteRaidAsync(DeleteRaidArgs, CancellationToken?) Cancel a pending raid. DeleteRewardAsync(ManageRewardArgs, CancellationToken?) Deletes a custom reward that the broadcaster created. Only the app that created a reward is able to delete it. DeleteSegmentAsync(ManageSegmentArgs, CancellationToken?) Updates a scheduled broadcast segment. DeleteVideoAsync(DeleteVideosArgs, CancellationToken?) Deletes one or more videos. You may delete past broadcasts, highlights, or uploads. DeleteVipAsync(ManageVipArgs, CancellationToken?) Removes the specified user as a VIP in the broadcaster’s channel. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Dispose(bool) GetActiveExtensionsAsync(GetActiveExtensionsArgs, CancellationToken?) Gets a list of all extensions (both active and inactive) that the broadcaster has installed. GetAutomodSettingsAsync(AutomodSettingsArgs, CancellationToken?) Gets the broadcaster’s AutoMod settings. GetBadgesAsync(GetBadgesArgs, CancellationToken?) Gets the broadcaster’s list of custom chat badges. GetBadgesAsync(CancellationToken?) Gets Twitch’s list of chat badges, which users may use in any channel’s chat room. GetBannedUsersAsync(GetBannedUsersArgs, CancellationToken?) Gets all users that the broadcaster banned or put in a timeout. GetBitsLeaderboardAsync(GetBitsLeaderboardArgs, CancellationToken?) Gets the Bits leaderboard for the authenticated broadcaster. GetBlockedTermsAsync(GetBlockedTermsArgs, CancellationToken?) Gets the broadcaster’s list of non-private, blocked words or phrases. GetBlocksAsync(GetBlocksArgs, CancellationToken?) Gets the list of users that the broadcaster has blocked. GetBroadcastKeyAsync(GetBroadcastKeyArgs, CancellationToken?) Gets the channel’s broadcast key. GetBroadcastMarkersAsync(GetBroadcastMarkersArgs, CancellationToken?) Gets a list of markers from the user’s most recent stream or from the specified VOD/video. GetBroadcastsAsync(GetBroadcastsArgs, CancellationToken?) Gets a list of all broadcasts. GetCategoriesAsync(SearchCategoriesArgs, CancellationToken?) Gets the games or categories that match the specified query. GetChannelEditorsAsync(GetChannelEditorsArgs, CancellationToken?) Gets the broadcaster’s list editors. GetChannelsAsync(GetChannelsArgs, CancellationToken?) Gets information about one or more channels. GetChannelsAsync(SearchChannelsArgs, CancellationToken?) Gets the channels that match the specified query and have streamed content within the past 6 months. GetCharityCampaignAsync(GetCharityCampaignArgs, CancellationToken?) Gets information about the charity campaign that a broadcaster is running. GetCharityDonationsAsync(GetCharityDonationsArgs, CancellationToken?) Gets the list of donations that users have made to the broadcaster’s active charity campaign. GetChatSettingsAsync(GetChatSettingsArgs, CancellationToken?) Gets the broadcaster’s chat settings. GetChattersAsync(GetChattersArgs, CancellationToken?) Gets the list of users that are connected to the broadcaster’s chat session. GetCheermotesAsync(GetCheermotesArgs, CancellationToken?) Gets a collection of Cheermotes that can be used to cheer bits in any bits-enabled channel. GetClipsAsync(GetClipsArgs, CancellationToken?) Gets one or more video clips that were captured from streams. GetCurrentTrackAsync(GetCurrentTrackArgs, CancellationToken?) Gets the Soundtrack track that the broadcaster is playing. GetDropsStatusAsync(GetDropStatusArgs, CancellationToken?) Gets an organization’s list of entitlements that have been granted to a game, a user, or both. GetEmotesAsync(GetEmotesArgs, CancellationToken?) Gets the broadcaster’s list of custom emotes. GetEmotesAsync(CancellationToken?) Gets the list of global emotes. GetEmoteSetsAsync(GetEmoteSetsArgs, CancellationToken?) Gets emotes for one or more specified emote sets. GetEventSubscriptionsAsync(GetEventSubscriptionsArgs, CancellationToken?) Gets a collection of EventSub subscriptions that the client in the access token created. GetExtensionAnalyticsAsync(GetExtensionAnalyticsArgs, CancellationToken?) Gets an analytics report for one or more extensions. The response contains the URLs used to download the reports (CSV files). GetExtensionTransactionsAsync(GetExtensionTransactionsArgs, CancellationToken?) Gets an extension’s list of transactions. GetFollowedBroadcastsAsync(GetFollowedBroadcastsArgs, CancellationToken?) Gets the list of broadcasters that the user follows and that are streaming live. GetFollowedChannelsAsync(GetFollowedChannelsArgs, CancellationToken?) Gets a list of broadcasters that the specified user follows. GetFollowersAsync(GetFollowersArgs, CancellationToken?) Gets a list of users that follow the specified broadcaster. GetGameAnalyticsAsync(GetGameAnalyticsArgs, CancellationToken?) Gets an analytics report for one or more games. The response contains the URLs used to download the reports (CSV files). GetGamesAsync(GetGamesArgs, CancellationToken?) Gets information about specified categories or games. GetGoalsAsync(GetGoalsArgs, CancellationToken?) Gets the broadcaster’s list of active goals. GetHypetrainEventsAsync(GetHypeTrainsArgs, CancellationToken?) Gets information about the broadcaster’s current or most recent Hype Train event. GetModeratorsAsync(GetModeratorsArgs, CancellationToken?) Gets all users allowed to moderate the broadcaster’s chat room. GetPlaylistsAsync(GetPlaylistsArgs, CancellationToken?) Gets a list of Soundtrack playlists. GetPlaylistTracksAsync(GetPlaylistTracksArgs, CancellationToken?) Gets the Soundtrack playlist’s tracks. GetPollAsync(GetPredictionsArgs, CancellationToken?) Gets a list of polls that the broadcaster created. GetPredictionAsync(GetPredictionsArgs, CancellationToken?) Gets a list of Channel Points Predictions that the broadcaster created. GetRewardRedemptionAsync(GetRedemptionsArgs, CancellationToken?) Gets a list of redemptions for the specified custom reward. Only the app that created a reward is able to see it's redemptions. GetRewardsAsync(GetRewardArgs, CancellationToken?) Gets a list of custom rewards that the specified broadcaster created. GetScheduleAsync(GetScheduleArgs, CancellationToken?) Gets the broadcaster’s streaming schedule. GetShieldModeAsync(GetShieldModeArgs, CancellationToken?) Activates or deactivates the broadcaster’s Shield Mode. GetSubscriberAsync(GetSubscriberArgs, CancellationToken?) Checks whether the user subscribes to the broadcaster’s channel. GetSubscriptionsAsync(GetSubscriptionsArgs, CancellationToken?) Updates the specified user’s information. GetTeamAsync(GetTeamArgs, CancellationToken?) Gets information about the specified Twitch team. GetTeamsAsync(GetChannelTeamsArgs, CancellationToken?) Gets information about one or more users. GetTopGamesAsync(GetTopGamesArgs, CancellationToken?) Gets information about all broadcasts on Twitch. GetUserChatColorsAsync(GetUserColorArgs, CancellationToken?) Gets the color used for the user’s name in chat. GetUserExtensionsAsync(CancellationToken?) Gets a list of all extensions (both active and inactive) that the broadcaster has installed. GetUsersAsync(GetUsersArgs, CancellationToken?) Gets information about one or more users. GetVideosAsync(GetVideosArgs, CancellationToken?) Gets information about one or more published videos. GetVipsAsync(GetVipsArgs, CancellationToken?) Gets a list of the broadcaster’s VIPs. PatchChannelAsync(PatchChannelArgs, PatchChannelBody, CancellationToken?) Updates a channel’s properties. PatchChatSettingsAsync(PatchChatSettingsArgs, PatchChatSettingsBody, CancellationToken?) Updates the broadcaster’s chat settings. PatchDropsStatusAsync(PatchDropsStatusArgs, CancellationToken?) Updates the Drop entitlement’s fulfillment status. PatchPollAsync(PatchPollBody, CancellationToken?) Ends an active poll. PatchPredictionaAsync(PostPredictionBody, CancellationToken?) Locks, resolves, or cancels a Channel Points Prediction. PatchRewardAsync(ManageRewardArgs, PostRewardBody, CancellationToken?) Updates a custom reward. The app used to create the reward is the only app that may update the reward. PatchRewardRedemptionAsync(RedemptionStatus, ModifyRedemptionsArgs, CancellationToken?) Updates a redemption’s status. The app used to create the reward is the only app that may update the redemption. PatchScheduleAsync(PatchScheduleArgs, CancellationToken?) Updates the broadcaster’s schedule settings, such as scheduling a vacation. PatchSegmentAsync(ManageSegmentArgs, PatchSegmentBody, CancellationToken?) Updates a scheduled broadcast segment. PostAutomodMessageAsync(PostAutomodMessageArgs, CancellationToken?) Allow or deny the message that AutoMod flagged for review. PostBanAsync(PostBanArgs, PostBanBody, CancellationToken?) Bans a user from participating in the specified broadcaster’s chat room or puts them in a timeout. PostBlockedTermAsync(PostBlockedTermArgs, PostBlockedTermBody, CancellationToken?) Gets the broadcaster’s list of non-private, blocked words or phrases. PostBroadcastMarkerAsync(PostBroadcastMarkerBody, CancellationToken?) Adds a marker to a live stream. PostChatAnnouncementAsync(PostAnnouncementArgs, PostAnnouncementBody, CancellationToken?) Sends an announcement to the broadcaster’s chat room. PostClipAsync(PostClipArgs, CancellationToken?) Creates a clip from the broadcaster’s stream. PostCommercialAsync(PostCommercialBody, CancellationToken?) Starts a commercial on the specified channel. PostEnforcementStatusAsync(PostEnforcementStatusArgs, PostEnforcementStatusBody, CancellationToken?) Checks whether AutoMod would flag the specified message for review. PostEventSubscriptionAsync<TCondition>(PostEventSubscriptionBody<TCondition>, CancellationToken?) Creates an EventSub subscription. PostModeratorAsync(ManageModeratorArgs, CancellationToken?) Adds a moderator to the broadcaster’s chat room. PostPollAsync(PutPollBody, CancellationToken?) Creates a poll that viewers in the broadcaster’s channel can vote on. PostPredictionAsync(PostPredictionBody, CancellationToken?) Creates a Channel Points Prediction. PostRaidAsync(PostRaidArgs, CancellationToken?) Raid another channel by sending the broadcaster’s viewers to the targeted channel. PostRewardsAsync(PostRewardArgs, PostRewardBody, CancellationToken?) Creates a custom reward in the broadcaster’s channel. PostSegmentAsync(PostSegmentArgs, PostSegmentBody, CancellationToken?) Adds a single or recurring broadcast to the broadcaster’s streaming schedule. PostShoutoutAsync(PostShoutoutArgs, CancellationToken?) Sends a shoutout to the specified broadcaster. PostVipAsync(ManageVipArgs, CancellationToken?) Adds the specified user as a VIP in the broadcaster’s channel. PostWhisperAsync(PostWhisperArgs, PostWhisperBody, CancellationToken?) Sends a whisper message to the specified user. PutAutomodSettingsAsync(AutomodSettingsArgs, PutAutomodSettingsBody, CancellationToken?) Updates the broadcaster’s AutoMod settings. PutBlockAsync(PutBlockArgs, CancellationToken?) Blocks the specified user from interacting with or having contact with the broadcaster. PutExtensionsAsync(ExtensionMap, CancellationToken?) Updates an installed extension’s information. PutShieldModeAsync(PutShieldModeArgs, PutShieldModeBody, CancellationToken?) Activates or deactivates the broadcaster’s Shield Mode. PutUserAsync(PutUserArgs, CancellationToken?) Updates the specified user’s information. PutUserChatColorAsync(PutUserChatColorArgs, CancellationToken?) Updates the color used for the user's name in chat. RefreshTokenAsync(CancellationToken?) Refresh the token for the authorized user. RevokeTokenAsync(CancellationToken?) Revoke the currently authorized user's token. ValidateAsync(CancellationToken?) ValidateAsync(string, string, CancellationToken?)"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.Identity.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.Identity.html",
    "title": "Property Identity | AuxLabs.Twitch Documentation",
    "keywords": "Property Identity Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll Identity public AppIdentity Identity { get; } Property Value AppIdentity"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PatchChannelAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PatchChannelAsync.html",
    "title": "Method PatchChannelAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PatchChannelAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PatchChannelAsync(PatchChannelArgs, PatchChannelBody, CancellationToken?) Updates a channel’s properties. public Task PatchChannelAsync(PatchChannelArgs args, PatchChannelBody body, CancellationToken? cancelToken = null) Parameters args PatchChannelArgs body PatchChannelBody cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the channel:manage:broadcast scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PatchChatSettingsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PatchChatSettingsAsync.html",
    "title": "Method PatchChatSettingsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PatchChatSettingsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PatchChatSettingsAsync(PatchChatSettingsArgs, PatchChatSettingsBody, CancellationToken?) Updates the broadcaster’s chat settings. public Task<TwitchResponse<ChatSettings>> PatchChatSettingsAsync(PatchChatSettingsArgs args, PatchChatSettingsBody body, CancellationToken? cancelToken = null) Parameters args PatchChatSettingsArgs body PatchChatSettingsBody cancelToken CancellationToken? Returns Task<TwitchResponse<ChatSettings>> A single ChatSettings object. Remarks Requires a user access token with the moderator:manage:chat_settings scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PatchDropsStatusAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PatchDropsStatusAsync.html",
    "title": "Method PatchDropsStatusAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PatchDropsStatusAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PatchDropsStatusAsync(PatchDropsStatusArgs, CancellationToken?) Updates the Drop entitlement’s fulfillment status. public Task<TwitchResponse<EntitlementDrop>> PatchDropsStatusAsync(PatchDropsStatusArgs args, CancellationToken? cancelToken = null) Parameters args PatchDropsStatusArgs cancelToken CancellationToken? Returns Task<TwitchResponse<EntitlementDrop>> A collection of EntitlementDrop objects. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PatchPollAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PatchPollAsync.html",
    "title": "Method PatchPollAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PatchPollAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PatchPollAsync(PatchPollBody, CancellationToken?) Ends an active poll. public Task<TwitchResponse<Poll>> PatchPollAsync(PatchPollBody args, CancellationToken? cancelToken = null) Parameters args PatchPollBody cancelToken CancellationToken? Returns Task<TwitchResponse<Poll>> A single Poll object. Remarks Requires a user access token with the channel:manage:polls scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PatchPredictionaAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PatchPredictionaAsync.html",
    "title": "Method PatchPredictionaAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PatchPredictionaAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PatchPredictionaAsync(PostPredictionBody, CancellationToken?) Locks, resolves, or cancels a Channel Points Prediction. public Task<TwitchResponse<Prediction>> PatchPredictionaAsync(PostPredictionBody args, CancellationToken? cancelToken = null) Parameters args PostPredictionBody cancelToken CancellationToken? Returns Task<TwitchResponse<Prediction>> A single Prediction object. Remarks Requires a user access token with the channel:manage:predictions scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PatchRewardAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PatchRewardAsync.html",
    "title": "Method PatchRewardAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PatchRewardAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PatchRewardAsync(ManageRewardArgs, PostRewardBody, CancellationToken?) Updates a custom reward. The app used to create the reward is the only app that may update the reward. public Task<TwitchResponse<Reward>> PatchRewardAsync(ManageRewardArgs args, PostRewardBody body, CancellationToken? cancelToken = null) Parameters args ManageRewardArgs body PostRewardBody cancelToken CancellationToken? Returns Task<TwitchResponse<Reward>> A collection of Reward objects. Remarks Requires a user access token with the channel:manage:redemptions scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PatchRewardRedemptionAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PatchRewardRedemptionAsync.html",
    "title": "Method PatchRewardRedemptionAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PatchRewardRedemptionAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PatchRewardRedemptionAsync(RedemptionStatus, ModifyRedemptionsArgs, CancellationToken?) Updates a redemption’s status. The app used to create the reward is the only app that may update the redemption. public Task<TwitchResponse<Redemption>> PatchRewardRedemptionAsync(RedemptionStatus status, ModifyRedemptionsArgs args, CancellationToken? cancelToken = null) Parameters status RedemptionStatus args ModifyRedemptionsArgs cancelToken CancellationToken? Returns Task<TwitchResponse<Redemption>> A collection of Reward objects. Remarks Requires a user access token with the channel:manage:redemptions scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PatchScheduleAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PatchScheduleAsync.html",
    "title": "Method PatchScheduleAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PatchScheduleAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PatchScheduleAsync(PatchScheduleArgs, CancellationToken?) Updates the broadcaster’s schedule settings, such as scheduling a vacation. public Task PatchScheduleAsync(PatchScheduleArgs args, CancellationToken? cancelToken = null) Parameters args PatchScheduleArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the channel:manage:schedule scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PatchSegmentAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PatchSegmentAsync.html",
    "title": "Method PatchSegmentAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PatchSegmentAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PatchSegmentAsync(ManageSegmentArgs, PatchSegmentBody, CancellationToken?) Updates a scheduled broadcast segment. public Task<TwitchResponse<Schedule>> PatchSegmentAsync(ManageSegmentArgs args, PatchSegmentBody body, CancellationToken? cancelToken = null) Parameters args ManageSegmentArgs body PatchSegmentBody cancelToken CancellationToken? Returns Task<TwitchResponse<Schedule>> A single Schedule object. Remarks Requires a user access token with the channel:manage:schedule scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostAutomodMessageAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostAutomodMessageAsync.html",
    "title": "Method PostAutomodMessageAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostAutomodMessageAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostAutomodMessageAsync(PostAutomodMessageArgs, CancellationToken?) Allow or deny the message that AutoMod flagged for review. public Task PostAutomodMessageAsync(PostAutomodMessageArgs args, CancellationToken? cancelToken = null) Parameters args PostAutomodMessageArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the moderator:manage:automod scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostBanAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostBanAsync.html",
    "title": "Method PostBanAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostBanAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostBanAsync(PostBanArgs, PostBanBody, CancellationToken?) Bans a user from participating in the specified broadcaster’s chat room or puts them in a timeout. public Task<TwitchResponse<Ban>> PostBanAsync(PostBanArgs args, PostBanBody body, CancellationToken? cancelToken = null) Parameters args PostBanArgs body PostBanBody cancelToken CancellationToken? Returns Task<TwitchResponse<Ban>> A collection of Ban objects. Remarks Requires a user access token with the moderator:manage:banned_users scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Fordbidden, 409 Conflict MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostBlockedTermAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostBlockedTermAsync.html",
    "title": "Method PostBlockedTermAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostBlockedTermAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostBlockedTermAsync(PostBlockedTermArgs, PostBlockedTermBody, CancellationToken?) Gets the broadcaster’s list of non-private, blocked words or phrases. public Task<TwitchResponse<BlockedTerm>> PostBlockedTermAsync(PostBlockedTermArgs args, PostBlockedTermBody body, CancellationToken? cancelToken = null) Parameters args PostBlockedTermArgs body PostBlockedTermBody cancelToken CancellationToken? Returns Task<TwitchResponse<BlockedTerm>> A single BlockedTerm object. Remarks Requires a user access token with the moderator:manage:blocked_terms scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Fordbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostBroadcastMarkerAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostBroadcastMarkerAsync.html",
    "title": "Method PostBroadcastMarkerAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostBroadcastMarkerAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostBroadcastMarkerAsync(PostBroadcastMarkerBody, CancellationToken?) Adds a marker to a live stream. public Task<TwitchResponse<BroadcastMarker>> PostBroadcastMarkerAsync(PostBroadcastMarkerBody body, CancellationToken? cancelToken = null) Parameters body PostBroadcastMarkerBody cancelToken CancellationToken? Returns Task<TwitchResponse<BroadcastMarker>> A single BroadcastMarker object. Remarks Requires a user access token with the channel:manage:broadcast scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostChatAnnouncementAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostChatAnnouncementAsync.html",
    "title": "Method PostChatAnnouncementAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostChatAnnouncementAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostChatAnnouncementAsync(PostAnnouncementArgs, PostAnnouncementBody, CancellationToken?) Sends an announcement to the broadcaster’s chat room. public Task PostChatAnnouncementAsync(PostAnnouncementArgs args, PostAnnouncementBody body, CancellationToken? cancelToken = null) Parameters args PostAnnouncementArgs body PostAnnouncementBody cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the moderator:manage:announcements scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostClipAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostClipAsync.html",
    "title": "Method PostClipAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostClipAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostClipAsync(PostClipArgs, CancellationToken?) Creates a clip from the broadcaster’s stream. public Task<TwitchResponse<SimpleClip>> PostClipAsync(PostClipArgs args, CancellationToken? cancelToken = null) Parameters args PostClipArgs cancelToken CancellationToken? Returns Task<TwitchResponse<SimpleClip>> A single SimpleClip object. Remarks Requires a user access token with the clips:edit scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostCommercialAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostCommercialAsync.html",
    "title": "Method PostCommercialAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostCommercialAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostCommercialAsync(PostCommercialBody, CancellationToken?) Starts a commercial on the specified channel. public Task<TwitchResponse<Commercial>> PostCommercialAsync(PostCommercialBody args, CancellationToken? cancelToken = null) Parameters args PostCommercialBody cancelToken CancellationToken? Returns Task<TwitchResponse<Commercial>> A single Commercial object. Remarks Requires a user access token with the channel:edit:commercial scope. Exceptions TwitchRestException 400 Bad Request The specified broadcaster is not currently live. The internal commercial ratelimit has been exceeded. MissingScopeException The authorized user does not have the channel:edit:commercial scope."
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostEnforcementStatusAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostEnforcementStatusAsync.html",
    "title": "Method PostEnforcementStatusAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostEnforcementStatusAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostEnforcementStatusAsync(PostEnforcementStatusArgs, PostEnforcementStatusBody, CancellationToken?) Checks whether AutoMod would flag the specified message for review. public Task<TwitchResponse<MockMessage>> PostEnforcementStatusAsync(PostEnforcementStatusArgs args, PostEnforcementStatusBody body, CancellationToken? cancelToken = null) Parameters args PostEnforcementStatusArgs body PostEnforcementStatusBody cancelToken CancellationToken? Returns Task<TwitchResponse<MockMessage>> A collection of MockMessage objects. Remarks Requires a user access token with the moderation:read scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostEventSubscriptionAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostEventSubscriptionAsync.html",
    "title": "Method PostEventSubscriptionAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostEventSubscriptionAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostEventSubscriptionAsync<TCondition>(PostEventSubscriptionBody<TCondition>, CancellationToken?) Creates an EventSub subscription. public Task<EventSubResponse> PostEventSubscriptionAsync<TCondition>(PostEventSubscriptionBody<TCondition> args, CancellationToken? cancelToken = null) where TCondition : IEventCondition Parameters args PostEventSubscriptionBody<TCondition> cancelToken CancellationToken? Returns Task<EventSubResponse> An EventSubResponse object. Type Parameters TCondition Remarks Webhook transports require a app access token and Websocket transports require a user access token. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 409 Conflict MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostModeratorAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostModeratorAsync.html",
    "title": "Method PostModeratorAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostModeratorAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostModeratorAsync(ManageModeratorArgs, CancellationToken?) Adds a moderator to the broadcaster’s chat room. public Task PostModeratorAsync(ManageModeratorArgs args, CancellationToken? cancelToken = null) Parameters args ManageModeratorArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the channel:manage:moderators scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 422 Unprocessable MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostPollAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostPollAsync.html",
    "title": "Method PostPollAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostPollAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostPollAsync(PutPollBody, CancellationToken?) Creates a poll that viewers in the broadcaster’s channel can vote on. public Task<TwitchResponse<Poll>> PostPollAsync(PutPollBody args, CancellationToken? cancelToken = null) Parameters args PutPollBody cancelToken CancellationToken? Returns Task<TwitchResponse<Poll>> A single Poll object. Remarks Requires a user access token with the channel:manage:polls scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostPredictionAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostPredictionAsync.html",
    "title": "Method PostPredictionAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostPredictionAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostPredictionAsync(PostPredictionBody, CancellationToken?) Creates a Channel Points Prediction. public Task<TwitchResponse<Prediction>> PostPredictionAsync(PostPredictionBody args, CancellationToken? cancelToken = null) Parameters args PostPredictionBody cancelToken CancellationToken? Returns Task<TwitchResponse<Prediction>> A single Prediction object. Remarks Requires a user access token with the channel:manage:predictions scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostRaidAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostRaidAsync.html",
    "title": "Method PostRaidAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostRaidAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostRaidAsync(PostRaidArgs, CancellationToken?) Raid another channel by sending the broadcaster’s viewers to the targeted channel. public Task<TwitchResponse<Raid>> PostRaidAsync(PostRaidArgs args, CancellationToken? cancelToken = null) Parameters args PostRaidArgs cancelToken CancellationToken? Returns Task<TwitchResponse<Raid>> A single Raid object. Remarks Requires a user access token with the channel:manage:raids scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 404 Not Found, 409 Conflict MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostRewardsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostRewardsAsync.html",
    "title": "Method PostRewardsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostRewardsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostRewardsAsync(PostRewardArgs, PostRewardBody, CancellationToken?) Creates a custom reward in the broadcaster’s channel. public Task<TwitchResponse<Reward>> PostRewardsAsync(PostRewardArgs args, PostRewardBody body, CancellationToken? cancelToken = null) Parameters args PostRewardArgs body PostRewardBody cancelToken CancellationToken? Returns Task<TwitchResponse<Reward>> A single Reward object. Remarks Requires a user access token with the channel:manage:redemptions scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostSegmentAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostSegmentAsync.html",
    "title": "Method PostSegmentAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostSegmentAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostSegmentAsync(PostSegmentArgs, PostSegmentBody, CancellationToken?) Adds a single or recurring broadcast to the broadcaster’s streaming schedule. public Task<TwitchResponse<Schedule>> PostSegmentAsync(PostSegmentArgs args, PostSegmentBody body, CancellationToken? cancelToken = null) Parameters args PostSegmentArgs body PostSegmentBody cancelToken CancellationToken? Returns Task<TwitchResponse<Schedule>> A single Schedule object. Remarks Requires a user access token with the channel:manage:schedule scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostShoutoutAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostShoutoutAsync.html",
    "title": "Method PostShoutoutAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostShoutoutAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostShoutoutAsync(PostShoutoutArgs, CancellationToken?) Sends a shoutout to the specified broadcaster. public Task PostShoutoutAsync(PostShoutoutArgs args, CancellationToken? cancelToken = null) Parameters args PostShoutoutArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the moderator:manage:shoutouts scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostVipAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostVipAsync.html",
    "title": "Method PostVipAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostVipAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostVipAsync(ManageVipArgs, CancellationToken?) Adds the specified user as a VIP in the broadcaster’s channel. public Task PostVipAsync(ManageVipArgs args, CancellationToken? cancelToken = null) Parameters args ManageVipArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the channel:manage:vips scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, 409 Conflict, 422 Unprocessable, 425 Too Early MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostWhisperAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PostWhisperAsync.html",
    "title": "Method PostWhisperAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PostWhisperAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PostWhisperAsync(PostWhisperArgs, PostWhisperBody, CancellationToken?) Sends a whisper message to the specified user. public Task PostWhisperAsync(PostWhisperArgs args, PostWhisperBody body, CancellationToken? cancelToken = null) Parameters args PostWhisperArgs body PostWhisperBody cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the user:manage:whispers scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not found MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PutAutomodSettingsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PutAutomodSettingsAsync.html",
    "title": "Method PutAutomodSettingsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PutAutomodSettingsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PutAutomodSettingsAsync(AutomodSettingsArgs, PutAutomodSettingsBody, CancellationToken?) Updates the broadcaster’s AutoMod settings. public Task<TwitchResponse<AutomodSettings>> PutAutomodSettingsAsync(AutomodSettingsArgs args, PutAutomodSettingsBody body, CancellationToken? cancelToken = null) Parameters args AutomodSettingsArgs body PutAutomodSettingsBody cancelToken CancellationToken? Returns Task<TwitchResponse<AutomodSettings>> A single AutomodSettings object. Remarks Requires a user access token with the moderator:manage:automod_settings scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PutBlockAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PutBlockAsync.html",
    "title": "Method PutBlockAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PutBlockAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PutBlockAsync(PutBlockArgs, CancellationToken?) Blocks the specified user from interacting with or having contact with the broadcaster. public Task PutBlockAsync(PutBlockArgs args, CancellationToken? cancelToken = null) Parameters args PutBlockArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the user:manage:blocked_users scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PutExtensionsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PutExtensionsAsync.html",
    "title": "Method PutExtensionsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PutExtensionsAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PutExtensionsAsync(ExtensionMap, CancellationToken?) Updates an installed extension’s information. public Task<TwitchResponse<ExtensionMap>> PutExtensionsAsync(ExtensionMap args, CancellationToken? cancelToken = null) Parameters args ExtensionMap cancelToken CancellationToken? Returns Task<TwitchResponse<ExtensionMap>> A single ExtensionMap object. Remarks Requires a user access token with the user:read:broadcast or user:edit:broadcast scope. Exceptions TwitchRestException 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PutShieldModeAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PutShieldModeAsync.html",
    "title": "Method PutShieldModeAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PutShieldModeAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PutShieldModeAsync(PutShieldModeArgs, PutShieldModeBody, CancellationToken?) Activates or deactivates the broadcaster’s Shield Mode. public Task<TwitchResponse<ShieldMode>> PutShieldModeAsync(PutShieldModeArgs args, PutShieldModeBody body, CancellationToken? cancelToken = null) Parameters args PutShieldModeArgs body PutShieldModeBody cancelToken CancellationToken? Returns Task<TwitchResponse<ShieldMode>> A single ShieldMode object. Remarks Requires a user access token with the moderator:manage:shield_mode scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PutUserAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PutUserAsync.html",
    "title": "Method PutUserAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PutUserAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PutUserAsync(PutUserArgs, CancellationToken?) Updates the specified user’s information. public Task<TwitchResponse<User>> PutUserAsync(PutUserArgs args, CancellationToken? cancelToken = null) Parameters args PutUserArgs cancelToken CancellationToken? Returns Task<TwitchResponse<User>> A single User object. Remarks Requires a user access token with the user:edit scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PutUserChatColorAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.PutUserChatColorAsync.html",
    "title": "Method PutUserChatColorAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method PutUserChatColorAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll PutUserChatColorAsync(PutUserChatColorArgs, CancellationToken?) Updates the color used for the user's name in chat. public Task PutUserChatColorAsync(PutUserChatColorArgs args, CancellationToken? cancelToken = null) Parameters args PutUserChatColorArgs cancelToken CancellationToken? Returns Task Remarks Requires a user access token with the user:manage:chat_color scope. Exceptions TwitchRestException 400 Bad Request, 401 Unauthorized, 403 Forbidden MissingScopeException"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.RefreshTokenAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.RefreshTokenAsync.html",
    "title": "Method RefreshTokenAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method RefreshTokenAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll RefreshTokenAsync(CancellationToken?) Refresh the token for the authorized user. public Task<AppIdentity> RefreshTokenAsync(CancellationToken? cancelToken = null) Parameters cancelToken CancellationToken? Returns Task<AppIdentity>"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.RevokeTokenAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.RevokeTokenAsync.html",
    "title": "Method RevokeTokenAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method RevokeTokenAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll RevokeTokenAsync(CancellationToken?) Revoke the currently authorized user's token. public Task RevokeTokenAsync(CancellationToken? cancelToken = null) Parameters cancelToken CancellationToken? Returns Task"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.ValidateAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiClient.ValidateAsync.html",
    "title": "Method ValidateAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method ValidateAsync Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll ValidateAsync(CancellationToken?) public Task<AppIdentity> ValidateAsync(CancellationToken? cancelToken = null) Parameters cancelToken CancellationToken? Returns Task<AppIdentity> ValidateAsync(string, string, CancellationToken?) public Task<AccessTokenInfo> ValidateAsync(string token, string refreshToken = null, CancellationToken? cancelToken = null) Parameters token string refreshToken string cancelToken CancellationToken? Returns Task<AccessTokenInfo>"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiConfig.ClientId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiConfig.ClientId.html",
    "title": "Property ClientId | AuxLabs.Twitch Documentation",
    "keywords": "Property ClientId Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll ClientId public string ClientId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiConfig.ClientSecret.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiConfig.ClientSecret.html",
    "title": "Property ClientSecret | AuxLabs.Twitch Documentation",
    "keywords": "Property ClientSecret Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll ClientSecret public string ClientSecret { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiConfig.html": {
    "href": "api/AuxLabs.Twitch.Rest.Api.TwitchRestApiConfig.html",
    "title": "Class TwitchRestApiConfig | AuxLabs.Twitch Documentation",
    "keywords": "Class TwitchRestApiConfig Namespace AuxLabs.Twitch.Rest.Api Assembly AuxLabs.Twitch.Rest.Api.dll public class TwitchRestApiConfig Inheritance object TwitchRestApiConfig Derived TwitchRestConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ClientId ClientSecret"
  },
  "api/AuxLabs.Twitch.Rest.Entities.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.html",
    "title": "Namespace AuxLabs.Twitch.Rest.Entities | AuxLabs.Twitch Documentation",
    "keywords": "Namespace AuxLabs.Twitch.Rest.Entities Classes RestBitsUser RestBroadcast RestChannel RestChatUser RestClip RestEditor RestEmote RestEntity<T> RestEventSubscription RestExtensionTransaction RestFollowUser RestGlobalEmote RestMarker RestPartialUser RestSelfUser RestSimpleClip A simplified instance of a RestClip. RestSimpleUser RestUser"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestBitsUser.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestBitsUser.-ctor.html",
    "title": "Constructor RestBitsUser | AuxLabs.Twitch Documentation",
    "keywords": "Constructor RestBitsUser Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll RestBitsUser(TwitchRestClient, string) public RestBitsUser(TwitchRestClient twitch, string id) Parameters twitch TwitchRestClient id string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestBitsUser.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestBitsUser.html",
    "title": "Class RestBitsUser | AuxLabs.Twitch Documentation",
    "keywords": "Class RestBitsUser Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll public class RestBitsUser : RestSimpleUser Inheritance object RestEntity<string> RestPartialUser RestSimpleUser RestBitsUser Inherited Members RestSimpleUser.DisplayName RestSimpleUser.ToString() RestPartialUser.Name RestEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RestBitsUser(TwitchRestClient, string) Properties Rank TotalBits"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestBitsUser.Rank.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestBitsUser.Rank.html",
    "title": "Property Rank | AuxLabs.Twitch Documentation",
    "keywords": "Property Rank Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Rank public int Rank { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestBitsUser.TotalBits.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestBitsUser.TotalBits.html",
    "title": "Property TotalBits | AuxLabs.Twitch Documentation",
    "keywords": "Property TotalBits Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll TotalBits public int TotalBits { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.Culture.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.Culture.html",
    "title": "Property Culture | AuxLabs.Twitch Documentation",
    "keywords": "Property Culture Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Culture public CultureInfo Culture { get; } Property Value CultureInfo"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.GameId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.GameId.html",
    "title": "Property GameId | AuxLabs.Twitch Documentation",
    "keywords": "Property GameId Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll GameId public string GameId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.GameName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.GameName.html",
    "title": "Property GameName | AuxLabs.Twitch Documentation",
    "keywords": "Property GameName Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll GameName public string GameName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.GetChannelAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.GetChannelAsync.html",
    "title": "Method GetChannelAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetChannelAsync Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll GetChannelAsync() Get the channel associated with this broadcast. public Task<RestChannel> GetChannelAsync() Returns Task<RestChannel>"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.GetThumbnailUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.GetThumbnailUrl.html",
    "title": "Method GetThumbnailUrl | AuxLabs.Twitch Documentation",
    "keywords": "Method GetThumbnailUrl Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll GetThumbnailUrl(int, int) public string GetThumbnailUrl(int width, int height) Parameters width int height int Returns string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.GetUserAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.GetUserAsync.html",
    "title": "Method GetUserAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetUserAsync Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll GetUserAsync() Get the user associated with this broadcast. public Task<RestUser> GetUserAsync() Returns Task<RestUser>"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.html",
    "title": "Class RestBroadcast | AuxLabs.Twitch Documentation",
    "keywords": "Class RestBroadcast Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll public class RestBroadcast : RestEntity<string>, IUpdatable Inheritance object RestEntity<string> RestBroadcast Implements IUpdatable Inherited Members RestEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Culture GameId GameName IsMature RawThumbnailUrl StartedAt Tags Title Type User ViewerCount Methods GetChannelAsync() Get the channel associated with this broadcast. GetThumbnailUrl(int, int) GetUserAsync() Get the user associated with this broadcast. ToString() UpdateAsync()"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.IsMature.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.IsMature.html",
    "title": "Property IsMature | AuxLabs.Twitch Documentation",
    "keywords": "Property IsMature Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll IsMature public bool IsMature { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.RawThumbnailUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.RawThumbnailUrl.html",
    "title": "Property RawThumbnailUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property RawThumbnailUrl Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll RawThumbnailUrl public string RawThumbnailUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.StartedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.StartedAt.html",
    "title": "Property StartedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property StartedAt Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll StartedAt public DateTime StartedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.Tags.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.Tags.html",
    "title": "Property Tags | AuxLabs.Twitch Documentation",
    "keywords": "Property Tags Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Tags public IReadOnlyCollection<string> Tags { get; } Property Value IReadOnlyCollection<string>"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.Title.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Title public string Title { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.ToString.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.ToString.html",
    "title": "Method ToString | AuxLabs.Twitch Documentation",
    "keywords": "Method ToString Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll ToString() public override string ToString() Returns string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.Type.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Type public BroadcastType Type { get; } Property Value BroadcastType"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.UpdateAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.UpdateAsync.html",
    "title": "Method UpdateAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method UpdateAsync Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll UpdateAsync() public virtual Task UpdateAsync() Returns Task"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.User.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.User.html",
    "title": "Property User | AuxLabs.Twitch Documentation",
    "keywords": "Property User Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll User public RestSimpleUser User { get; } Property Value RestSimpleUser"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.ViewerCount.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestBroadcast.ViewerCount.html",
    "title": "Property ViewerCount | AuxLabs.Twitch Documentation",
    "keywords": "Property ViewerCount Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll ViewerCount public int ViewerCount { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestChannel.Culture.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestChannel.Culture.html",
    "title": "Property Culture | AuxLabs.Twitch Documentation",
    "keywords": "Property Culture Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Culture The broadcaster’s preferred language. The value is an ISO 639-1 two-letter language code. public CultureInfo Culture { get; } Property Value CultureInfo"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestChannel.Delay.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestChannel.Delay.html",
    "title": "Property Delay | AuxLabs.Twitch Documentation",
    "keywords": "Property Delay Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Delay The value of the broadcaster’s stream delay setting. public TimeSpan Delay { get; } Property Value TimeSpan"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestChannel.GameId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestChannel.GameId.html",
    "title": "Property GameId | AuxLabs.Twitch Documentation",
    "keywords": "Property GameId Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll GameId An ID that uniquely identifies the game that the broadcaster is playing or last played. public string GameId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestChannel.GameName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestChannel.GameName.html",
    "title": "Property GameName | AuxLabs.Twitch Documentation",
    "keywords": "Property GameName Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll GameName The name of the game that the broadcaster is playing or last played. public string GameName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestChannel.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestChannel.html",
    "title": "Class RestChannel | AuxLabs.Twitch Documentation",
    "keywords": "Class RestChannel Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll public class RestChannel : RestSimpleUser Inheritance object RestEntity<string> RestPartialUser RestSimpleUser RestChannel Inherited Members RestSimpleUser.DisplayName RestSimpleUser.ToString() RestPartialUser.Name RestEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Culture The broadcaster’s preferred language. The value is an ISO 639-1 two-letter language code. Delay The value of the broadcaster’s stream delay setting. GameId An ID that uniquely identifies the game that the broadcaster is playing or last played. GameName The name of the game that the broadcaster is playing or last played. Tags The tags applied to the channel. Title The title of the stream that the broadcaster is currently streaming or last streamed. Methods UpdateAsync()"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestChannel.Tags.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestChannel.Tags.html",
    "title": "Property Tags | AuxLabs.Twitch Documentation",
    "keywords": "Property Tags Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Tags The tags applied to the channel. public IReadOnlyCollection<string> Tags { get; } Property Value IReadOnlyCollection<string>"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestChannel.Title.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestChannel.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Title The title of the stream that the broadcaster is currently streaming or last streamed. public string Title { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestChannel.UpdateAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestChannel.UpdateAsync.html",
    "title": "Method UpdateAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method UpdateAsync Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll UpdateAsync() public virtual Task UpdateAsync() Returns Task"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestChatUser.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestChatUser.-ctor.html",
    "title": "Constructor RestChatUser | AuxLabs.Twitch Documentation",
    "keywords": "Constructor RestChatUser Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll RestChatUser(TwitchRestClient, string) public RestChatUser(TwitchRestClient twitch, string id) Parameters twitch TwitchRestClient id string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestChatUser.Color.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestChatUser.Color.html",
    "title": "Property Color | AuxLabs.Twitch Documentation",
    "keywords": "Property Color Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Color public Color? Color { get; } Property Value Color?"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestChatUser.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestChatUser.html",
    "title": "Class RestChatUser | AuxLabs.Twitch Documentation",
    "keywords": "Class RestChatUser Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll public class RestChatUser : RestSimpleUser, IChatUser, ISimpleUser, IPartialUser, IEntity<string> Inheritance object RestEntity<string> RestPartialUser RestSimpleUser RestChatUser Implements IChatUser ISimpleUser IPartialUser IEntity<string> Inherited Members RestSimpleUser.DisplayName RestSimpleUser.ToString() RestPartialUser.Name RestEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RestChatUser(TwitchRestClient, string) Properties Color"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestClip.Author.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestClip.Author.html",
    "title": "Property Author | AuxLabs.Twitch Documentation",
    "keywords": "Property Author Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Author The user who created the clip. public RestPartialUser Author { get; } Property Value RestPartialUser"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestClip.Broadcaster.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestClip.Broadcaster.html",
    "title": "Property Broadcaster | AuxLabs.Twitch Documentation",
    "keywords": "Property Broadcaster Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Broadcaster The user whose channel the clip was created on. public RestPartialUser Broadcaster { get; } Property Value RestPartialUser"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestClip.CreatedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestClip.CreatedAt.html",
    "title": "Property CreatedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property CreatedAt Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll CreatedAt The date and time of when the clip was created. public DateTime CreatedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestClip.Culture.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestClip.Culture.html",
    "title": "Property Culture | AuxLabs.Twitch Documentation",
    "keywords": "Property Culture Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Culture The language that the broadcaster broadcasts in. public CultureInfo Culture { get; } Property Value CultureInfo"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestClip.Duration.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestClip.Duration.html",
    "title": "Property Duration | AuxLabs.Twitch Documentation",
    "keywords": "Property Duration Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Duration The length of the clip, in seconds. public TimeSpan Duration { get; } Property Value TimeSpan"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestClip.EmbedUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestClip.EmbedUrl.html",
    "title": "Property EmbedUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property EmbedUrl Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll EmbedUrl A URL that you can use in an iframe to embed the clip. public string EmbedUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestClip.GameId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestClip.GameId.html",
    "title": "Property GameId | AuxLabs.Twitch Documentation",
    "keywords": "Property GameId Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll GameId The ID of the game that was being played when the clip was created. public string GameId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestClip.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestClip.html",
    "title": "Class RestClip | AuxLabs.Twitch Documentation",
    "keywords": "Class RestClip Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll public class RestClip : RestSimpleClip Inheritance object RestEntity<string> RestSimpleClip RestClip Inherited Members RestSimpleClip.EditUrl RestEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Author The user who created the clip. Broadcaster The user whose channel the clip was created on. CreatedAt The date and time of when the clip was created. Culture The language that the broadcaster broadcasts in. Duration The length of the clip, in seconds. EmbedUrl A URL that you can use in an iframe to embed the clip. GameId The ID of the game that was being played when the clip was created. Offset The zero-based offset, in seconds, to where the clip starts in the video ThumbnailUrl A URL to a thumbnail image of the clip. Title The title of the clip. Url A URL to the clip. VideoId An ID that identifies the video that the clip came from. ViewCount The number of times the clip has been viewed."
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestClip.Offset.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestClip.Offset.html",
    "title": "Property Offset | AuxLabs.Twitch Documentation",
    "keywords": "Property Offset Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Offset The zero-based offset, in seconds, to where the clip starts in the video public TimeSpan Offset { get; } Property Value TimeSpan"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestClip.ThumbnailUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestClip.ThumbnailUrl.html",
    "title": "Property ThumbnailUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property ThumbnailUrl Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll ThumbnailUrl A URL to a thumbnail image of the clip. public string ThumbnailUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestClip.Title.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestClip.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Title The title of the clip. public string Title { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestClip.Url.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestClip.Url.html",
    "title": "Property Url | AuxLabs.Twitch Documentation",
    "keywords": "Property Url Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Url A URL to the clip. public string Url { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestClip.VideoId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestClip.VideoId.html",
    "title": "Property VideoId | AuxLabs.Twitch Documentation",
    "keywords": "Property VideoId Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll VideoId An ID that identifies the video that the clip came from. public string VideoId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestClip.ViewCount.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestClip.ViewCount.html",
    "title": "Property ViewCount | AuxLabs.Twitch Documentation",
    "keywords": "Property ViewCount Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll ViewCount The number of times the clip has been viewed. public int ViewCount { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestEditor.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestEditor.-ctor.html",
    "title": "Constructor RestEditor | AuxLabs.Twitch Documentation",
    "keywords": "Constructor RestEditor Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll RestEditor(TwitchRestClient, string) public RestEditor(TwitchRestClient twitch, string id) Parameters twitch TwitchRestClient id string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestEditor.CreatedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestEditor.CreatedAt.html",
    "title": "Property CreatedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property CreatedAt Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll CreatedAt public DateTime CreatedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestEditor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestEditor.html",
    "title": "Class RestEditor | AuxLabs.Twitch Documentation",
    "keywords": "Class RestEditor Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll public class RestEditor : RestPartialUser Inheritance object RestEntity<string> RestPartialUser RestEditor Inherited Members RestPartialUser.Name RestPartialUser.ToString() RestEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RestEditor(TwitchRestClient, string) Properties CreatedAt"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestEmote.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestEmote.-ctor.html",
    "title": "Constructor RestEmote | AuxLabs.Twitch Documentation",
    "keywords": "Constructor RestEmote Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll RestEmote(TwitchRestClient, string) public RestEmote(TwitchRestClient twitch, string id) Parameters twitch TwitchRestClient id string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestEmote.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestEmote.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll BroadcasterId public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestEmote.EmoteSetId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestEmote.EmoteSetId.html",
    "title": "Property EmoteSetId | AuxLabs.Twitch Documentation",
    "keywords": "Property EmoteSetId Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll EmoteSetId public string EmoteSetId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestEmote.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestEmote.html",
    "title": "Class RestEmote | AuxLabs.Twitch Documentation",
    "keywords": "Class RestEmote Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll public class RestEmote : RestGlobalEmote Inheritance object RestEntity<string> RestGlobalEmote RestEmote Inherited Members RestGlobalEmote.Name RestGlobalEmote.Images RestGlobalEmote.Formats RestGlobalEmote.Scales RestGlobalEmote.Themes RestEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RestEmote(TwitchRestClient, string) Properties BroadcasterId EmoteSetId Tier Type"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestEmote.Tier.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestEmote.Tier.html",
    "title": "Property Tier | AuxLabs.Twitch Documentation",
    "keywords": "Property Tier Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Tier public string Tier { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestEmote.Type.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestEmote.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Type public EmoteType Type { get; } Property Value EmoteType"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestEntity-1.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestEntity-1.html",
    "title": "Class RestEntity<T> | AuxLabs.Twitch Documentation",
    "keywords": "Class RestEntity<T> Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll public abstract class RestEntity<T> where T : IEquatable<T> Type Parameters T Inheritance object RestEntity<T> Derived RestBroadcast RestEventSubscription RestExtensionTransaction RestGlobalEmote RestMarker RestPartialUser RestSimpleClip Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id An ID that uniquely identifies the entity."
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestEntity-1.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestEntity-1.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Id An ID that uniquely identifies the entity. public T Id { get; } Property Value T"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestEventSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestEventSubscription.-ctor.html",
    "title": "Constructor RestEventSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor RestEventSubscription Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll RestEventSubscription(TwitchRestClient, string) public RestEventSubscription(TwitchRestClient twitch, string id) Parameters twitch TwitchRestClient id string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestEventSubscription.Condition.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestEventSubscription.Condition.html",
    "title": "Property Condition | AuxLabs.Twitch Documentation",
    "keywords": "Property Condition Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Condition public IEventCondition Condition { get; } Property Value IEventCondition"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestEventSubscription.Cost.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestEventSubscription.Cost.html",
    "title": "Property Cost | AuxLabs.Twitch Documentation",
    "keywords": "Property Cost Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Cost public int Cost { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestEventSubscription.CreatedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestEventSubscription.CreatedAt.html",
    "title": "Property CreatedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property CreatedAt Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll CreatedAt public DateTime CreatedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestEventSubscription.DeleteAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestEventSubscription.DeleteAsync.html",
    "title": "Method DeleteAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DeleteAsync Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll DeleteAsync() public Task DeleteAsync() Returns Task"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestEventSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestEventSubscription.html",
    "title": "Class RestEventSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class RestEventSubscription Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll public class RestEventSubscription : RestEntity<string> Inheritance object RestEntity<string> RestEventSubscription Inherited Members RestEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RestEventSubscription(TwitchRestClient, string) Properties Condition Cost CreatedAt Status Transport Type Version Methods DeleteAsync() ToString()"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestEventSubscription.Status.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestEventSubscription.Status.html",
    "title": "Property Status | AuxLabs.Twitch Documentation",
    "keywords": "Property Status Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Status public EventSubStatus Status { get; } Property Value EventSubStatus"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestEventSubscription.ToString.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestEventSubscription.ToString.html",
    "title": "Method ToString | AuxLabs.Twitch Documentation",
    "keywords": "Method ToString Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll ToString() public override string ToString() Returns string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestEventSubscription.Transport.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestEventSubscription.Transport.html",
    "title": "Property Transport | AuxLabs.Twitch Documentation",
    "keywords": "Property Transport Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Transport public AcceptedTransport Transport { get; } Property Value AcceptedTransport"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestEventSubscription.Type.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestEventSubscription.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Type public EventSubType Type { get; } Property Value EventSubType"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestEventSubscription.Version.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestEventSubscription.Version.html",
    "title": "Property Version | AuxLabs.Twitch Documentation",
    "keywords": "Property Version Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Version public string Version { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestExtensionTransaction.Broadcaster.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestExtensionTransaction.Broadcaster.html",
    "title": "Property Broadcaster | AuxLabs.Twitch Documentation",
    "keywords": "Property Broadcaster Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Broadcaster The broadcaster that owns the channel where the transaction occurred. public RestSimpleUser Broadcaster { get; } Property Value RestSimpleUser"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestExtensionTransaction.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestExtensionTransaction.html",
    "title": "Class RestExtensionTransaction | AuxLabs.Twitch Documentation",
    "keywords": "Class RestExtensionTransaction Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll public class RestExtensionTransaction : RestEntity<string> Inheritance object RestEntity<string> RestExtensionTransaction Inherited Members RestEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Broadcaster The broadcaster that owns the channel where the transaction occurred. ProductData Contains details about the digital product. ProductType The type of transaction. Timestamp The UTC date and time of the transaction. User The user that purchased the digital product."
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestExtensionTransaction.ProductData.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestExtensionTransaction.ProductData.html",
    "title": "Property ProductData | AuxLabs.Twitch Documentation",
    "keywords": "Property ProductData Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll ProductData Contains details about the digital product. public ProductData ProductData { get; } Property Value ProductData"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestExtensionTransaction.ProductType.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestExtensionTransaction.ProductType.html",
    "title": "Property ProductType | AuxLabs.Twitch Documentation",
    "keywords": "Property ProductType Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll ProductType The type of transaction. public ProductType ProductType { get; } Property Value ProductType"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestExtensionTransaction.Timestamp.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestExtensionTransaction.Timestamp.html",
    "title": "Property Timestamp | AuxLabs.Twitch Documentation",
    "keywords": "Property Timestamp Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Timestamp The UTC date and time of the transaction. public DateTime Timestamp { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestExtensionTransaction.User.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestExtensionTransaction.User.html",
    "title": "Property User | AuxLabs.Twitch Documentation",
    "keywords": "Property User Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll User The user that purchased the digital product. public RestSimpleUser User { get; } Property Value RestSimpleUser"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestFollowUser.FollowedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestFollowUser.FollowedAt.html",
    "title": "Property FollowedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property FollowedAt Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll FollowedAt public DateTime FollowedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestFollowUser.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestFollowUser.html",
    "title": "Class RestFollowUser | AuxLabs.Twitch Documentation",
    "keywords": "Class RestFollowUser Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll public class RestFollowUser : RestSimpleUser Inheritance object RestEntity<string> RestPartialUser RestSimpleUser RestFollowUser Inherited Members RestSimpleUser.DisplayName RestSimpleUser.ToString() RestPartialUser.Name RestEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties FollowedAt"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestGlobalEmote.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestGlobalEmote.-ctor.html",
    "title": "Constructor RestGlobalEmote | AuxLabs.Twitch Documentation",
    "keywords": "Constructor RestGlobalEmote Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll RestGlobalEmote(TwitchRestClient, string) public RestGlobalEmote(TwitchRestClient twitch, string id) Parameters twitch TwitchRestClient id string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestGlobalEmote.Formats.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestGlobalEmote.Formats.html",
    "title": "Property Formats | AuxLabs.Twitch Documentation",
    "keywords": "Property Formats Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Formats public IReadOnlyCollection<EmoteFormat> Formats { get; } Property Value IReadOnlyCollection<EmoteFormat>"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestGlobalEmote.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestGlobalEmote.html",
    "title": "Class RestGlobalEmote | AuxLabs.Twitch Documentation",
    "keywords": "Class RestGlobalEmote Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll public class RestGlobalEmote : RestEntity<string> Inheritance object RestEntity<string> RestGlobalEmote Derived RestEmote Inherited Members RestEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RestGlobalEmote(TwitchRestClient, string) Properties Formats Images Name Scales Themes"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestGlobalEmote.Images.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestGlobalEmote.Images.html",
    "title": "Property Images | AuxLabs.Twitch Documentation",
    "keywords": "Property Images Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Images public TwitchImage Images { get; } Property Value TwitchImage"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestGlobalEmote.Name.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestGlobalEmote.Name.html",
    "title": "Property Name | AuxLabs.Twitch Documentation",
    "keywords": "Property Name Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Name public string Name { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestGlobalEmote.Scales.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestGlobalEmote.Scales.html",
    "title": "Property Scales | AuxLabs.Twitch Documentation",
    "keywords": "Property Scales Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Scales public IReadOnlyCollection<EmoteScale> Scales { get; } Property Value IReadOnlyCollection<EmoteScale>"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestGlobalEmote.Themes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestGlobalEmote.Themes.html",
    "title": "Property Themes | AuxLabs.Twitch Documentation",
    "keywords": "Property Themes Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Themes public IReadOnlyCollection<EmoteTheme> Themes { get; } Property Value IReadOnlyCollection<EmoteTheme>"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestMarker.CreatedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestMarker.CreatedAt.html",
    "title": "Property CreatedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property CreatedAt Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll CreatedAt public DateTime CreatedAt { get; set; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestMarker.Description.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestMarker.Description.html",
    "title": "Property Description | AuxLabs.Twitch Documentation",
    "keywords": "Property Description Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Description public string Description { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestMarker.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestMarker.html",
    "title": "Class RestMarker | AuxLabs.Twitch Documentation",
    "keywords": "Class RestMarker Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll public class RestMarker : RestEntity<string> Inheritance object RestEntity<string> RestMarker Inherited Members RestEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties CreatedAt Description Position Methods ToString()"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestMarker.Position.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestMarker.Position.html",
    "title": "Property Position | AuxLabs.Twitch Documentation",
    "keywords": "Property Position Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Position public TimeSpan Position { get; set; } Property Value TimeSpan"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestMarker.ToString.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestMarker.ToString.html",
    "title": "Method ToString | AuxLabs.Twitch Documentation",
    "keywords": "Method ToString Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll ToString() public override string ToString() Returns string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestPartialUser.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestPartialUser.-ctor.html",
    "title": "Constructor RestPartialUser | AuxLabs.Twitch Documentation",
    "keywords": "Constructor RestPartialUser Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll RestPartialUser(TwitchRestClient, string) public RestPartialUser(TwitchRestClient twitch, string id) Parameters twitch TwitchRestClient id string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestPartialUser.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestPartialUser.html",
    "title": "Class RestPartialUser | AuxLabs.Twitch Documentation",
    "keywords": "Class RestPartialUser Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll public class RestPartialUser : RestEntity<string> Inheritance object RestEntity<string> RestPartialUser Derived RestEditor RestSimpleUser Inherited Members RestEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RestPartialUser(TwitchRestClient, string) Properties Name User’s login name Methods ToString()"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestPartialUser.Name.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestPartialUser.Name.html",
    "title": "Property Name | AuxLabs.Twitch Documentation",
    "keywords": "Property Name Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Name User’s login name public string Name { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestPartialUser.ToString.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestPartialUser.ToString.html",
    "title": "Method ToString | AuxLabs.Twitch Documentation",
    "keywords": "Method ToString Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll ToString() public override string ToString() Returns string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestSelfUser.Email.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestSelfUser.Email.html",
    "title": "Property Email | AuxLabs.Twitch Documentation",
    "keywords": "Property Email Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Email Date when the user was created public string Email { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestSelfUser.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestSelfUser.html",
    "title": "Class RestSelfUser | AuxLabs.Twitch Documentation",
    "keywords": "Class RestSelfUser Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll public class RestSelfUser : RestUser Inheritance object RestEntity<string> RestPartialUser RestSimpleUser RestUser RestSelfUser Inherited Members RestUser.CreatedAt RestUser.Description RestUser.ViewCount RestUser.OfflineImageUrl RestUser.ProfileImageUrl RestUser.BroadcasterType RestUser.Type RestSimpleUser.DisplayName RestSimpleUser.ToString() RestPartialUser.Name RestEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Email Date when the user was created Methods ModifyAsync(string) UpdateAsync()"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestSelfUser.ModifyAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestSelfUser.ModifyAsync.html",
    "title": "Method ModifyAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method ModifyAsync Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll ModifyAsync(string) public Task ModifyAsync(string description) Parameters description string Returns Task"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestSelfUser.UpdateAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestSelfUser.UpdateAsync.html",
    "title": "Method UpdateAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method UpdateAsync Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll UpdateAsync() public override Task UpdateAsync() Returns Task"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestSimpleClip.EditUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestSimpleClip.EditUrl.html",
    "title": "Property EditUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property EditUrl Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll EditUrl A URL that you can use to edit the clip’s title, identify the part of the clip to publish, and publish the clip. public string EditUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestSimpleClip.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestSimpleClip.html",
    "title": "Class RestSimpleClip | AuxLabs.Twitch Documentation",
    "keywords": "Class RestSimpleClip Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll A simplified instance of a RestClip. public class RestSimpleClip : RestEntity<string> Inheritance object RestEntity<string> RestSimpleClip Derived RestClip Inherited Members RestEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EditUrl A URL that you can use to edit the clip’s title, identify the part of the clip to publish, and publish the clip."
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestSimpleUser.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestSimpleUser.-ctor.html",
    "title": "Constructor RestSimpleUser | AuxLabs.Twitch Documentation",
    "keywords": "Constructor RestSimpleUser Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll RestSimpleUser(TwitchRestClient, string) public RestSimpleUser(TwitchRestClient twitch, string id) Parameters twitch TwitchRestClient id string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestSimpleUser.DisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestSimpleUser.DisplayName.html",
    "title": "Property DisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property DisplayName Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll DisplayName User’s display name public string DisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestSimpleUser.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestSimpleUser.html",
    "title": "Class RestSimpleUser | AuxLabs.Twitch Documentation",
    "keywords": "Class RestSimpleUser Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll public class RestSimpleUser : RestPartialUser Inheritance object RestEntity<string> RestPartialUser RestSimpleUser Derived RestBitsUser RestChannel RestChatUser RestFollowUser RestUser Inherited Members RestPartialUser.Name RestEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RestSimpleUser(TwitchRestClient, string) Properties DisplayName User’s display name Methods ToString()"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestSimpleUser.ToString.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestSimpleUser.ToString.html",
    "title": "Method ToString | AuxLabs.Twitch Documentation",
    "keywords": "Method ToString Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll ToString() public override string ToString() Returns string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestUser.BroadcasterType.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestUser.BroadcasterType.html",
    "title": "Property BroadcasterType | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterType Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll BroadcasterType User’s broadcaster type public BroadcasterType BroadcasterType { get; } Property Value BroadcasterType"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestUser.CreatedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestUser.CreatedAt.html",
    "title": "Property CreatedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property CreatedAt Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll CreatedAt User’s verified email address public DateTime CreatedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestUser.Description.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestUser.Description.html",
    "title": "Property Description | AuxLabs.Twitch Documentation",
    "keywords": "Property Description Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Description User’s channel description public string Description { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestUser.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestUser.html",
    "title": "Class RestUser | AuxLabs.Twitch Documentation",
    "keywords": "Class RestUser Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll public class RestUser : RestSimpleUser Inheritance object RestEntity<string> RestPartialUser RestSimpleUser RestUser Derived RestSelfUser Inherited Members RestSimpleUser.DisplayName RestSimpleUser.ToString() RestPartialUser.Name RestEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties BroadcasterType User’s broadcaster type CreatedAt User’s verified email address Description User’s channel description OfflineImageUrl URL of the user’s offline image ProfileImageUrl URL of the user’s profile image Type User’s type ViewCount Total number of views of the user’s channel Methods UpdateAsync()"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestUser.OfflineImageUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestUser.OfflineImageUrl.html",
    "title": "Property OfflineImageUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property OfflineImageUrl Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll OfflineImageUrl URL of the user’s offline image public string OfflineImageUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestUser.ProfileImageUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestUser.ProfileImageUrl.html",
    "title": "Property ProfileImageUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property ProfileImageUrl Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll ProfileImageUrl URL of the user’s profile image public string ProfileImageUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestUser.Type.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestUser.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll Type User’s type public UserType Type { get; } Property Value UserType"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestUser.UpdateAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestUser.UpdateAsync.html",
    "title": "Method UpdateAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method UpdateAsync Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll UpdateAsync() public virtual Task UpdateAsync() Returns Task"
  },
  "api/AuxLabs.Twitch.Rest.Entities.RestUser.ViewCount.html": {
    "href": "api/AuxLabs.Twitch.Rest.Entities.RestUser.ViewCount.html",
    "title": "Property ViewCount | AuxLabs.Twitch Documentation",
    "keywords": "Property ViewCount Namespace AuxLabs.Twitch.Rest.Entities Assembly AuxLabs.Twitch.Rest.dll ViewCount Total number of views of the user’s channel public int ViewCount { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.html": {
    "href": "api/AuxLabs.Twitch.Rest.html",
    "title": "Namespace AuxLabs.Twitch.Rest | AuxLabs.Twitch Documentation",
    "keywords": "Namespace AuxLabs.Twitch.Rest AuxLabs.Twitch.Rest.Api AuxLabs.Twitch.Rest.Entities AuxLabs.Twitch.Rest.Models AuxLabs.Twitch.Rest.Requests Classes TwitchRestClient TwitchRestConfig Interfaces IEventCondition"
  },
  "api/AuxLabs.Twitch.Rest.IEventCondition.html": {
    "href": "api/AuxLabs.Twitch.Rest.IEventCondition.html",
    "title": "Interface IEventCondition | AuxLabs.Twitch Documentation",
    "keywords": "Interface IEventCondition Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.Api.dll public interface IEventCondition"
  },
  "api/AuxLabs.Twitch.Rest.Models.AcceptedTransport.ConnectedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AcceptedTransport.ConnectedAt.html",
    "title": "Property ConnectedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property ConnectedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ConnectedAt The date and time that the WebSocket was connected. Only specified for websockets. [JsonInclude] [JsonPropertyName(\"connected_at\")] public DateTime ConnectedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.AcceptedTransport.DisconnectedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AcceptedTransport.DisconnectedAt.html",
    "title": "Property DisconnectedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property DisconnectedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll DisconnectedAt The date and time that the WebSocket was disconnected. Only specified for websockets. [JsonInclude] [JsonPropertyName(\"disconnected_at\")] public DateTime DisconnectedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.AcceptedTransport.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AcceptedTransport.html",
    "title": "Class AcceptedTransport | AuxLabs.Twitch Documentation",
    "keywords": "Class AcceptedTransport Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class AcceptedTransport : Transport Inheritance object Transport AcceptedTransport Inherited Members Transport.Method Transport.Callback Transport.Secret Transport.SessionId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ConnectedAt The date and time that the WebSocket was connected. Only specified for websockets. DisconnectedAt The date and time that the WebSocket was disconnected. Only specified for websockets."
  },
  "api/AuxLabs.Twitch.Rest.Models.AccessTokenInfo.ClientId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AccessTokenInfo.ClientId.html",
    "title": "Property ClientId | AuxLabs.Twitch Documentation",
    "keywords": "Property ClientId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ClientId [JsonInclude] [JsonPropertyName(\"client_id\")] public string ClientId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.AccessTokenInfo.ExpiresInSeconds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AccessTokenInfo.ExpiresInSeconds.html",
    "title": "Property ExpiresInSeconds | AuxLabs.Twitch Documentation",
    "keywords": "Property ExpiresInSeconds Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ExpiresInSeconds [JsonInclude] [JsonPropertyName(\"expires_in\")] public int? ExpiresInSeconds { get; } Property Value int?"
  },
  "api/AuxLabs.Twitch.Rest.Models.AccessTokenInfo.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AccessTokenInfo.html",
    "title": "Class AccessTokenInfo | AuxLabs.Twitch Documentation",
    "keywords": "Class AccessTokenInfo Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class AccessTokenInfo Inheritance object AccessTokenInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ClientId ExpiresInSeconds Scopes UserId UserName"
  },
  "api/AuxLabs.Twitch.Rest.Models.AccessTokenInfo.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AccessTokenInfo.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Scopes [JsonInclude] [JsonPropertyName(\"scopes\")] public IReadOnlyCollection<string> Scopes { get; } Property Value IReadOnlyCollection<string>"
  },
  "api/AuxLabs.Twitch.Rest.Models.AccessTokenInfo.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AccessTokenInfo.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserId [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.AccessTokenInfo.UserName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AccessTokenInfo.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserName [JsonInclude] [JsonPropertyName(\"login\")] public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Album.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Album.html",
    "title": "Class Album | AuxLabs.Twitch Documentation",
    "keywords": "Class Album Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Album Inheritance object Album Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id The album’s Amazon Standard Identification Number. ImageUrl A URL to the album’s cover art. Name The album’s name."
  },
  "api/AuxLabs.Twitch.Rest.Models.Album.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Album.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id The album’s Amazon Standard Identification Number. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Album.ImageUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Album.ImageUrl.html",
    "title": "Property ImageUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property ImageUrl Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ImageUrl A URL to the album’s cover art. [JsonInclude] [JsonPropertyName(\"image_url\")] public string ImageUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Album.Name.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Album.Name.html",
    "title": "Property Name | AuxLabs.Twitch Documentation",
    "keywords": "Property Name Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Name The album’s name. [JsonInclude] [JsonPropertyName(\"name\")] public string Name { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Analytic.DateRange.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Analytic.DateRange.html",
    "title": "Property DateRange | AuxLabs.Twitch Documentation",
    "keywords": "Property DateRange Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll DateRange The reporting window’s start and end dates. [JsonInclude] [JsonPropertyName(\"date_range\")] public DateRange DateRange { get; } Property Value DateRange"
  },
  "api/AuxLabs.Twitch.Rest.Models.Analytic.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Analytic.html",
    "title": "Class Analytic | AuxLabs.Twitch Documentation",
    "keywords": "Class Analytic Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public abstract class Analytic Inheritance object Analytic Derived ExtensionAnalytic GameAnalytic Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DateRange The reporting window’s start and end dates. Type The type of report. Url The URL used to download the report."
  },
  "api/AuxLabs.Twitch.Rest.Models.Analytic.Type.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Analytic.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Type The type of report. [JsonInclude] [JsonPropertyName(\"type\")] public AnalyticType Type { get; } Property Value AnalyticType"
  },
  "api/AuxLabs.Twitch.Rest.Models.Analytic.Url.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Analytic.Url.html",
    "title": "Property Url | AuxLabs.Twitch Documentation",
    "keywords": "Property Url Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Url The URL used to download the report. [JsonInclude] [JsonPropertyName(\"URL\")] public string Url { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.AppIdentity.AccessToken.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AppIdentity.AccessToken.html",
    "title": "Property AccessToken | AuxLabs.Twitch Documentation",
    "keywords": "Property AccessToken Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll AccessToken [JsonInclude] [JsonPropertyName(\"access_token\")] public string AccessToken { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.AppIdentity.ExpiresInSeconds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AppIdentity.ExpiresInSeconds.html",
    "title": "Property ExpiresInSeconds | AuxLabs.Twitch Documentation",
    "keywords": "Property ExpiresInSeconds Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ExpiresInSeconds [JsonInclude] [JsonPropertyName(\"expires_in\")] public int? ExpiresInSeconds { get; } Property Value int?"
  },
  "api/AuxLabs.Twitch.Rest.Models.AppIdentity.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AppIdentity.html",
    "title": "Class AppIdentity | AuxLabs.Twitch Documentation",
    "keywords": "Class AppIdentity Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class AppIdentity Inheritance object AppIdentity Derived UserIdentity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AccessToken ExpiresInSeconds TokenType"
  },
  "api/AuxLabs.Twitch.Rest.Models.AppIdentity.TokenType.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AppIdentity.TokenType.html",
    "title": "Property TokenType | AuxLabs.Twitch Documentation",
    "keywords": "Property TokenType Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll TokenType [JsonInclude] [JsonPropertyName(\"token_type\")] public TokenType TokenType { get; } Property Value TokenType"
  },
  "api/AuxLabs.Twitch.Rest.Models.Artist.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Artist.html",
    "title": "Class Artist | AuxLabs.Twitch Documentation",
    "keywords": "Class Artist Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Artist Inheritance object Artist Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id The artist’s Amazon Standard Identification Number. Name The artist’s name. UserId The ID of the Twitch user that created the track."
  },
  "api/AuxLabs.Twitch.Rest.Models.Artist.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Artist.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id The artist’s Amazon Standard Identification Number. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Artist.Name.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Artist.Name.html",
    "title": "Property Name | AuxLabs.Twitch Documentation",
    "keywords": "Property Name Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Name The artist’s name. [JsonInclude] [JsonPropertyName(\"name\")] public string Name { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Artist.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Artist.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserId The ID of the Twitch user that created the track. [JsonInclude] [JsonPropertyName(\"creator_channel_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.AuthorizationCondition.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AuthorizationCondition.-ctor.html",
    "title": "Constructor AuthorizationCondition | AuxLabs.Twitch Documentation",
    "keywords": "Constructor AuthorizationCondition Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll AuthorizationCondition() public AuthorizationCondition() AuthorizationCondition(string) public AuthorizationCondition(string clientId) Parameters clientId string"
  },
  "api/AuxLabs.Twitch.Rest.Models.AuthorizationCondition.ClientId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AuthorizationCondition.ClientId.html",
    "title": "Property ClientId | AuxLabs.Twitch Documentation",
    "keywords": "Property ClientId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ClientId Your application's client id. [JsonInclude] [JsonPropertyName(\"client_id\")] public string ClientId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.AuthorizationCondition.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AuthorizationCondition.html",
    "title": "Class AuthorizationCondition | AuxLabs.Twitch Documentation",
    "keywords": "Class AuthorizationCondition Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class AuthorizationCondition : IEventCondition Inheritance object AuthorizationCondition Implements IEventCondition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthorizationCondition() AuthorizationCondition(string) Properties ClientId Your application's client id. Operators implicit operator string(AuthorizationCondition) implicit operator AuthorizationCondition(string)"
  },
  "api/AuxLabs.Twitch.Rest.Models.AuthorizationCondition.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AuthorizationCondition.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator string(AuthorizationCondition) public static implicit operator string(AuthorizationCondition value) Parameters value AuthorizationCondition Returns string implicit operator AuthorizationCondition(string) public static implicit operator AuthorizationCondition(string v) Parameters v string Returns AuthorizationCondition"
  },
  "api/AuxLabs.Twitch.Rest.Models.AutomodSettings.Aggression.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AutomodSettings.Aggression.html",
    "title": "Property Aggression | AuxLabs.Twitch Documentation",
    "keywords": "Property Aggression Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Aggression The Automod level for hostility involving aggression. [JsonInclude] [JsonPropertyName(\"aggression\")] public int Aggression { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.AutomodSettings.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AutomodSettings.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The broadcaster’s ID. [JsonInclude] [JsonPropertyName(\"broadcaster_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.AutomodSettings.Bullying.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AutomodSettings.Bullying.html",
    "title": "Property Bullying | AuxLabs.Twitch Documentation",
    "keywords": "Property Bullying Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Bullying The Automod level for hostility involving name calling or insults. [JsonInclude] [JsonPropertyName(\"bullying\")] public int Bullying { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.AutomodSettings.Disability.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AutomodSettings.Disability.html",
    "title": "Property Disability | AuxLabs.Twitch Documentation",
    "keywords": "Property Disability Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Disability The Automod level for discrimination against disability. [JsonInclude] [JsonPropertyName(\"disability\")] public int Disability { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.AutomodSettings.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AutomodSettings.html",
    "title": "Class AutomodSettings | AuxLabs.Twitch Documentation",
    "keywords": "Class AutomodSettings Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class AutomodSettings Inheritance object AutomodSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Aggression The Automod level for hostility involving aggression. BroadcasterId The broadcaster’s ID. Bullying The Automod level for hostility involving name calling or insults. Disability The Automod level for discrimination against disability. Misogyny The Automod level for discrimination against women. ModeratorId The moderator’s ID. OverallLevel The default AutoMod level for the broadcaster. RaceEthnicityOrReligion The Automod level for racial discrimination. SexBasedTerms The Automod level for sexual content. SexualitySexOrGender The AutoMod level for discrimination based on sexuality, sex, or gender. Swearing The Automod level for profanity."
  },
  "api/AuxLabs.Twitch.Rest.Models.AutomodSettings.Misogyny.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AutomodSettings.Misogyny.html",
    "title": "Property Misogyny | AuxLabs.Twitch Documentation",
    "keywords": "Property Misogyny Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Misogyny The Automod level for discrimination against women. [JsonInclude] [JsonPropertyName(\"misogyny\")] public int Misogyny { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.AutomodSettings.ModeratorId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AutomodSettings.ModeratorId.html",
    "title": "Property ModeratorId | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorId The moderator’s ID. [JsonInclude] [JsonPropertyName(\"moderator_id\")] public string ModeratorId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.AutomodSettings.OverallLevel.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AutomodSettings.OverallLevel.html",
    "title": "Property OverallLevel | AuxLabs.Twitch Documentation",
    "keywords": "Property OverallLevel Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll OverallLevel The default AutoMod level for the broadcaster. [JsonInclude] [JsonPropertyName(\"overall_level\")] public int? OverallLevel { get; } Property Value int?"
  },
  "api/AuxLabs.Twitch.Rest.Models.AutomodSettings.RaceEthnicityOrReligion.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AutomodSettings.RaceEthnicityOrReligion.html",
    "title": "Property RaceEthnicityOrReligion | AuxLabs.Twitch Documentation",
    "keywords": "Property RaceEthnicityOrReligion Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll RaceEthnicityOrReligion The Automod level for racial discrimination. [JsonInclude] [JsonPropertyName(\"race_ethnicity_or_religion\")] public int RaceEthnicityOrReligion { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.AutomodSettings.SexBasedTerms.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AutomodSettings.SexBasedTerms.html",
    "title": "Property SexBasedTerms | AuxLabs.Twitch Documentation",
    "keywords": "Property SexBasedTerms Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll SexBasedTerms The Automod level for sexual content. [JsonInclude] [JsonPropertyName(\"sex_based_terms\")] public int SexBasedTerms { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.AutomodSettings.SexualitySexOrGender.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AutomodSettings.SexualitySexOrGender.html",
    "title": "Property SexualitySexOrGender | AuxLabs.Twitch Documentation",
    "keywords": "Property SexualitySexOrGender Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll SexualitySexOrGender The AutoMod level for discrimination based on sexuality, sex, or gender. [JsonInclude] [JsonPropertyName(\"sexuality_sex_or_gender\")] public int SexualitySexOrGender { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.AutomodSettings.Swearing.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.AutomodSettings.Swearing.html",
    "title": "Property Swearing | AuxLabs.Twitch Documentation",
    "keywords": "Property Swearing Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Swearing The Automod level for profanity. [JsonInclude] [JsonPropertyName(\"swearing\")] public int Swearing { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.Badge.ClickAction.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Badge.ClickAction.html",
    "title": "Property ClickAction | AuxLabs.Twitch Documentation",
    "keywords": "Property ClickAction Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ClickAction The action to take when clicking on the badge. [JsonInclude] [JsonPropertyName(\"click_action\")] public string ClickAction { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Badge.ClickUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Badge.ClickUrl.html",
    "title": "Property ClickUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property ClickUrl Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ClickUrl The URL to navigate to when clicking on the badge. [JsonInclude] [JsonPropertyName(\"click_url\")] public string ClickUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Badge.Description.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Badge.Description.html",
    "title": "Property Description | AuxLabs.Twitch Documentation",
    "keywords": "Property Description Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Description The description of the badge. [JsonInclude] [JsonPropertyName(\"description\")] public string Description { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Badge.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Badge.html",
    "title": "Class Badge | AuxLabs.Twitch Documentation",
    "keywords": "Class Badge Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Badge Inheritance object Badge Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ClickAction The action to take when clicking on the badge. ClickUrl The URL to navigate to when clicking on the badge. Description The description of the badge. Id An ID that identifies this version of the badge. The ID can be any value. LargeImageUrl A URL to the large version (72px x 72px) of the badge. MediumImageUrl A URL to the medium version (36px x 36px) of the badge. SmallImageUrl A URL to the small version (18px x 18px) of the badge. Title The title of the badge."
  },
  "api/AuxLabs.Twitch.Rest.Models.Badge.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Badge.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id An ID that identifies this version of the badge. The ID can be any value. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Badge.LargeImageUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Badge.LargeImageUrl.html",
    "title": "Property LargeImageUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property LargeImageUrl Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll LargeImageUrl A URL to the large version (72px x 72px) of the badge. [JsonInclude] [JsonPropertyName(\"image_url_4x\")] public string LargeImageUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Badge.MediumImageUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Badge.MediumImageUrl.html",
    "title": "Property MediumImageUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property MediumImageUrl Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll MediumImageUrl A URL to the medium version (36px x 36px) of the badge. [JsonInclude] [JsonPropertyName(\"image_url_2x\")] public string MediumImageUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Badge.SmallImageUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Badge.SmallImageUrl.html",
    "title": "Property SmallImageUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property SmallImageUrl Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll SmallImageUrl A URL to the small version (18px x 18px) of the badge. [JsonInclude] [JsonPropertyName(\"image_url_1x\")] public string SmallImageUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Badge.Title.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Badge.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Title The title of the badge. [JsonInclude] [JsonPropertyName(\"title\")] public string Title { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.BadgeSet.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BadgeSet.html",
    "title": "Class BadgeSet | AuxLabs.Twitch Documentation",
    "keywords": "Class BadgeSet Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class BadgeSet Inheritance object BadgeSet Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties SetId An ID that identifies this set of chat badges. Versions A collection of chat badges in this set."
  },
  "api/AuxLabs.Twitch.Rest.Models.BadgeSet.SetId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BadgeSet.SetId.html",
    "title": "Property SetId | AuxLabs.Twitch Documentation",
    "keywords": "Property SetId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll SetId An ID that identifies this set of chat badges. [JsonInclude] [JsonPropertyName(\"set_id\")] public string SetId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.BadgeSet.Versions.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BadgeSet.Versions.html",
    "title": "Property Versions | AuxLabs.Twitch Documentation",
    "keywords": "Property Versions Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Versions A collection of chat badges in this set. [JsonInclude] [JsonPropertyName(\"versions\")] public IReadOnlyCollection<Badge> Versions { get; } Property Value IReadOnlyCollection<Badge>"
  },
  "api/AuxLabs.Twitch.Rest.Models.Ban.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Ban.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The broadcaster whose chat room the user was banned from chatting in. [JsonInclude] [JsonPropertyName(\"broadcaster_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Ban.CreatedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Ban.CreatedAt.html",
    "title": "Property CreatedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property CreatedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CreatedAt The UTC date and time that the ban or timeout was placed. [JsonInclude] [JsonPropertyName(\"created_at\")] public DateTime CreatedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.Ban.EndsAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Ban.EndsAt.html",
    "title": "Property EndsAt | AuxLabs.Twitch Documentation",
    "keywords": "Property EndsAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll EndsAt The UTC date and time that the timeout will end. [JsonInclude] [JsonPropertyName(\"end_time\")] public DateTime? EndsAt { get; } Property Value DateTime?"
  },
  "api/AuxLabs.Twitch.Rest.Models.Ban.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Ban.html",
    "title": "Class Ban | AuxLabs.Twitch Documentation",
    "keywords": "Class Ban Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Ban Inheritance object Ban Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The broadcaster whose chat room the user was banned from chatting in. CreatedAt The UTC date and time that the ban or timeout was placed. EndsAt The UTC date and time that the timeout will end. ModeratorId The moderator that banned or put the user in the timeout. UserId The user that was banned or put in a timeout."
  },
  "api/AuxLabs.Twitch.Rest.Models.Ban.ModeratorId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Ban.ModeratorId.html",
    "title": "Property ModeratorId | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorId The moderator that banned or put the user in the timeout. [JsonInclude] [JsonPropertyName(\"moderator_id\")] public string ModeratorId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Ban.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Ban.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserId The user that was banned or put in a timeout. [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.BannedUser.CreatedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BannedUser.CreatedAt.html",
    "title": "Property CreatedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property CreatedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CreatedAt The UTC date and time of when the user was banned. [JsonInclude] [JsonPropertyName(\"created_at\")] public DateTime CreatedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.BannedUser.ExpiresAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BannedUser.ExpiresAt.html",
    "title": "Property ExpiresAt | AuxLabs.Twitch Documentation",
    "keywords": "Property ExpiresAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ExpiresAt The UTC date and time of when the timeout expires [JsonInclude] [JsonPropertyName(\"expires_at\")] public DateTime? ExpiresAt { get; } Property Value DateTime?"
  },
  "api/AuxLabs.Twitch.Rest.Models.BannedUser.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BannedUser.html",
    "title": "Class BannedUser | AuxLabs.Twitch Documentation",
    "keywords": "Class BannedUser Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class BannedUser Inheritance object BannedUser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt The UTC date and time of when the user was banned. ExpiresAt The UTC date and time of when the timeout expires ModeratorDisplayName The moderator’s display name. ModeratorId The ID of the moderator that banned the user or put them in a timeout. ModeratorName The moderator’s login name. Reason The reason the user was banned or put in a timeout if the moderator provided one. UserDisplayName The banned user’s display name. UserId The ID of the banned user. UserName The banned user’s login name."
  },
  "api/AuxLabs.Twitch.Rest.Models.BannedUser.ModeratorDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BannedUser.ModeratorDisplayName.html",
    "title": "Property ModeratorDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorDisplayName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorDisplayName The moderator’s display name. [JsonInclude] [JsonPropertyName(\"moderator_name\")] public string ModeratorDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.BannedUser.ModeratorId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BannedUser.ModeratorId.html",
    "title": "Property ModeratorId | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorId The ID of the moderator that banned the user or put them in a timeout. [JsonInclude] [JsonPropertyName(\"moderator_id\")] public string ModeratorId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.BannedUser.ModeratorName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BannedUser.ModeratorName.html",
    "title": "Property ModeratorName | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorName The moderator’s login name. [JsonInclude] [JsonPropertyName(\"moderator_login\")] public string ModeratorName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.BannedUser.Reason.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BannedUser.Reason.html",
    "title": "Property Reason | AuxLabs.Twitch Documentation",
    "keywords": "Property Reason Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Reason The reason the user was banned or put in a timeout if the moderator provided one. [JsonInclude] [JsonPropertyName(\"reason\")] public string Reason { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.BannedUser.UserDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BannedUser.UserDisplayName.html",
    "title": "Property UserDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserDisplayName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserDisplayName The banned user’s display name. [JsonInclude] [JsonPropertyName(\"user_name\")] public string UserDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.BannedUser.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BannedUser.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserId The ID of the banned user. [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.BannedUser.UserName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BannedUser.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserName The banned user’s login name. [JsonInclude] [JsonPropertyName(\"user_login\")] public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.BitsTier.CanCheer.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BitsTier.CanCheer.html",
    "title": "Property CanCheer | AuxLabs.Twitch Documentation",
    "keywords": "Property CanCheer Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CanCheer Determines whether users can cheer at this tier level. [JsonInclude] [JsonPropertyName(\"can_cheer\")] public bool CanCheer { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Rest.Models.BitsTier.Color.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BitsTier.Color.html",
    "title": "Property Color | AuxLabs.Twitch Documentation",
    "keywords": "Property Color Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Color The hex code of the color associated with this tier level [JsonInclude] [JsonPropertyName(\"color\")] public Color Color { get; } Property Value Color"
  },
  "api/AuxLabs.Twitch.Rest.Models.BitsTier.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BitsTier.html",
    "title": "Class BitsTier | AuxLabs.Twitch Documentation",
    "keywords": "Class BitsTier Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class BitsTier Inheritance object BitsTier Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CanCheer Determines whether users can cheer at this tier level. Color The hex code of the color associated with this tier level Images The animated and static image sets for the Cheermote. Level The tier level. MinimumBits The minimum number of Bits that you must cheer at this tier level. ShowInBitsCard Determines whether this tier level is shown in the Bits card."
  },
  "api/AuxLabs.Twitch.Rest.Models.BitsTier.Images.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BitsTier.Images.html",
    "title": "Property Images | AuxLabs.Twitch Documentation",
    "keywords": "Property Images Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Images The animated and static image sets for the Cheermote. [JsonInclude] [JsonPropertyName(\"images\")] public CheermoteTheme Images { get; } Property Value CheermoteTheme"
  },
  "api/AuxLabs.Twitch.Rest.Models.BitsTier.Level.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BitsTier.Level.html",
    "title": "Property Level | AuxLabs.Twitch Documentation",
    "keywords": "Property Level Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Level The tier level. [JsonInclude] [JsonPropertyName(\"id\")] public string Level { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.BitsTier.MinimumBits.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BitsTier.MinimumBits.html",
    "title": "Property MinimumBits | AuxLabs.Twitch Documentation",
    "keywords": "Property MinimumBits Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll MinimumBits The minimum number of Bits that you must cheer at this tier level. [JsonInclude] [JsonPropertyName(\"min_bits\")] public int MinimumBits { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.BitsTier.ShowInBitsCard.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BitsTier.ShowInBitsCard.html",
    "title": "Property ShowInBitsCard | AuxLabs.Twitch Documentation",
    "keywords": "Property ShowInBitsCard Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ShowInBitsCard Determines whether this tier level is shown in the Bits card. [JsonInclude] [JsonPropertyName(\"show_in_bits_card\")] public bool ShowInBitsCard { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Rest.Models.BitsUser.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BitsUser.html",
    "title": "Class BitsUser | AuxLabs.Twitch Documentation",
    "keywords": "Class BitsUser Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class BitsUser Inheritance object BitsUser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Rank The user’s position on the leaderboard. TotalBits The number of bits the user has cheered. UserDisplayName The user’s display name. UserId An ID that identifies a user on the leaderboard. UserName The user’s login name."
  },
  "api/AuxLabs.Twitch.Rest.Models.BitsUser.Rank.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BitsUser.Rank.html",
    "title": "Property Rank | AuxLabs.Twitch Documentation",
    "keywords": "Property Rank Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Rank The user’s position on the leaderboard. [JsonInclude] [JsonPropertyName(\"rank\")] public int Rank { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.BitsUser.TotalBits.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BitsUser.TotalBits.html",
    "title": "Property TotalBits | AuxLabs.Twitch Documentation",
    "keywords": "Property TotalBits Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll TotalBits The number of bits the user has cheered. [JsonInclude] [JsonPropertyName(\"score\")] public int TotalBits { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.BitsUser.UserDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BitsUser.UserDisplayName.html",
    "title": "Property UserDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserDisplayName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserDisplayName The user’s display name. [JsonInclude] [JsonPropertyName(\"user_name\")] public string UserDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.BitsUser.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BitsUser.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserId An ID that identifies a user on the leaderboard. [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.BitsUser.UserName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BitsUser.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserName The user’s login name. [JsonInclude] [JsonPropertyName(\"user_login\")] public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.BlockedTerm.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BlockedTerm.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The broadcaster that owns the list of blocked terms. [JsonInclude] [JsonPropertyName(\"broadcaster_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.BlockedTerm.CreatedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BlockedTerm.CreatedAt.html",
    "title": "Property CreatedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property CreatedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CreatedAt The UTC date and time that the term was blocked. [JsonInclude] [JsonPropertyName(\"created_at\")] public DateTime CreatedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.BlockedTerm.ExpiresAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BlockedTerm.ExpiresAt.html",
    "title": "Property ExpiresAt | AuxLabs.Twitch Documentation",
    "keywords": "Property ExpiresAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ExpiresAt The UTC date and time that the blocked term is set to expire. [JsonInclude] [JsonPropertyName(\"expires_at\")] public DateTime? ExpiresAt { get; } Property Value DateTime?"
  },
  "api/AuxLabs.Twitch.Rest.Models.BlockedTerm.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BlockedTerm.html",
    "title": "Class BlockedTerm | AuxLabs.Twitch Documentation",
    "keywords": "Class BlockedTerm Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class BlockedTerm Inheritance object BlockedTerm Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The broadcaster that owns the list of blocked terms. CreatedAt The UTC date and time that the term was blocked. ExpiresAt The UTC date and time that the blocked term is set to expire. Id An ID that identifies this blocked term. ModeratorId The moderator that blocked the word or phrase from being used in the broadcaster’s chat room. Text The blocked word or phrase. UpdatedAt The UTC date and time that the term was updated."
  },
  "api/AuxLabs.Twitch.Rest.Models.BlockedTerm.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BlockedTerm.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id An ID that identifies this blocked term. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.BlockedTerm.ModeratorId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BlockedTerm.ModeratorId.html",
    "title": "Property ModeratorId | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorId The moderator that blocked the word or phrase from being used in the broadcaster’s chat room. [JsonInclude] [JsonPropertyName(\"moderator_id\")] public string ModeratorId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.BlockedTerm.Text.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BlockedTerm.Text.html",
    "title": "Property Text | AuxLabs.Twitch Documentation",
    "keywords": "Property Text Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Text The blocked word or phrase. [JsonInclude] [JsonPropertyName(\"text\")] public string Text { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.BlockedTerm.UpdatedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BlockedTerm.UpdatedAt.html",
    "title": "Property UpdatedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property UpdatedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UpdatedAt The UTC date and time that the term was updated. [JsonInclude] [JsonPropertyName(\"updated_at\")] public DateTime UpdatedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.BlockReason.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BlockReason.html",
    "title": "Enum BlockReason | AuxLabs.Twitch Documentation",
    "keywords": "Enum BlockReason Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public enum BlockReason Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"harassment\")] Harassment = 1 [EnumMember(Value = \"other\")] Other = 0 [EnumMember(Value = \"spam\")] Spam = 2"
  },
  "api/AuxLabs.Twitch.Rest.Models.Broadcast.Culture.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Broadcast.Culture.html",
    "title": "Property Culture | AuxLabs.Twitch Documentation",
    "keywords": "Property Culture Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Culture The broadcaster's preferred language. [JsonInclude] [JsonPropertyName(\"language\")] public CultureInfo Culture { get; } Property Value CultureInfo"
  },
  "api/AuxLabs.Twitch.Rest.Models.Broadcast.GameId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Broadcast.GameId.html",
    "title": "Property GameId | AuxLabs.Twitch Documentation",
    "keywords": "Property GameId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll GameId The ID of the category or game being played. [JsonInclude] [JsonPropertyName(\"game_id\")] public string GameId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Broadcast.GameName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Broadcast.GameName.html",
    "title": "Property GameName | AuxLabs.Twitch Documentation",
    "keywords": "Property GameName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll GameName The name of the category or game being played. [JsonInclude] [JsonPropertyName(\"game_name\")] public string GameName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Broadcast.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Broadcast.html",
    "title": "Class Broadcast | AuxLabs.Twitch Documentation",
    "keywords": "Class Broadcast Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Broadcast Inheritance object Broadcast Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Culture The broadcaster's preferred language. GameId The ID of the category or game being played. GameName The name of the category or game being played. Id An ID that identifies the stream. IsMature Indicates whether the stream is meant for mature audiences. StartedAt The UTC date and time of when the broadcast began. Tags The tags applied to the stream. ThumbnailUrl A URL to an image of a frame from the last 5 minutes of the stream. Title The stream’s title. Type The type of stream. UserDisplayName The user’s display name. UserId The ID of the user that’s broadcasting the stream. UserName The user’s login name. ViewerCount The number of users watching the stream."
  },
  "api/AuxLabs.Twitch.Rest.Models.Broadcast.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Broadcast.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id An ID that identifies the stream. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Broadcast.IsMature.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Broadcast.IsMature.html",
    "title": "Property IsMature | AuxLabs.Twitch Documentation",
    "keywords": "Property IsMature Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll IsMature Indicates whether the stream is meant for mature audiences. [JsonInclude] [JsonPropertyName(\"is_mature\")] public bool IsMature { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Rest.Models.Broadcast.StartedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Broadcast.StartedAt.html",
    "title": "Property StartedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property StartedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll StartedAt The UTC date and time of when the broadcast began. [JsonInclude] [JsonPropertyName(\"started_at\")] public DateTime StartedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.Broadcast.Tags.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Broadcast.Tags.html",
    "title": "Property Tags | AuxLabs.Twitch Documentation",
    "keywords": "Property Tags Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Tags The tags applied to the stream. [JsonInclude] [JsonPropertyName(\"tags\")] public IReadOnlyCollection<string> Tags { get; } Property Value IReadOnlyCollection<string>"
  },
  "api/AuxLabs.Twitch.Rest.Models.Broadcast.ThumbnailUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Broadcast.ThumbnailUrl.html",
    "title": "Property ThumbnailUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property ThumbnailUrl Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ThumbnailUrl A URL to an image of a frame from the last 5 minutes of the stream. [JsonInclude] [JsonPropertyName(\"thumbnail_url\")] public string ThumbnailUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Broadcast.Title.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Broadcast.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Title The stream’s title. [JsonInclude] [JsonPropertyName(\"title\")] public string Title { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Broadcast.Type.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Broadcast.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Type The type of stream. [JsonInclude] [JsonPropertyName(\"type\")] public BroadcastType Type { get; } Property Value BroadcastType"
  },
  "api/AuxLabs.Twitch.Rest.Models.Broadcast.UserDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Broadcast.UserDisplayName.html",
    "title": "Property UserDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserDisplayName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserDisplayName The user’s display name. [JsonInclude] [JsonPropertyName(\"user_name\")] public string UserDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Broadcast.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Broadcast.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserId The ID of the user that’s broadcasting the stream. [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Broadcast.UserName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Broadcast.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserName The user’s login name. [JsonInclude] [JsonPropertyName(\"user_login\")] public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Broadcast.ViewerCount.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Broadcast.ViewerCount.html",
    "title": "Property ViewerCount | AuxLabs.Twitch Documentation",
    "keywords": "Property ViewerCount Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ViewerCount The number of users watching the stream. [JsonInclude] [JsonPropertyName(\"viewer_count\")] public int ViewerCount { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.BroadcasterCondition.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BroadcasterCondition.-ctor.html",
    "title": "Constructor BroadcasterCondition | AuxLabs.Twitch Documentation",
    "keywords": "Constructor BroadcasterCondition Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterCondition() public BroadcasterCondition() BroadcasterCondition(string) public BroadcasterCondition(string broadcasterId) Parameters broadcasterId string"
  },
  "api/AuxLabs.Twitch.Rest.Models.BroadcasterCondition.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BroadcasterCondition.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The broadcaster user ID of the channel for which notifications will be received. [JsonInclude] [JsonPropertyName(\"broadcaster_user_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.BroadcasterCondition.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BroadcasterCondition.html",
    "title": "Class BroadcasterCondition | AuxLabs.Twitch Documentation",
    "keywords": "Class BroadcasterCondition Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class BroadcasterCondition : IEventCondition Inheritance object BroadcasterCondition Implements IEventCondition Derived ModeratorCondition RewardCondition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BroadcasterCondition() BroadcasterCondition(string) Properties BroadcasterId The broadcaster user ID of the channel for which notifications will be received. Operators implicit operator string(BroadcasterCondition) implicit operator BroadcasterCondition(string)"
  },
  "api/AuxLabs.Twitch.Rest.Models.BroadcasterCondition.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BroadcasterCondition.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator string(BroadcasterCondition) public static implicit operator string(BroadcasterCondition value) Parameters value BroadcasterCondition Returns string implicit operator BroadcasterCondition(string) public static implicit operator BroadcasterCondition(string v) Parameters v string Returns BroadcasterCondition"
  },
  "api/AuxLabs.Twitch.Rest.Models.BroadcastMarker.CreatedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BroadcastMarker.CreatedAt.html",
    "title": "Property CreatedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property CreatedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CreatedAt The UTC date and time of when the user created the marker. [JsonInclude] [JsonPropertyName(\"created_at\")] public DateTime CreatedAt { get; set; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.BroadcastMarker.Description.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BroadcastMarker.Description.html",
    "title": "Property Description | AuxLabs.Twitch Documentation",
    "keywords": "Property Description Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Description A description that the user gave the marker to help them remember why they marked the location. [JsonInclude] [JsonPropertyName(\"description\")] public string Description { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.BroadcastMarker.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BroadcastMarker.html",
    "title": "Class BroadcastMarker | AuxLabs.Twitch Documentation",
    "keywords": "Class BroadcastMarker Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class BroadcastMarker Inheritance object BroadcastMarker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt The UTC date and time of when the user created the marker. Description A description that the user gave the marker to help them remember why they marked the location. Id An ID that identifies this marker. PositionSeconds The relative offset (in seconds) of the marker from the beginning of the stream."
  },
  "api/AuxLabs.Twitch.Rest.Models.BroadcastMarker.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BroadcastMarker.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id An ID that identifies this marker. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.BroadcastMarker.PositionSeconds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.BroadcastMarker.PositionSeconds.html",
    "title": "Property PositionSeconds | AuxLabs.Twitch Documentation",
    "keywords": "Property PositionSeconds Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll PositionSeconds The relative offset (in seconds) of the marker from the beginning of the stream. [JsonInclude] [JsonPropertyName(\"position_seconds\")] public int PositionSeconds { get; set; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.Category.BoxArtUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Category.BoxArtUrl.html",
    "title": "Property BoxArtUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property BoxArtUrl Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BoxArtUrl A URL to the category’s box art. [JsonInclude] [JsonPropertyName(\"box_art_url\")] public string BoxArtUrl { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Category.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Category.html",
    "title": "Class Category | AuxLabs.Twitch Documentation",
    "keywords": "Class Category Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Category Inheritance object Category Derived Game Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BoxArtUrl A URL to the category’s box art. Id An ID that identifies the category. Name The category’s name."
  },
  "api/AuxLabs.Twitch.Rest.Models.Category.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Category.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id An ID that identifies the category. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Category.Name.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Category.Name.html",
    "title": "Property Name | AuxLabs.Twitch Documentation",
    "keywords": "Property Name Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Name The category’s name. [JsonInclude] [JsonPropertyName(\"name\")] public string Name { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Channel.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Channel.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterDisplayName The broadcaster’s display name. [JsonInclude] [JsonPropertyName(\"broadcaster_name\")] public string BroadcasterDisplayName { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Channel.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Channel.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId An ID that uniquely identifies the broadcaster. [JsonInclude] [JsonPropertyName(\"broadcaster_id\")] public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Channel.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Channel.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterName The broadcaster’s login name. [JsonInclude] [JsonPropertyName(\"broadcaster_login\")] public string BroadcasterName { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Channel.Culture.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Channel.Culture.html",
    "title": "Property Culture | AuxLabs.Twitch Documentation",
    "keywords": "Property Culture Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Culture The broadcaster’s preferred language. [JsonInclude] [JsonPropertyName(\"broadcaster_language\")] public CultureInfo Culture { get; set; } Property Value CultureInfo"
  },
  "api/AuxLabs.Twitch.Rest.Models.Channel.Delay.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Channel.Delay.html",
    "title": "Property Delay | AuxLabs.Twitch Documentation",
    "keywords": "Property Delay Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Delay The value of the broadcaster’s stream delay setting, in seconds. [JsonInclude] [JsonPropertyName(\"delay\")] public uint Delay { get; set; } Property Value uint"
  },
  "api/AuxLabs.Twitch.Rest.Models.Channel.GameId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Channel.GameId.html",
    "title": "Property GameId | AuxLabs.Twitch Documentation",
    "keywords": "Property GameId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll GameId An ID that uniquely identifies the game that the broadcaster is playing or last played. [JsonInclude] [JsonPropertyName(\"game_id\")] public string GameId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Channel.GameName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Channel.GameName.html",
    "title": "Property GameName | AuxLabs.Twitch Documentation",
    "keywords": "Property GameName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll GameName The name of the game that the broadcaster is playing or last played. [JsonInclude] [JsonPropertyName(\"game_name\")] public string GameName { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Channel.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Channel.html",
    "title": "Class Channel | AuxLabs.Twitch Documentation",
    "keywords": "Class Channel Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Channel : ISimpleUser, IPartialUser, IChannel, IEntity<string> Inheritance object Channel Implements ISimpleUser IPartialUser IChannel IEntity<string> Derived ChannelBroadcast Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterDisplayName The broadcaster’s display name. BroadcasterId An ID that uniquely identifies the broadcaster. BroadcasterName The broadcaster’s login name. Culture The broadcaster’s preferred language. Delay The value of the broadcaster’s stream delay setting, in seconds. GameId An ID that uniquely identifies the game that the broadcaster is playing or last played. GameName The name of the game that the broadcaster is playing or last played. Tags The tags applied to the channel. Title The title of the stream that the broadcaster is currently streaming or last streamed."
  },
  "api/AuxLabs.Twitch.Rest.Models.Channel.Tags.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Channel.Tags.html",
    "title": "Property Tags | AuxLabs.Twitch Documentation",
    "keywords": "Property Tags Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Tags The tags applied to the channel. [JsonInclude] [JsonPropertyName(\"tags\")] public IReadOnlyCollection<string> Tags { get; set; } Property Value IReadOnlyCollection<string>"
  },
  "api/AuxLabs.Twitch.Rest.Models.Channel.Title.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Channel.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Title The title of the stream that the broadcaster is currently streaming or last streamed. [JsonInclude] [JsonPropertyName(\"title\")] public string Title { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ChannelBroadcast.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ChannelBroadcast.html",
    "title": "Class ChannelBroadcast | AuxLabs.Twitch Documentation",
    "keywords": "Class ChannelBroadcast Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class ChannelBroadcast : Channel, ISimpleUser, IPartialUser, IChannel, IEntity<string> Inheritance object Channel ChannelBroadcast Implements ISimpleUser IPartialUser IChannel IEntity<string> Inherited Members Channel.BroadcasterId Channel.BroadcasterName Channel.BroadcasterDisplayName Channel.Culture Channel.GameId Channel.GameName Channel.Title Channel.Delay Channel.Tags object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsLive Determines whether the broadcaster is streaming live. StartedAt The UTC date and time of when the broadcaster started streaming. ThumbnailUrl A URL to a thumbnail of the broadcaster’s profile image."
  },
  "api/AuxLabs.Twitch.Rest.Models.ChannelBroadcast.IsLive.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ChannelBroadcast.IsLive.html",
    "title": "Property IsLive | AuxLabs.Twitch Documentation",
    "keywords": "Property IsLive Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll IsLive Determines whether the broadcaster is streaming live. [JsonInclude] [JsonPropertyName(\"is_live\")] public bool IsLive { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Rest.Models.ChannelBroadcast.StartedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ChannelBroadcast.StartedAt.html",
    "title": "Property StartedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property StartedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll StartedAt The UTC date and time of when the broadcaster started streaming. [JsonInclude] [JsonPropertyName(\"started_at\")] public DateTime StartedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.ChannelBroadcast.ThumbnailUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ChannelBroadcast.ThumbnailUrl.html",
    "title": "Property ThumbnailUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property ThumbnailUrl Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ThumbnailUrl A URL to a thumbnail of the broadcaster’s profile image. [JsonInclude] [JsonPropertyName(\"thumbnail_url\")] public string ThumbnailUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ChannelEditor.CreatedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ChannelEditor.CreatedAt.html",
    "title": "Property CreatedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property CreatedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CreatedAt The date and time when the user became one of the broadcaster’s editors. [JsonInclude] [JsonPropertyName(\"created_at\")] public DateTime CreatedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.ChannelEditor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ChannelEditor.html",
    "title": "Class ChannelEditor | AuxLabs.Twitch Documentation",
    "keywords": "Class ChannelEditor Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class ChannelEditor Inheritance object ChannelEditor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt The date and time when the user became one of the broadcaster’s editors. UserId An ID that uniquely identifies a user with editor permissions. UserName The user’s display name."
  },
  "api/AuxLabs.Twitch.Rest.Models.ChannelEditor.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ChannelEditor.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserId An ID that uniquely identifies a user with editor permissions. [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ChannelEditor.UserName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ChannelEditor.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserName The user’s display name. [JsonInclude] [JsonPropertyName(\"user_name\")] public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ChannelTeam.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ChannelTeam.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterDisplayName The broadcaster’s display name. [JsonInclude] [JsonPropertyName(\"broadcaster_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ChannelTeam.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ChannelTeam.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId An ID that identifies the broadcaster. [JsonInclude] [JsonPropertyName(\"broadcaster_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ChannelTeam.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ChannelTeam.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterName The broadcaster’s login name. [JsonInclude] [JsonPropertyName(\"broadcaster_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ChannelTeam.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ChannelTeam.html",
    "title": "Class ChannelTeam | AuxLabs.Twitch Documentation",
    "keywords": "Class ChannelTeam Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class ChannelTeam : SimpleTeam Inheritance object SimpleTeam ChannelTeam Inherited Members SimpleTeam.Id SimpleTeam.Name SimpleTeam.DisplayName SimpleTeam.BackgroundImageUrl SimpleTeam.BannerUrl SimpleTeam.CreatedAt SimpleTeam.UpdatedAt SimpleTeam.Description SimpleTeam.ThumbnailUrl object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterDisplayName The broadcaster’s display name. BroadcasterId An ID that identifies the broadcaster. BroadcasterName The broadcaster’s login name."
  },
  "api/AuxLabs.Twitch.Rest.Models.CharityAmount.Currency.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CharityAmount.Currency.html",
    "title": "Property Currency | AuxLabs.Twitch Documentation",
    "keywords": "Property Currency Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Currency The ISO-4217 three-letter currency code that identifies the type of currency. [JsonInclude] [JsonPropertyName(\"currency\")] public readonly string Currency { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.CharityAmount.DecimalPlaces.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CharityAmount.DecimalPlaces.html",
    "title": "Property DecimalPlaces | AuxLabs.Twitch Documentation",
    "keywords": "Property DecimalPlaces Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll DecimalPlaces The number of decimal places used by the currency. [JsonInclude] [JsonPropertyName(\"decimal_places\")] public readonly int DecimalPlaces { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.CharityAmount.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CharityAmount.html",
    "title": "Struct CharityAmount | AuxLabs.Twitch Documentation",
    "keywords": "Struct CharityAmount Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public struct CharityAmount Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Currency The ISO-4217 three-letter currency code that identifies the type of currency. DecimalPlaces The number of decimal places used by the currency. Value The monetary amount in the currency’s minor unit."
  },
  "api/AuxLabs.Twitch.Rest.Models.CharityAmount.Value.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CharityAmount.Value.html",
    "title": "Property Value | AuxLabs.Twitch Documentation",
    "keywords": "Property Value Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Value The monetary amount in the currency’s minor unit. [JsonInclude] [JsonPropertyName(\"value\")] public readonly int Value { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.CharityCampaign.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CharityCampaign.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId An ID that identifies the broadcaster that’s running the campaign. [JsonInclude] [JsonPropertyName(\"broadcaster_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.CharityCampaign.BroadcasterLogin.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CharityCampaign.BroadcasterLogin.html",
    "title": "Property BroadcasterLogin | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterLogin Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterLogin The broadcaster’s login name. [JsonInclude] [JsonPropertyName(\"broadcaster_login\")] public string BroadcasterLogin { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.CharityCampaign.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CharityCampaign.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterName The broadcaster’s display name. [JsonInclude] [JsonPropertyName(\"broadcaster_name\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.CharityCampaign.CharityDescription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CharityCampaign.CharityDescription.html",
    "title": "Property CharityDescription | AuxLabs.Twitch Documentation",
    "keywords": "Property CharityDescription Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CharityDescription A description of the charity. [JsonInclude] [JsonPropertyName(\"charity_description\")] public string CharityDescription { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.CharityCampaign.CharityLogoUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CharityCampaign.CharityLogoUrl.html",
    "title": "Property CharityLogoUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property CharityLogoUrl Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CharityLogoUrl A URL to an image of the charity’s logo. [JsonInclude] [JsonPropertyName(\"charity_logo\")] public string CharityLogoUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.CharityCampaign.CharityName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CharityCampaign.CharityName.html",
    "title": "Property CharityName | AuxLabs.Twitch Documentation",
    "keywords": "Property CharityName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CharityName The charity’s name. [JsonInclude] [JsonPropertyName(\"charity_name\")] public string CharityName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.CharityCampaign.CharityWebsiteUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CharityCampaign.CharityWebsiteUrl.html",
    "title": "Property CharityWebsiteUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property CharityWebsiteUrl Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CharityWebsiteUrl A URL to the charity’s website. [JsonInclude] [JsonPropertyName(\"charity_website\")] public string CharityWebsiteUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.CharityCampaign.CurrentAmount.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CharityCampaign.CurrentAmount.html",
    "title": "Property CurrentAmount | AuxLabs.Twitch Documentation",
    "keywords": "Property CurrentAmount Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CurrentAmount The current amount of donations that the campaign has received. [JsonInclude] [JsonPropertyName(\"current_amount\")] public CharityAmount CurrentAmount { get; } Property Value CharityAmount"
  },
  "api/AuxLabs.Twitch.Rest.Models.CharityCampaign.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CharityCampaign.html",
    "title": "Class CharityCampaign | AuxLabs.Twitch Documentation",
    "keywords": "Class CharityCampaign Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class CharityCampaign Inheritance object CharityCampaign Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId An ID that identifies the broadcaster that’s running the campaign. BroadcasterLogin The broadcaster’s login name. BroadcasterName The broadcaster’s display name. CharityDescription A description of the charity. CharityLogoUrl A URL to an image of the charity’s logo. CharityName The charity’s name. CharityWebsiteUrl A URL to the charity’s website. CurrentAmount The current amount of donations that the campaign has received. Id An ID that identifies the charity campaign. TargetAmount The campaign’s fundraising goal."
  },
  "api/AuxLabs.Twitch.Rest.Models.CharityCampaign.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CharityCampaign.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id An ID that identifies the charity campaign. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.CharityCampaign.TargetAmount.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CharityCampaign.TargetAmount.html",
    "title": "Property TargetAmount | AuxLabs.Twitch Documentation",
    "keywords": "Property TargetAmount Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll TargetAmount The campaign’s fundraising goal. [JsonInclude] [JsonPropertyName(\"target_amount\")] public CharityAmount TargetAmount { get; } Property Value CharityAmount"
  },
  "api/AuxLabs.Twitch.Rest.Models.CharityDonation.Amount.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CharityDonation.Amount.html",
    "title": "Property Amount | AuxLabs.Twitch Documentation",
    "keywords": "Property Amount Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Amount The amount of money that the user donated. [JsonInclude] [JsonPropertyName(\"amount\")] public CharityAmount Amount { get; } Property Value CharityAmount"
  },
  "api/AuxLabs.Twitch.Rest.Models.CharityDonation.CampaignId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CharityDonation.CampaignId.html",
    "title": "Property CampaignId | AuxLabs.Twitch Documentation",
    "keywords": "Property CampaignId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CampaignId An ID that identifies the charity campaign that the donation applies to. [JsonInclude] [JsonPropertyName(\"campaign_id\")] public string CampaignId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.CharityDonation.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CharityDonation.html",
    "title": "Class CharityDonation | AuxLabs.Twitch Documentation",
    "keywords": "Class CharityDonation Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class CharityDonation Inheritance object CharityDonation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Amount The amount of money that the user donated. CampaignId An ID that identifies the charity campaign that the donation applies to. Id An ID that identifies the donation. UserId An ID that identifies a user that donated money to the campaign. UserLogin The user’s login name. UserName The user’s display name."
  },
  "api/AuxLabs.Twitch.Rest.Models.CharityDonation.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CharityDonation.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id An ID that identifies the donation. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.CharityDonation.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CharityDonation.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserId An ID that identifies a user that donated money to the campaign. [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.CharityDonation.UserLogin.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CharityDonation.UserLogin.html",
    "title": "Property UserLogin | AuxLabs.Twitch Documentation",
    "keywords": "Property UserLogin Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserLogin The user’s login name. [JsonInclude] [JsonPropertyName(\"user_login\")] public string UserLogin { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.CharityDonation.UserName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CharityDonation.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserName The user’s display name. [JsonInclude] [JsonPropertyName(\"user_name\")] public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ChatSettings.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ChatSettings.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster specified in the request. [JsonInclude] [JsonPropertyName(\"broadcaster_id\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ChatSettings.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ChatSettings.html",
    "title": "Class ChatSettings | AuxLabs.Twitch Documentation",
    "keywords": "Class ChatSettings Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class ChatSettings : PatchChatSettingsBody Inheritance object PatchChatSettingsBody ChatSettings Inherited Members PatchChatSettingsBody.IsEmoteOnly PatchChatSettingsBody.IsFollowerOnly PatchChatSettingsBody.FollowerOnlyMinutes PatchChatSettingsBody.IsModeratorDelayed PatchChatSettingsBody.ModeratorDelaySeconds PatchChatSettingsBody.IsSlowEnabled PatchChatSettingsBody.SlowSeconds PatchChatSettingsBody.IsSubscriberOnly PatchChatSettingsBody.IsUniqueEnabled PatchChatSettingsBody.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the broadcaster specified in the request. ModeratorId The moderator’s ID."
  },
  "api/AuxLabs.Twitch.Rest.Models.ChatSettings.ModeratorId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ChatSettings.ModeratorId.html",
    "title": "Property ModeratorId | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorId The moderator’s ID. [JsonInclude] [JsonPropertyName(\"moderator_id\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)] public string ModeratorId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Cheermote.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Cheermote.html",
    "title": "Class Cheermote | AuxLabs.Twitch Documentation",
    "keywords": "Class Cheermote Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Cheermote Inheritance object Cheermote Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsCharitable Indicates whether this Cheermote provides a charitable contribution match during charity campaigns. LastUpdatedAt The date and time when this Cheermote was last updated. Name The prefix of the Cheermote string that you use in chat to cheer bits. Order The order that the Cheermotes are shown in the bits card. Tiers A collection of tier levels that the Cheermote supports. Type The type of Cheermote."
  },
  "api/AuxLabs.Twitch.Rest.Models.Cheermote.IsCharitable.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Cheermote.IsCharitable.html",
    "title": "Property IsCharitable | AuxLabs.Twitch Documentation",
    "keywords": "Property IsCharitable Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll IsCharitable Indicates whether this Cheermote provides a charitable contribution match during charity campaigns. [JsonInclude] [JsonPropertyName(\"is_charitable\")] public bool IsCharitable { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Rest.Models.Cheermote.LastUpdatedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Cheermote.LastUpdatedAt.html",
    "title": "Property LastUpdatedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property LastUpdatedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll LastUpdatedAt The date and time when this Cheermote was last updated. [JsonInclude] [JsonPropertyName(\"last_updated\")] public DateTime LastUpdatedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.Cheermote.Name.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Cheermote.Name.html",
    "title": "Property Name | AuxLabs.Twitch Documentation",
    "keywords": "Property Name Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Name The prefix of the Cheermote string that you use in chat to cheer bits. [JsonInclude] [JsonPropertyName(\"prefix\")] public string Name { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Cheermote.Order.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Cheermote.Order.html",
    "title": "Property Order | AuxLabs.Twitch Documentation",
    "keywords": "Property Order Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Order The order that the Cheermotes are shown in the bits card. [JsonInclude] [JsonPropertyName(\"order\")] public int Order { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.Cheermote.Tiers.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Cheermote.Tiers.html",
    "title": "Property Tiers | AuxLabs.Twitch Documentation",
    "keywords": "Property Tiers Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Tiers A collection of tier levels that the Cheermote supports. [JsonInclude] [JsonPropertyName(\"tiers\")] public IEnumerable<BitsTier> Tiers { get; } Property Value IEnumerable<BitsTier>"
  },
  "api/AuxLabs.Twitch.Rest.Models.Cheermote.Type.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Cheermote.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Type The type of Cheermote. [JsonInclude] [JsonPropertyName(\"type\")] public CheermoteType Type { get; } Property Value CheermoteType"
  },
  "api/AuxLabs.Twitch.Rest.Models.CheermoteFormat.AnimatedImage.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CheermoteFormat.AnimatedImage.html",
    "title": "Property AnimatedImage | AuxLabs.Twitch Documentation",
    "keywords": "Property AnimatedImage Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll AnimatedImage [JsonInclude] [JsonPropertyName(\"animated\")] public CheermoteImage AnimatedImage { get; } Property Value CheermoteImage"
  },
  "api/AuxLabs.Twitch.Rest.Models.CheermoteFormat.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CheermoteFormat.html",
    "title": "Class CheermoteFormat | AuxLabs.Twitch Documentation",
    "keywords": "Class CheermoteFormat Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class CheermoteFormat Inheritance object CheermoteFormat Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AnimatedImage StaticImage"
  },
  "api/AuxLabs.Twitch.Rest.Models.CheermoteFormat.StaticImage.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CheermoteFormat.StaticImage.html",
    "title": "Property StaticImage | AuxLabs.Twitch Documentation",
    "keywords": "Property StaticImage Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll StaticImage [JsonInclude] [JsonPropertyName(\"static\")] public CheermoteImage StaticImage { get; } Property Value CheermoteImage"
  },
  "api/AuxLabs.Twitch.Rest.Models.CheermoteImage.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CheermoteImage.html",
    "title": "Class CheermoteImage | AuxLabs.Twitch Documentation",
    "keywords": "Class CheermoteImage Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class CheermoteImage Inheritance object CheermoteImage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Size1 Size1AndHalf Size2 Size3 Size4"
  },
  "api/AuxLabs.Twitch.Rest.Models.CheermoteImage.Size1.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CheermoteImage.Size1.html",
    "title": "Property Size1 | AuxLabs.Twitch Documentation",
    "keywords": "Property Size1 Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Size1 [JsonInclude] [JsonPropertyName(\"1\")] public string Size1 { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.CheermoteImage.Size1AndHalf.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CheermoteImage.Size1AndHalf.html",
    "title": "Property Size1AndHalf | AuxLabs.Twitch Documentation",
    "keywords": "Property Size1AndHalf Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Size1AndHalf [JsonInclude] [JsonPropertyName(\"1.5\")] public string Size1AndHalf { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.CheermoteImage.Size2.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CheermoteImage.Size2.html",
    "title": "Property Size2 | AuxLabs.Twitch Documentation",
    "keywords": "Property Size2 Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Size2 [JsonInclude] [JsonPropertyName(\"1\")] public string Size2 { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.CheermoteImage.Size3.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CheermoteImage.Size3.html",
    "title": "Property Size3 | AuxLabs.Twitch Documentation",
    "keywords": "Property Size3 Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Size3 [JsonInclude] [JsonPropertyName(\"2\")] public string Size3 { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.CheermoteImage.Size4.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CheermoteImage.Size4.html",
    "title": "Property Size4 | AuxLabs.Twitch Documentation",
    "keywords": "Property Size4 Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Size4 [JsonInclude] [JsonPropertyName(\"4\")] public string Size4 { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.CheermoteTheme.Dark.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CheermoteTheme.Dark.html",
    "title": "Property Dark | AuxLabs.Twitch Documentation",
    "keywords": "Property Dark Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Dark [JsonInclude] [JsonPropertyName(\"dark\")] public CheermoteFormat Dark { get; } Property Value CheermoteFormat"
  },
  "api/AuxLabs.Twitch.Rest.Models.CheermoteTheme.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CheermoteTheme.html",
    "title": "Class CheermoteTheme | AuxLabs.Twitch Documentation",
    "keywords": "Class CheermoteTheme Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class CheermoteTheme Inheritance object CheermoteTheme Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Dark Light"
  },
  "api/AuxLabs.Twitch.Rest.Models.CheermoteTheme.Light.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.CheermoteTheme.Light.html",
    "title": "Property Light | AuxLabs.Twitch Documentation",
    "keywords": "Property Light Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Light [JsonInclude] [JsonPropertyName(\"light\")] public CheermoteFormat Light { get; } Property Value CheermoteFormat"
  },
  "api/AuxLabs.Twitch.Rest.Models.Clip.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Clip.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterDisplayName The broadcaster’s display name. [JsonInclude] [JsonPropertyName(\"broadcaster_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Clip.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Clip.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId An ID that identifies the broadcaster that the video was clipped from. [JsonInclude] [JsonPropertyName(\"broadcaster_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Clip.CreatedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Clip.CreatedAt.html",
    "title": "Property CreatedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property CreatedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CreatedAt The date and time of when the clip was created. [JsonInclude] [JsonPropertyName(\"created_at\")] public DateTime CreatedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.Clip.CreatorDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Clip.CreatorDisplayName.html",
    "title": "Property CreatorDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property CreatorDisplayName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CreatorDisplayName The user’s display name. [JsonInclude] [JsonPropertyName(\"creator_name\")] public string CreatorDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Clip.CreatorId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Clip.CreatorId.html",
    "title": "Property CreatorId | AuxLabs.Twitch Documentation",
    "keywords": "Property CreatorId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CreatorId An ID that identifies the user that created the clip. [JsonInclude] [JsonPropertyName(\"creator_id\")] public string CreatorId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Clip.DurationSeconds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Clip.DurationSeconds.html",
    "title": "Property DurationSeconds | AuxLabs.Twitch Documentation",
    "keywords": "Property DurationSeconds Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll DurationSeconds The length of the clip, in seconds. [JsonInclude] [JsonPropertyName(\"duration\")] public float DurationSeconds { get; } Property Value float"
  },
  "api/AuxLabs.Twitch.Rest.Models.Clip.EmbedUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Clip.EmbedUrl.html",
    "title": "Property EmbedUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property EmbedUrl Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll EmbedUrl A URL that you can use in an iframe to embed the clip. [JsonInclude] [JsonPropertyName(\"embed_url\")] public string EmbedUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Clip.GameId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Clip.GameId.html",
    "title": "Property GameId | AuxLabs.Twitch Documentation",
    "keywords": "Property GameId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll GameId The ID of the game that was being played when the clip was created. [JsonInclude] [JsonPropertyName(\"game_id\")] public string GameId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Clip.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Clip.html",
    "title": "Class Clip | AuxLabs.Twitch Documentation",
    "keywords": "Class Clip Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Clip : SimpleClip Inheritance object SimpleClip Clip Inherited Members SimpleClip.Id SimpleClip.EditUrl object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterDisplayName The broadcaster’s display name. BroadcasterId An ID that identifies the broadcaster that the video was clipped from. CreatedAt The date and time of when the clip was created. CreatorDisplayName The user’s display name. CreatorId An ID that identifies the user that created the clip. DurationSeconds The length of the clip, in seconds. EmbedUrl A URL that you can use in an iframe to embed the clip. GameId The ID of the game that was being played when the clip was created. Language The language that the broadcaster broadcasts in. OffsetSeconds The zero-based offset, in seconds, to where the clip starts in the video ThumbnailUrl A URL to a thumbnail image of the clip. Title The title of the clip. Url A URL to the clip. VideoId An ID that identifies the video that the clip came from. ViewCount The number of times the clip has been viewed."
  },
  "api/AuxLabs.Twitch.Rest.Models.Clip.Language.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Clip.Language.html",
    "title": "Property Language | AuxLabs.Twitch Documentation",
    "keywords": "Property Language Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Language The language that the broadcaster broadcasts in. [JsonInclude] [JsonPropertyName(\"language\")] public CultureInfo Language { get; } Property Value CultureInfo"
  },
  "api/AuxLabs.Twitch.Rest.Models.Clip.OffsetSeconds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Clip.OffsetSeconds.html",
    "title": "Property OffsetSeconds | AuxLabs.Twitch Documentation",
    "keywords": "Property OffsetSeconds Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll OffsetSeconds The zero-based offset, in seconds, to where the clip starts in the video [JsonInclude] [JsonPropertyName(\"vod_offset\")] public int OffsetSeconds { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.Clip.ThumbnailUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Clip.ThumbnailUrl.html",
    "title": "Property ThumbnailUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property ThumbnailUrl Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ThumbnailUrl A URL to a thumbnail image of the clip. [JsonInclude] [JsonPropertyName(\"thumbnail_url\")] public string ThumbnailUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Clip.Title.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Clip.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Title The title of the clip. [JsonInclude] [JsonPropertyName(\"title\")] public string Title { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Clip.Url.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Clip.Url.html",
    "title": "Property Url | AuxLabs.Twitch Documentation",
    "keywords": "Property Url Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Url A URL to the clip. [JsonInclude] [JsonPropertyName(\"url\")] public string Url { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Clip.VideoId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Clip.VideoId.html",
    "title": "Property VideoId | AuxLabs.Twitch Documentation",
    "keywords": "Property VideoId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll VideoId An ID that identifies the video that the clip came from. [JsonInclude] [JsonPropertyName(\"video_id\")] public string VideoId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Clip.ViewCount.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Clip.ViewCount.html",
    "title": "Property ViewCount | AuxLabs.Twitch Documentation",
    "keywords": "Property ViewCount Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ViewCount The number of times the clip has been viewed. [JsonInclude] [JsonPropertyName(\"view_count\")] public int ViewCount { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.Commercial.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Commercial.html",
    "title": "Class Commercial | AuxLabs.Twitch Documentation",
    "keywords": "Class Commercial Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Contains information about the status of a commercial request. public class Commercial Inheritance object Commercial Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Length The length of the commercial you requested. Message A message that indicates whether Twitch was able to serve an ad. RetryAfter The number of seconds you must wait before running another commercial."
  },
  "api/AuxLabs.Twitch.Rest.Models.Commercial.Length.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Commercial.Length.html",
    "title": "Property Length | AuxLabs.Twitch Documentation",
    "keywords": "Property Length Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Length The length of the commercial you requested. [JsonInclude] [JsonPropertyName(\"length\")] public int Length { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.Commercial.Message.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Commercial.Message.html",
    "title": "Property Message | AuxLabs.Twitch Documentation",
    "keywords": "Property Message Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Message A message that indicates whether Twitch was able to serve an ad. [JsonInclude] [JsonPropertyName(\"message\")] public string Message { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Commercial.RetryAfter.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Commercial.RetryAfter.html",
    "title": "Property RetryAfter | AuxLabs.Twitch Documentation",
    "keywords": "Property RetryAfter Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll RetryAfter The number of seconds you must wait before running another commercial. [JsonInclude] [JsonPropertyName(\"retry_after\")] public int RetryAfter { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.ComponentExtension.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ComponentExtension.html",
    "title": "Class ComponentExtension | AuxLabs.Twitch Documentation",
    "keywords": "Class ComponentExtension Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class ComponentExtension : SimpleExtension Inheritance object SimpleExtension ComponentExtension Inherited Members SimpleExtension.Id SimpleExtension.Version SimpleExtension.Name SimpleExtension.IsActive object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties X The x-coordinate where the extension is placed. Y The y-coordinate where the extension is placed."
  },
  "api/AuxLabs.Twitch.Rest.Models.ComponentExtension.X.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ComponentExtension.X.html",
    "title": "Property X | AuxLabs.Twitch Documentation",
    "keywords": "Property X Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll X The x-coordinate where the extension is placed. [JsonInclude] [JsonPropertyName(\"x\")] public string X { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ComponentExtension.Y.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ComponentExtension.Y.html",
    "title": "Property Y | AuxLabs.Twitch Documentation",
    "keywords": "Property Y Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Y The y-coordinate where the extension is placed. [JsonInclude] [JsonPropertyName(\"y\")] public string Y { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Cost.Amount.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Cost.Amount.html",
    "title": "Property Amount | AuxLabs.Twitch Documentation",
    "keywords": "Property Amount Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Amount The amount exchanged for the digital product. [JsonInclude] [JsonPropertyName(\"amount\")] public int Amount { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.Cost.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Cost.html",
    "title": "Class Cost | AuxLabs.Twitch Documentation",
    "keywords": "Class Cost Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Cost Inheritance object Cost Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Amount The amount exchanged for the digital product. Type The type of currency exchanged."
  },
  "api/AuxLabs.Twitch.Rest.Models.Cost.Type.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Cost.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Type The type of currency exchanged. [JsonInclude] [JsonPropertyName(\"type\")] public CostType Type { get; } Property Value CostType"
  },
  "api/AuxLabs.Twitch.Rest.Models.DropEntitlementCondition.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.DropEntitlementCondition.-ctor.html",
    "title": "Constructor DropEntitlementCondition | AuxLabs.Twitch Documentation",
    "keywords": "Constructor DropEntitlementCondition Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll DropEntitlementCondition() public DropEntitlementCondition() DropEntitlementCondition(string, string, string) public DropEntitlementCondition(string organizationId, string categoryId = null, string campaignId = null) Parameters organizationId string categoryId string campaignId string"
  },
  "api/AuxLabs.Twitch.Rest.Models.DropEntitlementCondition.CampaignId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.DropEntitlementCondition.CampaignId.html",
    "title": "Property CampaignId | AuxLabs.Twitch Documentation",
    "keywords": "Property CampaignId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CampaignId Optional. The campaign ID for a specific campaign for which notifications will be received. [JsonInclude] [JsonPropertyName(\"campaign_id\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string CampaignId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.DropEntitlementCondition.CategoryId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.DropEntitlementCondition.CategoryId.html",
    "title": "Property CategoryId | AuxLabs.Twitch Documentation",
    "keywords": "Property CategoryId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CategoryId Optional. The category (or game) ID of the game for which notifications will be received. [JsonInclude] [JsonPropertyName(\"category_id\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string CategoryId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.DropEntitlementCondition.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.DropEntitlementCondition.html",
    "title": "Class DropEntitlementCondition | AuxLabs.Twitch Documentation",
    "keywords": "Class DropEntitlementCondition Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class DropEntitlementCondition : IEventCondition Inheritance object DropEntitlementCondition Implements IEventCondition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DropEntitlementCondition() DropEntitlementCondition(string, string, string) Properties CampaignId Optional. The campaign ID for a specific campaign for which notifications will be received. CategoryId Optional. The category (or game) ID of the game for which notifications will be received. OrganizationId The organization ID of the organization that owns the game on the developer portal. Operators implicit operator (string, string, string)(DropEntitlementCondition) implicit operator DropEntitlementCondition((string, string, string))"
  },
  "api/AuxLabs.Twitch.Rest.Models.DropEntitlementCondition.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.DropEntitlementCondition.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator (string, string, string)(DropEntitlementCondition) public static implicit operator (string, string, string)(DropEntitlementCondition value) Parameters value DropEntitlementCondition Returns (string, string, string) implicit operator DropEntitlementCondition((string, string, string)) public static implicit operator DropEntitlementCondition((string, string, string) value) Parameters value (string, string, string) Returns DropEntitlementCondition"
  },
  "api/AuxLabs.Twitch.Rest.Models.DropEntitlementCondition.OrganizationId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.DropEntitlementCondition.OrganizationId.html",
    "title": "Property OrganizationId | AuxLabs.Twitch Documentation",
    "keywords": "Property OrganizationId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll OrganizationId The organization ID of the organization that owns the game on the developer portal. [JsonInclude] [JsonPropertyName(\"organization_id\")] public string OrganizationId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Emote.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Emote.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster who owns the emote. [JsonInclude] [JsonPropertyName(\"owner_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Emote.EmoteSetId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Emote.EmoteSetId.html",
    "title": "Property EmoteSetId | AuxLabs.Twitch Documentation",
    "keywords": "Property EmoteSetId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll EmoteSetId An ID that identifies the emote set that the emote belongs to. [JsonInclude] [JsonPropertyName(\"emote_set_id\")] public string EmoteSetId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Emote.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Emote.html",
    "title": "Class Emote | AuxLabs.Twitch Documentation",
    "keywords": "Class Emote Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Emote : GlobalEmote Inheritance object GlobalEmote Emote Inherited Members GlobalEmote.Id GlobalEmote.Name GlobalEmote.Images GlobalEmote.Formats GlobalEmote.Scales GlobalEmote.Themes object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the broadcaster who owns the emote. EmoteSetId An ID that identifies the emote set that the emote belongs to. Tier The subscriber tier at which the emote is unlocked. Type The type of emote."
  },
  "api/AuxLabs.Twitch.Rest.Models.Emote.Tier.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Emote.Tier.html",
    "title": "Property Tier | AuxLabs.Twitch Documentation",
    "keywords": "Property Tier Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Tier The subscriber tier at which the emote is unlocked. [JsonInclude] [JsonPropertyName(\"tier\")] public string Tier { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Emote.Type.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Emote.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Type The type of emote. [JsonInclude] [JsonPropertyName(\"emote_type\")] public EmoteType Type { get; } Property Value EmoteType"
  },
  "api/AuxLabs.Twitch.Rest.Models.Entitlement.BenefitId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Entitlement.BenefitId.html",
    "title": "Property BenefitId | AuxLabs.Twitch Documentation",
    "keywords": "Property BenefitId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BenefitId An ID that identifies the benefit (reward). [JsonInclude] [JsonPropertyName(\"benefit_id\")] public string BenefitId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Entitlement.GameId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Entitlement.GameId.html",
    "title": "Property GameId | AuxLabs.Twitch Documentation",
    "keywords": "Property GameId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll GameId An ID that identifies the game the user was playing when the reward was entitled. [JsonInclude] [JsonPropertyName(\"game_id\")] public string GameId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Entitlement.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Entitlement.html",
    "title": "Class Entitlement | AuxLabs.Twitch Documentation",
    "keywords": "Class Entitlement Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Entitlement Inheritance object Entitlement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BenefitId An ID that identifies the benefit (reward). GameId An ID that identifies the game the user was playing when the reward was entitled. Id An ID that identifies the entitlement. LastUpdatedAt The UTC date and time of when the entitlement was last updated. Status The entitlement’s fulfillment status. Timestamp The UTC date and time of when the entitlement was granted. UserId An ID that identifies the user who was granted the entitlement."
  },
  "api/AuxLabs.Twitch.Rest.Models.Entitlement.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Entitlement.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id An ID that identifies the entitlement. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Entitlement.LastUpdatedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Entitlement.LastUpdatedAt.html",
    "title": "Property LastUpdatedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property LastUpdatedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll LastUpdatedAt The UTC date and time of when the entitlement was last updated. [JsonInclude] [JsonPropertyName(\"last_updated\")] public DateTime LastUpdatedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.Entitlement.Status.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Entitlement.Status.html",
    "title": "Property Status | AuxLabs.Twitch Documentation",
    "keywords": "Property Status Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Status The entitlement’s fulfillment status. [JsonInclude] [JsonPropertyName(\"fulfillment_status\")] public FulfillmentStatus Status { get; } Property Value FulfillmentStatus"
  },
  "api/AuxLabs.Twitch.Rest.Models.Entitlement.Timestamp.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Entitlement.Timestamp.html",
    "title": "Property Timestamp | AuxLabs.Twitch Documentation",
    "keywords": "Property Timestamp Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Timestamp The UTC date and time of when the entitlement was granted. [JsonInclude] [JsonPropertyName(\"timestamp\")] public DateTime Timestamp { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.Entitlement.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Entitlement.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserId An ID that identifies the user who was granted the entitlement. [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.EntitlementDrop.EntitlementIds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.EntitlementDrop.EntitlementIds.html",
    "title": "Property EntitlementIds | AuxLabs.Twitch Documentation",
    "keywords": "Property EntitlementIds Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll EntitlementIds The list of entitlements that the status applies to. [JsonInclude] [JsonPropertyName(\"id\")] public IReadOnlyCollection<string> EntitlementIds { get; } Property Value IReadOnlyCollection<string>"
  },
  "api/AuxLabs.Twitch.Rest.Models.EntitlementDrop.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.EntitlementDrop.html",
    "title": "Class EntitlementDrop | AuxLabs.Twitch Documentation",
    "keywords": "Class EntitlementDrop Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class EntitlementDrop Inheritance object EntitlementDrop Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EntitlementIds The list of entitlements that the status applies to. Status Indicates the status of the specified entitlements."
  },
  "api/AuxLabs.Twitch.Rest.Models.EntitlementDrop.Status.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.EntitlementDrop.Status.html",
    "title": "Property Status | AuxLabs.Twitch Documentation",
    "keywords": "Property Status Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Status Indicates the status of the specified entitlements. [JsonInclude] [JsonPropertyName(\"status\")] public DropStatus Status { get; } Property Value DropStatus"
  },
  "api/AuxLabs.Twitch.Rest.Models.EventSubResponse.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.EventSubResponse.html",
    "title": "Class EventSubResponse | AuxLabs.Twitch Documentation",
    "keywords": "Class EventSubResponse Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class EventSubResponse : TwitchResponse<EventSubscription> Inheritance object TwitchResponse<EventSubscription> EventSubResponse Inherited Members TwitchResponse<EventSubscription>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties MaxTotalCost The maximum total cost that you’re allowed to incur for all subscriptions you create. Pagination Contains information used to page through the list of results. Total The total number of subscriptions you’ve created. TotalCost The sum of all of your subscription costs."
  },
  "api/AuxLabs.Twitch.Rest.Models.EventSubResponse.MaxTotalCost.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.EventSubResponse.MaxTotalCost.html",
    "title": "Property MaxTotalCost | AuxLabs.Twitch Documentation",
    "keywords": "Property MaxTotalCost Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll MaxTotalCost The maximum total cost that you’re allowed to incur for all subscriptions you create. [JsonInclude] [JsonPropertyName(\"max_total_cost\")] public int MaxTotalCost { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.EventSubResponse.Pagination.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.EventSubResponse.Pagination.html",
    "title": "Property Pagination | AuxLabs.Twitch Documentation",
    "keywords": "Property Pagination Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Pagination Contains information used to page through the list of results. [JsonInclude] [JsonPropertyName(\"pagination\")] public Pagination Pagination { get; } Property Value Pagination"
  },
  "api/AuxLabs.Twitch.Rest.Models.EventSubResponse.Total.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.EventSubResponse.Total.html",
    "title": "Property Total | AuxLabs.Twitch Documentation",
    "keywords": "Property Total Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Total The total number of subscriptions you’ve created. [JsonInclude] [JsonPropertyName(\"total\")] public int Total { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.EventSubResponse.TotalCost.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.EventSubResponse.TotalCost.html",
    "title": "Property TotalCost | AuxLabs.Twitch Documentation",
    "keywords": "Property TotalCost Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll TotalCost The sum of all of your subscription costs. [JsonInclude] [JsonPropertyName(\"total_cost\")] public int TotalCost { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.EventSubscription-1.Condition.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.EventSubscription-1.Condition.html",
    "title": "Property Condition | AuxLabs.Twitch Documentation",
    "keywords": "Property Condition Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Condition The subscription’s parameter values. [JsonInclude] [JsonPropertyName(\"condition\")] public TCondition Condition { get; } Property Value TCondition"
  },
  "api/AuxLabs.Twitch.Rest.Models.EventSubscription-1.Cost.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.EventSubscription-1.Cost.html",
    "title": "Property Cost | AuxLabs.Twitch Documentation",
    "keywords": "Property Cost Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Cost The amount that the subscription counts against your limit. [JsonInclude] [JsonPropertyName(\"cost\")] public int Cost { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.EventSubscription-1.CreatedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.EventSubscription-1.CreatedAt.html",
    "title": "Property CreatedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property CreatedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CreatedAt The date and time of when the subscription was created. [JsonInclude] [JsonPropertyName(\"created_at\")] public DateTime CreatedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.EventSubscription-1.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.EventSubscription-1.html",
    "title": "Class EventSubscription<TCondition> | AuxLabs.Twitch Documentation",
    "keywords": "Class EventSubscription<TCondition> Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class EventSubscription<TCondition> where TCondition : IEventCondition Type Parameters TCondition Inheritance object EventSubscription<TCondition> Derived EventSubscription Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Condition The subscription’s parameter values. Cost The amount that the subscription counts against your limit. CreatedAt The date and time of when the subscription was created. Id An ID that identifies the subscription. Status The subscription’s status. Transport The transport details used to send the notifications. Type The subscription’s type. TypeRaw The notification’s subscription type in raw string form. Version The version number that identifies this definition of the subscription’s data."
  },
  "api/AuxLabs.Twitch.Rest.Models.EventSubscription-1.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.EventSubscription-1.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id An ID that identifies the subscription. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.EventSubscription-1.Status.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.EventSubscription-1.Status.html",
    "title": "Property Status | AuxLabs.Twitch Documentation",
    "keywords": "Property Status Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Status The subscription’s status. [JsonInclude] [JsonPropertyName(\"status\")] public EventSubStatus Status { get; } Property Value EventSubStatus"
  },
  "api/AuxLabs.Twitch.Rest.Models.EventSubscription-1.Transport.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.EventSubscription-1.Transport.html",
    "title": "Property Transport | AuxLabs.Twitch Documentation",
    "keywords": "Property Transport Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Transport The transport details used to send the notifications. [JsonInclude] [JsonPropertyName(\"transport\")] public AcceptedTransport Transport { get; } Property Value AcceptedTransport"
  },
  "api/AuxLabs.Twitch.Rest.Models.EventSubscription-1.Type.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.EventSubscription-1.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Type The subscription’s type. public EventSubType Type { get; } Property Value EventSubType"
  },
  "api/AuxLabs.Twitch.Rest.Models.EventSubscription-1.TypeRaw.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.EventSubscription-1.TypeRaw.html",
    "title": "Property TypeRaw | AuxLabs.Twitch Documentation",
    "keywords": "Property TypeRaw Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll TypeRaw The notification’s subscription type in raw string form. [JsonInclude] [JsonPropertyName(\"type\")] public string TypeRaw { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.EventSubscription-1.Version.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.EventSubscription-1.Version.html",
    "title": "Property Version | AuxLabs.Twitch Documentation",
    "keywords": "Property Version Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Version The version number that identifies this definition of the subscription’s data. [JsonInclude] [JsonPropertyName(\"version\")] public string Version { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.EventSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.EventSubscription.html",
    "title": "Class EventSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class EventSubscription Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class EventSubscription : EventSubscription<IEventCondition> Inheritance object EventSubscription<IEventCondition> EventSubscription Inherited Members EventSubscription<IEventCondition>.Id EventSubscription<IEventCondition>.Status EventSubscription<IEventCondition>.TypeRaw EventSubscription<IEventCondition>.Type EventSubscription<IEventCondition>.Version EventSubscription<IEventCondition>.Condition EventSubscription<IEventCondition>.CreatedAt EventSubscription<IEventCondition>.Transport EventSubscription<IEventCondition>.Cost object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/AuxLabs.Twitch.Rest.Models.Extension.CanActivate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Extension.CanActivate.html",
    "title": "Property CanActivate | AuxLabs.Twitch Documentation",
    "keywords": "Property CanActivate Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CanActivate Determines whether the extension is configured and can be activated. [JsonInclude] [JsonPropertyName(\"can_activate\")] public bool CanActivate { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Rest.Models.Extension.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Extension.html",
    "title": "Class Extension | AuxLabs.Twitch Documentation",
    "keywords": "Class Extension Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Extension : SimpleExtension Inheritance object SimpleExtension Extension Inherited Members SimpleExtension.Id SimpleExtension.Version SimpleExtension.Name SimpleExtension.IsActive object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CanActivate Determines whether the extension is configured and can be activated. Types The extension types that you can activate for this extension."
  },
  "api/AuxLabs.Twitch.Rest.Models.Extension.Types.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Extension.Types.html",
    "title": "Property Types | AuxLabs.Twitch Documentation",
    "keywords": "Property Types Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Types The extension types that you can activate for this extension. [JsonInclude] [JsonPropertyName(\"type\")] public IReadOnlyCollection<ExtensionType> Types { get; } Property Value IReadOnlyCollection<ExtensionType>"
  },
  "api/AuxLabs.Twitch.Rest.Models.ExtensionAnalytic.ExtensionId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ExtensionAnalytic.ExtensionId.html",
    "title": "Property ExtensionId | AuxLabs.Twitch Documentation",
    "keywords": "Property ExtensionId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ExtensionId An ID that identifies the extension that the report was generated for. [JsonInclude] [JsonPropertyName(\"extension_id\")] public string ExtensionId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ExtensionAnalytic.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ExtensionAnalytic.html",
    "title": "Class ExtensionAnalytic | AuxLabs.Twitch Documentation",
    "keywords": "Class ExtensionAnalytic Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Contains information about an extension's analytic report. public class ExtensionAnalytic : Analytic Inheritance object Analytic ExtensionAnalytic Inherited Members Analytic.Url Analytic.Type Analytic.DateRange object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ExtensionId An ID that identifies the extension that the report was generated for."
  },
  "api/AuxLabs.Twitch.Rest.Models.ExtensionCondition.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ExtensionCondition.-ctor.html",
    "title": "Constructor ExtensionCondition | AuxLabs.Twitch Documentation",
    "keywords": "Constructor ExtensionCondition Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ExtensionCondition() public ExtensionCondition() ExtensionCondition(string) public ExtensionCondition(string clientId) Parameters clientId string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ExtensionCondition.ClientId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ExtensionCondition.ClientId.html",
    "title": "Property ClientId | AuxLabs.Twitch Documentation",
    "keywords": "Property ClientId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ClientId The client ID of the extension. [JsonInclude] [JsonPropertyName(\"extension_client_id\")] public string ClientId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ExtensionCondition.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ExtensionCondition.html",
    "title": "Class ExtensionCondition | AuxLabs.Twitch Documentation",
    "keywords": "Class ExtensionCondition Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class ExtensionCondition : IEventCondition Inheritance object ExtensionCondition Implements IEventCondition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExtensionCondition() ExtensionCondition(string) Properties ClientId The client ID of the extension. Operators implicit operator string(ExtensionCondition) implicit operator ExtensionCondition(string)"
  },
  "api/AuxLabs.Twitch.Rest.Models.ExtensionCondition.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ExtensionCondition.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator string(ExtensionCondition) public static implicit operator string(ExtensionCondition value) Parameters value ExtensionCondition Returns string implicit operator ExtensionCondition(string) public static implicit operator ExtensionCondition(string v) Parameters v string Returns ExtensionCondition"
  },
  "api/AuxLabs.Twitch.Rest.Models.ExtensionMap.Component.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ExtensionMap.Component.html",
    "title": "Property Component | AuxLabs.Twitch Documentation",
    "keywords": "Property Component Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Component A dictionary that contains the data for a video-component extension. [JsonInclude] [JsonPropertyName(\"component\")] public IReadOnlyDictionary<string, ComponentExtension> Component { get; } Property Value IReadOnlyDictionary<string, ComponentExtension>"
  },
  "api/AuxLabs.Twitch.Rest.Models.ExtensionMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ExtensionMap.html",
    "title": "Class ExtensionMap | AuxLabs.Twitch Documentation",
    "keywords": "Class ExtensionMap Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class ExtensionMap Inheritance object ExtensionMap Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Component A dictionary that contains the data for a video-component extension. Overlay A dictionary that contains the data for a video-overlay extension. Panel A dictionary that contains the data for a panel extension."
  },
  "api/AuxLabs.Twitch.Rest.Models.ExtensionMap.Overlay.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ExtensionMap.Overlay.html",
    "title": "Property Overlay | AuxLabs.Twitch Documentation",
    "keywords": "Property Overlay Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Overlay A dictionary that contains the data for a video-overlay extension. [JsonInclude] [JsonPropertyName(\"overlay\")] public IReadOnlyDictionary<string, SimpleExtension> Overlay { get; } Property Value IReadOnlyDictionary<string, SimpleExtension>"
  },
  "api/AuxLabs.Twitch.Rest.Models.ExtensionMap.Panel.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ExtensionMap.Panel.html",
    "title": "Property Panel | AuxLabs.Twitch Documentation",
    "keywords": "Property Panel Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Panel A dictionary that contains the data for a panel extension. [JsonInclude] [JsonPropertyName(\"panel\")] public IReadOnlyDictionary<string, SimpleExtension> Panel { get; } Property Value IReadOnlyDictionary<string, SimpleExtension>"
  },
  "api/AuxLabs.Twitch.Rest.Models.ExtensionTransaction.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ExtensionTransaction.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterDisplayName The broadcaster’s display name. [JsonInclude] [JsonPropertyName(\"broadcaster_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ExtensionTransaction.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ExtensionTransaction.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster that owns the channel where the transaction occurred. [JsonInclude] [JsonPropertyName(\"broadcaster_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ExtensionTransaction.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ExtensionTransaction.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterName The broadcaster’s login name. [JsonInclude] [JsonPropertyName(\"broadcaster_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ExtensionTransaction.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ExtensionTransaction.html",
    "title": "Class ExtensionTransaction | AuxLabs.Twitch Documentation",
    "keywords": "Class ExtensionTransaction Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class ExtensionTransaction Inheritance object ExtensionTransaction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterDisplayName The broadcaster’s display name. BroadcasterId The ID of the broadcaster that owns the channel where the transaction occurred. BroadcasterName The broadcaster’s login name. Id An ID that identifies the transaction. ProductData Contains details about the digital product. ProductType The type of transaction. Timestamp The UTC date and time of the transaction. UserDisplayName The user’s display name. UserId The ID of the user that purchased the digital product. UserName The user’s login name."
  },
  "api/AuxLabs.Twitch.Rest.Models.ExtensionTransaction.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ExtensionTransaction.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id An ID that identifies the transaction. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ExtensionTransaction.ProductData.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ExtensionTransaction.ProductData.html",
    "title": "Property ProductData | AuxLabs.Twitch Documentation",
    "keywords": "Property ProductData Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ProductData Contains details about the digital product. [JsonInclude] [JsonPropertyName(\"product_data\")] public ProductData ProductData { get; } Property Value ProductData"
  },
  "api/AuxLabs.Twitch.Rest.Models.ExtensionTransaction.ProductType.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ExtensionTransaction.ProductType.html",
    "title": "Property ProductType | AuxLabs.Twitch Documentation",
    "keywords": "Property ProductType Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ProductType The type of transaction. [JsonInclude] [JsonPropertyName(\"product_type\")] public ProductType ProductType { get; } Property Value ProductType"
  },
  "api/AuxLabs.Twitch.Rest.Models.ExtensionTransaction.Timestamp.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ExtensionTransaction.Timestamp.html",
    "title": "Property Timestamp | AuxLabs.Twitch Documentation",
    "keywords": "Property Timestamp Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Timestamp The UTC date and time of the transaction. [JsonInclude] [JsonPropertyName(\"timestamp\")] public DateTime Timestamp { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.ExtensionTransaction.UserDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ExtensionTransaction.UserDisplayName.html",
    "title": "Property UserDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserDisplayName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserDisplayName The user’s display name. [JsonInclude] [JsonPropertyName(\"user_name\")] public string UserDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ExtensionTransaction.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ExtensionTransaction.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserId The ID of the user that purchased the digital product. [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ExtensionTransaction.UserName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ExtensionTransaction.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserName The user’s login name. [JsonInclude] [JsonPropertyName(\"user_login\")] public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.FollowedChannel.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.FollowedChannel.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterDisplayName [JsonInclude] [JsonPropertyName(\"broadcaster_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.FollowedChannel.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.FollowedChannel.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId [JsonInclude] [JsonPropertyName(\"broadcaster_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.FollowedChannel.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.FollowedChannel.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterName [JsonInclude] [JsonPropertyName(\"broadcaster_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.FollowedChannel.FollowedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.FollowedChannel.FollowedAt.html",
    "title": "Property FollowedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property FollowedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll FollowedAt [JsonInclude] [JsonPropertyName(\"followed_at\")] public DateTime FollowedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.FollowedChannel.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.FollowedChannel.html",
    "title": "Class FollowedChannel | AuxLabs.Twitch Documentation",
    "keywords": "Class FollowedChannel Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class FollowedChannel Inheritance object FollowedChannel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterDisplayName BroadcasterId BroadcasterName FollowedAt"
  },
  "api/AuxLabs.Twitch.Rest.Models.Follower.FollowedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Follower.FollowedAt.html",
    "title": "Property FollowedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property FollowedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll FollowedAt The UTC timestamp when the user started following the broadcaster. [JsonInclude] [JsonPropertyName(\"followed_at\")] public DateTime FollowedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.Follower.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Follower.html",
    "title": "Class Follower | AuxLabs.Twitch Documentation",
    "keywords": "Class Follower Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Follower Inheritance object Follower Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FollowedAt The UTC timestamp when the user started following the broadcaster. UserDisplayName The user’s display name. UserId An ID that uniquely identifies the user that’s following the broadcaster. UserName The user’s login name."
  },
  "api/AuxLabs.Twitch.Rest.Models.Follower.UserDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Follower.UserDisplayName.html",
    "title": "Property UserDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserDisplayName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserDisplayName The user’s display name. [JsonInclude] [JsonPropertyName(\"user_name\")] public string UserDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Follower.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Follower.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserId An ID that uniquely identifies the user that’s following the broadcaster. [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Follower.UserName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Follower.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserName The user’s login name. [JsonInclude] [JsonPropertyName(\"user_login\")] public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Game.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Game.html",
    "title": "Class Game | AuxLabs.Twitch Documentation",
    "keywords": "Class Game Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Game : Category Inheritance object Category Game Inherited Members Category.Id Category.Name Category.BoxArtUrl object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IgdbId The ID that IGDB uses to identify this game."
  },
  "api/AuxLabs.Twitch.Rest.Models.Game.IgdbId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Game.IgdbId.html",
    "title": "Property IgdbId | AuxLabs.Twitch Documentation",
    "keywords": "Property IgdbId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll IgdbId The ID that IGDB uses to identify this game. [JsonInclude] [JsonPropertyName(\"igdb_id\")] public string IgdbId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.GameAnalytic.GameId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.GameAnalytic.GameId.html",
    "title": "Property GameId | AuxLabs.Twitch Documentation",
    "keywords": "Property GameId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll GameId An ID that identifies the game that the report was generated for. [JsonInclude] [JsonPropertyName(\"game_id\")] public string GameId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.GameAnalytic.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.GameAnalytic.html",
    "title": "Class GameAnalytic | AuxLabs.Twitch Documentation",
    "keywords": "Class GameAnalytic Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Contains information about a game's analytic report. public class GameAnalytic : Analytic Inheritance object Analytic GameAnalytic Inherited Members Analytic.Url Analytic.Type Analytic.DateRange object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties GameId An ID that identifies the game that the report was generated for."
  },
  "api/AuxLabs.Twitch.Rest.Models.GlobalEmote.Formats.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.GlobalEmote.Formats.html",
    "title": "Property Formats | AuxLabs.Twitch Documentation",
    "keywords": "Property Formats Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Formats The formats that the emote is available in. [JsonInclude] [JsonPropertyName(\"format\")] public IReadOnlyCollection<EmoteFormat> Formats { get; } Property Value IReadOnlyCollection<EmoteFormat>"
  },
  "api/AuxLabs.Twitch.Rest.Models.GlobalEmote.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.GlobalEmote.html",
    "title": "Class GlobalEmote | AuxLabs.Twitch Documentation",
    "keywords": "Class GlobalEmote Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class GlobalEmote Inheritance object GlobalEmote Derived Emote Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Formats The formats that the emote is available in. Id An ID that identifies this emote. Images The image URLs for the emote. Name The name of the emote. Scales The sizes that the emote is available in. Themes The background themes that the emote is available in."
  },
  "api/AuxLabs.Twitch.Rest.Models.GlobalEmote.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.GlobalEmote.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id An ID that identifies this emote. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.GlobalEmote.Images.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.GlobalEmote.Images.html",
    "title": "Property Images | AuxLabs.Twitch Documentation",
    "keywords": "Property Images Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Images The image URLs for the emote. [JsonInclude] [JsonPropertyName(\"images\")] public TwitchImage Images { get; } Property Value TwitchImage Remarks These image URLs always provide a static, non-animated emote image with a light background."
  },
  "api/AuxLabs.Twitch.Rest.Models.GlobalEmote.Name.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.GlobalEmote.Name.html",
    "title": "Property Name | AuxLabs.Twitch Documentation",
    "keywords": "Property Name Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Name The name of the emote. [JsonInclude] [JsonPropertyName(\"name\")] public string Name { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.GlobalEmote.Scales.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.GlobalEmote.Scales.html",
    "title": "Property Scales | AuxLabs.Twitch Documentation",
    "keywords": "Property Scales Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Scales The sizes that the emote is available in. [JsonInclude] [JsonPropertyName(\"scale\")] public IReadOnlyCollection<EmoteScale> Scales { get; } Property Value IReadOnlyCollection<EmoteScale>"
  },
  "api/AuxLabs.Twitch.Rest.Models.GlobalEmote.Themes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.GlobalEmote.Themes.html",
    "title": "Property Themes | AuxLabs.Twitch Documentation",
    "keywords": "Property Themes Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Themes The background themes that the emote is available in. [JsonInclude] [JsonPropertyName(\"theme_mode\")] public IReadOnlyCollection<EmoteTheme> Themes { get; } Property Value IReadOnlyCollection<EmoteTheme>"
  },
  "api/AuxLabs.Twitch.Rest.Models.Goal.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Goal.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterDisplayName The broadcaster’s display name. [JsonInclude] [JsonPropertyName(\"broadcaster_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Goal.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Goal.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId An ID that identifies the broadcaster that created the goal. [JsonInclude] [JsonPropertyName(\"broadcaster_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Goal.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Goal.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterName The broadcaster’s login name. [JsonInclude] [JsonPropertyName(\"broadcaster_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Goal.CreatedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Goal.CreatedAt.html",
    "title": "Property CreatedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property CreatedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CreatedAt The UTC date and time that the broadcaster created the goal. [JsonInclude] [JsonPropertyName(\"created_at\")] public DateTime CreatedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.Goal.CurrentAmount.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Goal.CurrentAmount.html",
    "title": "Property CurrentAmount | AuxLabs.Twitch Documentation",
    "keywords": "Property CurrentAmount Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CurrentAmount The goal’s current value. [JsonInclude] [JsonPropertyName(\"current_amount\")] public int CurrentAmount { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.Goal.Description.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Goal.Description.html",
    "title": "Property Description | AuxLabs.Twitch Documentation",
    "keywords": "Property Description Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Description A description of the goal. [JsonInclude] [JsonPropertyName(\"description\")] public string Description { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Goal.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Goal.html",
    "title": "Class Goal | AuxLabs.Twitch Documentation",
    "keywords": "Class Goal Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Goal Inheritance object Goal Derived GoalEndedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterDisplayName The broadcaster’s display name. BroadcasterId An ID that identifies the broadcaster that created the goal. BroadcasterName The broadcaster’s login name. CreatedAt The UTC date and time that the broadcaster created the goal. CurrentAmount The goal’s current value. Description A description of the goal. Id An ID that identifies this goal. TargetAmount The goal’s target value. Type The type of goal."
  },
  "api/AuxLabs.Twitch.Rest.Models.Goal.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Goal.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id An ID that identifies this goal. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Goal.TargetAmount.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Goal.TargetAmount.html",
    "title": "Property TargetAmount | AuxLabs.Twitch Documentation",
    "keywords": "Property TargetAmount Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll TargetAmount The goal’s target value. [JsonInclude] [JsonPropertyName(\"target_amount\")] public int TargetAmount { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.Goal.Type.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Goal.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Type The type of goal. [JsonInclude] [JsonPropertyName(\"type\")] public GoalType Type { get; } Property Value GoalType"
  },
  "api/AuxLabs.Twitch.Rest.Models.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.html",
    "title": "Namespace AuxLabs.Twitch.Rest.Models | AuxLabs.Twitch Documentation",
    "keywords": "Namespace AuxLabs.Twitch.Rest.Models Classes AcceptedTransport AccessTokenInfo Album Analytic AppIdentity Artist AuthorizationCondition AutomodSettings Badge BadgeSet Ban BannedUser BitsTier BitsUser BlockedTerm Broadcast BroadcasterCondition BroadcastMarker Category Channel ChannelBroadcast ChannelEditor ChannelTeam CharityCampaign CharityDonation ChatSettings Cheermote CheermoteFormat CheermoteImage CheermoteTheme Clip Commercial Contains information about the status of a commercial request. ComponentExtension Cost DropEntitlementCondition Emote Entitlement EntitlementDrop EventSubResponse EventSubscription EventSubscription<TCondition> Extension ExtensionAnalytic Contains information about an extension's analytic report. ExtensionCondition ExtensionMap ExtensionTransaction FollowedChannel Follower Game GameAnalytic Contains information about a game's analytic report. GlobalEmote Goal HypeTrain HypeTrainContribution HypeTrainInfo MockMessage ModeratorCondition Playlist Poll PollOption Prediction PredictionOption PredictionUser ProductData Raid RaidCondition Redemption Reward RewardCondition Schedule ScheduleSegment ShieldMode SimpleChatUser SimpleClip SimpleExtension SimpleSubscription SimpleTeam SimpleUser Soundtrack Subscription Team TeamUser Track TrackSource Transport TwitchMetaResponse<T> An object that represents data returned by a Twitch request, but with some metadata. TwitchResponse<T> An object that represents data returned by a Twitch request. User UserCondition UserIdentity Vacation Video Structs CharityAmount Pagination RewardSetting VideoOffset Enums BlockReason RaidConditionType"
  },
  "api/AuxLabs.Twitch.Rest.Models.HypeTrain.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.HypeTrain.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster that’s running the Hype Train. [JsonInclude] [JsonPropertyName(\"broadcaster_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.HypeTrain.CooldownEndsAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.HypeTrain.CooldownEndsAt.html",
    "title": "Property CooldownEndsAt | AuxLabs.Twitch Documentation",
    "keywords": "Property CooldownEndsAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CooldownEndsAt The UTC date and time that another Hype Train can start. [JsonInclude] [JsonPropertyName(\"cooldown_end_time\")] public DateTime CooldownEndsAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.HypeTrain.ExpiresAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.HypeTrain.ExpiresAt.html",
    "title": "Property ExpiresAt | AuxLabs.Twitch Documentation",
    "keywords": "Property ExpiresAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ExpiresAt The UTC date and time that the Hype Train ends. [JsonInclude] [JsonPropertyName(\"expires_at\")] public DateTime ExpiresAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.HypeTrain.Goal.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.HypeTrain.Goal.html",
    "title": "Property Goal | AuxLabs.Twitch Documentation",
    "keywords": "Property Goal Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Goal The value needed to reach the next level. [JsonInclude] [JsonPropertyName(\"goal\")] public int Goal { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.HypeTrain.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.HypeTrain.html",
    "title": "Class HypeTrain | AuxLabs.Twitch Documentation",
    "keywords": "Class HypeTrain Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class HypeTrain Inheritance object HypeTrain Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the broadcaster that’s running the Hype Train. CooldownEndsAt The UTC date and time that another Hype Train can start. ExpiresAt The UTC date and time that the Hype Train ends. Goal The value needed to reach the next level. Id An ID that identifies this Hype Train. LastContribution The most recent contribution towards the Hype Train’s goal. Level The highest level that the Hype Train reached StartedAt The UTC date and time that this Hype Train started. TopContributions The top contributors for each contribution type. Total The current total amount raised."
  },
  "api/AuxLabs.Twitch.Rest.Models.HypeTrain.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.HypeTrain.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id An ID that identifies this Hype Train. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.HypeTrain.LastContribution.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.HypeTrain.LastContribution.html",
    "title": "Property LastContribution | AuxLabs.Twitch Documentation",
    "keywords": "Property LastContribution Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll LastContribution The most recent contribution towards the Hype Train’s goal. [JsonInclude] [JsonPropertyName(\"last_contribution\")] public HypeTrainContribution LastContribution { get; } Property Value HypeTrainContribution"
  },
  "api/AuxLabs.Twitch.Rest.Models.HypeTrain.Level.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.HypeTrain.Level.html",
    "title": "Property Level | AuxLabs.Twitch Documentation",
    "keywords": "Property Level Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Level The highest level that the Hype Train reached [JsonInclude] [JsonPropertyName(\"level\")] public int Level { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.HypeTrain.StartedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.HypeTrain.StartedAt.html",
    "title": "Property StartedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property StartedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll StartedAt The UTC date and time that this Hype Train started. [JsonInclude] [JsonPropertyName(\"started_at\")] public DateTime StartedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.HypeTrain.TopContributions.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.HypeTrain.TopContributions.html",
    "title": "Property TopContributions | AuxLabs.Twitch Documentation",
    "keywords": "Property TopContributions Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll TopContributions The top contributors for each contribution type. [JsonInclude] [JsonPropertyName(\"top_contributions\")] public IReadOnlyCollection<HypeTrainContribution> TopContributions { get; } Property Value IReadOnlyCollection<HypeTrainContribution>"
  },
  "api/AuxLabs.Twitch.Rest.Models.HypeTrain.Total.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.HypeTrain.Total.html",
    "title": "Property Total | AuxLabs.Twitch Documentation",
    "keywords": "Property Total Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Total The current total amount raised. [JsonInclude] [JsonPropertyName(\"total\")] public int Total { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.HypeTrainContribution.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.HypeTrainContribution.html",
    "title": "Class HypeTrainContribution | AuxLabs.Twitch Documentation",
    "keywords": "Class HypeTrainContribution Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class HypeTrainContribution Inheritance object HypeTrainContribution Derived EventSubHypetrainContribution Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Total The total amount contributed. Type The contribution method used. UserId The ID of the user that made the contribution."
  },
  "api/AuxLabs.Twitch.Rest.Models.HypeTrainContribution.Total.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.HypeTrainContribution.Total.html",
    "title": "Property Total | AuxLabs.Twitch Documentation",
    "keywords": "Property Total Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Total The total amount contributed. [JsonInclude] [JsonPropertyName(\"total\")] public int Total { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.HypeTrainContribution.Type.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.HypeTrainContribution.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Type The contribution method used. [JsonInclude] [JsonPropertyName(\"type\")] public HypeTrainContributionType Type { get; } Property Value HypeTrainContributionType"
  },
  "api/AuxLabs.Twitch.Rest.Models.HypeTrainContribution.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.HypeTrainContribution.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserId The ID of the user that made the contribution. [JsonInclude] [JsonPropertyName(\"user\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.HypeTrainInfo.Data.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.HypeTrainInfo.Data.html",
    "title": "Property Data | AuxLabs.Twitch Documentation",
    "keywords": "Property Data Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Data The event's data. [JsonInclude] [JsonPropertyName(\"event_data\")] public HypeTrain Data { get; } Property Value HypeTrain"
  },
  "api/AuxLabs.Twitch.Rest.Models.HypeTrainInfo.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.HypeTrainInfo.html",
    "title": "Class HypeTrainInfo | AuxLabs.Twitch Documentation",
    "keywords": "Class HypeTrainInfo Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class HypeTrainInfo Inheritance object HypeTrainInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data The event's data. Id An ID that identifies this event. Timestamp The UTC date and time that the event occurred. Type The type of event. Version The version number of the definition of the event’s data."
  },
  "api/AuxLabs.Twitch.Rest.Models.HypeTrainInfo.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.HypeTrainInfo.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id An ID that identifies this event. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.HypeTrainInfo.Timestamp.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.HypeTrainInfo.Timestamp.html",
    "title": "Property Timestamp | AuxLabs.Twitch Documentation",
    "keywords": "Property Timestamp Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Timestamp The UTC date and time that the event occurred. [JsonInclude] [JsonPropertyName(\"event_timestamp\")] public DateTime Timestamp { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.HypeTrainInfo.Type.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.HypeTrainInfo.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Type The type of event. [JsonInclude] [JsonPropertyName(\"event_type\")] public string Type { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.HypeTrainInfo.Version.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.HypeTrainInfo.Version.html",
    "title": "Property Version | AuxLabs.Twitch Documentation",
    "keywords": "Property Version Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Version The version number of the definition of the event’s data. [JsonInclude] [JsonPropertyName(\"version\")] public string Version { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.MockMessage.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.MockMessage.-ctor.html",
    "title": "Constructor MockMessage | AuxLabs.Twitch Documentation",
    "keywords": "Constructor MockMessage Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll MockMessage() public MockMessage() MockMessage(string, string) public MockMessage(string id, string text) Parameters id string text string"
  },
  "api/AuxLabs.Twitch.Rest.Models.MockMessage.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.MockMessage.html",
    "title": "Class MockMessage | AuxLabs.Twitch Documentation",
    "keywords": "Class MockMessage Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class MockMessage Inheritance object MockMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MockMessage() MockMessage(string, string) Properties Id A caller-defined ID used to correlate this message with the same message in the response. IsPermitted Indicates whether Twitch would approve the message or hold it for moderator review. Text The message to check."
  },
  "api/AuxLabs.Twitch.Rest.Models.MockMessage.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.MockMessage.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id A caller-defined ID used to correlate this message with the same message in the response. [JsonInclude] [JsonPropertyName(\"msg_id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.MockMessage.IsPermitted.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.MockMessage.IsPermitted.html",
    "title": "Property IsPermitted | AuxLabs.Twitch Documentation",
    "keywords": "Property IsPermitted Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll IsPermitted Indicates whether Twitch would approve the message or hold it for moderator review. [JsonInclude] [JsonPropertyName(\"is_permitted\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)] public bool? IsPermitted { get; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Rest.Models.MockMessage.Text.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.MockMessage.Text.html",
    "title": "Property Text | AuxLabs.Twitch Documentation",
    "keywords": "Property Text Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Text The message to check. [JsonInclude] [JsonPropertyName(\"msg_text\")] public string Text { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ModeratorCondition.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ModeratorCondition.-ctor.html",
    "title": "Constructor ModeratorCondition | AuxLabs.Twitch Documentation",
    "keywords": "Constructor ModeratorCondition Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorCondition() public ModeratorCondition() ModeratorCondition(string, string) public ModeratorCondition(string broadcasterId, string moderatorId) Parameters broadcasterId string moderatorId string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ModeratorCondition.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ModeratorCondition.html",
    "title": "Class ModeratorCondition | AuxLabs.Twitch Documentation",
    "keywords": "Class ModeratorCondition Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class ModeratorCondition : BroadcasterCondition, IEventCondition Inheritance object BroadcasterCondition ModeratorCondition Implements IEventCondition Inherited Members BroadcasterCondition.BroadcasterId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModeratorCondition() ModeratorCondition(string, string) Properties ModeratorId The ID of the moderator of the channel you want to get notifications for. Operators implicit operator (string, string)(ModeratorCondition) implicit operator ModeratorCondition((string, string))"
  },
  "api/AuxLabs.Twitch.Rest.Models.ModeratorCondition.ModeratorId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ModeratorCondition.ModeratorId.html",
    "title": "Property ModeratorId | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorId The ID of the moderator of the channel you want to get notifications for. [JsonInclude] [JsonPropertyName(\"moderator_user_id\")] public string ModeratorId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ModeratorCondition.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ModeratorCondition.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator (string, string)(ModeratorCondition) public static implicit operator (string, string)(ModeratorCondition value) Parameters value ModeratorCondition Returns (string, string) implicit operator ModeratorCondition((string, string)) public static implicit operator ModeratorCondition((string, string) value) Parameters value (string, string) Returns ModeratorCondition"
  },
  "api/AuxLabs.Twitch.Rest.Models.Pagination.Cursor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Pagination.Cursor.html",
    "title": "Property Cursor | AuxLabs.Twitch Documentation",
    "keywords": "Property Cursor Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Cursor The cursor used to get the next page of results. [JsonInclude] [JsonPropertyName(\"cursor\")] public readonly string Cursor { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Pagination.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Pagination.html",
    "title": "Struct Pagination | AuxLabs.Twitch Documentation",
    "keywords": "Struct Pagination Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public struct Pagination Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Cursor The cursor used to get the next page of results."
  },
  "api/AuxLabs.Twitch.Rest.Models.Playlist.Description.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Playlist.Description.html",
    "title": "Property Description | AuxLabs.Twitch Documentation",
    "keywords": "Property Description Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Description A short description about the music that the playlist includes. [JsonInclude] [JsonPropertyName(\"description\")] public string Description { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Playlist.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Playlist.html",
    "title": "Class Playlist | AuxLabs.Twitch Documentation",
    "keywords": "Class Playlist Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Playlist Inheritance object Playlist Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description A short description about the music that the playlist includes. Id The playlist’s Amazon Standard Identification Number. ImageUrl A URL to the playlist’s image art. Title The playlist’s title."
  },
  "api/AuxLabs.Twitch.Rest.Models.Playlist.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Playlist.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id The playlist’s Amazon Standard Identification Number. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Playlist.ImageUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Playlist.ImageUrl.html",
    "title": "Property ImageUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property ImageUrl Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ImageUrl A URL to the playlist’s image art. [JsonInclude] [JsonPropertyName(\"image_url\")] public string ImageUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Playlist.Title.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Playlist.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Title The playlist’s title. [JsonInclude] [JsonPropertyName(\"title\")] public string Title { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Poll.BitsPerVote.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Poll.BitsPerVote.html",
    "title": "Property BitsPerVote | AuxLabs.Twitch Documentation",
    "keywords": "Property BitsPerVote Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BitsPerVote Not used; will be set to 0. [JsonInclude] [JsonPropertyName(\"bits_per_vote\")] public int BitsPerVote { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.Poll.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Poll.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterDisplayName The broadcaster’s login name. [JsonInclude] [JsonPropertyName(\"broadcaster_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Poll.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Poll.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId An ID that identifies the broadcaster that created the poll. [JsonInclude] [JsonPropertyName(\"broadcaster_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Poll.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Poll.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterName The broadcaster’s display name. [JsonInclude] [JsonPropertyName(\"broadcaster_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Poll.ChannelPointsPerVote.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Poll.ChannelPointsPerVote.html",
    "title": "Property ChannelPointsPerVote | AuxLabs.Twitch Documentation",
    "keywords": "Property ChannelPointsPerVote Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ChannelPointsPerVote The number of points the viewer must spend to cast one additional vote. [JsonInclude] [JsonPropertyName(\"channel_points_per_vote\")] public int ChannelPointsPerVote { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.Poll.Choices.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Poll.Choices.html",
    "title": "Property Choices | AuxLabs.Twitch Documentation",
    "keywords": "Property Choices Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Choices A list of choices that viewers can choose from. [JsonInclude] [JsonPropertyName(\"choices\")] public IReadOnlyCollection<PollOption> Choices { get; } Property Value IReadOnlyCollection<PollOption>"
  },
  "api/AuxLabs.Twitch.Rest.Models.Poll.DurationSeconds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Poll.DurationSeconds.html",
    "title": "Property DurationSeconds | AuxLabs.Twitch Documentation",
    "keywords": "Property DurationSeconds Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll DurationSeconds The length of time that the poll will run for. [JsonInclude] [JsonPropertyName(\"duration\")] public int DurationSeconds { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.Poll.EndedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Poll.EndedAt.html",
    "title": "Property EndedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property EndedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll EndedAt The UTC date and time of when the poll ended. [JsonInclude] [JsonPropertyName(\"ended_at\")] public DateTime? EndedAt { get; } Property Value DateTime?"
  },
  "api/AuxLabs.Twitch.Rest.Models.Poll.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Poll.html",
    "title": "Class Poll | AuxLabs.Twitch Documentation",
    "keywords": "Class Poll Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Poll Inheritance object Poll Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BitsPerVote Not used; will be set to 0. BroadcasterDisplayName The broadcaster’s login name. BroadcasterId An ID that identifies the broadcaster that created the poll. BroadcasterName The broadcaster’s display name. ChannelPointsPerVote The number of points the viewer must spend to cast one additional vote. Choices A list of choices that viewers can choose from. DurationSeconds The length of time that the poll will run for. EndedAt The UTC date and time of when the poll ended. Id An ID that identifies the poll. IsBitsVotingEnabled Not used; will be set to false. IsChannelPointsVotingEnabled Indicates whether viewers may cast additional votes using Channel Points. StartedAt The UTC date and time of when the poll began. Status The poll’s status. Title The question that viewers are voting on."
  },
  "api/AuxLabs.Twitch.Rest.Models.Poll.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Poll.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id An ID that identifies the poll. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Poll.IsBitsVotingEnabled.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Poll.IsBitsVotingEnabled.html",
    "title": "Property IsBitsVotingEnabled | AuxLabs.Twitch Documentation",
    "keywords": "Property IsBitsVotingEnabled Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll IsBitsVotingEnabled Not used; will be set to false. [JsonInclude] [JsonPropertyName(\"bits_voting_enabled\")] public bool IsBitsVotingEnabled { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Rest.Models.Poll.IsChannelPointsVotingEnabled.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Poll.IsChannelPointsVotingEnabled.html",
    "title": "Property IsChannelPointsVotingEnabled | AuxLabs.Twitch Documentation",
    "keywords": "Property IsChannelPointsVotingEnabled Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll IsChannelPointsVotingEnabled Indicates whether viewers may cast additional votes using Channel Points. [JsonInclude] [JsonPropertyName(\"channel_points_voting_enabled\")] public bool IsChannelPointsVotingEnabled { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Rest.Models.Poll.StartedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Poll.StartedAt.html",
    "title": "Property StartedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property StartedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll StartedAt The UTC date and time of when the poll began. [JsonInclude] [JsonPropertyName(\"started_at\")] public DateTime StartedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.Poll.Status.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Poll.Status.html",
    "title": "Property Status | AuxLabs.Twitch Documentation",
    "keywords": "Property Status Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Status The poll’s status. [JsonInclude] [JsonPropertyName(\"status\")] public PollStatus Status { get; } Property Value PollStatus"
  },
  "api/AuxLabs.Twitch.Rest.Models.Poll.Title.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Poll.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Title The question that viewers are voting on. [JsonInclude] [JsonPropertyName(\"title\")] public string Title { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.PollOption.BitsVotes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.PollOption.BitsVotes.html",
    "title": "Property BitsVotes | AuxLabs.Twitch Documentation",
    "keywords": "Property BitsVotes Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BitsVotes Not used; will be set to 0. [JsonInclude] [JsonPropertyName(\"bits_votes\")] public int BitsVotes { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.PollOption.ChannelPointsVotes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.PollOption.ChannelPointsVotes.html",
    "title": "Property ChannelPointsVotes | AuxLabs.Twitch Documentation",
    "keywords": "Property ChannelPointsVotes Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ChannelPointsVotes The number of votes cast using Channel Points. [JsonInclude] [JsonPropertyName(\"channel_points_votes\")] public int ChannelPointsVotes { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.PollOption.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.PollOption.html",
    "title": "Class PollOption | AuxLabs.Twitch Documentation",
    "keywords": "Class PollOption Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class PollOption Inheritance object PollOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BitsVotes Not used; will be set to 0. ChannelPointsVotes The number of votes cast using Channel Points. Id An ID that identifies this choice. Title The choice’s title. Votes The total number of votes cast for this choice."
  },
  "api/AuxLabs.Twitch.Rest.Models.PollOption.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.PollOption.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id An ID that identifies this choice. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.PollOption.Title.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.PollOption.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Title The choice’s title. [JsonInclude] [JsonPropertyName(\"title\")] public string Title { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.PollOption.Votes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.PollOption.Votes.html",
    "title": "Property Votes | AuxLabs.Twitch Documentation",
    "keywords": "Property Votes Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Votes The total number of votes cast for this choice. [JsonInclude] [JsonPropertyName(\"votes\")] public int Votes { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.Prediction.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Prediction.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterDisplayName The broadcaster’s display name. [JsonInclude] [JsonPropertyName(\"broadcaster_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Prediction.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Prediction.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId An ID that identifies the broadcaster that created the prediction. [JsonInclude] [JsonPropertyName(\"broadcaster_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Prediction.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Prediction.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterName The broadcaster’s login name. [JsonInclude] [JsonPropertyName(\"broadcaster_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Prediction.CreatedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Prediction.CreatedAt.html",
    "title": "Property CreatedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property CreatedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CreatedAt The UTC date and time of when the Prediction began. [JsonInclude] [JsonPropertyName(\"created_at\")] public DateTime CreatedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.Prediction.EndedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Prediction.EndedAt.html",
    "title": "Property EndedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property EndedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll EndedAt The UTC date and time of when the Prediction ended. [JsonInclude] [JsonPropertyName(\"ended_at\")] public DateTime? EndedAt { get; } Property Value DateTime?"
  },
  "api/AuxLabs.Twitch.Rest.Models.Prediction.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Prediction.html",
    "title": "Class Prediction | AuxLabs.Twitch Documentation",
    "keywords": "Class Prediction Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Prediction Inheritance object Prediction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterDisplayName The broadcaster’s display name. BroadcasterId An ID that identifies the broadcaster that created the prediction. BroadcasterName The broadcaster’s login name. CreatedAt The UTC date and time of when the Prediction began. EndedAt The UTC date and time of when the Prediction ended. Id An ID that identifies this prediction. LockedAt The UTC date and time of when the Prediction was locked. Outcomes A collection of possible outcomes for the prediction. PredictionDurationSeconds The length of time that the prediction will run for. Status The prediction’s status. Title The question that the prediction asks. WinningOutcomeId The ID of the winning outcome."
  },
  "api/AuxLabs.Twitch.Rest.Models.Prediction.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Prediction.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id An ID that identifies this prediction. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Prediction.LockedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Prediction.LockedAt.html",
    "title": "Property LockedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property LockedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll LockedAt The UTC date and time of when the Prediction was locked. [JsonInclude] [JsonPropertyName(\"locked_at\")] public DateTime? LockedAt { get; } Property Value DateTime?"
  },
  "api/AuxLabs.Twitch.Rest.Models.Prediction.Outcomes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Prediction.Outcomes.html",
    "title": "Property Outcomes | AuxLabs.Twitch Documentation",
    "keywords": "Property Outcomes Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Outcomes A collection of possible outcomes for the prediction. [JsonInclude] [JsonPropertyName(\"outcomes\")] public IReadOnlyCollection<PredictionOption> Outcomes { get; } Property Value IReadOnlyCollection<PredictionOption>"
  },
  "api/AuxLabs.Twitch.Rest.Models.Prediction.PredictionDurationSeconds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Prediction.PredictionDurationSeconds.html",
    "title": "Property PredictionDurationSeconds | AuxLabs.Twitch Documentation",
    "keywords": "Property PredictionDurationSeconds Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll PredictionDurationSeconds The length of time that the prediction will run for. [JsonInclude] [JsonPropertyName(\"prediction_window\")] public int PredictionDurationSeconds { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.Prediction.Status.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Prediction.Status.html",
    "title": "Property Status | AuxLabs.Twitch Documentation",
    "keywords": "Property Status Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Status The prediction’s status. [JsonInclude] [JsonPropertyName(\"status\")] public PredictionStatus Status { get; } Property Value PredictionStatus"
  },
  "api/AuxLabs.Twitch.Rest.Models.Prediction.Title.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Prediction.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Title The question that the prediction asks. [JsonInclude] [JsonPropertyName(\"title\")] public string Title { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Prediction.WinningOutcomeId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Prediction.WinningOutcomeId.html",
    "title": "Property WinningOutcomeId | AuxLabs.Twitch Documentation",
    "keywords": "Property WinningOutcomeId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll WinningOutcomeId The ID of the winning outcome. [JsonInclude] [JsonPropertyName(\"winning_outcome_id\")] public string WinningOutcomeId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.PredictionOption.ChannelPointsTotal.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.PredictionOption.ChannelPointsTotal.html",
    "title": "Property ChannelPointsTotal | AuxLabs.Twitch Documentation",
    "keywords": "Property ChannelPointsTotal Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ChannelPointsTotal The number of Channel Points spent by viewers on this outcome. [JsonInclude] [JsonPropertyName(\"channel_points\")] public int ChannelPointsTotal { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.PredictionOption.Color.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.PredictionOption.Color.html",
    "title": "Property Color | AuxLabs.Twitch Documentation",
    "keywords": "Property Color Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Color The color that visually identifies this outcome in the UX. [JsonInclude] [JsonPropertyName(\"color\")] public PredictionColor Color { get; } Property Value PredictionColor"
  },
  "api/AuxLabs.Twitch.Rest.Models.PredictionOption.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.PredictionOption.html",
    "title": "Class PredictionOption | AuxLabs.Twitch Documentation",
    "keywords": "Class PredictionOption Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class PredictionOption Inheritance object PredictionOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelPointsTotal The number of Channel Points spent by viewers on this outcome. Color The color that visually identifies this outcome in the UX. Id An ID that identifies this outcome. Title The outcome’s text. TopPredictors A collection of viewers who were the top predictors UserCount The number of unique viewers that chose this outcome."
  },
  "api/AuxLabs.Twitch.Rest.Models.PredictionOption.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.PredictionOption.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id An ID that identifies this outcome. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.PredictionOption.Title.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.PredictionOption.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Title The outcome’s text. [JsonInclude] [JsonPropertyName(\"title\")] public string Title { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.PredictionOption.TopPredictors.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.PredictionOption.TopPredictors.html",
    "title": "Property TopPredictors | AuxLabs.Twitch Documentation",
    "keywords": "Property TopPredictors Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll TopPredictors A collection of viewers who were the top predictors [JsonInclude] [JsonPropertyName(\"top_predictors\")] public IReadOnlyCollection<PredictionUser> TopPredictors { get; } Property Value IReadOnlyCollection<PredictionUser>"
  },
  "api/AuxLabs.Twitch.Rest.Models.PredictionOption.UserCount.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.PredictionOption.UserCount.html",
    "title": "Property UserCount | AuxLabs.Twitch Documentation",
    "keywords": "Property UserCount Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserCount The number of unique viewers that chose this outcome. [JsonInclude] [JsonPropertyName(\"users\")] public int UserCount { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.PredictionUser.ChannelPointsUsed.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.PredictionUser.ChannelPointsUsed.html",
    "title": "Property ChannelPointsUsed | AuxLabs.Twitch Documentation",
    "keywords": "Property ChannelPointsUsed Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ChannelPointsUsed The number of Channel Points the viewer spent. [JsonInclude] [JsonPropertyName(\"channel_points_used\")] public int ChannelPointsUsed { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.PredictionUser.ChannelPointsWon.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.PredictionUser.ChannelPointsWon.html",
    "title": "Property ChannelPointsWon | AuxLabs.Twitch Documentation",
    "keywords": "Property ChannelPointsWon Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ChannelPointsWon The number of Channel Points distributed to the viewer. [JsonInclude] [JsonPropertyName(\"channel_points_won\")] public int ChannelPointsWon { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.PredictionUser.DisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.PredictionUser.DisplayName.html",
    "title": "Property DisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property DisplayName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll DisplayName The viewer’s display name. [JsonInclude] [JsonPropertyName(\"user_name\")] public string DisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.PredictionUser.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.PredictionUser.html",
    "title": "Class PredictionUser | AuxLabs.Twitch Documentation",
    "keywords": "Class PredictionUser Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class PredictionUser Inheritance object PredictionUser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelPointsUsed The number of Channel Points the viewer spent. ChannelPointsWon The number of Channel Points distributed to the viewer. DisplayName The viewer’s display name. Id An ID that identifies the viewer. Name The viewer’s login name."
  },
  "api/AuxLabs.Twitch.Rest.Models.PredictionUser.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.PredictionUser.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id An ID that identifies the viewer. [JsonInclude] [JsonPropertyName(\"user_id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.PredictionUser.Name.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.PredictionUser.Name.html",
    "title": "Property Name | AuxLabs.Twitch Documentation",
    "keywords": "Property Name Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Name The viewer’s login name. [JsonInclude] [JsonPropertyName(\"user_login\")] public string Name { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ProductData.Cost.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ProductData.Cost.html",
    "title": "Property Cost | AuxLabs.Twitch Documentation",
    "keywords": "Property Cost Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Cost Contains details about the digital product’s cost. [JsonInclude] [JsonPropertyName(\"cost\")] public Cost Cost { get; } Property Value Cost"
  },
  "api/AuxLabs.Twitch.Rest.Models.ProductData.DisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ProductData.DisplayName.html",
    "title": "Property DisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property DisplayName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll DisplayName The name of the digital product. [JsonInclude] [JsonPropertyName(\"displayName\")] public string DisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ProductData.Domain.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ProductData.Domain.html",
    "title": "Property Domain | AuxLabs.Twitch Documentation",
    "keywords": "Property Domain Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Domain Set to twitch.ext. + the extension's ID. [JsonInclude] [JsonPropertyName(\"domain\")] public string Domain { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ProductData.ExpiresAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ProductData.ExpiresAt.html",
    "title": "Property ExpiresAt | AuxLabs.Twitch Documentation",
    "keywords": "Property ExpiresAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ExpiresAt This is always null since you may purchase only unexpired products. [JsonInclude] [JsonPropertyName(\"expiration\")] public DateTime? ExpiresAt { get; } Property Value DateTime?"
  },
  "api/AuxLabs.Twitch.Rest.Models.ProductData.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ProductData.html",
    "title": "Class ProductData | AuxLabs.Twitch Documentation",
    "keywords": "Class ProductData Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class ProductData Inheritance object ProductData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Cost Contains details about the digital product’s cost. DisplayName The name of the digital product. Domain Set to twitch.ext. + the extension's ID. ExpiresAt This is always null since you may purchase only unexpired products. IsBroadcast Determines whether the data was broadcast to all instances of the extension. IsInDevelopment Determines whether the product is in development. Sku An ID that identifies the digital product."
  },
  "api/AuxLabs.Twitch.Rest.Models.ProductData.IsBroadcast.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ProductData.IsBroadcast.html",
    "title": "Property IsBroadcast | AuxLabs.Twitch Documentation",
    "keywords": "Property IsBroadcast Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll IsBroadcast Determines whether the data was broadcast to all instances of the extension. [JsonInclude] [JsonPropertyName(\"broadcast\")] public bool IsBroadcast { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Rest.Models.ProductData.IsInDevelopment.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ProductData.IsInDevelopment.html",
    "title": "Property IsInDevelopment | AuxLabs.Twitch Documentation",
    "keywords": "Property IsInDevelopment Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll IsInDevelopment Determines whether the product is in development. [JsonInclude] [JsonPropertyName(\"inDevelopment\")] public bool IsInDevelopment { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Rest.Models.ProductData.Sku.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ProductData.Sku.html",
    "title": "Property Sku | AuxLabs.Twitch Documentation",
    "keywords": "Property Sku Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Sku An ID that identifies the digital product. [JsonInclude] [JsonPropertyName(\"sku\")] public string Sku { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Raid.CreatedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Raid.CreatedAt.html",
    "title": "Property CreatedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property CreatedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CreatedAt The UTC date and time of when the raid was requested. [JsonInclude] [JsonPropertyName(\"created_at\")] public DateTime CreatedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.Raid.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Raid.html",
    "title": "Class Raid | AuxLabs.Twitch Documentation",
    "keywords": "Class Raid Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Raid Inheritance object Raid Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt The UTC date and time of when the raid was requested. IsMature Indicates whether the channel being raided contains mature content."
  },
  "api/AuxLabs.Twitch.Rest.Models.Raid.IsMature.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Raid.IsMature.html",
    "title": "Property IsMature | AuxLabs.Twitch Documentation",
    "keywords": "Property IsMature Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll IsMature Indicates whether the channel being raided contains mature content. [JsonInclude] [JsonPropertyName(\"is_mature\")] public bool IsMature { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Rest.Models.RaidCondition.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.RaidCondition.-ctor.html",
    "title": "Constructor RaidCondition | AuxLabs.Twitch Documentation",
    "keywords": "Constructor RaidCondition Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll RaidCondition() public RaidCondition() RaidCondition(RaidConditionType, string) public RaidCondition(RaidConditionType type, string broadcasterId) Parameters type RaidConditionType broadcasterId string"
  },
  "api/AuxLabs.Twitch.Rest.Models.RaidCondition.FromBroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.RaidCondition.FromBroadcasterId.html",
    "title": "Property FromBroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property FromBroadcasterId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll FromBroadcasterId Optional. The broadcaster user ID that created the channel raid you want to get notifications for. [JsonInclude] [JsonPropertyName(\"from_broadcaster_user_id\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string FromBroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.RaidCondition.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.RaidCondition.html",
    "title": "Class RaidCondition | AuxLabs.Twitch Documentation",
    "keywords": "Class RaidCondition Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class RaidCondition : IEventCondition Inheritance object RaidCondition Implements IEventCondition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RaidCondition() RaidCondition(RaidConditionType, string) Properties FromBroadcasterId Optional. The broadcaster user ID that created the channel raid you want to get notifications for. ToBroadcasterId Optional. The broadcaster user ID that received the channel raid you want to get notifications for. Operators implicit operator (RaidConditionType, string)(RaidCondition) implicit operator RaidCondition((RaidConditionType, string))"
  },
  "api/AuxLabs.Twitch.Rest.Models.RaidCondition.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.RaidCondition.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator (RaidConditionType, string)(RaidCondition) public static implicit operator (RaidConditionType, string)(RaidCondition value) Parameters value RaidCondition Returns (RaidConditionType, string) implicit operator RaidCondition((RaidConditionType, string)) public static implicit operator RaidCondition((RaidConditionType, string) value) Parameters value (RaidConditionType, string) Returns RaidCondition"
  },
  "api/AuxLabs.Twitch.Rest.Models.RaidCondition.ToBroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.RaidCondition.ToBroadcasterId.html",
    "title": "Property ToBroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property ToBroadcasterId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ToBroadcasterId Optional. The broadcaster user ID that received the channel raid you want to get notifications for. [JsonInclude] [JsonPropertyName(\"to_broadcaster_user_id\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string ToBroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.RaidConditionType.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.RaidConditionType.html",
    "title": "Enum RaidConditionType | AuxLabs.Twitch Documentation",
    "keywords": "Enum RaidConditionType Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public enum RaidConditionType Extension Methods EnumHelper.GetStringValue<T>(T) Fields From = 0 To = 1"
  },
  "api/AuxLabs.Twitch.Rest.Models.Redemption.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Redemption.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID that uniquely identifies the broadcaster. [JsonInclude] [JsonPropertyName(\"broadcaster_id\")] public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Redemption.BroadcasterLogin.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Redemption.BroadcasterLogin.html",
    "title": "Property BroadcasterLogin | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterLogin Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterLogin The broadcaster’s login name. [JsonInclude] [JsonPropertyName(\"broadcaster_login\")] public string BroadcasterLogin { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Redemption.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Redemption.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterName The broadcaster’s display name. [JsonInclude] [JsonPropertyName(\"broadcaster_name\")] public string BroadcasterName { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Redemption.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Redemption.html",
    "title": "Class Redemption | AuxLabs.Twitch Documentation",
    "keywords": "Class Redemption Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Redemption Inheritance object Redemption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID that uniquely identifies the broadcaster. BroadcasterLogin The broadcaster’s login name. BroadcasterName The broadcaster’s display name. Id The ID that uniquely identifies this redemption. RedeemedAt The date and time of when the reward was redeemed Reward The reward that the user redeemed. Status The state of the redemption. UserId The ID that uniquely identifies the user that redeemed the reward. UserInput The text the user entered at the prompt when they redeemed the reward. UserLogin The user’s login name. UserName The user’s display name."
  },
  "api/AuxLabs.Twitch.Rest.Models.Redemption.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Redemption.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id The ID that uniquely identifies this redemption. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Redemption.RedeemedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Redemption.RedeemedAt.html",
    "title": "Property RedeemedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property RedeemedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll RedeemedAt The date and time of when the reward was redeemed [JsonInclude] [JsonPropertyName(\"redeemed_at\")] public DateTime RedeemedAt { get; set; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.Redemption.Reward.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Redemption.Reward.html",
    "title": "Property Reward | AuxLabs.Twitch Documentation",
    "keywords": "Property Reward Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Reward The reward that the user redeemed. [JsonInclude] [JsonPropertyName(\"reward\")] public SimpleReward Reward { get; set; } Property Value SimpleReward"
  },
  "api/AuxLabs.Twitch.Rest.Models.Redemption.Status.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Redemption.Status.html",
    "title": "Property Status | AuxLabs.Twitch Documentation",
    "keywords": "Property Status Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Status The state of the redemption. [JsonInclude] [JsonPropertyName(\"status\")] public RedemptionStatus Status { get; set; } Property Value RedemptionStatus"
  },
  "api/AuxLabs.Twitch.Rest.Models.Redemption.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Redemption.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserId The ID that uniquely identifies the user that redeemed the reward. [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Redemption.UserInput.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Redemption.UserInput.html",
    "title": "Property UserInput | AuxLabs.Twitch Documentation",
    "keywords": "Property UserInput Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserInput The text the user entered at the prompt when they redeemed the reward. [JsonInclude] [JsonPropertyName(\"user_input\")] public string UserInput { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Redemption.UserLogin.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Redemption.UserLogin.html",
    "title": "Property UserLogin | AuxLabs.Twitch Documentation",
    "keywords": "Property UserLogin Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserLogin The user’s login name. [JsonInclude] [JsonPropertyName(\"user_login\")] public string UserLogin { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Redemption.UserName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Redemption.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserName The user’s display name. [JsonInclude] [JsonPropertyName(\"user_name\")] public string UserName { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Reward.BackgroundColor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Reward.BackgroundColor.html",
    "title": "Property BackgroundColor | AuxLabs.Twitch Documentation",
    "keywords": "Property BackgroundColor Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BackgroundColor The background color to use for the reward. [JsonInclude] [JsonPropertyName(\"background_color\")] public Color BackgroundColor { get; set; } Property Value Color"
  },
  "api/AuxLabs.Twitch.Rest.Models.Reward.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Reward.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID that uniquely identifies the broadcaster. [JsonInclude] [JsonPropertyName(\"broadcaster_id\")] public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Reward.BroadcasterLogin.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Reward.BroadcasterLogin.html",
    "title": "Property BroadcasterLogin | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterLogin Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterLogin The broadcaster’s login name. [JsonInclude] [JsonPropertyName(\"broadcaster_login\")] public string BroadcasterLogin { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Reward.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Reward.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterName The broadcaster’s display name. [JsonInclude] [JsonPropertyName(\"broadcaster_name\")] public string BroadcasterName { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Reward.CooldownExpiresAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Reward.CooldownExpiresAt.html",
    "title": "Property CooldownExpiresAt | AuxLabs.Twitch Documentation",
    "keywords": "Property CooldownExpiresAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CooldownExpiresAt The timestamp of when the cooldown period expires. [JsonInclude] [JsonPropertyName(\"cooldown_expires_at\")] public DateTime CooldownExpiresAt { get; set; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.Reward.DefaultImages.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Reward.DefaultImages.html",
    "title": "Property DefaultImages | AuxLabs.Twitch Documentation",
    "keywords": "Property DefaultImages Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll DefaultImages A set of default images for the reward. [JsonInclude] [JsonPropertyName(\"default_image\")] public IReadOnlyCollection<TwitchImage> DefaultImages { get; set; } Property Value IReadOnlyCollection<TwitchImage>"
  },
  "api/AuxLabs.Twitch.Rest.Models.Reward.GlobalCooldownSetting.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Reward.GlobalCooldownSetting.html",
    "title": "Property GlobalCooldownSetting | AuxLabs.Twitch Documentation",
    "keywords": "Property GlobalCooldownSetting Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll GlobalCooldownSetting Determines whether to apply a cooldown period between redemptions. [JsonInclude] [JsonPropertyName(\"global_cooldown_setting\")] public RewardSetting GlobalCooldownSetting { get; set; } Property Value RewardSetting"
  },
  "api/AuxLabs.Twitch.Rest.Models.Reward.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Reward.html",
    "title": "Class Reward | AuxLabs.Twitch Documentation",
    "keywords": "Class Reward Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Reward : SimpleReward Inheritance object SimpleReward Reward Inherited Members SimpleReward.Id SimpleReward.Title SimpleReward.Prompt SimpleReward.Cost object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BackgroundColor The background color to use for the reward. BroadcasterId The ID that uniquely identifies the broadcaster. BroadcasterLogin The broadcaster’s login name. BroadcasterName The broadcaster’s display name. CooldownExpiresAt The timestamp of when the cooldown period expires. DefaultImages A set of default images for the reward. GlobalCooldownSetting Determines whether to apply a cooldown period between redemptions. Images A set of custom images for the reward. IsEnabled Determines whether the reward is enabled. IsInStock Determines whether the reward is currently in stock. IsPaused Determines whether the reward is currently paused. IsUserInputRequired Determines whether the user must enter information when redeeming the reward. MaxPerStreamSetting Determiness whether to apply a maximum to the number to the redemptions allowed per live stream. MaxPerUserSetting Determines whether to apply a maximum to the number of redemptions allowed per user per live stream. ShouldSkipRequestQueue Determines whether redemptions should be set to fulfilled status immediately when a reward is redeemed. TotalRedemptions The number of redemptions redeemed during the current live stream."
  },
  "api/AuxLabs.Twitch.Rest.Models.Reward.Images.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Reward.Images.html",
    "title": "Property Images | AuxLabs.Twitch Documentation",
    "keywords": "Property Images Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Images A set of custom images for the reward. [JsonInclude] [JsonPropertyName(\"image\")] public IReadOnlyCollection<TwitchImage> Images { get; set; } Property Value IReadOnlyCollection<TwitchImage>"
  },
  "api/AuxLabs.Twitch.Rest.Models.Reward.IsEnabled.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Reward.IsEnabled.html",
    "title": "Property IsEnabled | AuxLabs.Twitch Documentation",
    "keywords": "Property IsEnabled Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll IsEnabled Determines whether the reward is enabled. [JsonInclude] [JsonPropertyName(\"is_enabled\")] public bool IsEnabled { get; set; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Rest.Models.Reward.IsInStock.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Reward.IsInStock.html",
    "title": "Property IsInStock | AuxLabs.Twitch Documentation",
    "keywords": "Property IsInStock Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll IsInStock Determines whether the reward is currently in stock. [JsonInclude] [JsonPropertyName(\"is_in_stock\")] public bool IsInStock { get; set; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Rest.Models.Reward.IsPaused.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Reward.IsPaused.html",
    "title": "Property IsPaused | AuxLabs.Twitch Documentation",
    "keywords": "Property IsPaused Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll IsPaused Determines whether the reward is currently paused. [JsonInclude] [JsonPropertyName(\"is_paused\")] public bool IsPaused { get; set; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Rest.Models.Reward.IsUserInputRequired.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Reward.IsUserInputRequired.html",
    "title": "Property IsUserInputRequired | AuxLabs.Twitch Documentation",
    "keywords": "Property IsUserInputRequired Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll IsUserInputRequired Determines whether the user must enter information when redeeming the reward. [JsonInclude] [JsonPropertyName(\"is_user_input_required\")] public bool IsUserInputRequired { get; set; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Rest.Models.Reward.MaxPerStreamSetting.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Reward.MaxPerStreamSetting.html",
    "title": "Property MaxPerStreamSetting | AuxLabs.Twitch Documentation",
    "keywords": "Property MaxPerStreamSetting Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll MaxPerStreamSetting Determiness whether to apply a maximum to the number to the redemptions allowed per live stream. [JsonInclude] [JsonPropertyName(\"max_per_stream_setting\")] public RewardSetting MaxPerStreamSetting { get; set; } Property Value RewardSetting"
  },
  "api/AuxLabs.Twitch.Rest.Models.Reward.MaxPerUserSetting.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Reward.MaxPerUserSetting.html",
    "title": "Property MaxPerUserSetting | AuxLabs.Twitch Documentation",
    "keywords": "Property MaxPerUserSetting Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll MaxPerUserSetting Determines whether to apply a maximum to the number of redemptions allowed per user per live stream. [JsonInclude] [JsonPropertyName(\"max_per_user_per_stream_setting\")] public RewardSetting MaxPerUserSetting { get; set; } Property Value RewardSetting"
  },
  "api/AuxLabs.Twitch.Rest.Models.Reward.ShouldSkipRequestQueue.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Reward.ShouldSkipRequestQueue.html",
    "title": "Property ShouldSkipRequestQueue | AuxLabs.Twitch Documentation",
    "keywords": "Property ShouldSkipRequestQueue Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ShouldSkipRequestQueue Determines whether redemptions should be set to fulfilled status immediately when a reward is redeemed. [JsonInclude] [JsonPropertyName(\"should_redemptions_skip_request_queue\")] public bool ShouldSkipRequestQueue { get; set; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Rest.Models.Reward.TotalRedemptions.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Reward.TotalRedemptions.html",
    "title": "Property TotalRedemptions | AuxLabs.Twitch Documentation",
    "keywords": "Property TotalRedemptions Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll TotalRedemptions The number of redemptions redeemed during the current live stream. [JsonInclude] [JsonPropertyName(\"redemptions_redeemed_current_stream\")] public int TotalRedemptions { get; set; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.RewardCondition.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.RewardCondition.-ctor.html",
    "title": "Constructor RewardCondition | AuxLabs.Twitch Documentation",
    "keywords": "Constructor RewardCondition Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll RewardCondition() public RewardCondition() RewardCondition(string, string) public RewardCondition(string broadcasterId, string rewardId) Parameters broadcasterId string rewardId string"
  },
  "api/AuxLabs.Twitch.Rest.Models.RewardCondition.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.RewardCondition.html",
    "title": "Class RewardCondition | AuxLabs.Twitch Documentation",
    "keywords": "Class RewardCondition Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class RewardCondition : BroadcasterCondition, IEventCondition Inheritance object BroadcasterCondition RewardCondition Implements IEventCondition Inherited Members BroadcasterCondition.BroadcasterId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RewardCondition() RewardCondition(string, string) Properties RewardId Optional. Specify a reward id to only receive notifications for a specific reward. Operators implicit operator (string, string)(RewardCondition) implicit operator RewardCondition((string, string))"
  },
  "api/AuxLabs.Twitch.Rest.Models.RewardCondition.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.RewardCondition.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator (string, string)(RewardCondition) public static implicit operator (string, string)(RewardCondition value) Parameters value RewardCondition Returns (string, string) implicit operator RewardCondition((string, string)) public static implicit operator RewardCondition((string, string) value) Parameters value (string, string) Returns RewardCondition"
  },
  "api/AuxLabs.Twitch.Rest.Models.RewardCondition.RewardId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.RewardCondition.RewardId.html",
    "title": "Property RewardId | AuxLabs.Twitch Documentation",
    "keywords": "Property RewardId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll RewardId Optional. Specify a reward id to only receive notifications for a specific reward. [JsonInclude] [JsonPropertyName(\"reward_id\")] public string RewardId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.RewardSetting.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.RewardSetting.-ctor.html",
    "title": "Constructor RewardSetting | AuxLabs.Twitch Documentation",
    "keywords": "Constructor RewardSetting Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll RewardSetting(bool, uint) [JsonConstructor] public RewardSetting(bool isEnabled, uint value) Parameters isEnabled bool value uint"
  },
  "api/AuxLabs.Twitch.Rest.Models.RewardSetting.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.RewardSetting.html",
    "title": "Struct RewardSetting | AuxLabs.Twitch Documentation",
    "keywords": "Struct RewardSetting Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public readonly struct RewardSetting Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors RewardSetting(bool, uint) Properties IsEnabled Value"
  },
  "api/AuxLabs.Twitch.Rest.Models.RewardSetting.IsEnabled.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.RewardSetting.IsEnabled.html",
    "title": "Property IsEnabled | AuxLabs.Twitch Documentation",
    "keywords": "Property IsEnabled Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll IsEnabled public bool IsEnabled { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Rest.Models.RewardSetting.Value.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.RewardSetting.Value.html",
    "title": "Property Value | AuxLabs.Twitch Documentation",
    "keywords": "Property Value Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Value public uint Value { get; } Property Value uint"
  },
  "api/AuxLabs.Twitch.Rest.Models.Schedule.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Schedule.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterDisplayName The broadcaster’s display name. [JsonInclude] [JsonPropertyName(\"broadcaster_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Schedule.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Schedule.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster that owns the broadcast schedule. [JsonInclude] [JsonPropertyName(\"broadcaster_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Schedule.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Schedule.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterName The broadcaster’s login name. [JsonInclude] [JsonPropertyName(\"broadcaster_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Schedule.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Schedule.html",
    "title": "Class Schedule | AuxLabs.Twitch Documentation",
    "keywords": "Class Schedule Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Schedule Inheritance object Schedule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterDisplayName The broadcaster’s display name. BroadcasterId The ID of the broadcaster that owns the broadcast schedule. BroadcasterName The broadcaster’s login name. Segments The list of broadcasts in the broadcaster’s streaming schedule. Vacation The dates when the broadcaster is on vacation and not streaming."
  },
  "api/AuxLabs.Twitch.Rest.Models.Schedule.Segments.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Schedule.Segments.html",
    "title": "Property Segments | AuxLabs.Twitch Documentation",
    "keywords": "Property Segments Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Segments The list of broadcasts in the broadcaster’s streaming schedule. [JsonInclude] [JsonPropertyName(\"segments\")] public IReadOnlyCollection<ScheduleSegment> Segments { get; } Property Value IReadOnlyCollection<ScheduleSegment>"
  },
  "api/AuxLabs.Twitch.Rest.Models.Schedule.Vacation.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Schedule.Vacation.html",
    "title": "Property Vacation | AuxLabs.Twitch Documentation",
    "keywords": "Property Vacation Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Vacation The dates when the broadcaster is on vacation and not streaming. [JsonInclude] [JsonPropertyName(\"vacation\")] public Vacation Vacation { get; } Property Value Vacation"
  },
  "api/AuxLabs.Twitch.Rest.Models.ScheduleSegment.CancelledUntil.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ScheduleSegment.CancelledUntil.html",
    "title": "Property CancelledUntil | AuxLabs.Twitch Documentation",
    "keywords": "Property CancelledUntil Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CancelledUntil Indicates whether the broadcaster canceled this segment of a recurring broadcast. [JsonInclude] [JsonPropertyName(\"canceled_until\")] public DateTime? CancelledUntil { get; } Property Value DateTime?"
  },
  "api/AuxLabs.Twitch.Rest.Models.ScheduleSegment.Category.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ScheduleSegment.Category.html",
    "title": "Property Category | AuxLabs.Twitch Documentation",
    "keywords": "Property Category Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Category The type of content that the broadcaster plans to stream. [JsonInclude] [JsonPropertyName(\"category\")] public Category Category { get; } Property Value Category"
  },
  "api/AuxLabs.Twitch.Rest.Models.ScheduleSegment.EndsAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ScheduleSegment.EndsAt.html",
    "title": "Property EndsAt | AuxLabs.Twitch Documentation",
    "keywords": "Property EndsAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll EndsAt The UTC date and time of when the broadcast ends. [JsonInclude] [JsonPropertyName(\"end_time\")] public DateTime EndsAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.ScheduleSegment.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ScheduleSegment.html",
    "title": "Class ScheduleSegment | AuxLabs.Twitch Documentation",
    "keywords": "Class ScheduleSegment Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class ScheduleSegment Inheritance object ScheduleSegment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CancelledUntil Indicates whether the broadcaster canceled this segment of a recurring broadcast. Category The type of content that the broadcaster plans to stream. EndsAt The UTC date and time of when the broadcast ends. Id An ID that identifies this broadcast segment. IsRecurring Determines whether the broadcast is part of a recurring series that streams at the same time each week or is a one-time broadcast. StartsAt The UTC date and time of when the broadcast starts. Title The broadcast segment’s title."
  },
  "api/AuxLabs.Twitch.Rest.Models.ScheduleSegment.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ScheduleSegment.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id An ID that identifies this broadcast segment. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ScheduleSegment.IsRecurring.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ScheduleSegment.IsRecurring.html",
    "title": "Property IsRecurring | AuxLabs.Twitch Documentation",
    "keywords": "Property IsRecurring Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll IsRecurring Determines whether the broadcast is part of a recurring series that streams at the same time each week or is a one-time broadcast. [JsonInclude] [JsonPropertyName(\"is_recurring\")] public bool IsRecurring { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Rest.Models.ScheduleSegment.StartsAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ScheduleSegment.StartsAt.html",
    "title": "Property StartsAt | AuxLabs.Twitch Documentation",
    "keywords": "Property StartsAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll StartsAt The UTC date and time of when the broadcast starts. [JsonInclude] [JsonPropertyName(\"start_time\")] public DateTime StartsAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.ScheduleSegment.Title.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ScheduleSegment.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Title The broadcast segment’s title. [JsonInclude] [JsonPropertyName(\"title\")] public string Title { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ShieldMode.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ShieldMode.html",
    "title": "Class ShieldMode | AuxLabs.Twitch Documentation",
    "keywords": "Class ShieldMode Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class ShieldMode Inheritance object ShieldMode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsActive Determines whether Shield Mode is active. LastActivatedAt The UTC timestamp of when Shield Mode was last activated. ModeratorDisplayName The moderator’s display name. ModeratorId An ID that identifies the moderator that last activated Shield Mode. ModeratorName The moderator’s login name."
  },
  "api/AuxLabs.Twitch.Rest.Models.ShieldMode.IsActive.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ShieldMode.IsActive.html",
    "title": "Property IsActive | AuxLabs.Twitch Documentation",
    "keywords": "Property IsActive Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll IsActive Determines whether Shield Mode is active. [JsonInclude] [JsonPropertyName(\"is_active\")] public bool IsActive { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Rest.Models.ShieldMode.LastActivatedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ShieldMode.LastActivatedAt.html",
    "title": "Property LastActivatedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property LastActivatedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll LastActivatedAt The UTC timestamp of when Shield Mode was last activated. [JsonInclude] [JsonPropertyName(\"last_activated_at\")] public DateTime LastActivatedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.ShieldMode.ModeratorDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ShieldMode.ModeratorDisplayName.html",
    "title": "Property ModeratorDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorDisplayName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorDisplayName The moderator’s display name. [JsonInclude] [JsonPropertyName(\"moderator_name\")] public string ModeratorDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ShieldMode.ModeratorId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ShieldMode.ModeratorId.html",
    "title": "Property ModeratorId | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorId An ID that identifies the moderator that last activated Shield Mode. [JsonInclude] [JsonPropertyName(\"moderator_id\")] public string ModeratorId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.ShieldMode.ModeratorName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.ShieldMode.ModeratorName.html",
    "title": "Property ModeratorName | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorName The moderator’s login name. [JsonInclude] [JsonPropertyName(\"moderator_login\")] public string ModeratorName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleChatUser.Color.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleChatUser.Color.html",
    "title": "Property Color | AuxLabs.Twitch Documentation",
    "keywords": "Property Color Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Color The color of the user's name in chat. [JsonInclude] [JsonPropertyName(\"color\")] public Color Color { get; } Property Value Color"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleChatUser.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleChatUser.html",
    "title": "Class SimpleChatUser | AuxLabs.Twitch Documentation",
    "keywords": "Class SimpleChatUser Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class SimpleChatUser : SimpleUser, ISimpleUser, IPartialUser, IEntity<string> Inheritance object SimpleUser SimpleChatUser Implements ISimpleUser IPartialUser IEntity<string> Inherited Members SimpleUser.Id SimpleUser.Name SimpleUser.DisplayName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Color The color of the user's name in chat."
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleClip.EditUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleClip.EditUrl.html",
    "title": "Property EditUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property EditUrl Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll EditUrl A URL that you can use to edit the clip’s title, identify the part of the clip to publish, and publish the clip. [JsonInclude] [JsonPropertyName(\"edit_url\")] public string EditUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleClip.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleClip.html",
    "title": "Class SimpleClip | AuxLabs.Twitch Documentation",
    "keywords": "Class SimpleClip Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class SimpleClip Inheritance object SimpleClip Derived Clip Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EditUrl A URL that you can use to edit the clip’s title, identify the part of the clip to publish, and publish the clip. Id An ID that uniquely identifies the clip."
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleClip.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleClip.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id An ID that uniquely identifies the clip. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleExtension.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleExtension.html",
    "title": "Class SimpleExtension | AuxLabs.Twitch Documentation",
    "keywords": "Class SimpleExtension Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class SimpleExtension Inheritance object SimpleExtension Derived ComponentExtension Extension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id An ID that identifies the extension. IsActive Determines the extension’s activation state. Name The extension’s name. Version The extension’s version."
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleExtension.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleExtension.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id An ID that identifies the extension. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleExtension.IsActive.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleExtension.IsActive.html",
    "title": "Property IsActive | AuxLabs.Twitch Documentation",
    "keywords": "Property IsActive Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll IsActive Determines the extension’s activation state. [JsonInclude] [JsonPropertyName(\"active\")] public bool? IsActive { get; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleExtension.Name.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleExtension.Name.html",
    "title": "Property Name | AuxLabs.Twitch Documentation",
    "keywords": "Property Name Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Name The extension’s name. [JsonInclude] [JsonPropertyName(\"name\")] public string Name { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleExtension.Version.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleExtension.Version.html",
    "title": "Property Version | AuxLabs.Twitch Documentation",
    "keywords": "Property Version Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Version The extension’s version. [JsonInclude] [JsonPropertyName(\"version\")] public string Version { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleSubscription.BroadcasterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleSubscription.BroadcasterDisplayName.html",
    "title": "Property BroadcasterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterDisplayName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterDisplayName [JsonInclude] [JsonPropertyName(\"broadcaster_name\")] public string BroadcasterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleSubscription.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleSubscription.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId [JsonInclude] [JsonPropertyName(\"broadcaster_id\")] public string BroadcasterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleSubscription.BroadcasterName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleSubscription.BroadcasterName.html",
    "title": "Property BroadcasterName | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterName [JsonInclude] [JsonPropertyName(\"broadcaster_login\")] public string BroadcasterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleSubscription.GifterDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleSubscription.GifterDisplayName.html",
    "title": "Property GifterDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property GifterDisplayName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll GifterDisplayName [JsonInclude] [JsonPropertyName(\"gifter_name\")] public string GifterDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleSubscription.GifterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleSubscription.GifterId.html",
    "title": "Property GifterId | AuxLabs.Twitch Documentation",
    "keywords": "Property GifterId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll GifterId [JsonInclude] [JsonPropertyName(\"gifter_id\")] public string GifterId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleSubscription.GifterName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleSubscription.GifterName.html",
    "title": "Property GifterName | AuxLabs.Twitch Documentation",
    "keywords": "Property GifterName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll GifterName [JsonInclude] [JsonPropertyName(\"gifter_login\")] public string GifterName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleSubscription.html",
    "title": "Class SimpleSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class SimpleSubscription Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class SimpleSubscription Inheritance object SimpleSubscription Derived Subscription Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterDisplayName BroadcasterId BroadcasterName GifterDisplayName GifterId GifterName IsGift Determines whether the subscription is a gift subscription. Tier The type of subscription."
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleSubscription.IsGift.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleSubscription.IsGift.html",
    "title": "Property IsGift | AuxLabs.Twitch Documentation",
    "keywords": "Property IsGift Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll IsGift Determines whether the subscription is a gift subscription. [JsonInclude] [JsonPropertyName(\"is_gift\")] public bool IsGift { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleSubscription.Tier.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleSubscription.Tier.html",
    "title": "Property Tier | AuxLabs.Twitch Documentation",
    "keywords": "Property Tier Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Tier The type of subscription. [JsonInclude] [JsonPropertyName(\"tier\")] public SubscriptionType Tier { get; } Property Value SubscriptionType"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleTeam.BackgroundImageUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleTeam.BackgroundImageUrl.html",
    "title": "Property BackgroundImageUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property BackgroundImageUrl Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BackgroundImageUrl A URL to the team’s background image. [JsonInclude] [JsonPropertyName(\"background_image_url\")] public string BackgroundImageUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleTeam.BannerUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleTeam.BannerUrl.html",
    "title": "Property BannerUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property BannerUrl Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BannerUrl A URL to the team’s banner. [JsonInclude] [JsonPropertyName(\"banner\")] public string BannerUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleTeam.CreatedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleTeam.CreatedAt.html",
    "title": "Property CreatedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property CreatedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CreatedAt The UTC date and time of when the team was created. [JsonInclude] [JsonPropertyName(\"created_at\")] public DateTime CreatedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleTeam.Description.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleTeam.Description.html",
    "title": "Property Description | AuxLabs.Twitch Documentation",
    "keywords": "Property Description Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Description The team’s description. The description may contain formatting such as Markdown, HTML, newline (\\n) characters, etc. [JsonInclude] [JsonPropertyName(\"info\")] public string Description { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleTeam.DisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleTeam.DisplayName.html",
    "title": "Property DisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property DisplayName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll DisplayName The team’s display name. [JsonInclude] [JsonPropertyName(\"team_display_name\")] public string DisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleTeam.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleTeam.html",
    "title": "Class SimpleTeam | AuxLabs.Twitch Documentation",
    "keywords": "Class SimpleTeam Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class SimpleTeam Inheritance object SimpleTeam Derived ChannelTeam Team Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BackgroundImageUrl A URL to the team’s background image. BannerUrl A URL to the team’s banner. CreatedAt The UTC date and time of when the team was created. Description The team’s description. The description may contain formatting such as Markdown, HTML, newline (\\n) characters, etc. DisplayName The team’s display name. Id An ID that identifies the team. Name The team’s name. ThumbnailUrl A URL to a thumbnail image of the team’s logo. UpdatedAt The UTC date and time of the last time the team was updated."
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleTeam.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleTeam.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id An ID that identifies the team. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleTeam.Name.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleTeam.Name.html",
    "title": "Property Name | AuxLabs.Twitch Documentation",
    "keywords": "Property Name Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Name The team’s name. [JsonInclude] [JsonPropertyName(\"team_name\")] public string Name { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleTeam.ThumbnailUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleTeam.ThumbnailUrl.html",
    "title": "Property ThumbnailUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property ThumbnailUrl Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ThumbnailUrl A URL to a thumbnail image of the team’s logo. [JsonInclude] [JsonPropertyName(\"thumbnail_url\")] public string ThumbnailUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleTeam.UpdatedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleTeam.UpdatedAt.html",
    "title": "Property UpdatedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property UpdatedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UpdatedAt The UTC date and time of the last time the team was updated. [JsonInclude] [JsonPropertyName(\"updated_at\")] public DateTime UpdatedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleUser.DisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleUser.DisplayName.html",
    "title": "Property DisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property DisplayName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll DisplayName The user’s display name. [JsonInclude] [JsonPropertyName(\"display_name\")] public string DisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleUser.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleUser.html",
    "title": "Class SimpleUser | AuxLabs.Twitch Documentation",
    "keywords": "Class SimpleUser Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class SimpleUser : ISimpleUser, IPartialUser, IEntity<string> Inheritance object SimpleUser Implements ISimpleUser IPartialUser IEntity<string> Derived SimpleChatUser User Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayName The user’s display name. Id The ID of the user Name The user’s login name."
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleUser.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleUser.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id The ID of the user [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.SimpleUser.Name.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.SimpleUser.Name.html",
    "title": "Property Name | AuxLabs.Twitch Documentation",
    "keywords": "Property Name Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Name The user’s login name. [JsonInclude] [JsonPropertyName(\"login\")] public string Name { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Soundtrack.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Soundtrack.html",
    "title": "Class Soundtrack | AuxLabs.Twitch Documentation",
    "keywords": "Class Soundtrack Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Soundtrack Inheritance object Soundtrack Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Source The source of the track that’s currently playing. Track Describes a track."
  },
  "api/AuxLabs.Twitch.Rest.Models.Soundtrack.Source.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Soundtrack.Source.html",
    "title": "Property Source | AuxLabs.Twitch Documentation",
    "keywords": "Property Source Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Source The source of the track that’s currently playing. [JsonInclude] [JsonPropertyName(\"source\")] public TrackSource Source { get; } Property Value TrackSource"
  },
  "api/AuxLabs.Twitch.Rest.Models.Soundtrack.Track.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Soundtrack.Track.html",
    "title": "Property Track | AuxLabs.Twitch Documentation",
    "keywords": "Property Track Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Track Describes a track. [JsonInclude] [JsonPropertyName(\"track\")] public Track Track { get; } Property Value Track"
  },
  "api/AuxLabs.Twitch.Rest.Models.Subscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Subscription.html",
    "title": "Class Subscription | AuxLabs.Twitch Documentation",
    "keywords": "Class Subscription Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Subscription : SimpleSubscription Inheritance object SimpleSubscription Subscription Inherited Members SimpleSubscription.BroadcasterId SimpleSubscription.BroadcasterName SimpleSubscription.BroadcasterDisplayName SimpleSubscription.GifterId SimpleSubscription.GifterName SimpleSubscription.GifterDisplayName SimpleSubscription.IsGift SimpleSubscription.Tier object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties PlanName The name of the subscription. UserDisplayName The user’s display name. UserId An ID that identifies the subscribing user. UserName The user’s login name."
  },
  "api/AuxLabs.Twitch.Rest.Models.Subscription.PlanName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Subscription.PlanName.html",
    "title": "Property PlanName | AuxLabs.Twitch Documentation",
    "keywords": "Property PlanName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll PlanName The name of the subscription. [JsonInclude] [JsonPropertyName(\"plan_name\")] public string PlanName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Subscription.UserDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Subscription.UserDisplayName.html",
    "title": "Property UserDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserDisplayName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserDisplayName The user’s display name. [JsonInclude] [JsonPropertyName(\"user_name\")] public string UserDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Subscription.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Subscription.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserId An ID that identifies the subscribing user. [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Subscription.UserName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Subscription.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserName The user’s login name. [JsonInclude] [JsonPropertyName(\"user_login\")] public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Team.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Team.html",
    "title": "Class Team | AuxLabs.Twitch Documentation",
    "keywords": "Class Team Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Team : SimpleTeam Inheritance object SimpleTeam Team Inherited Members SimpleTeam.Id SimpleTeam.Name SimpleTeam.DisplayName SimpleTeam.BackgroundImageUrl SimpleTeam.BannerUrl SimpleTeam.CreatedAt SimpleTeam.UpdatedAt SimpleTeam.Description SimpleTeam.ThumbnailUrl object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Users The list of team members."
  },
  "api/AuxLabs.Twitch.Rest.Models.Team.Users.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Team.Users.html",
    "title": "Property Users | AuxLabs.Twitch Documentation",
    "keywords": "Property Users Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Users The list of team members. [JsonInclude] [JsonPropertyName(\"users\")] public IReadOnlyCollection<TeamUser> Users { get; } Property Value IReadOnlyCollection<TeamUser>"
  },
  "api/AuxLabs.Twitch.Rest.Models.TeamUser.DisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.TeamUser.DisplayName.html",
    "title": "Property DisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property DisplayName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll DisplayName The user’s display name. [JsonInclude] [JsonPropertyName(\"user_name\")] public string DisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.TeamUser.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.TeamUser.html",
    "title": "Class TeamUser | AuxLabs.Twitch Documentation",
    "keywords": "Class TeamUser Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class TeamUser : ISimpleUser, IPartialUser, IEntity<string> Inheritance object TeamUser Implements ISimpleUser IPartialUser IEntity<string> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayName The user’s display name. Id The ID of the user Name The user’s login name."
  },
  "api/AuxLabs.Twitch.Rest.Models.TeamUser.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.TeamUser.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id The ID of the user [JsonInclude] [JsonPropertyName(\"user_id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.TeamUser.Name.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.TeamUser.Name.html",
    "title": "Property Name | AuxLabs.Twitch Documentation",
    "keywords": "Property Name Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Name The user’s login name. [JsonInclude] [JsonPropertyName(\"user_login\")] public string Name { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Track.Album.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Track.Album.html",
    "title": "Property Album | AuxLabs.Twitch Documentation",
    "keywords": "Property Album Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Album Describes the album that the track is found on. [JsonInclude] [JsonPropertyName(\"album\")] public Album Album { get; } Property Value Album"
  },
  "api/AuxLabs.Twitch.Rest.Models.Track.Artists.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Track.Artists.html",
    "title": "Property Artists | AuxLabs.Twitch Documentation",
    "keywords": "Property Artists Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Artists The artists included on the track. [JsonInclude] [JsonPropertyName(\"artists\")] public IReadOnlyCollection<Artist> Artists { get; } Property Value IReadOnlyCollection<Artist>"
  },
  "api/AuxLabs.Twitch.Rest.Models.Track.DurationSeconds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Track.DurationSeconds.html",
    "title": "Property DurationSeconds | AuxLabs.Twitch Documentation",
    "keywords": "Property DurationSeconds Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll DurationSeconds The duration of the track, in seconds. [JsonInclude] [JsonPropertyName(\"duration\")] public int DurationSeconds { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.Track.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Track.html",
    "title": "Class Track | AuxLabs.Twitch Documentation",
    "keywords": "Class Track Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Track Inheritance object Track Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Album Describes the album that the track is found on. Artists The artists included on the track. DurationSeconds The duration of the track, in seconds. Id The track’s Amazon Standard Identification Number. Isrc The track’s International Standard Recording Code. Title The track’s title."
  },
  "api/AuxLabs.Twitch.Rest.Models.Track.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Track.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id The track’s Amazon Standard Identification Number. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Track.Isrc.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Track.Isrc.html",
    "title": "Property Isrc | AuxLabs.Twitch Documentation",
    "keywords": "Property Isrc Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Isrc The track’s International Standard Recording Code. [JsonInclude] [JsonPropertyName(\"isrc\")] public string Isrc { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Track.Title.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Track.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Title The track’s title. [JsonInclude] [JsonPropertyName(\"title\")] public string Title { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.TrackSource.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.TrackSource.html",
    "title": "Class TrackSource | AuxLabs.Twitch Documentation",
    "keywords": "Class TrackSource Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class TrackSource Inheritance object TrackSource Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id The playlist’s or station’s Amazon Standard Identification Number. ImageUrl A URL to the playlist’s or station’s image art. SoundtrackUrl A URL to the playlist on Soundtrack. SpotifyUrl A URL to the playlist on Spotify. Title The playlist’s or station’s title. Type The type of content that this source maps to."
  },
  "api/AuxLabs.Twitch.Rest.Models.TrackSource.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.TrackSource.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id The playlist’s or station’s Amazon Standard Identification Number. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.TrackSource.ImageUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.TrackSource.ImageUrl.html",
    "title": "Property ImageUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property ImageUrl Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ImageUrl A URL to the playlist’s or station’s image art. [JsonInclude] [JsonPropertyName(\"image_url\")] public string ImageUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.TrackSource.SoundtrackUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.TrackSource.SoundtrackUrl.html",
    "title": "Property SoundtrackUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property SoundtrackUrl Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll SoundtrackUrl A URL to the playlist on Soundtrack. [JsonInclude] [JsonPropertyName(\"soundtrack_url\")] public string SoundtrackUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.TrackSource.SpotifyUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.TrackSource.SpotifyUrl.html",
    "title": "Property SpotifyUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property SpotifyUrl Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll SpotifyUrl A URL to the playlist on Spotify. [JsonInclude] [JsonPropertyName(\"spotify_url\")] public string SpotifyUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.TrackSource.Title.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.TrackSource.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Title The playlist’s or station’s title. [JsonInclude] [JsonPropertyName(\"title\")] public string Title { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.TrackSource.Type.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.TrackSource.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Type The type of content that this source maps to. [JsonInclude] [JsonPropertyName(\"content_type\")] public TrackSourceType Type { get; } Property Value TrackSourceType"
  },
  "api/AuxLabs.Twitch.Rest.Models.Transport.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Transport.-ctor.html",
    "title": "Constructor Transport | AuxLabs.Twitch Documentation",
    "keywords": "Constructor Transport Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Transport() public Transport() Transport(string) public Transport(string sessionId) Parameters sessionId string Transport(string, string) public Transport(string callback, string secret) Parameters callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Transport.Callback.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Transport.Callback.html",
    "title": "Property Callback | AuxLabs.Twitch Documentation",
    "keywords": "Property Callback Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Callback The callback URL where the notifications are sent. Only required for webhooks. [JsonInclude] [JsonPropertyName(\"callback\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string Callback { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Transport.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Transport.html",
    "title": "Class Transport | AuxLabs.Twitch Documentation",
    "keywords": "Class Transport Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Transport Inheritance object Transport Derived AcceptedTransport Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Transport() Transport(string, string) Transport(string) Properties Callback The callback URL where the notifications are sent. Only required for webhooks. Method The transport method. Secret The secret used to verify the signature. Only required for webhooks. SessionId An ID that identifies the WebSocket to send notifications to. Only required for websockets."
  },
  "api/AuxLabs.Twitch.Rest.Models.Transport.Method.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Transport.Method.html",
    "title": "Property Method | AuxLabs.Twitch Documentation",
    "keywords": "Property Method Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Method The transport method. [JsonInclude] [JsonPropertyName(\"method\")] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public TransportMethod Method { get; } Property Value TransportMethod"
  },
  "api/AuxLabs.Twitch.Rest.Models.Transport.Secret.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Transport.Secret.html",
    "title": "Property Secret | AuxLabs.Twitch Documentation",
    "keywords": "Property Secret Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Secret The secret used to verify the signature. Only required for webhooks. [JsonInclude] [JsonPropertyName(\"secret\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string Secret { get; } Property Value string Remarks The secret must be an ASCII string that’s a minimum of 10 characters long and a maximum of 100 characters long."
  },
  "api/AuxLabs.Twitch.Rest.Models.Transport.SessionId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Transport.SessionId.html",
    "title": "Property SessionId | AuxLabs.Twitch Documentation",
    "keywords": "Property SessionId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll SessionId An ID that identifies the WebSocket to send notifications to. Only required for websockets. [JsonInclude] [JsonPropertyName(\"session_id\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string SessionId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.DateRange.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.DateRange.html",
    "title": "Property DateRange | AuxLabs.Twitch Documentation",
    "keywords": "Property DateRange Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll DateRange A range of dates relating to the objects returned in . [JsonInclude] [JsonPropertyName(\"date_range\")] public DateRange? DateRange { get; } Property Value DateRange?"
  },
  "api/AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html",
    "title": "Class TwitchMetaResponse<T> | AuxLabs.Twitch Documentation",
    "keywords": "Class TwitchMetaResponse<T> Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll An object that represents data returned by a Twitch request, but with some metadata. public class TwitchMetaResponse<T> : TwitchResponse<T> where T : class Type Parameters T Inheritance object TwitchResponse<T> TwitchMetaResponse<T> Inherited Members TwitchResponse<T>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DateRange A range of dates relating to the objects returned in . Pagination Contains information used to page through the list of results. Points The current number of subscriber points earned by this broadcaster. Total The total number of objects returned in ."
  },
  "api/AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.Pagination.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.Pagination.html",
    "title": "Property Pagination | AuxLabs.Twitch Documentation",
    "keywords": "Property Pagination Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Pagination Contains information used to page through the list of results. [JsonInclude] [JsonPropertyName(\"pagination\")] public Pagination? Pagination { get; } Property Value Pagination?"
  },
  "api/AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.Points.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.Points.html",
    "title": "Property Points | AuxLabs.Twitch Documentation",
    "keywords": "Property Points Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Points The current number of subscriber points earned by this broadcaster. [JsonInclude] [JsonPropertyName(\"points\")] public int? Points { get; } Property Value int? Remarks Only returned for"
  },
  "api/AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.Total.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.Total.html",
    "title": "Property Total | AuxLabs.Twitch Documentation",
    "keywords": "Property Total Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Total The total number of objects returned in . [JsonInclude] [JsonPropertyName(\"total\")] public int? Total { get; } Property Value int?"
  },
  "api/AuxLabs.Twitch.Rest.Models.TwitchResponse-1.Data.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.TwitchResponse-1.Data.html",
    "title": "Property Data | AuxLabs.Twitch Documentation",
    "keywords": "Property Data Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Data A collection of objects returned from a request [JsonInclude] [JsonPropertyName(\"data\")] public IReadOnlyCollection<T> Data { get; } Property Value IReadOnlyCollection<T>"
  },
  "api/AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html",
    "title": "Class TwitchResponse<T> | AuxLabs.Twitch Documentation",
    "keywords": "Class TwitchResponse<T> Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll An object that represents data returned by a Twitch request. public class TwitchResponse<T> where T : class Type Parameters T Inheritance object TwitchResponse<T> Derived EventSubResponse TwitchMetaResponse<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data A collection of objects returned from a request"
  },
  "api/AuxLabs.Twitch.Rest.Models.User.BroadcasterType.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.User.BroadcasterType.html",
    "title": "Property BroadcasterType | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterType Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterType User’s broadcaster type [JsonInclude] [JsonPropertyName(\"broadcaster_type\")] public BroadcasterType BroadcasterType { get; } Property Value BroadcasterType"
  },
  "api/AuxLabs.Twitch.Rest.Models.User.CreatedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.User.CreatedAt.html",
    "title": "Property CreatedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property CreatedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CreatedAt Date when the user was created [JsonInclude] [JsonPropertyName(\"created_at\")] public DateTime CreatedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.User.Description.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.User.Description.html",
    "title": "Property Description | AuxLabs.Twitch Documentation",
    "keywords": "Property Description Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Description User’s channel description [JsonInclude] [JsonPropertyName(\"description\")] public string Description { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.User.Email.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.User.Email.html",
    "title": "Property Email | AuxLabs.Twitch Documentation",
    "keywords": "Property Email Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Email User’s verified email address [JsonInclude] [JsonPropertyName(\"email\")] public string Email { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.User.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.User.html",
    "title": "Class User | AuxLabs.Twitch Documentation",
    "keywords": "Class User Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class User : SimpleUser, ISimpleUser, IPartialUser, IEntity<string> Inheritance object SimpleUser User Implements ISimpleUser IPartialUser IEntity<string> Inherited Members SimpleUser.Id SimpleUser.Name SimpleUser.DisplayName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterType User’s broadcaster type CreatedAt Date when the user was created Description User’s channel description Email User’s verified email address OfflineImageUrl URL of the user’s offline image ProfileImageUrl URL of the user’s profile image Type User’s type ViewCount Total number of views of the user’s channel"
  },
  "api/AuxLabs.Twitch.Rest.Models.User.OfflineImageUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.User.OfflineImageUrl.html",
    "title": "Property OfflineImageUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property OfflineImageUrl Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll OfflineImageUrl URL of the user’s offline image [JsonInclude] [JsonPropertyName(\"offline_image_url\")] public string OfflineImageUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.User.ProfileImageUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.User.ProfileImageUrl.html",
    "title": "Property ProfileImageUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property ProfileImageUrl Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ProfileImageUrl URL of the user’s profile image [JsonInclude] [JsonPropertyName(\"profile_image_url\")] public string ProfileImageUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.User.Type.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.User.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Type User’s type [JsonInclude] [JsonPropertyName(\"type\")] public UserType Type { get; } Property Value UserType"
  },
  "api/AuxLabs.Twitch.Rest.Models.User.ViewCount.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.User.ViewCount.html",
    "title": "Property ViewCount | AuxLabs.Twitch Documentation",
    "keywords": "Property ViewCount Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ViewCount Total number of views of the user’s channel [JsonInclude] [JsonPropertyName(\"view_count\")] public int ViewCount { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.UserCondition.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.UserCondition.-ctor.html",
    "title": "Constructor UserCondition | AuxLabs.Twitch Documentation",
    "keywords": "Constructor UserCondition Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserCondition() public UserCondition() UserCondition(string) public UserCondition(string userId) Parameters userId string"
  },
  "api/AuxLabs.Twitch.Rest.Models.UserCondition.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.UserCondition.html",
    "title": "Class UserCondition | AuxLabs.Twitch Documentation",
    "keywords": "Class UserCondition Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class UserCondition : IEventCondition Inheritance object UserCondition Implements IEventCondition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserCondition() UserCondition(string) Properties UserId The user ID for the user you want notifications for. Operators implicit operator string(UserCondition) implicit operator UserCondition(string)"
  },
  "api/AuxLabs.Twitch.Rest.Models.UserCondition.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.UserCondition.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator string(UserCondition) public static implicit operator string(UserCondition value) Parameters value UserCondition Returns string implicit operator UserCondition(string) public static implicit operator UserCondition(string v) Parameters v string Returns UserCondition"
  },
  "api/AuxLabs.Twitch.Rest.Models.UserCondition.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.UserCondition.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserId The user ID for the user you want notifications for. [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.UserIdentity.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.UserIdentity.html",
    "title": "Class UserIdentity | AuxLabs.Twitch Documentation",
    "keywords": "Class UserIdentity Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class UserIdentity : AppIdentity Inheritance object AppIdentity UserIdentity Inherited Members AppIdentity.AccessToken AppIdentity.ExpiresInSeconds AppIdentity.TokenType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties RefreshToken Scopes UserId UserName"
  },
  "api/AuxLabs.Twitch.Rest.Models.UserIdentity.RefreshToken.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.UserIdentity.RefreshToken.html",
    "title": "Property RefreshToken | AuxLabs.Twitch Documentation",
    "keywords": "Property RefreshToken Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll RefreshToken [JsonInclude] [JsonPropertyName(\"refresh_token\")] public string RefreshToken { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.UserIdentity.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.UserIdentity.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Scopes [JsonInclude] [JsonPropertyName(\"scopes\")] public IReadOnlyCollection<string> Scopes { get; } Property Value IReadOnlyCollection<string>"
  },
  "api/AuxLabs.Twitch.Rest.Models.UserIdentity.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.UserIdentity.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserId [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.UserIdentity.UserName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.UserIdentity.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserName [JsonInclude] [JsonPropertyName(\"login\")] public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Vacation.EndsAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Vacation.EndsAt.html",
    "title": "Property EndsAt | AuxLabs.Twitch Documentation",
    "keywords": "Property EndsAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll EndsAt The UTC date and time of when the broadcaster’s vacation ends. [JsonInclude] [JsonPropertyName(\"end_time\")] public DateTime EndsAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.Vacation.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Vacation.html",
    "title": "Class Vacation | AuxLabs.Twitch Documentation",
    "keywords": "Class Vacation Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Vacation Inheritance object Vacation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EndsAt The UTC date and time of when the broadcaster’s vacation ends. StartsAt The UTC date and time of when the broadcaster’s vacation starts."
  },
  "api/AuxLabs.Twitch.Rest.Models.Vacation.StartsAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Vacation.StartsAt.html",
    "title": "Property StartsAt | AuxLabs.Twitch Documentation",
    "keywords": "Property StartsAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll StartsAt The UTC date and time of when the broadcaster’s vacation starts. [JsonInclude] [JsonPropertyName(\"start_time\")] public DateTime StartsAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.Video.CreatedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Video.CreatedAt.html",
    "title": "Property CreatedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property CreatedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll CreatedAt The date and time, in UTC, of when the video was created. [JsonInclude] [JsonPropertyName(\"created_at\")] public DateTime CreatedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.Video.Description.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Video.Description.html",
    "title": "Property Description | AuxLabs.Twitch Documentation",
    "keywords": "Property Description Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Description The video’s description. [JsonInclude] [JsonPropertyName(\"description\")] public string Description { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Video.Duration.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Video.Duration.html",
    "title": "Property Duration | AuxLabs.Twitch Documentation",
    "keywords": "Property Duration Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Duration The video’s length in ISO 8601 duration format. [JsonInclude] [JsonPropertyName(\"duration\")] public string Duration { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Video.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Video.html",
    "title": "Class Video | AuxLabs.Twitch Documentation",
    "keywords": "Class Video Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public class Video Inheritance object Video Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt The date and time, in UTC, of when the video was created. Description The video’s description. Duration The video’s length in ISO 8601 duration format. Id An ID that identifies the video. Language The ISO 639-1 two-letter language code that the video was broadcast in. MutedSegments The segments that Twitch Audio Recognition muted. PublishedAt The date and time, in UTC, of when the video was published. StreamId The ID of the stream that the video originated from if the video is a Archive. ThumbnailUrl A URL to a thumbnail image of the video. Title The video’s title. Type The video’s type. Url The video’s URL. UserDisplayName The broadcaster’s display name. UserId The ID of the broadcaster that owns the video. UserName The broadcaster’s login name. Viewable The video’s viewable state. Always set to public. ViewCount The number of times that users have watched the video."
  },
  "api/AuxLabs.Twitch.Rest.Models.Video.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Video.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Id An ID that identifies the video. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Video.Language.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Video.Language.html",
    "title": "Property Language | AuxLabs.Twitch Documentation",
    "keywords": "Property Language Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Language The ISO 639-1 two-letter language code that the video was broadcast in. [JsonInclude] [JsonPropertyName(\"language\")] public string Language { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Video.MutedSegments.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Video.MutedSegments.html",
    "title": "Property MutedSegments | AuxLabs.Twitch Documentation",
    "keywords": "Property MutedSegments Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll MutedSegments The segments that Twitch Audio Recognition muted. [JsonInclude] [JsonPropertyName(\"muted_segments\")] public IReadOnlyCollection<VideoOffset> MutedSegments { get; } Property Value IReadOnlyCollection<VideoOffset>"
  },
  "api/AuxLabs.Twitch.Rest.Models.Video.PublishedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Video.PublishedAt.html",
    "title": "Property PublishedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property PublishedAt Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll PublishedAt The date and time, in UTC, of when the video was published. [JsonInclude] [JsonPropertyName(\"published_at\")] public DateTime PublishedAt { get; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Models.Video.StreamId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Video.StreamId.html",
    "title": "Property StreamId | AuxLabs.Twitch Documentation",
    "keywords": "Property StreamId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll StreamId The ID of the stream that the video originated from if the video is a Archive. [JsonInclude] [JsonPropertyName(\"stream_id\")] public string StreamId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Video.ThumbnailUrl.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Video.ThumbnailUrl.html",
    "title": "Property ThumbnailUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property ThumbnailUrl Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ThumbnailUrl A URL to a thumbnail image of the video. [JsonInclude] [JsonPropertyName(\"thumbnail_url\")] public string ThumbnailUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Video.Title.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Video.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Title The video’s title. [JsonInclude] [JsonPropertyName(\"title\")] public string Title { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Video.Type.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Video.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Type The video’s type. [JsonInclude] [JsonPropertyName(\"type\")] public VideoType Type { get; } Property Value VideoType"
  },
  "api/AuxLabs.Twitch.Rest.Models.Video.Url.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Video.Url.html",
    "title": "Property Url | AuxLabs.Twitch Documentation",
    "keywords": "Property Url Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Url The video’s URL. [JsonInclude] [JsonPropertyName(\"url\")] public string Url { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Video.UserDisplayName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Video.UserDisplayName.html",
    "title": "Property UserDisplayName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserDisplayName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserDisplayName The broadcaster’s display name. [JsonInclude] [JsonPropertyName(\"user_name\")] public string UserDisplayName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Video.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Video.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserId The ID of the broadcaster that owns the video. [JsonInclude] [JsonPropertyName(\"user_id\")] public string UserId { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Video.UserName.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Video.UserName.html",
    "title": "Property UserName | AuxLabs.Twitch Documentation",
    "keywords": "Property UserName Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll UserName The broadcaster’s login name. [JsonInclude] [JsonPropertyName(\"user_login\")] public string UserName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Video.Viewable.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Video.Viewable.html",
    "title": "Property Viewable | AuxLabs.Twitch Documentation",
    "keywords": "Property Viewable Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Viewable The video’s viewable state. Always set to public. [JsonInclude] [JsonPropertyName(\"viewable\")] public string Viewable { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Models.Video.ViewCount.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.Video.ViewCount.html",
    "title": "Property ViewCount | AuxLabs.Twitch Documentation",
    "keywords": "Property ViewCount Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll ViewCount The number of times that users have watched the video. [JsonInclude] [JsonPropertyName(\"view_count\")] public int ViewCount { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.VideoOffset.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.VideoOffset.-ctor.html",
    "title": "Constructor VideoOffset | AuxLabs.Twitch Documentation",
    "keywords": "Constructor VideoOffset Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll VideoOffset(int, int) [JsonConstructor] public VideoOffset(int duration, int offset) Parameters duration int offset int"
  },
  "api/AuxLabs.Twitch.Rest.Models.VideoOffset.Duration.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.VideoOffset.Duration.html",
    "title": "Property Duration | AuxLabs.Twitch Documentation",
    "keywords": "Property Duration Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Duration public int Duration { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Models.VideoOffset.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.VideoOffset.html",
    "title": "Struct VideoOffset | AuxLabs.Twitch Documentation",
    "keywords": "Struct VideoOffset Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll public readonly struct VideoOffset Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors VideoOffset(int, int) Properties Duration Offset"
  },
  "api/AuxLabs.Twitch.Rest.Models.VideoOffset.Offset.html": {
    "href": "api/AuxLabs.Twitch.Rest.Models.VideoOffset.Offset.html",
    "title": "Property Offset | AuxLabs.Twitch Documentation",
    "keywords": "Property Offset Namespace AuxLabs.Twitch.Rest.Models Assembly AuxLabs.Twitch.Rest.Api.dll Offset public int Offset { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Requests.AuthorizationGrantedSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.AuthorizationGrantedSubscription.-ctor.html",
    "title": "Constructor AuthorizationGrantedSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor AuthorizationGrantedSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll AuthorizationGrantedSubscription(string, string) public AuthorizationGrantedSubscription(string clientId, string sessionId) Parameters clientId string sessionId string AuthorizationGrantedSubscription(string, string, string) public AuthorizationGrantedSubscription(string clientId, string callback, string secret) Parameters clientId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.AuthorizationGrantedSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.AuthorizationGrantedSubscription.html",
    "title": "Class AuthorizationGrantedSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class AuthorizationGrantedSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class AuthorizationGrantedSubscription : AuthorizationSubscriptionBase Inheritance object PostEventSubscriptionBody<AuthorizationCondition> AuthorizationSubscriptionBase AuthorizationGrantedSubscription Inherited Members PostEventSubscriptionBody<AuthorizationCondition>.Type PostEventSubscriptionBody<AuthorizationCondition>.Version PostEventSubscriptionBody<AuthorizationCondition>.Condition PostEventSubscriptionBody<AuthorizationCondition>.Transport PostEventSubscriptionBody<AuthorizationCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthorizationGrantedSubscription(string, string, string) AuthorizationGrantedSubscription(string, string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.AuthorizationRevokedSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.AuthorizationRevokedSubscription.-ctor.html",
    "title": "Constructor AuthorizationRevokedSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor AuthorizationRevokedSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll AuthorizationRevokedSubscription(string, string) public AuthorizationRevokedSubscription(string clientId, string sessionId) Parameters clientId string sessionId string AuthorizationRevokedSubscription(string, string, string) public AuthorizationRevokedSubscription(string clientId, string callback, string secret) Parameters clientId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.AuthorizationRevokedSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.AuthorizationRevokedSubscription.html",
    "title": "Class AuthorizationRevokedSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class AuthorizationRevokedSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class AuthorizationRevokedSubscription : AuthorizationSubscriptionBase Inheritance object PostEventSubscriptionBody<AuthorizationCondition> AuthorizationSubscriptionBase AuthorizationRevokedSubscription Inherited Members PostEventSubscriptionBody<AuthorizationCondition>.Type PostEventSubscriptionBody<AuthorizationCondition>.Version PostEventSubscriptionBody<AuthorizationCondition>.Condition PostEventSubscriptionBody<AuthorizationCondition>.Transport PostEventSubscriptionBody<AuthorizationCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthorizationRevokedSubscription(string, string, string) AuthorizationRevokedSubscription(string, string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.AuthorizationSubscriptionBase.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.AuthorizationSubscriptionBase.-ctor.html",
    "title": "Constructor AuthorizationSubscriptionBase | AuxLabs.Twitch Documentation",
    "keywords": "Constructor AuthorizationSubscriptionBase Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll AuthorizationSubscriptionBase(string, string) public AuthorizationSubscriptionBase(string clientId, string sessionId) Parameters clientId string sessionId string AuthorizationSubscriptionBase(string, string, string) public AuthorizationSubscriptionBase(string clientId, string callbackUrl, string secret) Parameters clientId string callbackUrl string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.AuthorizationSubscriptionBase.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.AuthorizationSubscriptionBase.html",
    "title": "Class AuthorizationSubscriptionBase | AuxLabs.Twitch Documentation",
    "keywords": "Class AuthorizationSubscriptionBase Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public abstract class AuthorizationSubscriptionBase : PostEventSubscriptionBody<AuthorizationCondition> Inheritance object PostEventSubscriptionBody<AuthorizationCondition> AuthorizationSubscriptionBase Derived AuthorizationGrantedSubscription AuthorizationRevokedSubscription Inherited Members PostEventSubscriptionBody<AuthorizationCondition>.Type PostEventSubscriptionBody<AuthorizationCondition>.Version PostEventSubscriptionBody<AuthorizationCondition>.Condition PostEventSubscriptionBody<AuthorizationCondition>.Transport PostEventSubscriptionBody<AuthorizationCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthorizationSubscriptionBase(string, string, string) AuthorizationSubscriptionBase(string, string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster whose AutoMod settings you want to get. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs.html",
    "title": "Class AutomodSettingsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class AutomodSettingsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class AutomodSettingsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IScopedRequest Inheritance object QueryMap AutomodSettingsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the broadcaster whose AutoMod settings you want to get. ModeratorId The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs.ModeratorId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs.ModeratorId.html",
    "title": "Property ModeratorId | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorId The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. public string ModeratorId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.BanSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.BanSubscription.-ctor.html",
    "title": "Constructor BanSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor BanSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BanSubscription(string, string) public BanSubscription(string channelId, string sessionId) Parameters channelId string sessionId string BanSubscription(string, string, string) public BanSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.BanSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.BanSubscription.html",
    "title": "Class BanSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class BanSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class BanSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase BanSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BanSubscription(string, string, string) BanSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.BanSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.BanSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.BitsTransactionSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.BitsTransactionSubscription.-ctor.html",
    "title": "Constructor BitsTransactionSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor BitsTransactionSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BitsTransactionSubscription(string, string) public BitsTransactionSubscription(string clientId, string sessionId) Parameters clientId string sessionId string BitsTransactionSubscription(string, string, string) public BitsTransactionSubscription(string clientId, string callbackUrl, string secret) Parameters clientId string callbackUrl string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.BitsTransactionSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.BitsTransactionSubscription.html",
    "title": "Class BitsTransactionSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class BitsTransactionSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class BitsTransactionSubscription : PostEventSubscriptionBody<ExtensionCondition> Inheritance object PostEventSubscriptionBody<ExtensionCondition> BitsTransactionSubscription Inherited Members PostEventSubscriptionBody<ExtensionCondition>.Type PostEventSubscriptionBody<ExtensionCondition>.Version PostEventSubscriptionBody<ExtensionCondition>.Condition PostEventSubscriptionBody<ExtensionCondition>.Transport PostEventSubscriptionBody<ExtensionCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BitsTransactionSubscription(string, string, string) BitsTransactionSubscription(string, string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.BroadcastEndedSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.BroadcastEndedSubscription.-ctor.html",
    "title": "Constructor BroadcastEndedSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor BroadcastEndedSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcastEndedSubscription(string, string) public BroadcastEndedSubscription(string channelId, string sessionId) Parameters channelId string sessionId string BroadcastEndedSubscription(string, string, string) public BroadcastEndedSubscription(string channelId, string callbackUrl, string secret) Parameters channelId string callbackUrl string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.BroadcastEndedSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.BroadcastEndedSubscription.html",
    "title": "Class BroadcastEndedSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class BroadcastEndedSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class BroadcastEndedSubscription : PostEventSubscriptionBody<BroadcasterCondition> Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcastEndedSubscription Inherited Members PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BroadcastEndedSubscription(string, string, string) BroadcastEndedSubscription(string, string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.BroadcasterSubscriptionBase.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.BroadcasterSubscriptionBase.-ctor.html",
    "title": "Constructor BroadcasterSubscriptionBase | AuxLabs.Twitch Documentation",
    "keywords": "Constructor BroadcasterSubscriptionBase Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterSubscriptionBase(string, string) public BroadcasterSubscriptionBase(string channelId, string sessionId) Parameters channelId string sessionId string BroadcasterSubscriptionBase(string, string, string) public BroadcasterSubscriptionBase(string channelId, string callbackUrl, string secret) Parameters channelId string callbackUrl string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.BroadcasterSubscriptionBase.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.BroadcasterSubscriptionBase.html",
    "title": "Class BroadcasterSubscriptionBase | AuxLabs.Twitch Documentation",
    "keywords": "Class BroadcasterSubscriptionBase Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public abstract class BroadcasterSubscriptionBase : PostEventSubscriptionBody<BroadcasterCondition>, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase Implements IScopedRequest Derived BanSubscription CampaignProgressSubscription CampaignStartSubscription CampaignStopSubscription CheerSubscription DonationSubscription GoalEndSubscription GoalProgressSubscription GoalStartSubscription HypetrainEndSubscription HypetrainProgressSubscription HypetrainStartSubscription ModeratorAddSubscription ModeratorRemoveSubscription PollEndSubscription PollProgressSubscription PollStartSubscription PredictionEndSubscription PredictionLockSubscription PredictionProgressSubscription PredictionStartSubscription RewardAddSubscription SubscribeSubscription SubscriptionEndSubscription SubscriptionGiftSubscription SubscriptionMessageSubscription UnbanSubscription Inherited Members PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BroadcasterSubscriptionBase(string, string, string) BroadcasterSubscriptionBase(string, string) Properties Scopes The scopes required for this request. Methods Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.BroadcasterSubscriptionBase.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.BroadcasterSubscriptionBase.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public abstract string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.BroadcasterSubscriptionBase.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.BroadcasterSubscriptionBase.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.BroadcastStartedSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.BroadcastStartedSubscription.-ctor.html",
    "title": "Constructor BroadcastStartedSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor BroadcastStartedSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcastStartedSubscription(string, string) public BroadcastStartedSubscription(string channelId, string sessionId) Parameters channelId string sessionId string BroadcastStartedSubscription(string, string, string) public BroadcastStartedSubscription(string channelId, string callbackUrl, string secret) Parameters channelId string callbackUrl string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.BroadcastStartedSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.BroadcastStartedSubscription.html",
    "title": "Class BroadcastStartedSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class BroadcastStartedSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class BroadcastStartedSubscription : PostEventSubscriptionBody<BroadcasterCondition> Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcastStartedSubscription Inherited Members PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BroadcastStartedSubscription(string, string, string) BroadcastStartedSubscription(string, string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.CampaignProgressSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.CampaignProgressSubscription.-ctor.html",
    "title": "Constructor CampaignProgressSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor CampaignProgressSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CampaignProgressSubscription(string, string) public CampaignProgressSubscription(string channelId, string sessionId) Parameters channelId string sessionId string CampaignProgressSubscription(string, string, string) public CampaignProgressSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.CampaignProgressSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.CampaignProgressSubscription.html",
    "title": "Class CampaignProgressSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class CampaignProgressSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class CampaignProgressSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase CampaignProgressSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CampaignProgressSubscription(string, string, string) CampaignProgressSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.CampaignProgressSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.CampaignProgressSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.CampaignStartSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.CampaignStartSubscription.-ctor.html",
    "title": "Constructor CampaignStartSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor CampaignStartSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CampaignStartSubscription(string, string) public CampaignStartSubscription(string channelId, string sessionId) Parameters channelId string sessionId string CampaignStartSubscription(string, string, string) public CampaignStartSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.CampaignStartSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.CampaignStartSubscription.html",
    "title": "Class CampaignStartSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class CampaignStartSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class CampaignStartSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase CampaignStartSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CampaignStartSubscription(string, string, string) CampaignStartSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.CampaignStartSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.CampaignStartSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.CampaignStopSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.CampaignStopSubscription.-ctor.html",
    "title": "Constructor CampaignStopSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor CampaignStopSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CampaignStopSubscription(string, string) public CampaignStopSubscription(string channelId, string sessionId) Parameters channelId string sessionId string CampaignStopSubscription(string, string, string) public CampaignStopSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.CampaignStopSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.CampaignStopSubscription.html",
    "title": "Class CampaignStopSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class CampaignStopSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class CampaignStopSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase CampaignStopSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CampaignStopSubscription(string, string, string) CampaignStopSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.CampaignStopSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.CampaignStopSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ChannelUpdateSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ChannelUpdateSubscription.-ctor.html",
    "title": "Constructor ChannelUpdateSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor ChannelUpdateSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ChannelUpdateSubscription(string, string) public ChannelUpdateSubscription(string channelId, string sessionId) Parameters channelId string sessionId string ChannelUpdateSubscription(string, string, string) public ChannelUpdateSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ChannelUpdateSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ChannelUpdateSubscription.html",
    "title": "Class ChannelUpdateSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class ChannelUpdateSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class ChannelUpdateSubscription : PostEventSubscriptionBody<BroadcasterCondition> Inheritance object PostEventSubscriptionBody<BroadcasterCondition> ChannelUpdateSubscription Inherited Members PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChannelUpdateSubscription(string, string, string) ChannelUpdateSubscription(string, string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.CheerSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.CheerSubscription.-ctor.html",
    "title": "Constructor CheerSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor CheerSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CheerSubscription(string, string) public CheerSubscription(string channelId, string sessionId) Parameters channelId string sessionId string CheerSubscription(string, string, string) public CheerSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.CheerSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.CheerSubscription.html",
    "title": "Class CheerSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class CheerSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class CheerSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase CheerSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CheerSubscription(string, string, string) CheerSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.CheerSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.CheerSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteBanArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteBanArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster whose chat room the user is being banned from. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteBanArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteBanArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteBanArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteBanArgs.html",
    "title": "Class DeleteBanArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class DeleteBanArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class DeleteBanArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap DeleteBanArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the broadcaster whose chat room the user is being banned from. ModeratorId The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. Scopes The scopes required for this request. UserId The ID of the user to remove the ban or timeout from. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteBanArgs.ModeratorId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteBanArgs.ModeratorId.html",
    "title": "Property ModeratorId | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorId The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. public string ModeratorId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteBanArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteBanArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteBanArgs.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteBanArgs.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll UserId The ID of the user to remove the ban or timeout from. public string UserId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteBanArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteBanArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockArgs.-ctor.html",
    "title": "Constructor DeleteBlockArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor DeleteBlockArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll DeleteBlockArgs() public DeleteBlockArgs() DeleteBlockArgs(string) public DeleteBlockArgs(string userId) Parameters userId string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockArgs.html",
    "title": "Class DeleteBlockArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class DeleteBlockArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class DeleteBlockArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IScopedRequest Inheritance object QueryMap DeleteBlockArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteBlockArgs() DeleteBlockArgs(string) Properties Scopes The scopes required for this request. UserId The ID of the user to remove from the broadcaster’s list of blocked users. Methods CreateQueryMap() Validate(IEnumerable<string>) Operators implicit operator string(DeleteBlockArgs) implicit operator DeleteBlockArgs(string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockArgs.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockArgs.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator string(DeleteBlockArgs) public static implicit operator string(DeleteBlockArgs value) Parameters value DeleteBlockArgs Returns string implicit operator DeleteBlockArgs(string) public static implicit operator DeleteBlockArgs(string v) Parameters v string Returns DeleteBlockArgs"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockArgs.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockArgs.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll UserId The ID of the user to remove from the broadcaster’s list of blocked users. public string UserId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockedTermsArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockedTermsArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster whose blocked terms you’re getting. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockedTermsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockedTermsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockedTermsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockedTermsArgs.html",
    "title": "Class DeleteBlockedTermsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class DeleteBlockedTermsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class DeleteBlockedTermsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap DeleteBlockedTermsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the broadcaster whose blocked terms you’re getting. ModeratorId The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. Scopes The scopes required for this request. TermId The ID of the blocked term to remove from the broadcaster’s list of blocked terms. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockedTermsArgs.ModeratorId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockedTermsArgs.ModeratorId.html",
    "title": "Property ModeratorId | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorId The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. public string ModeratorId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockedTermsArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockedTermsArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockedTermsArgs.TermId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockedTermsArgs.TermId.html",
    "title": "Property TermId | AuxLabs.Twitch Documentation",
    "keywords": "Property TermId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll TermId The ID of the blocked term to remove from the broadcaster’s list of blocked terms. public string TermId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockedTermsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteBlockedTermsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteEventSubscriptionArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteEventSubscriptionArgs.-ctor.html",
    "title": "Constructor DeleteEventSubscriptionArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor DeleteEventSubscriptionArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll DeleteEventSubscriptionArgs() public DeleteEventSubscriptionArgs() DeleteEventSubscriptionArgs(string) public DeleteEventSubscriptionArgs(string subscriptionId) Parameters subscriptionId string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteEventSubscriptionArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteEventSubscriptionArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteEventSubscriptionArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteEventSubscriptionArgs.html",
    "title": "Class DeleteEventSubscriptionArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class DeleteEventSubscriptionArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class DeleteEventSubscriptionArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap DeleteEventSubscriptionArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteEventSubscriptionArgs() DeleteEventSubscriptionArgs(string) Properties SubscriptionId The ID of the subscription to delete. Methods CreateQueryMap() Validate() Operators implicit operator string(DeleteEventSubscriptionArgs) implicit operator DeleteEventSubscriptionArgs(string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteEventSubscriptionArgs.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteEventSubscriptionArgs.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator string(DeleteEventSubscriptionArgs) public static implicit operator string(DeleteEventSubscriptionArgs value) Parameters value DeleteEventSubscriptionArgs Returns string implicit operator DeleteEventSubscriptionArgs(string) public static implicit operator DeleteEventSubscriptionArgs(string v) Parameters v string Returns DeleteEventSubscriptionArgs"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteEventSubscriptionArgs.SubscriptionId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteEventSubscriptionArgs.SubscriptionId.html",
    "title": "Property SubscriptionId | AuxLabs.Twitch Documentation",
    "keywords": "Property SubscriptionId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll SubscriptionId The ID of the subscription to delete. public string SubscriptionId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteEventSubscriptionArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteEventSubscriptionArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteMessageArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteMessageArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster that owns the chat room to remove messages from. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteMessageArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteMessageArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteMessageArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteMessageArgs.html",
    "title": "Class DeleteMessageArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class DeleteMessageArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class DeleteMessageArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap DeleteMessageArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the broadcaster that owns the chat room to remove messages from. MessageId The ID of the message to remove. ModeratorId The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteMessageArgs.MessageId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteMessageArgs.MessageId.html",
    "title": "Property MessageId | AuxLabs.Twitch Documentation",
    "keywords": "Property MessageId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll MessageId The ID of the message to remove. public string MessageId { get; set; } Property Value string Remarks The message must have been created within the last 6 hours, not belong to the broadcaster, and not belong to another moderator."
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteMessageArgs.ModeratorId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteMessageArgs.ModeratorId.html",
    "title": "Property ModeratorId | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorId The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. public string ModeratorId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteMessageArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteMessageArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteMessageArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteMessageArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteRaidArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteRaidArgs.-ctor.html",
    "title": "Constructor DeleteRaidArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor DeleteRaidArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll DeleteRaidArgs() public DeleteRaidArgs() DeleteRaidArgs(string) public DeleteRaidArgs(string broadcasterId) Parameters broadcasterId string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteRaidArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteRaidArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster that initiated the raid. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteRaidArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteRaidArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteRaidArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteRaidArgs.html",
    "title": "Class DeleteRaidArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class DeleteRaidArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class DeleteRaidArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap DeleteRaidArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteRaidArgs() DeleteRaidArgs(string) Properties BroadcasterId The ID of the broadcaster that initiated the raid. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>) Operators implicit operator string(DeleteRaidArgs) implicit operator DeleteRaidArgs(string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteRaidArgs.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteRaidArgs.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator string(DeleteRaidArgs) public static implicit operator string(DeleteRaidArgs value) Parameters value DeleteRaidArgs Returns string implicit operator DeleteRaidArgs(string) public static implicit operator DeleteRaidArgs(string v) Parameters v string Returns DeleteRaidArgs"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteRaidArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteRaidArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteRaidArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteRaidArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteVideosArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteVideosArgs.-ctor.html",
    "title": "Constructor DeleteVideosArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor DeleteVideosArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll DeleteVideosArgs() public DeleteVideosArgs() DeleteVideosArgs(params string[]) public DeleteVideosArgs(params string[] videoIds) Parameters videoIds string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteVideosArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteVideosArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteVideosArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteVideosArgs.html",
    "title": "Class DeleteVideosArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class DeleteVideosArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class DeleteVideosArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IScopedRequest Inheritance object QueryMap DeleteVideosArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteVideosArgs() DeleteVideosArgs(params string[]) Properties Scopes The scopes required for this request. VideoIds The collection of video ids to delete. Methods CreateQueryMap() Validate(IEnumerable<string>) Operators implicit operator string[](DeleteVideosArgs) implicit operator DeleteVideosArgs(string[])"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteVideosArgs.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteVideosArgs.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator string[](DeleteVideosArgs) public static implicit operator string[](DeleteVideosArgs value) Parameters value DeleteVideosArgs Returns string[] implicit operator DeleteVideosArgs(string[]) public static implicit operator DeleteVideosArgs(string[] v) Parameters v string[] Returns DeleteVideosArgs"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteVideosArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteVideosArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteVideosArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteVideosArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DeleteVideosArgs.VideoIds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DeleteVideosArgs.VideoIds.html",
    "title": "Property VideoIds | AuxLabs.Twitch Documentation",
    "keywords": "Property VideoIds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll VideoIds The collection of video ids to delete. public string[] VideoIds { get; set; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DonationSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DonationSubscription.-ctor.html",
    "title": "Constructor DonationSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor DonationSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll DonationSubscription(string, string) public DonationSubscription(string channelId, string sessionId) Parameters channelId string sessionId string DonationSubscription(string, string, string) public DonationSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.DonationSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DonationSubscription.html",
    "title": "Class DonationSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class DonationSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class DonationSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase DonationSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DonationSubscription(string, string, string) DonationSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.DonationSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.DonationSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.EntitlementGrantSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.EntitlementGrantSubscription.-ctor.html",
    "title": "Constructor EntitlementGrantSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor EntitlementGrantSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll EntitlementGrantSubscription(string, string, string, string) public EntitlementGrantSubscription(string organizationId, string categoryId, string campaignId, string sessionId) Parameters organizationId string categoryId string campaignId string sessionId string EntitlementGrantSubscription(string, string, string, string, string) public EntitlementGrantSubscription(string organizationId, string categoryId, string campaignId, string callbackUrl, string secret) Parameters organizationId string categoryId string campaignId string callbackUrl string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.EntitlementGrantSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.EntitlementGrantSubscription.html",
    "title": "Class EntitlementGrantSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class EntitlementGrantSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class EntitlementGrantSubscription : PostEventSubscriptionBody<DropEntitlementCondition> Inheritance object PostEventSubscriptionBody<DropEntitlementCondition> EntitlementGrantSubscription Inherited Members PostEventSubscriptionBody<DropEntitlementCondition>.Type PostEventSubscriptionBody<DropEntitlementCondition>.Version PostEventSubscriptionBody<DropEntitlementCondition>.Condition PostEventSubscriptionBody<DropEntitlementCondition>.Transport PostEventSubscriptionBody<DropEntitlementCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EntitlementGrantSubscription(string, string, string, string, string) EntitlementGrantSubscription(string, string, string, string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.FollowSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.FollowSubscription.-ctor.html",
    "title": "Constructor FollowSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor FollowSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll FollowSubscription(string, string, string) public FollowSubscription(string channelId, string moderatorId, string sessionId) Parameters channelId string moderatorId string sessionId string FollowSubscription(string, string, string, string) public FollowSubscription(string channelId, string moderatorId, string callback, string secret) Parameters channelId string moderatorId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.FollowSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.FollowSubscription.html",
    "title": "Class FollowSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class FollowSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class FollowSubscription : ModeratorSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<ModeratorCondition> ModeratorSubscriptionBase FollowSubscription Implements IScopedRequest Inherited Members ModeratorSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<ModeratorCondition>.Type PostEventSubscriptionBody<ModeratorCondition>.Version PostEventSubscriptionBody<ModeratorCondition>.Condition PostEventSubscriptionBody<ModeratorCondition>.Transport PostEventSubscriptionBody<ModeratorCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FollowSubscription(string, string, string, string) FollowSubscription(string, string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.FollowSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.FollowSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetActiveExtensionsArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetActiveExtensionsArgs.-ctor.html",
    "title": "Constructor GetActiveExtensionsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor GetActiveExtensionsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll GetActiveExtensionsArgs() public GetActiveExtensionsArgs() GetActiveExtensionsArgs(string) public GetActiveExtensionsArgs(string userId) Parameters userId string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetActiveExtensionsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetActiveExtensionsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetActiveExtensionsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetActiveExtensionsArgs.html",
    "title": "Class GetActiveExtensionsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetActiveExtensionsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetActiveExtensionsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IScopedRequest Inheritance object QueryMap GetActiveExtensionsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GetActiveExtensionsArgs() GetActiveExtensionsArgs(string) Properties Scopes The scopes required for this request. UserId The ID of the user to remove from the broadcaster’s list of blocked users. Methods CreateQueryMap() Validate(IEnumerable<string>) Operators implicit operator string(GetActiveExtensionsArgs) implicit operator GetActiveExtensionsArgs(string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetActiveExtensionsArgs.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetActiveExtensionsArgs.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator string(GetActiveExtensionsArgs) public static implicit operator string(GetActiveExtensionsArgs value) Parameters value GetActiveExtensionsArgs Returns string implicit operator GetActiveExtensionsArgs(string) public static implicit operator GetActiveExtensionsArgs(string v) Parameters v string Returns GetActiveExtensionsArgs"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetActiveExtensionsArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetActiveExtensionsArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetActiveExtensionsArgs.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetActiveExtensionsArgs.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll UserId The ID of the user to remove from the broadcaster’s list of blocked users. public string UserId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetActiveExtensionsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetActiveExtensionsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetAnalyticsArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetAnalyticsArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetAnalyticsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetAnalyticsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetAnalyticsArgs.EndedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetAnalyticsArgs.EndedAt.html",
    "title": "Property EndedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property EndedAt Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll EndedAt Optional, ending date/time for returned reports public DateTime? EndedAt { get; set; } Property Value DateTime?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetAnalyticsArgs.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetAnalyticsArgs.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. public int? First { get; set; } Property Value int? Remarks Optional, the minimum value is 1 the maximum is 100, defaults to 20."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetAnalyticsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetAnalyticsArgs.html",
    "title": "Class GetAnalyticsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetAnalyticsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public abstract class GetAnalyticsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Inheritance object QueryMap GetAnalyticsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest Derived GetExtensionAnalyticsArgs GetGameAnalyticsArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. EndedAt Optional, ending date/time for returned reports First The maximum number of items to return per page in the response. StartedAt Optional, starting date/time for returned reports Type Optional, type of analytics report that is returned Methods CreateQueryMap() Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetAnalyticsArgs.StartedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetAnalyticsArgs.StartedAt.html",
    "title": "Property StartedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property StartedAt Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll StartedAt Optional, starting date/time for returned reports public DateTime? StartedAt { get; set; } Property Value DateTime? Remarks Minimum value must be on or before 2018-1-31"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetAnalyticsArgs.Type.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetAnalyticsArgs.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Type Optional, type of analytics report that is returned public AnalyticType? Type { get; set; } Property Value AnalyticType?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetAnalyticsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetAnalyticsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public virtual void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBadgesArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBadgesArgs.-ctor.html",
    "title": "Constructor GetBadgesArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor GetBadgesArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll GetBadgesArgs() public GetBadgesArgs() GetBadgesArgs(string) public GetBadgesArgs(string broadcasterId) Parameters broadcasterId string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBadgesArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBadgesArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster whose chat badges you want to get. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBadgesArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBadgesArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBadgesArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBadgesArgs.html",
    "title": "Class GetBadgesArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetBadgesArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetBadgesArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap GetBadgesArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GetBadgesArgs() GetBadgesArgs(string) Properties BroadcasterId The ID of the broadcaster whose chat badges you want to get. Methods CreateQueryMap() Validate() Operators implicit operator string(GetBadgesArgs) implicit operator GetBadgesArgs(string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBadgesArgs.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBadgesArgs.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator string(GetBadgesArgs) public static implicit operator string(GetBadgesArgs value) Parameters value GetBadgesArgs Returns string implicit operator GetBadgesArgs(string) public static implicit operator GetBadgesArgs(string v) Parameters v string Returns GetBadgesArgs"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBadgesArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBadgesArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs.Before.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs.Before.html",
    "title": "Property Before | AuxLabs.Twitch Documentation",
    "keywords": "Property Before Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Before The cursor used to get the previous page of results. public string Before { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster whose list of banned users you want to get. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. public int? First { get; set; } Property Value int?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs.html",
    "title": "Class GetBannedUsersArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetBannedUsersArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetBannedUsersArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Inheritance object QueryMap GetBannedUsersArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. Before The cursor used to get the previous page of results. BroadcasterId The ID of the broadcaster whose list of banned users you want to get. First The maximum number of items to return per page in the response. Scopes The scopes required for this request. UserIds A list of user IDs used to filter the results. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs.UserIds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs.UserIds.html",
    "title": "Property UserIds | AuxLabs.Twitch Documentation",
    "keywords": "Property UserIds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll UserIds A list of user IDs used to filter the results. public string[] UserIds { get; set; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs.Count.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs.Count.html",
    "title": "Property Count | AuxLabs.Twitch Documentation",
    "keywords": "Property Count Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Count Optional, the number of results to return. public int? Count { get; set; } Property Value int? Remarks The minimum value is 1 the maximum is 100, defaults to 10."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs.html",
    "title": "Class GetBitsLeaderboardArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetBitsLeaderboardArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetBitsLeaderboardArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IScopedRequest Inheritance object QueryMap GetBitsLeaderboardArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Count Optional, the number of results to return. Period Optional, the time period over which data is aggregated Scopes The scopes required for this request. StartedAt Optional, the start date used for determining the aggregation period. UserId Optional, an ID that identifies a user that cheered bits in the channel. Methods CreateQueryMap() Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs.Period.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs.Period.html",
    "title": "Property Period | AuxLabs.Twitch Documentation",
    "keywords": "Property Period Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Period Optional, the time period over which data is aggregated public BitsPeriod? Period { get; set; } Property Value BitsPeriod?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs.StartedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs.StartedAt.html",
    "title": "Property StartedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property StartedAt Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll StartedAt Optional, the start date used for determining the aggregation period. public DateTime? StartedAt { get; set; } Property Value DateTime?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll UserId Optional, an ID that identifies a user that cheered bits in the channel. public string UserId { get; set; } Property Value string Remarks If Count is greater than 1, the response may include users ranked above and below the specified user. To get the leaderboard’s top leaders, don’t specify a user ID."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster whose blocked terms you’re getting. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. public int? First { get; set; } Property Value int?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs.html",
    "title": "Class GetBlockedTermsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetBlockedTermsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetBlockedTermsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Inheritance object QueryMap GetBlockedTermsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. BroadcasterId The ID of the broadcaster whose blocked terms you’re getting. First The maximum number of items to return per page in the response. ModeratorId The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs.ModeratorId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs.ModeratorId.html",
    "title": "Property ModeratorId | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorId The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. public string ModeratorId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBlocksArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBlocksArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBlocksArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBlocksArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster whose list of blocked users you want to get. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBlocksArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBlocksArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBlocksArgs.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBlocksArgs.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. public int? First { get; set; } Property Value int?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBlocksArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBlocksArgs.html",
    "title": "Class GetBlocksArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetBlocksArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetBlocksArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IScopedRequest Inheritance object QueryMap GetBlocksArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. BroadcasterId The ID of the broadcaster whose list of blocked users you want to get. First The maximum number of items to return per page in the response. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBlocksArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBlocksArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBlocksArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBlocksArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastKeyArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastKeyArgs.-ctor.html",
    "title": "Constructor GetBroadcastKeyArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor GetBroadcastKeyArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll GetBroadcastKeyArgs() public GetBroadcastKeyArgs() GetBroadcastKeyArgs(string) public GetBroadcastKeyArgs(string broadcasterId) Parameters broadcasterId string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastKeyArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastKeyArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster that owns the channel. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastKeyArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastKeyArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastKeyArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastKeyArgs.html",
    "title": "Class GetBroadcastKeyArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetBroadcastKeyArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetBroadcastKeyArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap GetBroadcastKeyArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GetBroadcastKeyArgs() GetBroadcastKeyArgs(string) Properties BroadcasterId The ID of the broadcaster that owns the channel. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>) Operators implicit operator string(GetBroadcastKeyArgs) implicit operator GetBroadcastKeyArgs(string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastKeyArgs.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastKeyArgs.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator string(GetBroadcastKeyArgs) public static implicit operator string(GetBroadcastKeyArgs value) Parameters value GetBroadcastKeyArgs Returns string implicit operator GetBroadcastKeyArgs(string) public static implicit operator GetBroadcastKeyArgs(string v) Parameters v string Returns GetBroadcastKeyArgs"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastKeyArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastKeyArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastKeyArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastKeyArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs.Before.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs.Before.html",
    "title": "Property Before | AuxLabs.Twitch Documentation",
    "keywords": "Property Before Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Before The cursor used to get the previous page of results. public string Before { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. public int? First { get; set; } Property Value int? Remarks The minimum page size is 1 and the maximum is 100. Default is 20."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs.html",
    "title": "Class GetBroadcastMarkersArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetBroadcastMarkersArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetBroadcastMarkersArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IScopedRequest Inheritance object QueryMap GetBroadcastMarkersArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. Before The cursor used to get the previous page of results. First The maximum number of items to return per page in the response. Scopes The scopes required for this request. UserId A user ID. VideoId A video on demand (VOD)/video ID. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll UserId A user ID. public string UserId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs.VideoId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs.VideoId.html",
    "title": "Property VideoId | AuxLabs.Twitch Documentation",
    "keywords": "Property VideoId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll VideoId A video on demand (VOD)/video ID. public string VideoId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs.Before.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs.Before.html",
    "title": "Property Before | AuxLabs.Twitch Documentation",
    "keywords": "Property Before Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Before The cursor used to get the previous page of results. public string Before { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. public int? First { get; set; } Property Value int? Remarks The minimum page size is 1 and the maximum is 100. Default is 20."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs.GameIds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs.GameIds.html",
    "title": "Property GameIds | AuxLabs.Twitch Documentation",
    "keywords": "Property GameIds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll GameIds A game (category) ID used to filter the list of streams. public string[] GameIds { get; set; } Property Value string[] Remarks You may specify a maximum of 100 IDs"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs.html",
    "title": "Class GetBroadcastsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetBroadcastsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetBroadcastsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Inheritance object QueryMap GetBroadcastsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. Before The cursor used to get the previous page of results. First The maximum number of items to return per page in the response. GameIds A game (category) ID used to filter the list of streams. Languages A collection of ISO 639-1 two-letter language codes used to filter the list of streams. Type The type of stream to filter the list of streams by. UserIds A user ID used to filter the list of streams. UserNames A user login name used to filter the list of streams. Methods CreateQueryMap() Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs.Languages.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs.Languages.html",
    "title": "Property Languages | AuxLabs.Twitch Documentation",
    "keywords": "Property Languages Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Languages A collection of ISO 639-1 two-letter language codes used to filter the list of streams. public string[] Languages { get; set; } Property Value string[] Remarks You may specify a maximum of 100 language codes"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs.Type.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Type The type of stream to filter the list of streams by. public BroadcastType? Type { get; set; } Property Value BroadcastType?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs.UserIds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs.UserIds.html",
    "title": "Property UserIds | AuxLabs.Twitch Documentation",
    "keywords": "Property UserIds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll UserIds A user ID used to filter the list of streams. public string[] UserIds { get; set; } Property Value string[] Remarks You may specify a maximum of 100 IDs"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs.UserNames.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs.UserNames.html",
    "title": "Property UserNames | AuxLabs.Twitch Documentation",
    "keywords": "Property UserNames Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll UserNames A user login name used to filter the list of streams. public string[] UserNames { get; set; } Property Value string[] Remarks You may specify a maximum of 100 names"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChannelEditorsArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChannelEditorsArgs.-ctor.html",
    "title": "Constructor GetChannelEditorsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor GetChannelEditorsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll GetChannelEditorsArgs() public GetChannelEditorsArgs() GetChannelEditorsArgs(string) public GetChannelEditorsArgs(string broadcasterId) Parameters broadcasterId string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChannelEditorsArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChannelEditorsArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster that owns the channel. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChannelEditorsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChannelEditorsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChannelEditorsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChannelEditorsArgs.html",
    "title": "Class GetChannelEditorsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetChannelEditorsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetChannelEditorsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap GetChannelEditorsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GetChannelEditorsArgs() GetChannelEditorsArgs(string) Properties BroadcasterId The ID of the broadcaster that owns the channel. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>) Operators implicit operator string(GetChannelEditorsArgs) implicit operator GetChannelEditorsArgs(string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChannelEditorsArgs.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChannelEditorsArgs.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator string(GetChannelEditorsArgs) public static implicit operator string(GetChannelEditorsArgs value) Parameters value GetChannelEditorsArgs Returns string implicit operator GetChannelEditorsArgs(string) public static implicit operator GetChannelEditorsArgs(string v) Parameters v string Returns GetChannelEditorsArgs"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChannelEditorsArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChannelEditorsArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChannelEditorsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChannelEditorsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChannelsArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChannelsArgs.-ctor.html",
    "title": "Constructor GetChannelsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor GetChannelsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll GetChannelsArgs() public GetChannelsArgs() GetChannelsArgs(params string[]) public GetChannelsArgs(params string[] channelIds) Parameters channelIds string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChannelsArgs.ChannelIds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChannelsArgs.ChannelIds.html",
    "title": "Property ChannelIds | AuxLabs.Twitch Documentation",
    "keywords": "Property ChannelIds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ChannelIds A collection of IDs of the broadcasters whose channel you want to get. public string[] ChannelIds { get; set; } Property Value string[] Remarks You may specify a maximum of 100 IDs."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChannelsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChannelsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChannelsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChannelsArgs.html",
    "title": "Class GetChannelsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetChannelsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetChannelsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap GetChannelsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GetChannelsArgs() GetChannelsArgs(params string[]) Properties ChannelIds A collection of IDs of the broadcasters whose channel you want to get. Methods CreateQueryMap() Validate() Operators implicit operator string[](GetChannelsArgs) implicit operator GetChannelsArgs(string[])"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChannelsArgs.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChannelsArgs.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator string[](GetChannelsArgs) public static implicit operator string[](GetChannelsArgs value) Parameters value GetChannelsArgs Returns string[] implicit operator GetChannelsArgs(string[]) public static implicit operator GetChannelsArgs(string[] v) Parameters v string[] Returns GetChannelsArgs"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChannelsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChannelsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChannelTeamsArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChannelTeamsArgs.-ctor.html",
    "title": "Constructor GetChannelTeamsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor GetChannelTeamsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll GetChannelTeamsArgs() public GetChannelTeamsArgs() GetChannelTeamsArgs(string) public GetChannelTeamsArgs(string broadcasterId) Parameters broadcasterId string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChannelTeamsArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChannelTeamsArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster whose teams you want to get. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChannelTeamsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChannelTeamsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChannelTeamsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChannelTeamsArgs.html",
    "title": "Class GetChannelTeamsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetChannelTeamsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetChannelTeamsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap GetChannelTeamsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GetChannelTeamsArgs() GetChannelTeamsArgs(string) Properties BroadcasterId The ID of the broadcaster whose teams you want to get. Methods CreateQueryMap() Validate() Operators implicit operator string(GetChannelTeamsArgs) implicit operator GetChannelTeamsArgs(string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChannelTeamsArgs.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChannelTeamsArgs.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator string(GetChannelTeamsArgs) public static implicit operator string(GetChannelTeamsArgs value) Parameters value GetChannelTeamsArgs Returns string implicit operator GetChannelTeamsArgs(string) public static implicit operator GetChannelTeamsArgs(string v) Parameters v string Returns GetChannelTeamsArgs"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChannelTeamsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChannelTeamsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetCharityCampaignArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetCharityCampaignArgs.-ctor.html",
    "title": "Constructor GetCharityCampaignArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor GetCharityCampaignArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll GetCharityCampaignArgs() public GetCharityCampaignArgs() GetCharityCampaignArgs(string) public GetCharityCampaignArgs(string broadcasterId) Parameters broadcasterId string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetCharityCampaignArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetCharityCampaignArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster that’s currently running a charity campaign. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetCharityCampaignArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetCharityCampaignArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetCharityCampaignArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetCharityCampaignArgs.html",
    "title": "Class GetCharityCampaignArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetCharityCampaignArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetCharityCampaignArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap GetCharityCampaignArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GetCharityCampaignArgs() GetCharityCampaignArgs(string) Properties BroadcasterId The ID of the broadcaster that’s currently running a charity campaign. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>) Operators implicit operator string(GetCharityCampaignArgs) implicit operator GetCharityCampaignArgs(string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetCharityCampaignArgs.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetCharityCampaignArgs.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator string(GetCharityCampaignArgs) public static implicit operator string(GetCharityCampaignArgs value) Parameters value GetCharityCampaignArgs Returns string implicit operator GetCharityCampaignArgs(string) public static implicit operator GetCharityCampaignArgs(string v) Parameters v string Returns GetCharityCampaignArgs"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetCharityCampaignArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetCharityCampaignArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetCharityCampaignArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetCharityCampaignArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetCharityDonationsArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetCharityDonationsArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetCharityDonationsArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetCharityDonationsArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster that’s currently running a charity campaign. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetCharityDonationsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetCharityDonationsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetCharityDonationsArgs.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetCharityDonationsArgs.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. public int? First { get; set; } Property Value int? Remarks The minimum value is 1 the maximum is 100, defaults to 20."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetCharityDonationsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetCharityDonationsArgs.html",
    "title": "Class GetCharityDonationsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetCharityDonationsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetCharityDonationsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Inheritance object QueryMap GetCharityDonationsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. BroadcasterId The ID of the broadcaster that’s currently running a charity campaign. First The maximum number of items to return per page in the response. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetCharityDonationsArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetCharityDonationsArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetCharityDonationsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetCharityDonationsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChatSettingsArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChatSettingsArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster whose chat settings you want to get. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChatSettingsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChatSettingsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChatSettingsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChatSettingsArgs.html",
    "title": "Class GetChatSettingsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetChatSettingsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetChatSettingsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap GetChatSettingsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the broadcaster whose chat settings you want to get. ModeratorId The ID of the broadcaster or one of the broadcaster’s moderators. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChatSettingsArgs.ModeratorId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChatSettingsArgs.ModeratorId.html",
    "title": "Property ModeratorId | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorId The ID of the broadcaster or one of the broadcaster’s moderators. public string ModeratorId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChatSettingsArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChatSettingsArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChatSettingsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChatSettingsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChattersArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChattersArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChattersArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChattersArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster whose list of chatters you want to get. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChattersArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChattersArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChattersArgs.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChattersArgs.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. public int? First { get; set; } Property Value int? Remarks The minimum value is 1 the maximum is 100, defaults to 20."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChattersArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChattersArgs.html",
    "title": "Class GetChattersArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetChattersArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetChattersArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Inheritance object QueryMap GetChattersArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. BroadcasterId The ID of the broadcaster whose list of chatters you want to get. First The maximum number of items to return per page in the response. ModeratorId The ID of the broadcaster or one of the broadcaster’s moderators. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChattersArgs.ModeratorId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChattersArgs.ModeratorId.html",
    "title": "Property ModeratorId | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorId The ID of the broadcaster or one of the broadcaster’s moderators. public string ModeratorId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChattersArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChattersArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetChattersArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetChattersArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetCheermotesArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetCheermotesArgs.-ctor.html",
    "title": "Constructor GetCheermotesArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor GetCheermotesArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll GetCheermotesArgs() public GetCheermotesArgs() GetCheermotesArgs(string) public GetCheermotesArgs(string broadcasterId) Parameters broadcasterId string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetCheermotesArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetCheermotesArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId Optional, the ID of the broadcaster that owns the channel. [JsonPropertyName(\"broadcaster_id\")] public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetCheermotesArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetCheermotesArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetCheermotesArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetCheermotesArgs.html",
    "title": "Class GetCheermotesArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetCheermotesArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetCheermotesArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap GetCheermotesArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GetCheermotesArgs() GetCheermotesArgs(string) Properties BroadcasterId Optional, the ID of the broadcaster that owns the channel. Methods CreateQueryMap() Validate() Operators implicit operator string(GetCheermotesArgs) implicit operator GetCheermotesArgs(string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetCheermotesArgs.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetCheermotesArgs.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator string(GetCheermotesArgs) public static implicit operator string(GetCheermotesArgs value) Parameters value GetCheermotesArgs Returns string implicit operator GetCheermotesArgs(string) public static implicit operator GetCheermotesArgs(string v) Parameters v string Returns GetCheermotesArgs"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetCheermotesArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetCheermotesArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetClipsArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetClipsArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetClipsArgs.Before.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetClipsArgs.Before.html",
    "title": "Property Before | AuxLabs.Twitch Documentation",
    "keywords": "Property Before Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Before The cursor used to get the previous page of results. public string Before { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetClipsArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetClipsArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId An ID that identifies the broadcaster whose video clips you want to get. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetClipsArgs.ClipIds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetClipsArgs.ClipIds.html",
    "title": "Property ClipIds | AuxLabs.Twitch Documentation",
    "keywords": "Property ClipIds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ClipIds An ID that identifies the clip to get. public string[] ClipIds { get; set; } Property Value string[] Remarks You may specify a maximum of 100 IDs."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetClipsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetClipsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetClipsArgs.EndedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetClipsArgs.EndedAt.html",
    "title": "Property EndedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property EndedAt Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll EndedAt The end date used to filter clips. public DateTime? EndedAt { get; set; } Property Value DateTime?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetClipsArgs.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetClipsArgs.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. public int? First { get; set; } Property Value int? Remarks The minimum page size is 1 and the maximum is 100."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetClipsArgs.GameId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetClipsArgs.GameId.html",
    "title": "Property GameId | AuxLabs.Twitch Documentation",
    "keywords": "Property GameId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll GameId An ID that identifies the game whose clips you want to get. public string GameId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetClipsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetClipsArgs.html",
    "title": "Class GetClipsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetClipsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetClipsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Inheritance object QueryMap GetClipsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. Before The cursor used to get the previous page of results. BroadcasterId An ID that identifies the broadcaster whose video clips you want to get. ClipIds An ID that identifies the clip to get. EndedAt The end date used to filter clips. First The maximum number of items to return per page in the response. GameId An ID that identifies the game whose clips you want to get. StartedAt The start date used to filter clips. Methods CreateQueryMap() Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetClipsArgs.StartedAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetClipsArgs.StartedAt.html",
    "title": "Property StartedAt | AuxLabs.Twitch Documentation",
    "keywords": "Property StartedAt Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll StartedAt The start date used to filter clips. public DateTime? StartedAt { get; set; } Property Value DateTime?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetClipsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetClipsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetCurrentTrackArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetCurrentTrackArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster that’s playing a Soundtrack track. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetCurrentTrackArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetCurrentTrackArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetCurrentTrackArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetCurrentTrackArgs.html",
    "title": "Class GetCurrentTrackArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetCurrentTrackArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetCurrentTrackArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap GetCurrentTrackArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the broadcaster that’s playing a Soundtrack track. Methods CreateQueryMap() Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetCurrentTrackArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetCurrentTrackArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs.EntitlementIds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs.EntitlementIds.html",
    "title": "Property EntitlementIds | AuxLabs.Twitch Documentation",
    "keywords": "Property EntitlementIds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll EntitlementIds IDs that identify the entitlements to get. public string[] EntitlementIds { get; set; } Property Value string[] Remarks You may specify a maximum of 100 ids."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. public int? First { get; set; } Property Value int? Remarks The minimum page size is 1 entitlement per page and the maximum is 1000. The default is 20."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs.GameId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs.GameId.html",
    "title": "Property GameId | AuxLabs.Twitch Documentation",
    "keywords": "Property GameId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll GameId An ID that identifies a game that offered entitlements. public string GameId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs.html",
    "title": "Class GetDropStatusArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetDropStatusArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetDropStatusArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Inheritance object QueryMap GetDropStatusArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. EntitlementIds IDs that identify the entitlements to get. First The maximum number of items to return per page in the response. GameId An ID that identifies a game that offered entitlements. Status The entitlement’s fulfillment status. UserId The ID of the user that owns the redemption code. Methods CreateQueryMap() Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs.Status.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs.Status.html",
    "title": "Property Status | AuxLabs.Twitch Documentation",
    "keywords": "Property Status Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Status The entitlement’s fulfillment status. public FulfillmentStatus? Status { get; set; } Property Value FulfillmentStatus?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll UserId The ID of the user that owns the redemption code. public string UserId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetEmotesArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetEmotesArgs.-ctor.html",
    "title": "Constructor GetEmotesArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor GetEmotesArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll GetEmotesArgs() public GetEmotesArgs() GetEmotesArgs(string) public GetEmotesArgs(string broadcasterId) Parameters broadcasterId string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetEmotesArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetEmotesArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId An ID that identifies the broadcaster whose emotes you want to get. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetEmotesArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetEmotesArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetEmotesArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetEmotesArgs.html",
    "title": "Class GetEmotesArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetEmotesArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetEmotesArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap GetEmotesArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GetEmotesArgs() GetEmotesArgs(string) Properties BroadcasterId An ID that identifies the broadcaster whose emotes you want to get. Methods CreateQueryMap() Validate() Operators implicit operator string(GetEmotesArgs) implicit operator GetEmotesArgs(string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetEmotesArgs.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetEmotesArgs.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator string(GetEmotesArgs) public static implicit operator string(GetEmotesArgs value) Parameters value GetEmotesArgs Returns string implicit operator GetEmotesArgs(string) public static implicit operator GetEmotesArgs(string v) Parameters v string Returns GetEmotesArgs"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetEmotesArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetEmotesArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetEmoteSetsArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetEmoteSetsArgs.-ctor.html",
    "title": "Constructor GetEmoteSetsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor GetEmoteSetsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll GetEmoteSetsArgs() public GetEmoteSetsArgs() GetEmoteSetsArgs(params string[]) public GetEmoteSetsArgs(params string[] emoteSets) Parameters emoteSets string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetEmoteSetsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetEmoteSetsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetEmoteSetsArgs.EmoteSetIds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetEmoteSetsArgs.EmoteSetIds.html",
    "title": "Property EmoteSetIds | AuxLabs.Twitch Documentation",
    "keywords": "Property EmoteSetIds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll EmoteSetIds A collection of IDs that identify the emote sets to get. public string[] EmoteSetIds { get; set; } Property Value string[] Remarks You may specify a maximum of 25 IDs."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetEmoteSetsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetEmoteSetsArgs.html",
    "title": "Class GetEmoteSetsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetEmoteSetsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetEmoteSetsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap GetEmoteSetsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GetEmoteSetsArgs() GetEmoteSetsArgs(params string[]) Properties EmoteSetIds A collection of IDs that identify the emote sets to get. Methods CreateQueryMap() Validate() Operators implicit operator string[](GetEmoteSetsArgs) implicit operator GetEmoteSetsArgs(string[])"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetEmoteSetsArgs.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetEmoteSetsArgs.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator string[](GetEmoteSetsArgs) public static implicit operator string[](GetEmoteSetsArgs value) Parameters value GetEmoteSetsArgs Returns string[] implicit operator GetEmoteSetsArgs(string[]) public static implicit operator GetEmoteSetsArgs(string[] v) Parameters v string[] Returns GetEmoteSetsArgs"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetEmoteSetsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetEmoteSetsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetEventSubscriptionsArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetEventSubscriptionsArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetEventSubscriptionsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetEventSubscriptionsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetEventSubscriptionsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetEventSubscriptionsArgs.html",
    "title": "Class GetEventSubscriptionsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetEventSubscriptionsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetEventSubscriptionsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Inheritance object QueryMap GetEventSubscriptionsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. Status Filter subscriptions by its status. Type Filter subscriptions by subscription type. UserId Filter subscriptions by user ID. Methods CreateQueryMap() Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetEventSubscriptionsArgs.Status.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetEventSubscriptionsArgs.Status.html",
    "title": "Property Status | AuxLabs.Twitch Documentation",
    "keywords": "Property Status Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Status Filter subscriptions by its status. public EventSubStatus? Status { get; set; } Property Value EventSubStatus?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetEventSubscriptionsArgs.Type.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetEventSubscriptionsArgs.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Type Filter subscriptions by subscription type. public EventSubType? Type { get; set; } Property Value EventSubType?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetEventSubscriptionsArgs.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetEventSubscriptionsArgs.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll UserId Filter subscriptions by user ID. public string UserId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetEventSubscriptionsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetEventSubscriptionsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetExtensionAnalyticsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetExtensionAnalyticsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetExtensionAnalyticsArgs.ExtensionId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetExtensionAnalyticsArgs.ExtensionId.html",
    "title": "Property ExtensionId | AuxLabs.Twitch Documentation",
    "keywords": "Property ExtensionId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ExtensionId Optional, the extension’s client ID. public string ExtensionId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetExtensionAnalyticsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetExtensionAnalyticsArgs.html",
    "title": "Class GetExtensionAnalyticsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetExtensionAnalyticsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetExtensionAnalyticsArgs : GetAnalyticsArgs, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IScopedRequest Inheritance object QueryMap GetAnalyticsArgs GetExtensionAnalyticsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest IScopedRequest Inherited Members GetAnalyticsArgs.EndedAt GetAnalyticsArgs.StartedAt GetAnalyticsArgs.Type GetAnalyticsArgs.First GetAnalyticsArgs.After GetAnalyticsArgs.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ExtensionId Optional, the extension’s client ID. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetExtensionAnalyticsArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetExtensionAnalyticsArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetExtensionAnalyticsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetExtensionAnalyticsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetExtensionTransactionsArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetExtensionTransactionsArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetExtensionTransactionsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetExtensionTransactionsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetExtensionTransactionsArgs.ExtensionId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetExtensionTransactionsArgs.ExtensionId.html",
    "title": "Property ExtensionId | AuxLabs.Twitch Documentation",
    "keywords": "Property ExtensionId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ExtensionId The ID of the extension whose list of transactions you want to get. public string ExtensionId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetExtensionTransactionsArgs.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetExtensionTransactionsArgs.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. public int? First { get; set; } Property Value int? Remarks Optional, the minimum value is 1 the maximum is 100, defaults to 20."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetExtensionTransactionsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetExtensionTransactionsArgs.html",
    "title": "Class GetExtensionTransactionsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetExtensionTransactionsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetExtensionTransactionsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Inheritance object QueryMap GetExtensionTransactionsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. ExtensionId The ID of the extension whose list of transactions you want to get. First The maximum number of items to return per page in the response. TransactionIds Optional, a collection of transaction ids used to filter the list of transactions. Methods CreateQueryMap() Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetExtensionTransactionsArgs.TransactionIds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetExtensionTransactionsArgs.TransactionIds.html",
    "title": "Property TransactionIds | AuxLabs.Twitch Documentation",
    "keywords": "Property TransactionIds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll TransactionIds Optional, a collection of transaction ids used to filter the list of transactions. public string[] TransactionIds { get; set; } Property Value string[] Remarks The minimum amount of items is 1 the maximum is 100."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetExtensionTransactionsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetExtensionTransactionsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetFollowedBroadcastsArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetFollowedBroadcastsArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetFollowedBroadcastsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetFollowedBroadcastsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetFollowedBroadcastsArgs.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetFollowedBroadcastsArgs.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. public int? First { get; set; } Property Value int? Remarks The minimum page size is 1 and the maximum is 100. Default is 20."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetFollowedBroadcastsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetFollowedBroadcastsArgs.html",
    "title": "Class GetFollowedBroadcastsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetFollowedBroadcastsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetFollowedBroadcastsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Inheritance object QueryMap GetFollowedBroadcastsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. First The maximum number of items to return per page in the response. Scopes The scopes required for this request. UserId The ID of the user whose list of followed streams you want to get. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetFollowedBroadcastsArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetFollowedBroadcastsArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetFollowedBroadcastsArgs.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetFollowedBroadcastsArgs.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll UserId The ID of the user whose list of followed streams you want to get. public string UserId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetFollowedBroadcastsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetFollowedBroadcastsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetFollowedChannelsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetFollowedChannelsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetFollowedChannelsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetFollowedChannelsArgs.html",
    "title": "Class GetFollowedChannelsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetFollowedChannelsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetFollowedChannelsArgs : GetFollowsArgs, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Inheritance object QueryMap GetFollowsArgs GetFollowedChannelsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members GetFollowsArgs.Scopes GetFollowsArgs.UserId GetFollowsArgs.BroadcasterId GetFollowsArgs.First GetFollowsArgs.After GetFollowsArgs.Validate(IEnumerable<string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateQueryMap() Validate(IEnumerable<string>, string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetFollowedChannelsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetFollowedChannelsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetFollowersArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetFollowersArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetFollowersArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetFollowersArgs.html",
    "title": "Class GetFollowersArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetFollowersArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetFollowersArgs : GetFollowsArgs, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Inheritance object QueryMap GetFollowsArgs GetFollowersArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members GetFollowsArgs.Scopes GetFollowsArgs.UserId GetFollowsArgs.BroadcasterId GetFollowsArgs.First GetFollowsArgs.After GetFollowsArgs.Validate(IEnumerable<string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateQueryMap() Validate(IEnumerable<string>, string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetFollowersArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetFollowersArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetFollowsArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetFollowsArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetFollowsArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetFollowsArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId A broadcaster’s ID. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetFollowsArgs.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetFollowsArgs.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. public int? First { get; set; } Property Value int?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetFollowsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetFollowsArgs.html",
    "title": "Class GetFollowsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetFollowsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public abstract class GetFollowsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IScopedRequest Inheritance object QueryMap GetFollowsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest IScopedRequest Derived GetFollowedChannelsArgs GetFollowersArgs Inherited Members QueryMap.CreateQueryMap() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. BroadcasterId A broadcaster’s ID. First The maximum number of items to return per page in the response. Scopes The scopes required for this request. UserId A user’s ID. Methods Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetFollowsArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetFollowsArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetFollowsArgs.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetFollowsArgs.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll UserId A user’s ID. public string UserId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetFollowsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetFollowsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetGameAnalyticsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetGameAnalyticsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetGameAnalyticsArgs.GameId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetGameAnalyticsArgs.GameId.html",
    "title": "Property GameId | AuxLabs.Twitch Documentation",
    "keywords": "Property GameId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll GameId Optional, the game's client ID. public string GameId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetGameAnalyticsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetGameAnalyticsArgs.html",
    "title": "Class GetGameAnalyticsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetGameAnalyticsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetGameAnalyticsArgs : GetAnalyticsArgs, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IScopedRequest Inheritance object QueryMap GetAnalyticsArgs GetGameAnalyticsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest IScopedRequest Inherited Members GetAnalyticsArgs.EndedAt GetAnalyticsArgs.StartedAt GetAnalyticsArgs.Type GetAnalyticsArgs.First GetAnalyticsArgs.After GetAnalyticsArgs.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties GameId Optional, the game's client ID. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetGameAnalyticsArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetGameAnalyticsArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetGameAnalyticsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetGameAnalyticsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetGamesArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetGamesArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetGamesArgs.GameIds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetGamesArgs.GameIds.html",
    "title": "Property GameIds | AuxLabs.Twitch Documentation",
    "keywords": "Property GameIds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll GameIds The IDs of the category or game to get. public string[] GameIds { get; set; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetGamesArgs.GameNames.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetGamesArgs.GameNames.html",
    "title": "Property GameNames | AuxLabs.Twitch Documentation",
    "keywords": "Property GameNames Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll GameNames The name of the categories or games to get. public string[] GameNames { get; set; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetGamesArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetGamesArgs.html",
    "title": "Class GetGamesArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetGamesArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetGamesArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap GetGamesArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties GameIds The IDs of the category or game to get. GameNames The name of the categories or games to get. IgdbIds The IGDB IDs of the games to get. Methods CreateQueryMap() Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetGamesArgs.IgdbIds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetGamesArgs.IgdbIds.html",
    "title": "Property IgdbIds | AuxLabs.Twitch Documentation",
    "keywords": "Property IgdbIds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll IgdbIds The IGDB IDs of the games to get. public string[] IgdbIds { get; set; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetGamesArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetGamesArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetGoalsArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetGoalsArgs.-ctor.html",
    "title": "Constructor GetGoalsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor GetGoalsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll GetGoalsArgs() public GetGoalsArgs() GetGoalsArgs(string) public GetGoalsArgs(string broadcasterId) Parameters broadcasterId string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetGoalsArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetGoalsArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster that created the goals. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetGoalsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetGoalsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetGoalsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetGoalsArgs.html",
    "title": "Class GetGoalsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetGoalsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetGoalsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap GetGoalsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors GetGoalsArgs() GetGoalsArgs(string) Properties BroadcasterId The ID of the broadcaster that created the goals. Scopes The scopes required for this request. Methods CreateQueryMap() ToString() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>) Operators implicit operator string(GetGoalsArgs) implicit operator GetGoalsArgs(string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetGoalsArgs.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetGoalsArgs.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator string(GetGoalsArgs) public static implicit operator string(GetGoalsArgs value) Parameters value GetGoalsArgs Returns string implicit operator GetGoalsArgs(string) public static implicit operator GetGoalsArgs(string v) Parameters v string Returns GetGoalsArgs"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetGoalsArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetGoalsArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetGoalsArgs.ToString.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetGoalsArgs.ToString.html",
    "title": "Method ToString | AuxLabs.Twitch Documentation",
    "keywords": "Method ToString Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ToString() public override string ToString() Returns string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetGoalsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetGoalsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetHypeTrainsArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetHypeTrainsArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetHypeTrainsArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetHypeTrainsArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster that’s running the Hype Train. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetHypeTrainsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetHypeTrainsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetHypeTrainsArgs.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetHypeTrainsArgs.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. public int? First { get; set; } Property Value int? Remarks The minimum value is 1 the maximum is 100, defaults to 1."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetHypeTrainsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetHypeTrainsArgs.html",
    "title": "Class GetHypeTrainsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetHypeTrainsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetHypeTrainsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Inheritance object QueryMap GetHypeTrainsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. BroadcasterId The ID of the broadcaster that’s running the Hype Train. First The maximum number of items to return per page in the response. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetHypeTrainsArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetHypeTrainsArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetHypeTrainsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetHypeTrainsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetModeratorsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetModeratorsArgs.html",
    "title": "Class GetModeratorsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetModeratorsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetModeratorsArgs : GetRolesArgs, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Inheritance object QueryMap GetRolesArgs GetModeratorsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members GetRolesArgs.BroadcasterId GetRolesArgs.UserIds GetRolesArgs.First GetRolesArgs.After GetRolesArgs.Validate() GetRolesArgs.CreateQueryMap() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Scopes The scopes required for this request. Methods Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetModeratorsArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetModeratorsArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetModeratorsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetModeratorsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPlaylistsArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPlaylistsArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPlaylistsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPlaylistsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPlaylistsArgs.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPlaylistsArgs.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. public int? First { get; set; } Property Value int? Remarks The minimum value is 1 the maximum is 100, defaults to 1."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPlaylistsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPlaylistsArgs.html",
    "title": "Class GetPlaylistsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetPlaylistsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetPlaylistsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Inheritance object QueryMap GetPlaylistsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. First The maximum number of items to return per page in the response. PlaylistId The ID of the playlist to get. Methods CreateQueryMap() Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPlaylistsArgs.PlaylistId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPlaylistsArgs.PlaylistId.html",
    "title": "Property PlaylistId | AuxLabs.Twitch Documentation",
    "keywords": "Property PlaylistId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll PlaylistId The ID of the playlist to get. public string PlaylistId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPlaylistsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPlaylistsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPlaylistTracksArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPlaylistTracksArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPlaylistTracksArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPlaylistTracksArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPlaylistTracksArgs.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPlaylistTracksArgs.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. public int? First { get; set; } Property Value int? Remarks The minimum value is 1 the maximum is 100, defaults to 1."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPlaylistTracksArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPlaylistTracksArgs.html",
    "title": "Class GetPlaylistTracksArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetPlaylistTracksArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetPlaylistTracksArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Inheritance object QueryMap GetPlaylistTracksArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. First The maximum number of items to return per page in the response. PlaylistId The ID of the playlist to get. Methods CreateQueryMap() Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPlaylistTracksArgs.PlaylistId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPlaylistTracksArgs.PlaylistId.html",
    "title": "Property PlaylistId | AuxLabs.Twitch Documentation",
    "keywords": "Property PlaylistId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll PlaylistId The ID of the playlist to get. public string PlaylistId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPlaylistTracksArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPlaylistTracksArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPollsArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPollsArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPollsArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPollsArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster that created the polls. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPollsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPollsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPollsArgs.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPollsArgs.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. public int? First { get; set; } Property Value int?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPollsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPollsArgs.html",
    "title": "Class GetPollsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetPollsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetPollsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Inheritance object QueryMap GetPollsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. BroadcasterId The ID of the broadcaster that created the polls. First The maximum number of items to return per page in the response. PollIds A list of IDs that identify the polls to return. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPollsArgs.PollIds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPollsArgs.PollIds.html",
    "title": "Property PollIds | AuxLabs.Twitch Documentation",
    "keywords": "Property PollIds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll PollIds A list of IDs that identify the polls to return. public string[] PollIds { get; set; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPollsArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPollsArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPollsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPollsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster whose predictions you want to get. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. public int? First { get; set; } Property Value int?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs.html",
    "title": "Class GetPredictionsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetPredictionsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetPredictionsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Inheritance object QueryMap GetPredictionsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. BroadcasterId The ID of the broadcaster whose predictions you want to get. First The maximum number of items to return per page in the response. PredictionIds The IDs of the predictions to get. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs.PredictionIds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs.PredictionIds.html",
    "title": "Property PredictionIds | AuxLabs.Twitch Documentation",
    "keywords": "Property PredictionIds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll PredictionIds The IDs of the predictions to get. public string[] PredictionIds { get; set; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster that owns the custom reward. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. public int? First { get; set; } Property Value int? Remarks The minimum is 1 per page and the maximum is 50. Defaults to 20."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs.html",
    "title": "Class GetRedemptionsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetRedemptionsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetRedemptionsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Inheritance object QueryMap GetRedemptionsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. BroadcasterId The ID of the broadcaster that owns the custom reward. First The maximum number of items to return per page in the response. RedemptionIds A list of IDs to filter the redemptions by. RewardId The ID that identifies the custom reward whose redemptions you want to get. Scopes The scopes required for this request. Sort The order to sort redemptions by. Status The status of the redemptions to return. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs.RedemptionIds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs.RedemptionIds.html",
    "title": "Property RedemptionIds | AuxLabs.Twitch Documentation",
    "keywords": "Property RedemptionIds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll RedemptionIds A list of IDs to filter the redemptions by. public string[] RedemptionIds { get; set; } Property Value string[] Remarks You may specify a maximum of 50 IDs."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs.RewardId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs.RewardId.html",
    "title": "Property RewardId | AuxLabs.Twitch Documentation",
    "keywords": "Property RewardId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll RewardId The ID that identifies the custom reward whose redemptions you want to get. public string RewardId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs.Sort.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs.Sort.html",
    "title": "Property Sort | AuxLabs.Twitch Documentation",
    "keywords": "Property Sort Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Sort The order to sort redemptions by. public RedemptionSort? Sort { get; set; } Property Value RedemptionSort? Remarks Default sort is OLDEST"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs.Status.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs.Status.html",
    "title": "Property Status | AuxLabs.Twitch Documentation",
    "keywords": "Property Status Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Status The status of the redemptions to return. public RedemptionStatus? Status { get; set; } Property Value RedemptionStatus?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetRewardArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetRewardArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster whose custom rewards you want to get. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetRewardArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetRewardArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetRewardArgs.CustomRewardIds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetRewardArgs.CustomRewardIds.html",
    "title": "Property CustomRewardIds | AuxLabs.Twitch Documentation",
    "keywords": "Property CustomRewardIds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CustomRewardIds A list of IDs to filter the rewards by. public string[] CustomRewardIds { get; set; } Property Value string[] Remarks You may specify a maximum of 50 IDs."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetRewardArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetRewardArgs.html",
    "title": "Class GetRewardArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetRewardArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetRewardArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap GetRewardArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the broadcaster whose custom rewards you want to get. CustomRewardIds A list of IDs to filter the rewards by. OnlyManagebleRewards Determines whether the response contains only the custom rewards that the app can manage. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetRewardArgs.OnlyManagebleRewards.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetRewardArgs.OnlyManagebleRewards.html",
    "title": "Property OnlyManagebleRewards | AuxLabs.Twitch Documentation",
    "keywords": "Property OnlyManagebleRewards Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll OnlyManagebleRewards Determines whether the response contains only the custom rewards that the app can manage. public bool? OnlyManagebleRewards { get; set; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetRewardArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetRewardArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetRewardArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetRewardArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetRolesArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetRolesArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetRolesArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetRolesArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster whose list of users you want to get. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetRolesArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetRolesArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetRolesArgs.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetRolesArgs.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. public int? First { get; set; } Property Value int?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetRolesArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetRolesArgs.html",
    "title": "Class GetRolesArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetRolesArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public abstract class GetRolesArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Inheritance object QueryMap GetRolesArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest Derived GetModeratorsArgs GetVipsArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. BroadcasterId The ID of the broadcaster whose list of users you want to get. First The maximum number of items to return per page in the response. UserIds A list of user IDs used to filter the results. Methods CreateQueryMap() Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetRolesArgs.UserIds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetRolesArgs.UserIds.html",
    "title": "Property UserIds | AuxLabs.Twitch Documentation",
    "keywords": "Property UserIds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll UserIds A list of user IDs used to filter the results. public string[] UserIds { get; set; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetRolesArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetRolesArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetScheduleArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetScheduleArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetScheduleArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetScheduleArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster that owns the streaming schedule you want to get. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetScheduleArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetScheduleArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetScheduleArgs.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetScheduleArgs.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. public int? First { get; set; } Property Value int?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetScheduleArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetScheduleArgs.html",
    "title": "Class GetScheduleArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetScheduleArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetScheduleArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Inheritance object QueryMap GetScheduleArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. BroadcasterId The ID of the broadcaster that owns the streaming schedule you want to get. First The maximum number of items to return per page in the response. SegmentIds The IDs of the scheduled segments to return. StartAt The UTC date and time that identifies when in the broadcaster’s schedule to start returning segments. Methods CreateQueryMap() Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetScheduleArgs.SegmentIds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetScheduleArgs.SegmentIds.html",
    "title": "Property SegmentIds | AuxLabs.Twitch Documentation",
    "keywords": "Property SegmentIds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll SegmentIds The IDs of the scheduled segments to return. public string[] SegmentIds { get; set; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetScheduleArgs.StartAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetScheduleArgs.StartAt.html",
    "title": "Property StartAt | AuxLabs.Twitch Documentation",
    "keywords": "Property StartAt Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll StartAt The UTC date and time that identifies when in the broadcaster’s schedule to start returning segments. public DateTime? StartAt { get; set; } Property Value DateTime?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetScheduleArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetScheduleArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetShieldModeArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetShieldModeArgs.html",
    "title": "Class GetShieldModeArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetShieldModeArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetShieldModeArgs : PutShieldModeArgs, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap PutShieldModeArgs GetShieldModeArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members PutShieldModeArgs.BroadcasterId PutShieldModeArgs.ModeratorId PutShieldModeArgs.Validate(IEnumerable<string>, string) PutShieldModeArgs.Validate(IEnumerable<string>) PutShieldModeArgs.CreateQueryMap() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Scopes"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetShieldModeArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetShieldModeArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetSubscriberArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetSubscriberArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of a partner or affiliate broadcaster. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetSubscriberArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetSubscriberArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetSubscriberArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetSubscriberArgs.html",
    "title": "Class GetSubscriberArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetSubscriberArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetSubscriberArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap GetSubscriberArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of a partner or affiliate broadcaster. Scopes The scopes required for this request. UserId The ID of the user that you’re checking to see whether they subscribe to BroadcasterId. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetSubscriberArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetSubscriberArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetSubscriberArgs.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetSubscriberArgs.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll UserId The ID of the user that you’re checking to see whether they subscribe to BroadcasterId. public string UserId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetSubscriberArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetSubscriberArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs.Before.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs.Before.html",
    "title": "Property Before | AuxLabs.Twitch Documentation",
    "keywords": "Property Before Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Before The cursor used to get the previous page of results. public string Before { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The broadcaster’s ID. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. public int? First { get; set; } Property Value int? Remarks The minimum page size is 1 and the maximum is 100. Default is 20."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs.html",
    "title": "Class GetSubscriptionsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetSubscriptionsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetSubscriptionsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Inheritance object QueryMap GetSubscriptionsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. Before The cursor used to get the previous page of results. BroadcasterId The broadcaster’s ID. First The maximum number of items to return per page in the response. Scopes The scopes required for this request. UserIds Filters the list to include only the specified subscribers. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs.UserIds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs.UserIds.html",
    "title": "Property UserIds | AuxLabs.Twitch Documentation",
    "keywords": "Property UserIds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll UserIds Filters the list to include only the specified subscribers. public string[] UserIds { get; set; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetTeamArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetTeamArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetTeamArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetTeamArgs.html",
    "title": "Class GetTeamArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetTeamArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetTeamArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap GetTeamArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id The name of the team to get. Name The ID of the team to get. Methods CreateQueryMap() Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetTeamArgs.Id.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetTeamArgs.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Id The name of the team to get. public string Id { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetTeamArgs.Name.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetTeamArgs.Name.html",
    "title": "Property Name | AuxLabs.Twitch Documentation",
    "keywords": "Property Name Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Name The ID of the team to get. public string Name { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetTeamArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetTeamArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetTopGamesArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetTopGamesArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetTopGamesArgs.Before.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetTopGamesArgs.Before.html",
    "title": "Property Before | AuxLabs.Twitch Documentation",
    "keywords": "Property Before Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Before The cursor used to get the previous page of results. public string Before { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetTopGamesArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetTopGamesArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetTopGamesArgs.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetTopGamesArgs.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. public int? First { get; set; } Property Value int? Remarks The minimum page size is 1 and the maximum is 100. Default is 20."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetTopGamesArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetTopGamesArgs.html",
    "title": "Class GetTopGamesArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetTopGamesArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetTopGamesArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Inheritance object QueryMap GetTopGamesArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. Before The cursor used to get the previous page of results. First The maximum number of items to return per page in the response. Methods CreateQueryMap() Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetTopGamesArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetTopGamesArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetUserColorArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetUserColorArgs.-ctor.html",
    "title": "Constructor GetUserColorArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor GetUserColorArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll GetUserColorArgs() public GetUserColorArgs() GetUserColorArgs(params string[]) public GetUserColorArgs(params string[] userIds) Parameters userIds string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetUserColorArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetUserColorArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetUserColorArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetUserColorArgs.html",
    "title": "Class GetUserColorArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetUserColorArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetUserColorArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap GetUserColorArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GetUserColorArgs() GetUserColorArgs(params string[]) Properties UserIds A collection of IDs of the users whose color you want to get. Methods CreateQueryMap() Validate() Operators implicit operator string[](GetUserColorArgs) implicit operator GetUserColorArgs(string[])"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetUserColorArgs.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetUserColorArgs.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator string[](GetUserColorArgs) public static implicit operator string[](GetUserColorArgs value) Parameters value GetUserColorArgs Returns string[] implicit operator GetUserColorArgs(string[]) public static implicit operator GetUserColorArgs(string[] v) Parameters v string[] Returns GetUserColorArgs"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetUserColorArgs.UserIds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetUserColorArgs.UserIds.html",
    "title": "Property UserIds | AuxLabs.Twitch Documentation",
    "keywords": "Property UserIds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll UserIds A collection of IDs of the users whose color you want to get. public string[] UserIds { get; set; } Property Value string[] Remarks You may specify a maximum of 100 IDs."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetUserColorArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetUserColorArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetUsersArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetUsersArgs.-ctor.html",
    "title": "Constructor GetUsersArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor GetUsersArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll GetUsersArgs() public GetUsersArgs() GetUsersArgs(GetUsersMode, params string[]) public GetUsersArgs(GetUsersMode mode, params string[] users) Parameters mode GetUsersMode users string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetUsersArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetUsersArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetUsersArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetUsersArgs.html",
    "title": "Class GetUsersArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetUsersArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetUsersArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap GetUsersArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GetUsersArgs() GetUsersArgs(GetUsersMode, params string[]) Properties UserIds The ID of the user to get. UserNames The login name of the user to get. Methods CreateQueryMap() Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetUsersArgs.UserIds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetUsersArgs.UserIds.html",
    "title": "Property UserIds | AuxLabs.Twitch Documentation",
    "keywords": "Property UserIds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll UserIds The ID of the user to get. public string[] UserIds { get; set; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetUsersArgs.UserNames.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetUsersArgs.UserNames.html",
    "title": "Property UserNames | AuxLabs.Twitch Documentation",
    "keywords": "Property UserNames Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll UserNames The login name of the user to get. public string[] UserNames { get; set; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetUsersArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetUsersArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetUsersMode.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetUsersMode.html",
    "title": "Enum GetUsersMode | AuxLabs.Twitch Documentation",
    "keywords": "Enum GetUsersMode Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public enum GetUsersMode Extension Methods EnumHelper.GetStringValue<T>(T) Fields Id = 0 Name = 1"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetVideosArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetVideosArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetVideosArgs.Before.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetVideosArgs.Before.html",
    "title": "Property Before | AuxLabs.Twitch Documentation",
    "keywords": "Property Before Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Before The cursor used to get the previous page of results. public string Before { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetVideosArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetVideosArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetVideosArgs.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetVideosArgs.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. public int? First { get; set; } Property Value int?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetVideosArgs.GameId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetVideosArgs.GameId.html",
    "title": "Property GameId | AuxLabs.Twitch Documentation",
    "keywords": "Property GameId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll GameId A category or game ID. public string GameId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetVideosArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetVideosArgs.html",
    "title": "Class GetVideosArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetVideosArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetVideosArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Inheritance object QueryMap GetVideosArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. Before The cursor used to get the previous page of results. First The maximum number of items to return per page in the response. GameId A category or game ID. Language Filter the list of videos by the language that the video owner broadcasts in. Period Filter the list of videos by when they were published. Sort The order to sort the returned videos in. Type Filter the list of videos by the video’s type. UserId The ID of the user whose list of videos you want to get. VideoIds A collection of IDs that identify the videos you want to get. Methods CreateQueryMap() Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetVideosArgs.Language.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetVideosArgs.Language.html",
    "title": "Property Language | AuxLabs.Twitch Documentation",
    "keywords": "Property Language Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Language Filter the list of videos by the language that the video owner broadcasts in. public string Language { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetVideosArgs.Period.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetVideosArgs.Period.html",
    "title": "Property Period | AuxLabs.Twitch Documentation",
    "keywords": "Property Period Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Period Filter the list of videos by when they were published. public VideoPeriod? Period { get; set; } Property Value VideoPeriod?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetVideosArgs.Sort.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetVideosArgs.Sort.html",
    "title": "Property Sort | AuxLabs.Twitch Documentation",
    "keywords": "Property Sort Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Sort The order to sort the returned videos in. public VideoSort? Sort { get; set; } Property Value VideoSort?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetVideosArgs.Type.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetVideosArgs.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Type Filter the list of videos by the video’s type. public VideoType? Type { get; set; } Property Value VideoType?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetVideosArgs.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetVideosArgs.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll UserId The ID of the user whose list of videos you want to get. public string UserId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetVideosArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetVideosArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetVideosArgs.VideoIds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetVideosArgs.VideoIds.html",
    "title": "Property VideoIds | AuxLabs.Twitch Documentation",
    "keywords": "Property VideoIds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll VideoIds A collection of IDs that identify the videos you want to get. public string[] VideoIds { get; set; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetVipsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetVipsArgs.html",
    "title": "Class GetVipsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class GetVipsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GetVipsArgs : GetRolesArgs, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest, IAgentRequest, IScopedRequest Inheritance object QueryMap GetRolesArgs GetVipsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest IAgentRequest IScopedRequest Inherited Members GetRolesArgs.BroadcasterId GetRolesArgs.UserIds GetRolesArgs.First GetRolesArgs.After GetRolesArgs.Validate() GetRolesArgs.CreateQueryMap() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Scopes The scopes required for this request. Methods Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetVipsArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetVipsArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GetVipsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GetVipsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GoalEndSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GoalEndSubscription.-ctor.html",
    "title": "Constructor GoalEndSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor GoalEndSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll GoalEndSubscription(string, string) public GoalEndSubscription(string channelId, string sessionId) Parameters channelId string sessionId string GoalEndSubscription(string, string, string) public GoalEndSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GoalEndSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GoalEndSubscription.html",
    "title": "Class GoalEndSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class GoalEndSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GoalEndSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase GoalEndSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GoalEndSubscription(string, string, string) GoalEndSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GoalEndSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GoalEndSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GoalProgressSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GoalProgressSubscription.-ctor.html",
    "title": "Constructor GoalProgressSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor GoalProgressSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll GoalProgressSubscription(string, string) public GoalProgressSubscription(string channelId, string sessionId) Parameters channelId string sessionId string GoalProgressSubscription(string, string, string) public GoalProgressSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GoalProgressSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GoalProgressSubscription.html",
    "title": "Class GoalProgressSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class GoalProgressSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GoalProgressSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase GoalProgressSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GoalProgressSubscription(string, string, string) GoalProgressSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GoalProgressSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GoalProgressSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GoalStartSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GoalStartSubscription.-ctor.html",
    "title": "Constructor GoalStartSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor GoalStartSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll GoalStartSubscription(string, string) public GoalStartSubscription(string channelId, string sessionId) Parameters channelId string sessionId string GoalStartSubscription(string, string, string) public GoalStartSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.GoalStartSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GoalStartSubscription.html",
    "title": "Class GoalStartSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class GoalStartSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class GoalStartSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase GoalStartSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GoalStartSubscription(string, string, string) GoalStartSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.GoalStartSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.GoalStartSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.html",
    "title": "Namespace AuxLabs.Twitch.Rest.Requests | AuxLabs.Twitch Documentation",
    "keywords": "Namespace AuxLabs.Twitch.Rest.Requests Classes AuthorizationGrantedSubscription AuthorizationRevokedSubscription AuthorizationSubscriptionBase AutomodSettingsArgs BanSubscription BitsTransactionSubscription BroadcastEndedSubscription BroadcasterSubscriptionBase BroadcastStartedSubscription CampaignProgressSubscription CampaignStartSubscription CampaignStopSubscription ChannelUpdateSubscription CheerSubscription DeleteBanArgs DeleteBlockArgs DeleteBlockedTermsArgs DeleteEventSubscriptionArgs DeleteMessageArgs DeleteRaidArgs DeleteVideosArgs DonationSubscription EntitlementGrantSubscription FollowSubscription GetActiveExtensionsArgs GetAnalyticsArgs GetBadgesArgs GetBannedUsersArgs GetBitsLeaderboardArgs GetBlockedTermsArgs GetBlocksArgs GetBroadcastKeyArgs GetBroadcastMarkersArgs GetBroadcastsArgs GetChannelEditorsArgs GetChannelsArgs GetChannelTeamsArgs GetCharityCampaignArgs GetCharityDonationsArgs GetChatSettingsArgs GetChattersArgs GetCheermotesArgs GetClipsArgs GetCurrentTrackArgs GetDropStatusArgs GetEmotesArgs GetEmoteSetsArgs GetEventSubscriptionsArgs GetExtensionAnalyticsArgs GetExtensionTransactionsArgs GetFollowedBroadcastsArgs GetFollowedChannelsArgs GetFollowersArgs GetFollowsArgs GetGameAnalyticsArgs GetGamesArgs GetGoalsArgs GetHypeTrainsArgs GetModeratorsArgs GetPlaylistsArgs GetPlaylistTracksArgs GetPollsArgs GetPredictionsArgs GetRedemptionsArgs GetRewardArgs GetRolesArgs GetScheduleArgs GetShieldModeArgs GetSubscriberArgs GetSubscriptionsArgs GetTeamArgs GetTopGamesArgs GetUserColorArgs GetUsersArgs GetVideosArgs GetVipsArgs GoalEndSubscription GoalProgressSubscription GoalStartSubscription HypetrainEndSubscription HypetrainProgressSubscription HypetrainStartSubscription ManageModeratorArgs ManageRewardArgs ManageRolesArgs ManageSegmentArgs ManageVipArgs ModeratorAddSubscription ModeratorRemoveSubscription ModeratorSubscriptionBase ModifyRedemptionsArgs PatchChannelArgs PatchChannelBody PatchChatSettingsArgs PatchChatSettingsBody PatchDropsStatusArgs PatchPollBody PatchPredictionBody PatchScheduleArgs PatchSegmentBody PollEndSubscription PollProgressSubscription PollStartSubscription PostAnnouncementArgs PostAnnouncementBody PostAppAccessTokenArgs PostAutomodMessageArgs PostBanArgs PostBanBody PostBanUser PostBlockedTermArgs PostBlockedTermBody PostBroadcastMarkerBody PostClipArgs PostCommercialBody PostEnforcementStatusArgs PostEnforcementStatusBody PostEventSubscriptionBody<TCondition> PostPredictionBody PostRaidArgs PostRefreshTokenArgs PostRevokeTokenArgs PostRewardArgs PostRewardBody PostSegmentArgs PostSegmentBody PostShoutoutArgs PostUserAccessTokenArgs PostWhisperArgs PostWhisperBody PredictionEndSubscription PredictionLockSubscription PredictionProgressSubscription PredictionStartSubscription PutAutomodSettingsBody PutBlockArgs PutPollBody PutShieldModeArgs PutShieldModeBody PutUserArgs PutUserChatColorArgs RaidSubscription RedemptionAddSubscription RedemptionUpdateSubscription RewardAddSubscription RewardRemoveSubscription RewardSubscriptionBase RewardUpdateSubscription SearchCategoriesArgs SearchChannelsArgs ShieldModeEndSubscription ShieldModeStartSubscription ShoutoutCreateSubscription ShoutoutReceiveSubscription SubscribeSubscription SubscriptionEndSubscription SubscriptionGiftSubscription SubscriptionMessageSubscription UnbanSubscription UserUpdateSubscription Interfaces IAgentRequest IPaginatedRequest Indicates that a request can be paginated. IScopedRequest Indicates that a method requires special authentication to be used. Enums GetUsersMode"
  },
  "api/AuxLabs.Twitch.Rest.Requests.HypetrainEndSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.HypetrainEndSubscription.-ctor.html",
    "title": "Constructor HypetrainEndSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor HypetrainEndSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll HypetrainEndSubscription(string, string) public HypetrainEndSubscription(string channelId, string sessionId) Parameters channelId string sessionId string HypetrainEndSubscription(string, string, string) public HypetrainEndSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.HypetrainEndSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.HypetrainEndSubscription.html",
    "title": "Class HypetrainEndSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class HypetrainEndSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class HypetrainEndSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase HypetrainEndSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HypetrainEndSubscription(string, string, string) HypetrainEndSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.HypetrainEndSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.HypetrainEndSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.HypetrainProgressSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.HypetrainProgressSubscription.-ctor.html",
    "title": "Constructor HypetrainProgressSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor HypetrainProgressSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll HypetrainProgressSubscription(string, string) public HypetrainProgressSubscription(string channelId, string sessionId) Parameters channelId string sessionId string HypetrainProgressSubscription(string, string, string) public HypetrainProgressSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.HypetrainProgressSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.HypetrainProgressSubscription.html",
    "title": "Class HypetrainProgressSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class HypetrainProgressSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class HypetrainProgressSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase HypetrainProgressSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HypetrainProgressSubscription(string, string, string) HypetrainProgressSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.HypetrainProgressSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.HypetrainProgressSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.HypetrainStartSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.HypetrainStartSubscription.-ctor.html",
    "title": "Constructor HypetrainStartSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor HypetrainStartSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll HypetrainStartSubscription(string, string) public HypetrainStartSubscription(string channelId, string sessionId) Parameters channelId string sessionId string HypetrainStartSubscription(string, string, string) public HypetrainStartSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.HypetrainStartSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.HypetrainStartSubscription.html",
    "title": "Class HypetrainStartSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class HypetrainStartSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class HypetrainStartSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase HypetrainStartSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HypetrainStartSubscription(string, string, string) HypetrainStartSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.HypetrainStartSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.HypetrainStartSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.IAgentRequest.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.IAgentRequest.html",
    "title": "Interface IAgentRequest | AuxLabs.Twitch Documentation",
    "keywords": "Interface IAgentRequest Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public interface IAgentRequest : IScopedRequest Inherited Members IScopedRequest.Scopes IScopedRequest.Validate(IEnumerable<string>) Methods Validate(IEnumerable<string>, string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.IAgentRequest.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.IAgentRequest.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.IPaginatedRequest.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.IPaginatedRequest.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.IPaginatedRequest.Before.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.IPaginatedRequest.Before.html",
    "title": "Property Before | AuxLabs.Twitch Documentation",
    "keywords": "Property Before Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Before The cursor used to get the previous page of results. string Before { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.IPaginatedRequest.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.IPaginatedRequest.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. int? First { get; set; } Property Value int?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.IPaginatedRequest.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.IPaginatedRequest.html",
    "title": "Interface IPaginatedRequest | AuxLabs.Twitch Documentation",
    "keywords": "Interface IPaginatedRequest Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Indicates that a request can be paginated. public interface IPaginatedRequest Properties After The cursor used to get the next page of results. Before The cursor used to get the previous page of results. First The maximum number of items to return per page in the response."
  },
  "api/AuxLabs.Twitch.Rest.Requests.IScopedRequest.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.IScopedRequest.html",
    "title": "Interface IScopedRequest | AuxLabs.Twitch Documentation",
    "keywords": "Interface IScopedRequest Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Indicates that a method requires special authentication to be used. public interface IScopedRequest Properties Scopes The scopes required for this request. Methods Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.IScopedRequest.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.IScopedRequest.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. [JsonIgnore] string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.IScopedRequest.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.IScopedRequest.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>) void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ManageModeratorArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ManageModeratorArgs.html",
    "title": "Class ManageModeratorArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class ManageModeratorArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class ManageModeratorArgs : ManageRolesArgs, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap ManageRolesArgs ManageModeratorArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members ManageRolesArgs.BroadcasterId ManageRolesArgs.UserId ManageRolesArgs.Validate() ManageRolesArgs.CreateQueryMap() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Scopes The scopes required for this request. Methods Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ManageModeratorArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ManageModeratorArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ManageModeratorArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ManageModeratorArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ManageRewardArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ManageRewardArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster that created the custom reward. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ManageRewardArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ManageRewardArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ManageRewardArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ManageRewardArgs.html",
    "title": "Class ManageRewardArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class ManageRewardArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class ManageRewardArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap ManageRewardArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the broadcaster that created the custom reward. RewardId The ID of the custom reward to delete. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ManageRewardArgs.RewardId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ManageRewardArgs.RewardId.html",
    "title": "Property RewardId | AuxLabs.Twitch Documentation",
    "keywords": "Property RewardId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll RewardId The ID of the custom reward to delete. public string RewardId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ManageRewardArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ManageRewardArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ManageRewardArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ManageRewardArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ManageRolesArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ManageRolesArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster that owns the chat room. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ManageRolesArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ManageRolesArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ManageRolesArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ManageRolesArgs.html",
    "title": "Class ManageRolesArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class ManageRolesArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public abstract class ManageRolesArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap ManageRolesArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Derived ManageModeratorArgs ManageVipArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the broadcaster that owns the chat room. UserId The ID of the user to add or remove a role from in the broadcaster’s chat room. Methods CreateQueryMap() Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ManageRolesArgs.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ManageRolesArgs.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll UserId The ID of the user to add or remove a role from in the broadcaster’s chat room. public string UserId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ManageRolesArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ManageRolesArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster who owns the broadcast segment to update. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs.html",
    "title": "Class ManageSegmentArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class ManageSegmentArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class ManageSegmentArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap ManageSegmentArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the broadcaster who owns the broadcast segment to update. Scopes The scopes required for this request. SegmentId The ID of the broadcast segment to update. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs.SegmentId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs.SegmentId.html",
    "title": "Property SegmentId | AuxLabs.Twitch Documentation",
    "keywords": "Property SegmentId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll SegmentId The ID of the broadcast segment to update. public string SegmentId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ManageVipArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ManageVipArgs.html",
    "title": "Class ManageVipArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class ManageVipArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class ManageVipArgs : ManageRolesArgs, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap ManageRolesArgs ManageVipArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members ManageRolesArgs.BroadcasterId ManageRolesArgs.UserId ManageRolesArgs.Validate() ManageRolesArgs.CreateQueryMap() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Scopes The scopes required for this request. Methods Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ManageVipArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ManageVipArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ManageVipArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ManageVipArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ModeratorAddSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ModeratorAddSubscription.-ctor.html",
    "title": "Constructor ModeratorAddSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor ModeratorAddSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorAddSubscription(string, string) public ModeratorAddSubscription(string channelId, string sessionId) Parameters channelId string sessionId string ModeratorAddSubscription(string, string, string) public ModeratorAddSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ModeratorAddSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ModeratorAddSubscription.html",
    "title": "Class ModeratorAddSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class ModeratorAddSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class ModeratorAddSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase ModeratorAddSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModeratorAddSubscription(string, string, string) ModeratorAddSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.ModeratorAddSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ModeratorAddSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ModeratorRemoveSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ModeratorRemoveSubscription.-ctor.html",
    "title": "Constructor ModeratorRemoveSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor ModeratorRemoveSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorRemoveSubscription(string, string) public ModeratorRemoveSubscription(string channelId, string sessionId) Parameters channelId string sessionId string ModeratorRemoveSubscription(string, string, string) public ModeratorRemoveSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ModeratorRemoveSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ModeratorRemoveSubscription.html",
    "title": "Class ModeratorRemoveSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class ModeratorRemoveSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class ModeratorRemoveSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase ModeratorRemoveSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModeratorRemoveSubscription(string, string, string) ModeratorRemoveSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.ModeratorRemoveSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ModeratorRemoveSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ModeratorSubscriptionBase.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ModeratorSubscriptionBase.-ctor.html",
    "title": "Constructor ModeratorSubscriptionBase | AuxLabs.Twitch Documentation",
    "keywords": "Constructor ModeratorSubscriptionBase Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorSubscriptionBase(string, string, string) public ModeratorSubscriptionBase(string channelId, string moderatorId, string sessionId) Parameters channelId string moderatorId string sessionId string ModeratorSubscriptionBase(string, string, string, string) public ModeratorSubscriptionBase(string channelId, string moderatorId, string callbackUrl, string secret) Parameters channelId string moderatorId string callbackUrl string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ModeratorSubscriptionBase.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ModeratorSubscriptionBase.html",
    "title": "Class ModeratorSubscriptionBase | AuxLabs.Twitch Documentation",
    "keywords": "Class ModeratorSubscriptionBase Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public abstract class ModeratorSubscriptionBase : PostEventSubscriptionBody<ModeratorCondition>, IScopedRequest Inheritance object PostEventSubscriptionBody<ModeratorCondition> ModeratorSubscriptionBase Implements IScopedRequest Derived FollowSubscription ShieldModeEndSubscription ShieldModeStartSubscription ShoutoutCreateSubscription ShoutoutReceiveSubscription Inherited Members PostEventSubscriptionBody<ModeratorCondition>.Type PostEventSubscriptionBody<ModeratorCondition>.Version PostEventSubscriptionBody<ModeratorCondition>.Condition PostEventSubscriptionBody<ModeratorCondition>.Transport PostEventSubscriptionBody<ModeratorCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModeratorSubscriptionBase(string, string, string, string) ModeratorSubscriptionBase(string, string, string) Properties Scopes The scopes required for this request. Methods Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ModeratorSubscriptionBase.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ModeratorSubscriptionBase.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public abstract string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ModeratorSubscriptionBase.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ModeratorSubscriptionBase.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ModifyRedemptionsArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ModifyRedemptionsArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster that owns the custom reward. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ModifyRedemptionsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ModifyRedemptionsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ModifyRedemptionsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ModifyRedemptionsArgs.html",
    "title": "Class ModifyRedemptionsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class ModifyRedemptionsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class ModifyRedemptionsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap ModifyRedemptionsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the broadcaster that owns the custom reward. Ids A list of IDs to filter the redemptions by. RewardId The ID that identifies the custom reward whose redemptions you want to get. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ModifyRedemptionsArgs.Ids.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ModifyRedemptionsArgs.Ids.html",
    "title": "Property Ids | AuxLabs.Twitch Documentation",
    "keywords": "Property Ids Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Ids A list of IDs to filter the redemptions by. public string[] Ids { get; set; } Property Value string[] Remarks You may specify a maximum of 50 IDs."
  },
  "api/AuxLabs.Twitch.Rest.Requests.ModifyRedemptionsArgs.RewardId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ModifyRedemptionsArgs.RewardId.html",
    "title": "Property RewardId | AuxLabs.Twitch Documentation",
    "keywords": "Property RewardId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll RewardId The ID that identifies the custom reward whose redemptions you want to get. public string RewardId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ModifyRedemptionsArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ModifyRedemptionsArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ModifyRedemptionsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ModifyRedemptionsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChannelArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChannelArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster whose channel you want to update. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChannelArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChannelArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChannelArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChannelArgs.html",
    "title": "Class PatchChannelArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PatchChannelArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PatchChannelArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap PatchChannelArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the broadcaster whose channel you want to update. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChannelArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChannelArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChannelArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChannelArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChannelBody.BroadcasterLanguage.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChannelBody.BroadcasterLanguage.html",
    "title": "Property BroadcasterLanguage | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterLanguage Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterLanguage The user’s preferred language. Set the value to an ISO 639-1 two-letter language code. [JsonPropertyName(\"broadcaster_language\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string BroadcasterLanguage { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChannelBody.Delay.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChannelBody.Delay.html",
    "title": "Property Delay | AuxLabs.Twitch Documentation",
    "keywords": "Property Delay Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Delay The number of seconds you want your broadcast buffered before streaming it live. [JsonPropertyName(\"delay\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public int? Delay { get; set; } Property Value int? Remarks Only channels with Partner status can change this property. Max value is 900."
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChannelBody.GameId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChannelBody.GameId.html",
    "title": "Property GameId | AuxLabs.Twitch Documentation",
    "keywords": "Property GameId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll GameId The ID of the game that the user plays. [JsonPropertyName(\"game_id\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string GameId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChannelBody.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChannelBody.html",
    "title": "Class PatchChannelBody | AuxLabs.Twitch Documentation",
    "keywords": "Class PatchChannelBody Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PatchChannelBody Inheritance object PatchChannelBody Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterLanguage The user’s preferred language. Set the value to an ISO 639-1 two-letter language code. Delay The number of seconds you want your broadcast buffered before streaming it live. GameId The ID of the game that the user plays. Tags A collection of channel-defined tags to apply to the channel. Title The title of the user’s stream. Methods Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChannelBody.Tags.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChannelBody.Tags.html",
    "title": "Property Tags | AuxLabs.Twitch Documentation",
    "keywords": "Property Tags Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Tags A collection of channel-defined tags to apply to the channel. [JsonPropertyName(\"tags\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string[] Tags { get; set; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChannelBody.Title.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChannelBody.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Title The title of the user’s stream. [JsonPropertyName(\"title\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string Title { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChannelBody.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChannelBody.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster whose chat settings you want to get. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsArgs.html",
    "title": "Class PatchChatSettingsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PatchChatSettingsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PatchChatSettingsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap PatchChatSettingsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the broadcaster whose chat settings you want to get. ModeratorId The ID of a user that has permission to moderate the broadcaster’s chat room. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsArgs.ModeratorId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsArgs.ModeratorId.html",
    "title": "Property ModeratorId | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorId The ID of a user that has permission to moderate the broadcaster’s chat room. public string ModeratorId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.FollowerOnlyMinutes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.FollowerOnlyMinutes.html",
    "title": "Property FollowerOnlyMinutes | AuxLabs.Twitch Documentation",
    "keywords": "Property FollowerOnlyMinutes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll FollowerOnlyMinutes The length of time that users must follow the broadcaster before being able to participate in the chat. [JsonPropertyName(\"follower_mode_duration\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public int? FollowerOnlyMinutes { get; set; } Property Value int? Remarks Minimum value is 0, maximum is 129600 (3 months)."
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.html",
    "title": "Class PatchChatSettingsBody | AuxLabs.Twitch Documentation",
    "keywords": "Class PatchChatSettingsBody Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PatchChatSettingsBody Inheritance object PatchChatSettingsBody Derived ChatSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FollowerOnlyMinutes The length of time that users must follow the broadcaster before being able to participate in the chat. IsEmoteOnly Determines whether chat messages must contain only emotes. IsFollowerOnly Determines whether the broadcaster restricts the chat room to followers only. IsModeratorDelayed Determines whether the broadcaster adds a short delay before chat messages appear in the chat room. IsSlowEnabled Determines whether the broadcaster limits how often users in the chat room are allowed to send messages. IsSubscriberOnly Determines whether only users that subscribe to the broadcaster’s channel may talk in the chat room. IsUniqueEnabled Determines whether the broadcaster requires users to post only unique messages in the chat room. ModeratorDelaySeconds The amount of time that messages are delayed before appearing in chat. SlowSeconds The amount of time that users must wait between sending messages. Methods Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsEmoteOnly.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsEmoteOnly.html",
    "title": "Property IsEmoteOnly | AuxLabs.Twitch Documentation",
    "keywords": "Property IsEmoteOnly Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll IsEmoteOnly Determines whether chat messages must contain only emotes. [JsonPropertyName(\"emote_mode\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public bool? IsEmoteOnly { get; set; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsFollowerOnly.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsFollowerOnly.html",
    "title": "Property IsFollowerOnly | AuxLabs.Twitch Documentation",
    "keywords": "Property IsFollowerOnly Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll IsFollowerOnly Determines whether the broadcaster restricts the chat room to followers only. [JsonPropertyName(\"follower_mode\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public bool? IsFollowerOnly { get; set; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsModeratorDelayed.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsModeratorDelayed.html",
    "title": "Property IsModeratorDelayed | AuxLabs.Twitch Documentation",
    "keywords": "Property IsModeratorDelayed Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll IsModeratorDelayed Determines whether the broadcaster adds a short delay before chat messages appear in the chat room. [JsonPropertyName(\"non_moderator_chat_delay\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public bool? IsModeratorDelayed { get; set; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsSlowEnabled.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsSlowEnabled.html",
    "title": "Property IsSlowEnabled | AuxLabs.Twitch Documentation",
    "keywords": "Property IsSlowEnabled Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll IsSlowEnabled Determines whether the broadcaster limits how often users in the chat room are allowed to send messages. [JsonPropertyName(\"slow_mode\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public bool? IsSlowEnabled { get; set; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsSubscriberOnly.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsSubscriberOnly.html",
    "title": "Property IsSubscriberOnly | AuxLabs.Twitch Documentation",
    "keywords": "Property IsSubscriberOnly Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll IsSubscriberOnly Determines whether only users that subscribe to the broadcaster’s channel may talk in the chat room. [JsonPropertyName(\"subscriber_mode\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public bool? IsSubscriberOnly { get; set; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsUniqueEnabled.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsUniqueEnabled.html",
    "title": "Property IsUniqueEnabled | AuxLabs.Twitch Documentation",
    "keywords": "Property IsUniqueEnabled Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll IsUniqueEnabled Determines whether the broadcaster requires users to post only unique messages in the chat room. [JsonPropertyName(\"unique_chat_mode\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public bool? IsUniqueEnabled { get; set; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.ModeratorDelaySeconds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.ModeratorDelaySeconds.html",
    "title": "Property ModeratorDelaySeconds | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorDelaySeconds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorDelaySeconds The amount of time that messages are delayed before appearing in chat. [JsonPropertyName(\"non_moderator_chat_delay_duration\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public int? ModeratorDelaySeconds { get; set; } Property Value int? Remarks Can only be set to 2, 4, or 6."
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.SlowSeconds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.SlowSeconds.html",
    "title": "Property SlowSeconds | AuxLabs.Twitch Documentation",
    "keywords": "Property SlowSeconds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll SlowSeconds The amount of time that users must wait between sending messages. [JsonPropertyName(\"slow_mode_wait_time\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public int? SlowSeconds { get; set; } Property Value int? Remarks Minimum value is 3, maximum is 120."
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchDropsStatusArgs.EntitlementIds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchDropsStatusArgs.EntitlementIds.html",
    "title": "Property EntitlementIds | AuxLabs.Twitch Documentation",
    "keywords": "Property EntitlementIds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll EntitlementIds A list of IDs that identify the entitlements to update. [JsonPropertyName(\"status\")] public string[] EntitlementIds { get; set; } Property Value string[] Remarks You may specify a maximum of 100 IDs."
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchDropsStatusArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchDropsStatusArgs.html",
    "title": "Class PatchDropsStatusArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PatchDropsStatusArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PatchDropsStatusArgs Inheritance object PatchDropsStatusArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EntitlementIds A list of IDs that identify the entitlements to update. Status The fulfillment status to set the entitlements to. Methods Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchDropsStatusArgs.Status.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchDropsStatusArgs.Status.html",
    "title": "Property Status | AuxLabs.Twitch Documentation",
    "keywords": "Property Status Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Status The fulfillment status to set the entitlements to. [JsonPropertyName(\"status\")] public FulfillmentStatus Status { get; set; } Property Value FulfillmentStatus"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchDropsStatusArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchDropsStatusArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchPollBody.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchPollBody.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster that’s running the poll. [JsonPropertyName(\"broadcaster_id\")] public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchPollBody.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchPollBody.html",
    "title": "Class PatchPollBody | AuxLabs.Twitch Documentation",
    "keywords": "Class PatchPollBody Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PatchPollBody : IAgentRequest, IScopedRequest Inheritance object PatchPollBody Implements IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the broadcaster that’s running the poll. PollId The ID of the poll to update. Scopes The scopes required for this request. Status The status to set the poll to. Methods Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchPollBody.PollId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchPollBody.PollId.html",
    "title": "Property PollId | AuxLabs.Twitch Documentation",
    "keywords": "Property PollId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll PollId The ID of the poll to update. [JsonPropertyName(\"id\")] public string PollId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchPollBody.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchPollBody.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchPollBody.Status.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchPollBody.Status.html",
    "title": "Property Status | AuxLabs.Twitch Documentation",
    "keywords": "Property Status Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Status The status to set the poll to. [JsonPropertyName(\"status\")] public PollStatus Status { get; set; } Property Value PollStatus"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchPollBody.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchPollBody.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchPredictionBody.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchPredictionBody.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster that’s running the prediction. [JsonPropertyName(\"broadcaster_id\")] public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchPredictionBody.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchPredictionBody.html",
    "title": "Class PatchPredictionBody | AuxLabs.Twitch Documentation",
    "keywords": "Class PatchPredictionBody Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PatchPredictionBody : IAgentRequest, IScopedRequest Inheritance object PatchPredictionBody Implements IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the broadcaster that’s running the prediction. PredictionId The ID of the prediction to update. Scopes The scopes required for this request. Status The status to set the prediction to. WinningId The ID of the winning outcome. Methods Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchPredictionBody.PredictionId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchPredictionBody.PredictionId.html",
    "title": "Property PredictionId | AuxLabs.Twitch Documentation",
    "keywords": "Property PredictionId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll PredictionId The ID of the prediction to update. [JsonPropertyName(\"id\")] public string PredictionId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchPredictionBody.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchPredictionBody.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchPredictionBody.Status.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchPredictionBody.Status.html",
    "title": "Property Status | AuxLabs.Twitch Documentation",
    "keywords": "Property Status Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Status The status to set the prediction to. [JsonPropertyName(\"status\")] public PredictionStatus Status { get; set; } Property Value PredictionStatus"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchPredictionBody.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchPredictionBody.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchPredictionBody.WinningId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchPredictionBody.WinningId.html",
    "title": "Property WinningId | AuxLabs.Twitch Documentation",
    "keywords": "Property WinningId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll WinningId The ID of the winning outcome. [JsonPropertyName(\"winning_outcome_id\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string WinningId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster whose schedule settings you want to update. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs.html",
    "title": "Class PatchScheduleArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PatchScheduleArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PatchScheduleArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap PatchScheduleArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the broadcaster whose schedule settings you want to update. IsVacationEnabled Indicates whether the broadcaster has scheduled a vacation. Scopes The scopes required for this request. Timezone The time zone that the broadcaster broadcasts from. VacationEndsAt The UTC date and time of when the broadcaster’s vacation ends. VacationStartsAt The UTC date and time of when the broadcaster’s vacation starts. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs.IsVacationEnabled.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs.IsVacationEnabled.html",
    "title": "Property IsVacationEnabled | AuxLabs.Twitch Documentation",
    "keywords": "Property IsVacationEnabled Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll IsVacationEnabled Indicates whether the broadcaster has scheduled a vacation. public bool? IsVacationEnabled { get; set; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs.Timezone.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs.Timezone.html",
    "title": "Property Timezone | AuxLabs.Twitch Documentation",
    "keywords": "Property Timezone Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Timezone The time zone that the broadcaster broadcasts from. public string Timezone { get; set; } Property Value string Remarks Specify the time zone using IANA time zone database format"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs.VacationEndsAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs.VacationEndsAt.html",
    "title": "Property VacationEndsAt | AuxLabs.Twitch Documentation",
    "keywords": "Property VacationEndsAt Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll VacationEndsAt The UTC date and time of when the broadcaster’s vacation ends. public DateTime? VacationEndsAt { get; set; } Property Value DateTime?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs.VacationStartsAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs.VacationStartsAt.html",
    "title": "Property VacationStartsAt | AuxLabs.Twitch Documentation",
    "keywords": "Property VacationStartsAt Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll VacationStartsAt The UTC date and time of when the broadcaster’s vacation starts. public DateTime? VacationStartsAt { get; set; } Property Value DateTime?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchSegmentBody.CategoryId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchSegmentBody.CategoryId.html",
    "title": "Property CategoryId | AuxLabs.Twitch Documentation",
    "keywords": "Property CategoryId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CategoryId The ID of the category that best represents the broadcast’s content. [JsonPropertyName(\"category_id\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string CategoryId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchSegmentBody.DurationMinutes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchSegmentBody.DurationMinutes.html",
    "title": "Property DurationMinutes | AuxLabs.Twitch Documentation",
    "keywords": "Property DurationMinutes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll DurationMinutes The length of time that the broadcast is scheduled to run. [JsonPropertyName(\"duration\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string DurationMinutes { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchSegmentBody.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchSegmentBody.html",
    "title": "Class PatchSegmentBody | AuxLabs.Twitch Documentation",
    "keywords": "Class PatchSegmentBody Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PatchSegmentBody Inheritance object PatchSegmentBody Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CategoryId The ID of the category that best represents the broadcast’s content. DurationMinutes The length of time that the broadcast is scheduled to run. IsCancelled Indicates whether the broadcast is canceled. StartsAt The date and time that the broadcast segment starts. Timezone The time zone that the broadcaster broadcasts from. Title The broadcast’s title. Methods Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchSegmentBody.IsCancelled.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchSegmentBody.IsCancelled.html",
    "title": "Property IsCancelled | AuxLabs.Twitch Documentation",
    "keywords": "Property IsCancelled Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll IsCancelled Indicates whether the broadcast is canceled. [JsonPropertyName(\"is_canceled\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public bool? IsCancelled { get; set; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchSegmentBody.StartsAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchSegmentBody.StartsAt.html",
    "title": "Property StartsAt | AuxLabs.Twitch Documentation",
    "keywords": "Property StartsAt Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll StartsAt The date and time that the broadcast segment starts. [JsonPropertyName(\"start_time\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public DateTime? StartsAt { get; set; } Property Value DateTime?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchSegmentBody.Timezone.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchSegmentBody.Timezone.html",
    "title": "Property Timezone | AuxLabs.Twitch Documentation",
    "keywords": "Property Timezone Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Timezone The time zone that the broadcaster broadcasts from. [JsonPropertyName(\"timezone\")] public string Timezone { get; set; } Property Value string Remarks Specify the time zone using IANA time zone database format"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchSegmentBody.Title.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchSegmentBody.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Title The broadcast’s title. [JsonPropertyName(\"title\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string Title { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PatchSegmentBody.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PatchSegmentBody.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PollEndSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PollEndSubscription.-ctor.html",
    "title": "Constructor PollEndSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor PollEndSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll PollEndSubscription(string, string) public PollEndSubscription(string channelId, string sessionId) Parameters channelId string sessionId string PollEndSubscription(string, string, string) public PollEndSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PollEndSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PollEndSubscription.html",
    "title": "Class PollEndSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class PollEndSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PollEndSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase PollEndSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PollEndSubscription(string, string, string) PollEndSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.PollEndSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PollEndSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PollProgressSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PollProgressSubscription.-ctor.html",
    "title": "Constructor PollProgressSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor PollProgressSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll PollProgressSubscription(string, string) public PollProgressSubscription(string channelId, string sessionId) Parameters channelId string sessionId string PollProgressSubscription(string, string, string) public PollProgressSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PollProgressSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PollProgressSubscription.html",
    "title": "Class PollProgressSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class PollProgressSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PollProgressSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase PollProgressSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PollProgressSubscription(string, string, string) PollProgressSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.PollProgressSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PollProgressSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PollStartSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PollStartSubscription.-ctor.html",
    "title": "Constructor PollStartSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor PollStartSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll PollStartSubscription(string, string) public PollStartSubscription(string channelId, string sessionId) Parameters channelId string sessionId string PollStartSubscription(string, string, string) public PollStartSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PollStartSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PollStartSubscription.html",
    "title": "Class PollStartSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class PollStartSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PollStartSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase PollStartSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PollStartSubscription(string, string, string) PollStartSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.PollStartSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PollStartSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostAnnouncementArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostAnnouncementArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster that owns the chat room to send the announcement to. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostAnnouncementArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostAnnouncementArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostAnnouncementArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostAnnouncementArgs.html",
    "title": "Class PostAnnouncementArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PostAnnouncementArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostAnnouncementArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap PostAnnouncementArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the broadcaster that owns the chat room to send the announcement to. ModeratorId The ID of a user who has permission to moderate the broadcaster’s chat room. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostAnnouncementArgs.ModeratorId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostAnnouncementArgs.ModeratorId.html",
    "title": "Property ModeratorId | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorId The ID of a user who has permission to moderate the broadcaster’s chat room. public string ModeratorId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostAnnouncementArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostAnnouncementArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostAnnouncementArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostAnnouncementArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostAnnouncementBody.Color.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostAnnouncementBody.Color.html",
    "title": "Property Color | AuxLabs.Twitch Documentation",
    "keywords": "Property Color Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Color The color used to highlight the announcement. [JsonPropertyName(\"color\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public AnnouncementColor? Color { get; set; } Property Value AnnouncementColor?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostAnnouncementBody.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostAnnouncementBody.html",
    "title": "Class PostAnnouncementBody | AuxLabs.Twitch Documentation",
    "keywords": "Class PostAnnouncementBody Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostAnnouncementBody Inheritance object PostAnnouncementBody Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Color The color used to highlight the announcement. Message The announcement to make in the broadcaster’s chat room. Methods Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostAnnouncementBody.Message.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostAnnouncementBody.Message.html",
    "title": "Property Message | AuxLabs.Twitch Documentation",
    "keywords": "Property Message Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Message The announcement to make in the broadcaster’s chat room. [JsonPropertyName(\"message\")] public string Message { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostAnnouncementBody.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostAnnouncementBody.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostAppAccessTokenArgs.ClientId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostAppAccessTokenArgs.ClientId.html",
    "title": "Property ClientId | AuxLabs.Twitch Documentation",
    "keywords": "Property ClientId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ClientId Your app’s registered client ID. public string ClientId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostAppAccessTokenArgs.ClientSecret.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostAppAccessTokenArgs.ClientSecret.html",
    "title": "Property ClientSecret | AuxLabs.Twitch Documentation",
    "keywords": "Property ClientSecret Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ClientSecret Your app’s registered client secret. public string ClientSecret { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostAppAccessTokenArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostAppAccessTokenArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostAppAccessTokenArgs.GrantType.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostAppAccessTokenArgs.GrantType.html",
    "title": "Property GrantType | AuxLabs.Twitch Documentation",
    "keywords": "Property GrantType Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll GrantType Constant value, this is set internally. public string GrantType { get; protected set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostAppAccessTokenArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostAppAccessTokenArgs.html",
    "title": "Class PostAppAccessTokenArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PostAppAccessTokenArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostAppAccessTokenArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap PostAppAccessTokenArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Derived PostRefreshTokenArgs PostUserAccessTokenArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ClientId Your app’s registered client ID. ClientSecret Your app’s registered client secret. GrantType Constant value, this is set internally. Methods CreateQueryMap() Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostAppAccessTokenArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostAppAccessTokenArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public virtual void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostAutomodMessageArgs.Action.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostAutomodMessageArgs.Action.html",
    "title": "Property Action | AuxLabs.Twitch Documentation",
    "keywords": "Property Action Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Action The action to take for the message. public AutomodAction Action { get; set; } Property Value AutomodAction"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostAutomodMessageArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostAutomodMessageArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostAutomodMessageArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostAutomodMessageArgs.html",
    "title": "Class PostAutomodMessageArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PostAutomodMessageArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostAutomodMessageArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap PostAutomodMessageArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Action The action to take for the message. MessageId The ID of the message to allow or deny. Scopes The scopes required for this request. UserId The moderator who is approving or denying the held message. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostAutomodMessageArgs.MessageId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostAutomodMessageArgs.MessageId.html",
    "title": "Property MessageId | AuxLabs.Twitch Documentation",
    "keywords": "Property MessageId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll MessageId The ID of the message to allow or deny. public string MessageId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostAutomodMessageArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostAutomodMessageArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostAutomodMessageArgs.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostAutomodMessageArgs.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll UserId The moderator who is approving or denying the held message. public string UserId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostAutomodMessageArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostAutomodMessageArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBanArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBanArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster whose chat room the user is being banned from. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBanArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBanArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBanArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBanArgs.html",
    "title": "Class PostBanArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PostBanArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostBanArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap PostBanArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the broadcaster whose chat room the user is being banned from. ModeratorId The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBanArgs.ModeratorId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBanArgs.ModeratorId.html",
    "title": "Property ModeratorId | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorId The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. public string ModeratorId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBanArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBanArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBanArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBanArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBanBody.Bans.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBanBody.Bans.html",
    "title": "Property Bans | AuxLabs.Twitch Documentation",
    "keywords": "Property Bans Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Bans Identifies the user and type of ban. [JsonPropertyName(\"data\")] public PostBanUser[] Bans { get; set; } Property Value PostBanUser[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBanBody.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBanBody.html",
    "title": "Class PostBanBody | AuxLabs.Twitch Documentation",
    "keywords": "Class PostBanBody Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostBanBody Inheritance object PostBanBody Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Bans Identifies the user and type of ban. Methods Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBanBody.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBanBody.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBanUser.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBanUser.-ctor.html",
    "title": "Constructor PostBanUser | AuxLabs.Twitch Documentation",
    "keywords": "Constructor PostBanUser Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll PostBanUser() public PostBanUser() PostBanUser(string, int?, string) public PostBanUser(string userId, int? durationSeconds = null, string reason = null) Parameters userId string durationSeconds int? reason string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBanUser.DurationSeconds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBanUser.DurationSeconds.html",
    "title": "Property DurationSeconds | AuxLabs.Twitch Documentation",
    "keywords": "Property DurationSeconds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll DurationSeconds The timeout period. [JsonPropertyName(\"duration\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public int? DurationSeconds { get; set; } Property Value int? Remarks The minimum timeout is 1 second and the maximum is 1,209,600 seconds (2 weeks)."
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBanUser.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBanUser.html",
    "title": "Class PostBanUser | AuxLabs.Twitch Documentation",
    "keywords": "Class PostBanUser Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostBanUser Inheritance object PostBanUser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PostBanUser() PostBanUser(string, int?, string) Properties DurationSeconds The timeout period. Reason The reason the you’re banning the user or putting them in a timeout. UserId The ID of the user to ban or put in a timeout. Methods Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBanUser.Reason.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBanUser.Reason.html",
    "title": "Property Reason | AuxLabs.Twitch Documentation",
    "keywords": "Property Reason Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Reason The reason the you’re banning the user or putting them in a timeout. [JsonPropertyName(\"reason\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string Reason { get; set; } Property Value string Remarks Limited to a maximum of 500 characters."
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBanUser.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBanUser.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll UserId The ID of the user to ban or put in a timeout. [JsonPropertyName(\"user_id\")] public string UserId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBanUser.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBanUser.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBlockedTermArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBlockedTermArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster whose blocked terms you’re getting. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBlockedTermArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBlockedTermArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBlockedTermArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBlockedTermArgs.html",
    "title": "Class PostBlockedTermArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PostBlockedTermArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostBlockedTermArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap PostBlockedTermArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the broadcaster whose blocked terms you’re getting. ModeratorId The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBlockedTermArgs.ModeratorId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBlockedTermArgs.ModeratorId.html",
    "title": "Property ModeratorId | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorId The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. public string ModeratorId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBlockedTermArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBlockedTermArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBlockedTermArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBlockedTermArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBlockedTermBody.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBlockedTermBody.-ctor.html",
    "title": "Constructor PostBlockedTermBody | AuxLabs.Twitch Documentation",
    "keywords": "Constructor PostBlockedTermBody Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll PostBlockedTermBody() public PostBlockedTermBody() PostBlockedTermBody(string) public PostBlockedTermBody(string text) Parameters text string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBlockedTermBody.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBlockedTermBody.html",
    "title": "Class PostBlockedTermBody | AuxLabs.Twitch Documentation",
    "keywords": "Class PostBlockedTermBody Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostBlockedTermBody Inheritance object PostBlockedTermBody Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PostBlockedTermBody() PostBlockedTermBody(string) Properties Text The word or phrase to block from being used in the broadcaster’s chat room. Methods ToString() Validate() Operators implicit operator string(PostBlockedTermBody) implicit operator PostBlockedTermBody(string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBlockedTermBody.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBlockedTermBody.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator string(PostBlockedTermBody) public static implicit operator string(PostBlockedTermBody value) Parameters value PostBlockedTermBody Returns string implicit operator PostBlockedTermBody(string) public static implicit operator PostBlockedTermBody(string v) Parameters v string Returns PostBlockedTermBody"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBlockedTermBody.Text.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBlockedTermBody.Text.html",
    "title": "Property Text | AuxLabs.Twitch Documentation",
    "keywords": "Property Text Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Text The word or phrase to block from being used in the broadcaster’s chat room. [JsonPropertyName(\"text\")] public string Text { get; set; } Property Value string Remarks Terms may include a wildcard character *. The wildcard character must appear at the beginning or end of a word or set of characters. For example, foo or foo."
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBlockedTermBody.ToString.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBlockedTermBody.ToString.html",
    "title": "Method ToString | AuxLabs.Twitch Documentation",
    "keywords": "Method ToString Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ToString() public override string ToString() Returns string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBlockedTermBody.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBlockedTermBody.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBroadcastMarkerBody.Description.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBroadcastMarkerBody.Description.html",
    "title": "Property Description | AuxLabs.Twitch Documentation",
    "keywords": "Property Description Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Description A short description of the marker to help the user remember why they marked the location. [JsonPropertyName(\"description\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string Description { get; set; } Property Value string Remarks The maximum length of the description is 140 characters."
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBroadcastMarkerBody.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBroadcastMarkerBody.html",
    "title": "Class PostBroadcastMarkerBody | AuxLabs.Twitch Documentation",
    "keywords": "Class PostBroadcastMarkerBody Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostBroadcastMarkerBody : IAgentRequest, IScopedRequest Inheritance object PostBroadcastMarkerBody Implements IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description A short description of the marker to help the user remember why they marked the location. Scopes The scopes required for this request. UserId The ID of the broadcaster that’s streaming content. Methods Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBroadcastMarkerBody.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBroadcastMarkerBody.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. [JsonIgnore] public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBroadcastMarkerBody.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBroadcastMarkerBody.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll UserId The ID of the broadcaster that’s streaming content. [JsonPropertyName(\"user_id\")] public string UserId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostBroadcastMarkerBody.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostBroadcastMarkerBody.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostClipArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostClipArgs.-ctor.html",
    "title": "Constructor PostClipArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor PostClipArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll PostClipArgs() public PostClipArgs() PostClipArgs(string, bool?) public PostClipArgs(string broadcasterId, bool? hasDelay = null) Parameters broadcasterId string hasDelay bool?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostClipArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostClipArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster whose stream you want to create a clip from. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostClipArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostClipArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostClipArgs.HasDelay.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostClipArgs.HasDelay.html",
    "title": "Property HasDelay | AuxLabs.Twitch Documentation",
    "keywords": "Property HasDelay Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll HasDelay Determines whether the API captures the clip at the moment the viewer requests it or after a delay. public bool? HasDelay { get; set; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostClipArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostClipArgs.html",
    "title": "Class PostClipArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PostClipArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostClipArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IScopedRequest Inheritance object QueryMap PostClipArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PostClipArgs() PostClipArgs(string, bool?) Properties BroadcasterId The ID of the broadcaster whose stream you want to create a clip from. HasDelay Determines whether the API captures the clip at the moment the viewer requests it or after a delay. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>) Operators implicit operator string(PostClipArgs) implicit operator PostClipArgs(string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostClipArgs.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostClipArgs.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator string(PostClipArgs) public static implicit operator string(PostClipArgs value) Parameters value PostClipArgs Returns string implicit operator PostClipArgs(string) public static implicit operator PostClipArgs(string v) Parameters v string Returns PostClipArgs"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostClipArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostClipArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostClipArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostClipArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostCommercialBody.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostCommercialBody.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the partner or affiliate broadcaster that wants to run the commercial. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostCommercialBody.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostCommercialBody.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostCommercialBody.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostCommercialBody.html",
    "title": "Class PostCommercialBody | AuxLabs.Twitch Documentation",
    "keywords": "Class PostCommercialBody Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostCommercialBody : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap PostCommercialBody Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the partner or affiliate broadcaster that wants to run the commercial. Length Optional, the length of the commercial to run, in seconds. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostCommercialBody.Length.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostCommercialBody.Length.html",
    "title": "Property Length | AuxLabs.Twitch Documentation",
    "keywords": "Property Length Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Length Optional, the length of the commercial to run, in seconds. public int Length { get; set; } Property Value int Remarks If specified, the minimum value is 1 and the maximum value is 180."
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostCommercialBody.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostCommercialBody.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostCommercialBody.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostCommercialBody.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusArgs.-ctor.html",
    "title": "Constructor PostEnforcementStatusArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor PostEnforcementStatusArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll PostEnforcementStatusArgs() public PostEnforcementStatusArgs() PostEnforcementStatusArgs(string) public PostEnforcementStatusArgs(string broadcasterId) Parameters broadcasterId string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster that owns the channel. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusArgs.html",
    "title": "Class PostEnforcementStatusArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PostEnforcementStatusArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostEnforcementStatusArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap PostEnforcementStatusArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PostEnforcementStatusArgs() PostEnforcementStatusArgs(string) Properties BroadcasterId The ID of the broadcaster that owns the channel. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>) Operators implicit operator string(PostEnforcementStatusArgs) implicit operator PostEnforcementStatusArgs(string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusArgs.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusArgs.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator string(PostEnforcementStatusArgs) public static implicit operator string(PostEnforcementStatusArgs value) Parameters value PostEnforcementStatusArgs Returns string implicit operator PostEnforcementStatusArgs(string) public static implicit operator PostEnforcementStatusArgs(string v) Parameters v string Returns PostEnforcementStatusArgs"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusBody.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusBody.html",
    "title": "Class PostEnforcementStatusBody | AuxLabs.Twitch Documentation",
    "keywords": "Class PostEnforcementStatusBody Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostEnforcementStatusBody Inheritance object PostEnforcementStatusBody Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Messages The list of messages to check. Methods Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusBody.Messages.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusBody.Messages.html",
    "title": "Property Messages | AuxLabs.Twitch Documentation",
    "keywords": "Property Messages Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Messages The list of messages to check. [JsonPropertyName(\"data\")] public MockMessage[] Messages { get; set; } Property Value MockMessage[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusBody.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusBody.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.-ctor.html",
    "title": "Constructor PostEventSubscriptionBody | AuxLabs.Twitch Documentation",
    "keywords": "Constructor PostEventSubscriptionBody Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll PostEventSubscriptionBody() public PostEventSubscriptionBody() PostEventSubscriptionBody(string) Constructor for websocket based event subscriptions. public PostEventSubscriptionBody(string sessionId) Parameters sessionId string The session id of the websocket instance. PostEventSubscriptionBody(string, string) Constructor for webhook based event subscriptions public PostEventSubscriptionBody(string callbackUrl, string secret) Parameters callbackUrl string The callback URL where the notifications are sent. secret string The secret used to verify the event signature."
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.Condition.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.Condition.html",
    "title": "Property Condition | AuxLabs.Twitch Documentation",
    "keywords": "Property Condition Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Condition Parameter values that are specific to the specified subscription type. [JsonInclude] [JsonPropertyName(\"condition\")] public TCondition Condition { get; set; } Property Value TCondition"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.html",
    "title": "Class PostEventSubscriptionBody<TCondition> | AuxLabs.Twitch Documentation",
    "keywords": "Class PostEventSubscriptionBody<TCondition> Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostEventSubscriptionBody<TCondition> where TCondition : IEventCondition Type Parameters TCondition Inheritance object PostEventSubscriptionBody<TCondition> Derived AuthorizationSubscriptionBase BitsTransactionSubscription BroadcastEndedSubscription BroadcasterSubscriptionBase BroadcastStartedSubscription ChannelUpdateSubscription EntitlementGrantSubscription ModeratorSubscriptionBase RaidSubscription RewardSubscriptionBase UserUpdateSubscription Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PostEventSubscriptionBody() PostEventSubscriptionBody(string, string) Constructor for webhook based event subscriptions PostEventSubscriptionBody(string) Constructor for websocket based event subscriptions. Properties Condition Parameter values that are specific to the specified subscription type. Transport The transport details that you want Twitch to use when sending you notifications. Type The type of subscription to create. Version The version number that identifies the definition of the subscription type that you want the response to use. Methods Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.Transport.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.Transport.html",
    "title": "Property Transport | AuxLabs.Twitch Documentation",
    "keywords": "Property Transport Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Transport The transport details that you want Twitch to use when sending you notifications. [JsonPropertyName(\"transport\")] public Transport Transport { get; set; } Property Value Transport"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.Type.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.Type.html",
    "title": "Property Type | AuxLabs.Twitch Documentation",
    "keywords": "Property Type Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Type The type of subscription to create. [JsonPropertyName(\"type\")] [JsonConverter(typeof(JsonStringEnumMemberConverter))] public EventSubType Type { get; set; } Property Value EventSubType"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.Version.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.Version.html",
    "title": "Property Version | AuxLabs.Twitch Documentation",
    "keywords": "Property Version Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Version The version number that identifies the definition of the subscription type that you want the response to use. [JsonPropertyName(\"version\")] public string Version { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostPredictionBody.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostPredictionBody.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster that’s running the prediction. [JsonPropertyName(\"broadcaster_id\")] public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostPredictionBody.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostPredictionBody.html",
    "title": "Class PostPredictionBody | AuxLabs.Twitch Documentation",
    "keywords": "Class PostPredictionBody Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostPredictionBody : IAgentRequest, IScopedRequest Inheritance object PostPredictionBody Implements IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the broadcaster that’s running the prediction. Outcomes The list of possible outcomes that the viewers may choose from. PredictionDurationSeconds The length of time (in seconds) that the prediction will run for. Scopes The scopes required for this request. Title The question that the broadcaster is asking. Methods Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostPredictionBody.Outcomes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostPredictionBody.Outcomes.html",
    "title": "Property Outcomes | AuxLabs.Twitch Documentation",
    "keywords": "Property Outcomes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Outcomes The list of possible outcomes that the viewers may choose from. [JsonPropertyName(\"outcomes\")] public Title[] Outcomes { get; set; } Property Value Title[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostPredictionBody.PredictionDurationSeconds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostPredictionBody.PredictionDurationSeconds.html",
    "title": "Property PredictionDurationSeconds | AuxLabs.Twitch Documentation",
    "keywords": "Property PredictionDurationSeconds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll PredictionDurationSeconds The length of time (in seconds) that the prediction will run for. [JsonPropertyName(\"prediction_window\")] public int PredictionDurationSeconds { get; set; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostPredictionBody.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostPredictionBody.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostPredictionBody.Title.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostPredictionBody.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Title The question that the broadcaster is asking. [JsonPropertyName(\"title\")] public string Title { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostPredictionBody.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostPredictionBody.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRaidArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRaidArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRaidArgs.FromBroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRaidArgs.FromBroadcasterId.html",
    "title": "Property FromBroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property FromBroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll FromBroadcasterId The ID of the broadcaster that’s sending the raiding party. public string FromBroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRaidArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRaidArgs.html",
    "title": "Class PostRaidArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PostRaidArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostRaidArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap PostRaidArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FromBroadcasterId The ID of the broadcaster that’s sending the raiding party. Scopes The scopes required for this request. ToBroadcasterId The ID of the broadcaster to raid. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRaidArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRaidArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRaidArgs.ToBroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRaidArgs.ToBroadcasterId.html",
    "title": "Property ToBroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property ToBroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ToBroadcasterId The ID of the broadcaster to raid. public string ToBroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRaidArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRaidArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRefreshTokenArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRefreshTokenArgs.-ctor.html",
    "title": "Constructor PostRefreshTokenArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor PostRefreshTokenArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll PostRefreshTokenArgs() public PostRefreshTokenArgs()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRefreshTokenArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRefreshTokenArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRefreshTokenArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRefreshTokenArgs.html",
    "title": "Class PostRefreshTokenArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PostRefreshTokenArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostRefreshTokenArgs : PostAppAccessTokenArgs, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap PostAppAccessTokenArgs PostRefreshTokenArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members PostAppAccessTokenArgs.ClientId PostAppAccessTokenArgs.ClientSecret PostAppAccessTokenArgs.GrantType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PostRefreshTokenArgs() Properties RefreshToken The refresh token issued to the client. Methods CreateQueryMap() Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRefreshTokenArgs.RefreshToken.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRefreshTokenArgs.RefreshToken.html",
    "title": "Property RefreshToken | AuxLabs.Twitch Documentation",
    "keywords": "Property RefreshToken Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll RefreshToken The refresh token issued to the client. public string RefreshToken { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRefreshTokenArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRefreshTokenArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public override void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRevokeTokenArgs.ClientId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRevokeTokenArgs.ClientId.html",
    "title": "Property ClientId | AuxLabs.Twitch Documentation",
    "keywords": "Property ClientId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ClientId Your app’s registered client ID. public string ClientId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRevokeTokenArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRevokeTokenArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRevokeTokenArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRevokeTokenArgs.html",
    "title": "Class PostRevokeTokenArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PostRevokeTokenArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostRevokeTokenArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap PostRevokeTokenArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ClientId Your app’s registered client ID. Token The access token to revoke. Methods CreateQueryMap() Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRevokeTokenArgs.Token.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRevokeTokenArgs.Token.html",
    "title": "Property Token | AuxLabs.Twitch Documentation",
    "keywords": "Property Token Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Token The access token to revoke. public string Token { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRevokeTokenArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRevokeTokenArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRewardArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRewardArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster to add the custom reward to. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRewardArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRewardArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRewardArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRewardArgs.html",
    "title": "Class PostRewardArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PostRewardArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostRewardArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap PostRewardArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the broadcaster to add the custom reward to. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRewardArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRewardArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRewardArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRewardArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.BackgroundColor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.BackgroundColor.html",
    "title": "Property BackgroundColor | AuxLabs.Twitch Documentation",
    "keywords": "Property BackgroundColor Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BackgroundColor The background color to use for the reward. [JsonPropertyName(\"color\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public Color? BackgroundColor { get; set; } Property Value Color?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.Cost.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.Cost.html",
    "title": "Property Cost | AuxLabs.Twitch Documentation",
    "keywords": "Property Cost Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Cost The cost of the reward, in channel points. [JsonPropertyName(\"cost\")] public uint Cost { get; set; } Property Value uint"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.GlobalCooldownSeconds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.GlobalCooldownSeconds.html",
    "title": "Property GlobalCooldownSeconds | AuxLabs.Twitch Documentation",
    "keywords": "Property GlobalCooldownSeconds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll GlobalCooldownSeconds The cooldown period, in seconds. [JsonPropertyName(\"global_cooldown_seconds\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public int? GlobalCooldownSeconds { get; set; } Property Value int?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.html",
    "title": "Class PostRewardBody | AuxLabs.Twitch Documentation",
    "keywords": "Class PostRewardBody Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostRewardBody Inheritance object PostRewardBody Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BackgroundColor The background color to use for the reward. Cost The cost of the reward, in channel points. GlobalCooldownSeconds The cooldown period, in seconds. IsEnabled Determines whether the reward is enabled. IsGlobalCooldownEnabled Determines whether to apply a cooldown period between redemptions IsMaxPerStreamEnabled Determines whether to limit the maximum number of redemptions allowed per live stream. IsMaxPerUserEnabled Determines whether to limit the maximum number of redemptions allowed per user per stream IsUserInputRequired Determines whether the user needs to enter information when redeeming the reward. MaxPerStream The maximum number of redemptions allowed per live stream. MaxPerUser The maximum number of redemptions allowed per user per stream. Prompt The prompt shown to the viewer when they redeem the reward. ShouldSkipRequestQueue Determines whether redemptions should be set to fulfilled status immediately when a reward is redeemed. Title The custom reward’s title. Methods Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.IsEnabled.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.IsEnabled.html",
    "title": "Property IsEnabled | AuxLabs.Twitch Documentation",
    "keywords": "Property IsEnabled Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll IsEnabled Determines whether the reward is enabled. [JsonPropertyName(\"is_enabled\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public bool? IsEnabled { get; set; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.IsGlobalCooldownEnabled.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.IsGlobalCooldownEnabled.html",
    "title": "Property IsGlobalCooldownEnabled | AuxLabs.Twitch Documentation",
    "keywords": "Property IsGlobalCooldownEnabled Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll IsGlobalCooldownEnabled Determines whether to apply a cooldown period between redemptions [JsonPropertyName(\"is_global_cooldown_enabled\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public bool? IsGlobalCooldownEnabled { get; set; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.IsMaxPerStreamEnabled.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.IsMaxPerStreamEnabled.html",
    "title": "Property IsMaxPerStreamEnabled | AuxLabs.Twitch Documentation",
    "keywords": "Property IsMaxPerStreamEnabled Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll IsMaxPerStreamEnabled Determines whether to limit the maximum number of redemptions allowed per live stream. [JsonPropertyName(\"is_max_per_stream_enabled\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public bool? IsMaxPerStreamEnabled { get; set; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.IsMaxPerUserEnabled.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.IsMaxPerUserEnabled.html",
    "title": "Property IsMaxPerUserEnabled | AuxLabs.Twitch Documentation",
    "keywords": "Property IsMaxPerUserEnabled Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll IsMaxPerUserEnabled Determines whether to limit the maximum number of redemptions allowed per user per stream [JsonPropertyName(\"is_max_per_user_per_stream_enabled\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public bool? IsMaxPerUserEnabled { get; set; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.IsUserInputRequired.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.IsUserInputRequired.html",
    "title": "Property IsUserInputRequired | AuxLabs.Twitch Documentation",
    "keywords": "Property IsUserInputRequired Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll IsUserInputRequired Determines whether the user needs to enter information when redeeming the reward. [JsonPropertyName(\"is_user_input_required\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public bool? IsUserInputRequired { get; set; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.MaxPerStream.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.MaxPerStream.html",
    "title": "Property MaxPerStream | AuxLabs.Twitch Documentation",
    "keywords": "Property MaxPerStream Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll MaxPerStream The maximum number of redemptions allowed per live stream. [JsonPropertyName(\"max_per_stream\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public int? MaxPerStream { get; set; } Property Value int?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.MaxPerUser.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.MaxPerUser.html",
    "title": "Property MaxPerUser | AuxLabs.Twitch Documentation",
    "keywords": "Property MaxPerUser Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll MaxPerUser The maximum number of redemptions allowed per user per stream. [JsonPropertyName(\"max_per_user_per_stream\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public int? MaxPerUser { get; set; } Property Value int?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.Prompt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.Prompt.html",
    "title": "Property Prompt | AuxLabs.Twitch Documentation",
    "keywords": "Property Prompt Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Prompt The prompt shown to the viewer when they redeem the reward. [JsonPropertyName(\"prompt\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string Prompt { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.ShouldSkipRequestQueue.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.ShouldSkipRequestQueue.html",
    "title": "Property ShouldSkipRequestQueue | AuxLabs.Twitch Documentation",
    "keywords": "Property ShouldSkipRequestQueue Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ShouldSkipRequestQueue Determines whether redemptions should be set to fulfilled status immediately when a reward is redeemed. [JsonPropertyName(\"should_redemptions_skip_request_queue\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public bool? ShouldSkipRequestQueue { get; set; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.Title.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Title The custom reward’s title. [JsonPropertyName(\"title\")] public string Title { get; set; } Property Value string Remarks The title may contain a maximum of 45 characters and it must be unique amongst all of the broadcaster’s custom rewards."
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostRewardBody.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostSegmentArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostSegmentArgs.-ctor.html",
    "title": "Constructor PostSegmentArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor PostSegmentArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll PostSegmentArgs() public PostSegmentArgs() PostSegmentArgs(string) public PostSegmentArgs(string broadcasterId) Parameters broadcasterId string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostSegmentArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostSegmentArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster that owns the schedule to add the broadcast segment to. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostSegmentArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostSegmentArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostSegmentArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostSegmentArgs.html",
    "title": "Class PostSegmentArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PostSegmentArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostSegmentArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap PostSegmentArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PostSegmentArgs() PostSegmentArgs(string) Properties BroadcasterId The ID of the broadcaster that owns the schedule to add the broadcast segment to. Scopes The scopes required for this request. Methods CreateQueryMap() ToString() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>) Operators implicit operator string(PostSegmentArgs) implicit operator PostSegmentArgs(string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostSegmentArgs.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostSegmentArgs.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator string(PostSegmentArgs) public static implicit operator string(PostSegmentArgs value) Parameters value PostSegmentArgs Returns string implicit operator PostSegmentArgs(string) public static implicit operator PostSegmentArgs(string v) Parameters v string Returns PostSegmentArgs"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostSegmentArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostSegmentArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostSegmentArgs.ToString.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostSegmentArgs.ToString.html",
    "title": "Method ToString | AuxLabs.Twitch Documentation",
    "keywords": "Method ToString Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ToString() public override string ToString() Returns string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostSegmentArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostSegmentArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostSegmentBody.CategoryId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostSegmentBody.CategoryId.html",
    "title": "Property CategoryId | AuxLabs.Twitch Documentation",
    "keywords": "Property CategoryId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CategoryId The ID of the category that best represents the broadcast’s content. [JsonPropertyName(\"category_id\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string CategoryId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostSegmentBody.DurationMinutes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostSegmentBody.DurationMinutes.html",
    "title": "Property DurationMinutes | AuxLabs.Twitch Documentation",
    "keywords": "Property DurationMinutes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll DurationMinutes The length of time that the broadcast is scheduled to run. [JsonPropertyName(\"duration\")] public string DurationMinutes { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostSegmentBody.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostSegmentBody.html",
    "title": "Class PostSegmentBody | AuxLabs.Twitch Documentation",
    "keywords": "Class PostSegmentBody Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostSegmentBody Inheritance object PostSegmentBody Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CategoryId The ID of the category that best represents the broadcast’s content. DurationMinutes The length of time that the broadcast is scheduled to run. IsRecurring Determines whether the broadcast recurs weekly. StartsAt The date and time that the broadcast segment starts. Timezone The time zone that the broadcaster broadcasts from. Title The broadcast’s title. Methods Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostSegmentBody.IsRecurring.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostSegmentBody.IsRecurring.html",
    "title": "Property IsRecurring | AuxLabs.Twitch Documentation",
    "keywords": "Property IsRecurring Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll IsRecurring Determines whether the broadcast recurs weekly. [JsonPropertyName(\"is_recurring\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public bool? IsRecurring { get; set; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostSegmentBody.StartsAt.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostSegmentBody.StartsAt.html",
    "title": "Property StartsAt | AuxLabs.Twitch Documentation",
    "keywords": "Property StartsAt Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll StartsAt The date and time that the broadcast segment starts. [JsonPropertyName(\"start_time\")] public DateTime StartsAt { get; set; } Property Value DateTime"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostSegmentBody.Timezone.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostSegmentBody.Timezone.html",
    "title": "Property Timezone | AuxLabs.Twitch Documentation",
    "keywords": "Property Timezone Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Timezone The time zone that the broadcaster broadcasts from. [JsonPropertyName(\"timezone\")] public string Timezone { get; set; } Property Value string Remarks Specify the time zone using IANA time zone database format"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostSegmentBody.Title.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostSegmentBody.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Title The broadcast’s title. [JsonPropertyName(\"title\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string Title { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostSegmentBody.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostSegmentBody.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostShoutoutArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostShoutoutArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostShoutoutArgs.FromBroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostShoutoutArgs.FromBroadcasterId.html",
    "title": "Property FromBroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property FromBroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll FromBroadcasterId The ID of the broadcaster that’s sending the Shoutout. public string FromBroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostShoutoutArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostShoutoutArgs.html",
    "title": "Class PostShoutoutArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PostShoutoutArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostShoutoutArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap PostShoutoutArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FromBroadcasterId The ID of the broadcaster that’s sending the Shoutout. ModeratorId The ID of the broadcaster or a user that is one of the broadcaster’s moderators. Scopes The scopes required for this request. ToBroadcasterId The ID of the broadcaster that’s receiving the Shoutout. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostShoutoutArgs.ModeratorId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostShoutoutArgs.ModeratorId.html",
    "title": "Property ModeratorId | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorId The ID of the broadcaster or a user that is one of the broadcaster’s moderators. public string ModeratorId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostShoutoutArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostShoutoutArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostShoutoutArgs.ToBroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostShoutoutArgs.ToBroadcasterId.html",
    "title": "Property ToBroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property ToBroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ToBroadcasterId The ID of the broadcaster that’s receiving the Shoutout. public string ToBroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostShoutoutArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostShoutoutArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostUserAccessTokenArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostUserAccessTokenArgs.-ctor.html",
    "title": "Constructor PostUserAccessTokenArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor PostUserAccessTokenArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll PostUserAccessTokenArgs() public PostUserAccessTokenArgs()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostUserAccessTokenArgs.AuthorizationCode.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostUserAccessTokenArgs.AuthorizationCode.html",
    "title": "Property AuthorizationCode | AuxLabs.Twitch Documentation",
    "keywords": "Property AuthorizationCode Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll AuthorizationCode The code that the /authorize response returned in the code query parameter. public string AuthorizationCode { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostUserAccessTokenArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostUserAccessTokenArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostUserAccessTokenArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostUserAccessTokenArgs.html",
    "title": "Class PostUserAccessTokenArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PostUserAccessTokenArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostUserAccessTokenArgs : PostAppAccessTokenArgs, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Inheritance object QueryMap PostAppAccessTokenArgs PostUserAccessTokenArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members PostAppAccessTokenArgs.ClientId PostAppAccessTokenArgs.ClientSecret PostAppAccessTokenArgs.GrantType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PostUserAccessTokenArgs() Properties AuthorizationCode The code that the /authorize response returned in the code query parameter. RedirectUri Your app’s registered redirect URI. Methods CreateQueryMap() Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostUserAccessTokenArgs.RedirectUri.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostUserAccessTokenArgs.RedirectUri.html",
    "title": "Property RedirectUri | AuxLabs.Twitch Documentation",
    "keywords": "Property RedirectUri Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll RedirectUri Your app’s registered redirect URI. public string RedirectUri { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostUserAccessTokenArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostUserAccessTokenArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public override void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostWhisperArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostWhisperArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostWhisperArgs.FromUserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostWhisperArgs.FromUserId.html",
    "title": "Property FromUserId | AuxLabs.Twitch Documentation",
    "keywords": "Property FromUserId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll FromUserId The ID of the user sending the whisper. public string FromUserId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostWhisperArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostWhisperArgs.html",
    "title": "Class PostWhisperArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PostWhisperArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostWhisperArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap PostWhisperArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FromUserId The ID of the user sending the whisper. Scopes The scopes required for this request. ToUserId The ID of the user to receive the whisper. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostWhisperArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostWhisperArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostWhisperArgs.ToUserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostWhisperArgs.ToUserId.html",
    "title": "Property ToUserId | AuxLabs.Twitch Documentation",
    "keywords": "Property ToUserId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ToUserId The ID of the user to receive the whisper. public string ToUserId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostWhisperArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostWhisperArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostWhisperBody.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostWhisperBody.-ctor.html",
    "title": "Constructor PostWhisperBody | AuxLabs.Twitch Documentation",
    "keywords": "Constructor PostWhisperBody Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll PostWhisperBody() public PostWhisperBody() PostWhisperBody(string) public PostWhisperBody(string message) Parameters message string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostWhisperBody.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostWhisperBody.html",
    "title": "Class PostWhisperBody | AuxLabs.Twitch Documentation",
    "keywords": "Class PostWhisperBody Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PostWhisperBody Inheritance object PostWhisperBody Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PostWhisperBody() PostWhisperBody(string) Properties Message Methods ToString() Validate() Operators implicit operator string(PostWhisperBody) implicit operator PostWhisperBody(string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostWhisperBody.Message.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostWhisperBody.Message.html",
    "title": "Property Message | AuxLabs.Twitch Documentation",
    "keywords": "Property Message Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Message [JsonPropertyName(\"message\")] public string Message { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostWhisperBody.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostWhisperBody.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator string(PostWhisperBody) public static implicit operator string(PostWhisperBody value) Parameters value PostWhisperBody Returns string implicit operator PostWhisperBody(string) public static implicit operator PostWhisperBody(string v) Parameters v string Returns PostWhisperBody"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostWhisperBody.ToString.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostWhisperBody.ToString.html",
    "title": "Method ToString | AuxLabs.Twitch Documentation",
    "keywords": "Method ToString Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ToString() public override string ToString() Returns string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PostWhisperBody.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PostWhisperBody.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PredictionEndSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PredictionEndSubscription.-ctor.html",
    "title": "Constructor PredictionEndSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor PredictionEndSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll PredictionEndSubscription(string, string) public PredictionEndSubscription(string channelId, string sessionId) Parameters channelId string sessionId string PredictionEndSubscription(string, string, string) public PredictionEndSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PredictionEndSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PredictionEndSubscription.html",
    "title": "Class PredictionEndSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class PredictionEndSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PredictionEndSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase PredictionEndSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PredictionEndSubscription(string, string, string) PredictionEndSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.PredictionEndSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PredictionEndSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PredictionLockSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PredictionLockSubscription.-ctor.html",
    "title": "Constructor PredictionLockSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor PredictionLockSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll PredictionLockSubscription(string, string) public PredictionLockSubscription(string channelId, string sessionId) Parameters channelId string sessionId string PredictionLockSubscription(string, string, string) public PredictionLockSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PredictionLockSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PredictionLockSubscription.html",
    "title": "Class PredictionLockSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class PredictionLockSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PredictionLockSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase PredictionLockSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PredictionLockSubscription(string, string, string) PredictionLockSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.PredictionLockSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PredictionLockSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PredictionProgressSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PredictionProgressSubscription.-ctor.html",
    "title": "Constructor PredictionProgressSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor PredictionProgressSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll PredictionProgressSubscription(string, string) public PredictionProgressSubscription(string channelId, string sessionId) Parameters channelId string sessionId string PredictionProgressSubscription(string, string, string) public PredictionProgressSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PredictionProgressSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PredictionProgressSubscription.html",
    "title": "Class PredictionProgressSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class PredictionProgressSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PredictionProgressSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase PredictionProgressSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PredictionProgressSubscription(string, string, string) PredictionProgressSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.PredictionProgressSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PredictionProgressSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PredictionStartSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PredictionStartSubscription.-ctor.html",
    "title": "Constructor PredictionStartSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor PredictionStartSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll PredictionStartSubscription(string, string) public PredictionStartSubscription(string channelId, string sessionId) Parameters channelId string sessionId string PredictionStartSubscription(string, string, string) public PredictionStartSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PredictionStartSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PredictionStartSubscription.html",
    "title": "Class PredictionStartSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class PredictionStartSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PredictionStartSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase PredictionStartSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PredictionStartSubscription(string, string, string) PredictionStartSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.PredictionStartSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PredictionStartSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody.Aggression.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody.Aggression.html",
    "title": "Property Aggression | AuxLabs.Twitch Documentation",
    "keywords": "Property Aggression Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Aggression The Automod level for hostility involving aggression. [JsonPropertyName(\"aggression\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public AutomodFilter? Aggression { get; set; } Property Value AutomodFilter?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody.Bullying.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody.Bullying.html",
    "title": "Property Bullying | AuxLabs.Twitch Documentation",
    "keywords": "Property Bullying Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Bullying The Automod level for hostility involving name calling or insults. [JsonPropertyName(\"bullying\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public AutomodFilter? Bullying { get; set; } Property Value AutomodFilter?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody.Disability.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody.Disability.html",
    "title": "Property Disability | AuxLabs.Twitch Documentation",
    "keywords": "Property Disability Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Disability The Automod level for discrimination against disability. [JsonPropertyName(\"disability\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public AutomodFilter? Disability { get; set; } Property Value AutomodFilter?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody.html",
    "title": "Class PutAutomodSettingsBody | AuxLabs.Twitch Documentation",
    "keywords": "Class PutAutomodSettingsBody Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PutAutomodSettingsBody Inheritance object PutAutomodSettingsBody Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Aggression The Automod level for hostility involving aggression. Bullying The Automod level for hostility involving name calling or insults. Disability The Automod level for discrimination against disability. Misogyny The Automod level for discrimination against women. OverallLevel The default AutoMod level for the broadcaster. RaceEthnicityOrReligion The Automod level for racial discrimination. SexBasedTerms The Automod level for sexual content. SexualitySexOrGender The AutoMod level for discrimination based on sexuality, sex, or gender. Swearing The Automod level for profanity."
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody.Misogyny.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody.Misogyny.html",
    "title": "Property Misogyny | AuxLabs.Twitch Documentation",
    "keywords": "Property Misogyny Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Misogyny The Automod level for discrimination against women. [JsonPropertyName(\"misogyny\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public AutomodFilter? Misogyny { get; set; } Property Value AutomodFilter?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody.OverallLevel.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody.OverallLevel.html",
    "title": "Property OverallLevel | AuxLabs.Twitch Documentation",
    "keywords": "Property OverallLevel Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll OverallLevel The default AutoMod level for the broadcaster. [JsonPropertyName(\"overall_level\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public AutomodFilter? OverallLevel { get; set; } Property Value AutomodFilter?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody.RaceEthnicityOrReligion.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody.RaceEthnicityOrReligion.html",
    "title": "Property RaceEthnicityOrReligion | AuxLabs.Twitch Documentation",
    "keywords": "Property RaceEthnicityOrReligion Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll RaceEthnicityOrReligion The Automod level for racial discrimination. [JsonPropertyName(\"race_ethnicity_or_religion\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public AutomodFilter? RaceEthnicityOrReligion { get; set; } Property Value AutomodFilter?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody.SexBasedTerms.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody.SexBasedTerms.html",
    "title": "Property SexBasedTerms | AuxLabs.Twitch Documentation",
    "keywords": "Property SexBasedTerms Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll SexBasedTerms The Automod level for sexual content. [JsonPropertyName(\"sex_based_terms\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public AutomodFilter? SexBasedTerms { get; set; } Property Value AutomodFilter?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody.SexualitySexOrGender.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody.SexualitySexOrGender.html",
    "title": "Property SexualitySexOrGender | AuxLabs.Twitch Documentation",
    "keywords": "Property SexualitySexOrGender Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll SexualitySexOrGender The AutoMod level for discrimination based on sexuality, sex, or gender. [JsonPropertyName(\"sexuality_sex_or_gender\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public AutomodFilter? SexualitySexOrGender { get; set; } Property Value AutomodFilter?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody.Swearing.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody.Swearing.html",
    "title": "Property Swearing | AuxLabs.Twitch Documentation",
    "keywords": "Property Swearing Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Swearing The Automod level for profanity. [JsonPropertyName(\"swearing\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public AutomodFilter? Swearing { get; set; } Property Value AutomodFilter?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutBlockArgs.Context.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutBlockArgs.Context.html",
    "title": "Property Context | AuxLabs.Twitch Documentation",
    "keywords": "Property Context Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Context The location where the harassment took place that is causing the brodcaster to block the user. public BlockContext? Context { get; set; } Property Value BlockContext?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutBlockArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutBlockArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutBlockArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutBlockArgs.html",
    "title": "Class PutBlockArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PutBlockArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PutBlockArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IScopedRequest Inheritance object QueryMap PutBlockArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Context The location where the harassment took place that is causing the brodcaster to block the user. Reason The reason that the broadcaster is blocking the user. Scopes The scopes required for this request. TargetUserId The ID of the user to block. Methods CreateQueryMap() Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutBlockArgs.Reason.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutBlockArgs.Reason.html",
    "title": "Property Reason | AuxLabs.Twitch Documentation",
    "keywords": "Property Reason Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Reason The reason that the broadcaster is blocking the user. public string Reason { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutBlockArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutBlockArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutBlockArgs.TargetUserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutBlockArgs.TargetUserId.html",
    "title": "Property TargetUserId | AuxLabs.Twitch Documentation",
    "keywords": "Property TargetUserId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll TargetUserId The ID of the user to block. public string TargetUserId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutBlockArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutBlockArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutPollBody.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutPollBody.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster that’s running the poll. [JsonPropertyName(\"broadcaster_id\")] public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutPollBody.ChannelPointsPerVote.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutPollBody.ChannelPointsPerVote.html",
    "title": "Property ChannelPointsPerVote | AuxLabs.Twitch Documentation",
    "keywords": "Property ChannelPointsPerVote Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ChannelPointsPerVote Optional. The number of points that the viewer must spend to cast one additional vote. [JsonPropertyName(\"channel_points_per_vote\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public int? ChannelPointsPerVote { get; set; } Property Value int?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutPollBody.Choices.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutPollBody.Choices.html",
    "title": "Property Choices | AuxLabs.Twitch Documentation",
    "keywords": "Property Choices Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Choices A list of choices that viewers may choose from. [JsonPropertyName(\"choices\")] public Title[] Choices { get; set; } Property Value Title[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutPollBody.DurationSeconds.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutPollBody.DurationSeconds.html",
    "title": "Property DurationSeconds | AuxLabs.Twitch Documentation",
    "keywords": "Property DurationSeconds Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll DurationSeconds The length of time that the poll will run for. [JsonPropertyName(\"duration\")] public int DurationSeconds { get; set; } Property Value int"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutPollBody.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutPollBody.html",
    "title": "Class PutPollBody | AuxLabs.Twitch Documentation",
    "keywords": "Class PutPollBody Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PutPollBody : IAgentRequest, IScopedRequest Inheritance object PutPollBody Implements IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the broadcaster that’s running the poll. ChannelPointsPerVote Optional. The number of points that the viewer must spend to cast one additional vote. Choices A list of choices that viewers may choose from. DurationSeconds The length of time that the poll will run for. IsChannelPointsVotingEnabled Optional. Indicates whether viewers may cast additional votes using Channel Points. Scopes The scopes required for this request. Title The question that viewers will vote on. Methods Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutPollBody.IsChannelPointsVotingEnabled.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutPollBody.IsChannelPointsVotingEnabled.html",
    "title": "Property IsChannelPointsVotingEnabled | AuxLabs.Twitch Documentation",
    "keywords": "Property IsChannelPointsVotingEnabled Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll IsChannelPointsVotingEnabled Optional. Indicates whether viewers may cast additional votes using Channel Points. [JsonPropertyName(\"channel_points_voting_enabled\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public bool? IsChannelPointsVotingEnabled { get; set; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutPollBody.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutPollBody.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutPollBody.Title.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutPollBody.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Title The question that viewers will vote on. [JsonPropertyName(\"title\")] public string Title { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutPollBody.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutPollBody.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutShieldModeArgs.BroadcasterId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutShieldModeArgs.BroadcasterId.html",
    "title": "Property BroadcasterId | AuxLabs.Twitch Documentation",
    "keywords": "Property BroadcasterId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll BroadcasterId The ID of the broadcaster that owns the chat room to remove messages from. public string BroadcasterId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutShieldModeArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutShieldModeArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutShieldModeArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutShieldModeArgs.html",
    "title": "Class PutShieldModeArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PutShieldModeArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PutShieldModeArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap PutShieldModeArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Derived GetShieldModeArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BroadcasterId The ID of the broadcaster that owns the chat room to remove messages from. ModeratorId The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutShieldModeArgs.ModeratorId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutShieldModeArgs.ModeratorId.html",
    "title": "Property ModeratorId | AuxLabs.Twitch Documentation",
    "keywords": "Property ModeratorId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ModeratorId The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. public string ModeratorId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutShieldModeArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutShieldModeArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutShieldModeArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutShieldModeArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutShieldModeBody.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutShieldModeBody.-ctor.html",
    "title": "Constructor PutShieldModeBody | AuxLabs.Twitch Documentation",
    "keywords": "Constructor PutShieldModeBody Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll PutShieldModeBody() public PutShieldModeBody() PutShieldModeBody(bool) public PutShieldModeBody(bool isActive) Parameters isActive bool"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutShieldModeBody.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutShieldModeBody.html",
    "title": "Class PutShieldModeBody | AuxLabs.Twitch Documentation",
    "keywords": "Class PutShieldModeBody Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PutShieldModeBody Inheritance object PutShieldModeBody Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PutShieldModeBody() PutShieldModeBody(bool) Properties IsActive Determines whether to activate Shield Mode. Operators implicit operator bool(PutShieldModeBody) implicit operator PutShieldModeBody(bool)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutShieldModeBody.IsActive.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutShieldModeBody.IsActive.html",
    "title": "Property IsActive | AuxLabs.Twitch Documentation",
    "keywords": "Property IsActive Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll IsActive Determines whether to activate Shield Mode. [JsonPropertyName(\"is_active\")] public bool IsActive { get; set; } Property Value bool"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutShieldModeBody.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutShieldModeBody.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator bool(PutShieldModeBody) public static implicit operator bool(PutShieldModeBody value) Parameters value PutShieldModeBody Returns bool implicit operator PutShieldModeBody(bool) public static implicit operator PutShieldModeBody(bool v) Parameters v bool Returns PutShieldModeBody"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutUserArgs.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutUserArgs.-ctor.html",
    "title": "Constructor PutUserArgs | AuxLabs.Twitch Documentation",
    "keywords": "Constructor PutUserArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll PutUserArgs() public PutUserArgs() PutUserArgs(string) public PutUserArgs(string description) Parameters description string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutUserArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutUserArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutUserArgs.Description.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutUserArgs.Description.html",
    "title": "Property Description | AuxLabs.Twitch Documentation",
    "keywords": "Property Description Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Description The string to update the channel’s description to. public string Description { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutUserArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutUserArgs.html",
    "title": "Class PutUserArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PutUserArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PutUserArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IScopedRequest Inheritance object QueryMap PutUserArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PutUserArgs() PutUserArgs(string) Properties Description The string to update the channel’s description to. Scopes The scopes required for this request. Methods CreateQueryMap() Validate(IEnumerable<string>) Operators implicit operator string(PutUserArgs) implicit operator PutUserArgs(string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutUserArgs.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutUserArgs.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll implicit operator string(PutUserArgs) public static implicit operator string(PutUserArgs value) Parameters value PutUserArgs Returns string implicit operator PutUserArgs(string) public static implicit operator PutUserArgs(string v) Parameters v string Returns PutUserArgs"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutUserArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutUserArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutUserArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutUserArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutUserChatColorArgs.Color.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutUserChatColorArgs.Color.html",
    "title": "Property Color | AuxLabs.Twitch Documentation",
    "keywords": "Property Color Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Color The color to use for the user’s name in chat. public ChatColor? Color { get; set; } Property Value ChatColor?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutUserChatColorArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutUserChatColorArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutUserChatColorArgs.CustomColor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutUserChatColorArgs.CustomColor.html",
    "title": "Property CustomColor | AuxLabs.Twitch Documentation",
    "keywords": "Property CustomColor Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CustomColor Turbo and Prime users may specify a custom color. public Color? CustomColor { get; set; } Property Value Color?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutUserChatColorArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutUserChatColorArgs.html",
    "title": "Class PutUserChatColorArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class PutUserChatColorArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class PutUserChatColorArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IAgentRequest, IScopedRequest Inheritance object QueryMap PutUserChatColorArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IAgentRequest IScopedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Color The color to use for the user’s name in chat. CustomColor Turbo and Prime users may specify a custom color. Scopes The scopes required for this request. UserId The ID of the user whose chat color you want to update. Methods CreateQueryMap() Validate(IEnumerable<string>, string) Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutUserChatColorArgs.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutUserChatColorArgs.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutUserChatColorArgs.UserId.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutUserChatColorArgs.UserId.html",
    "title": "Property UserId | AuxLabs.Twitch Documentation",
    "keywords": "Property UserId Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll UserId The ID of the user whose chat color you want to update. public string UserId { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.PutUserChatColorArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.PutUserChatColorArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>, string) public void Validate(IEnumerable<string> scopes, string authedUserId) Parameters scopes IEnumerable<string> authedUserId string Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.RaidSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.RaidSubscription.-ctor.html",
    "title": "Constructor RaidSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor RaidSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll RaidSubscription(RaidConditionType, string, string) public RaidSubscription(RaidConditionType type, string channelId, string sessionId) Parameters type RaidConditionType channelId string sessionId string RaidSubscription(RaidConditionType, string, string, string) public RaidSubscription(RaidConditionType type, string channelId, string callback, string secret) Parameters type RaidConditionType channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.RaidSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.RaidSubscription.html",
    "title": "Class RaidSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class RaidSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class RaidSubscription : PostEventSubscriptionBody<RaidCondition> Inheritance object PostEventSubscriptionBody<RaidCondition> RaidSubscription Inherited Members PostEventSubscriptionBody<RaidCondition>.Type PostEventSubscriptionBody<RaidCondition>.Version PostEventSubscriptionBody<RaidCondition>.Condition PostEventSubscriptionBody<RaidCondition>.Transport PostEventSubscriptionBody<RaidCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RaidSubscription(RaidConditionType, string, string, string) RaidSubscription(RaidConditionType, string, string)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.RedemptionAddSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.RedemptionAddSubscription.-ctor.html",
    "title": "Constructor RedemptionAddSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor RedemptionAddSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll RedemptionAddSubscription(string, string, string) public RedemptionAddSubscription(string channelId, string rewardId, string sessionId) Parameters channelId string rewardId string sessionId string RedemptionAddSubscription(string, string, string, string) public RedemptionAddSubscription(string channelId, string rewardId, string callback, string secret) Parameters channelId string rewardId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.RedemptionAddSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.RedemptionAddSubscription.html",
    "title": "Class RedemptionAddSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class RedemptionAddSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class RedemptionAddSubscription : RewardSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<RewardCondition> RewardSubscriptionBase RedemptionAddSubscription Implements IScopedRequest Inherited Members RewardSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<RewardCondition>.Type PostEventSubscriptionBody<RewardCondition>.Version PostEventSubscriptionBody<RewardCondition>.Condition PostEventSubscriptionBody<RewardCondition>.Transport PostEventSubscriptionBody<RewardCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RedemptionAddSubscription(string, string, string, string) RedemptionAddSubscription(string, string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.RedemptionAddSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.RedemptionAddSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.RedemptionUpdateSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.RedemptionUpdateSubscription.-ctor.html",
    "title": "Constructor RedemptionUpdateSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor RedemptionUpdateSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll RedemptionUpdateSubscription(string, string, string) public RedemptionUpdateSubscription(string channelId, string rewardId, string sessionId) Parameters channelId string rewardId string sessionId string RedemptionUpdateSubscription(string, string, string, string) public RedemptionUpdateSubscription(string channelId, string rewardId, string callback, string secret) Parameters channelId string rewardId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.RedemptionUpdateSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.RedemptionUpdateSubscription.html",
    "title": "Class RedemptionUpdateSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class RedemptionUpdateSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class RedemptionUpdateSubscription : RewardSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<RewardCondition> RewardSubscriptionBase RedemptionUpdateSubscription Implements IScopedRequest Inherited Members RewardSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<RewardCondition>.Type PostEventSubscriptionBody<RewardCondition>.Version PostEventSubscriptionBody<RewardCondition>.Condition PostEventSubscriptionBody<RewardCondition>.Transport PostEventSubscriptionBody<RewardCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RedemptionUpdateSubscription(string, string, string, string) RedemptionUpdateSubscription(string, string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.RedemptionUpdateSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.RedemptionUpdateSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.RewardAddSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.RewardAddSubscription.-ctor.html",
    "title": "Constructor RewardAddSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor RewardAddSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll RewardAddSubscription(string, string) public RewardAddSubscription(string channelId, string sessionId) Parameters channelId string sessionId string RewardAddSubscription(string, string, string) public RewardAddSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.RewardAddSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.RewardAddSubscription.html",
    "title": "Class RewardAddSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class RewardAddSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class RewardAddSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase RewardAddSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RewardAddSubscription(string, string, string) RewardAddSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.RewardAddSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.RewardAddSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.RewardRemoveSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.RewardRemoveSubscription.-ctor.html",
    "title": "Constructor RewardRemoveSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor RewardRemoveSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll RewardRemoveSubscription(string, string, string) public RewardRemoveSubscription(string channelId, string rewardId, string sessionId) Parameters channelId string rewardId string sessionId string RewardRemoveSubscription(string, string, string, string) public RewardRemoveSubscription(string channelId, string rewardId, string callback, string secret) Parameters channelId string rewardId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.RewardRemoveSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.RewardRemoveSubscription.html",
    "title": "Class RewardRemoveSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class RewardRemoveSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class RewardRemoveSubscription : RewardSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<RewardCondition> RewardSubscriptionBase RewardRemoveSubscription Implements IScopedRequest Inherited Members RewardSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<RewardCondition>.Type PostEventSubscriptionBody<RewardCondition>.Version PostEventSubscriptionBody<RewardCondition>.Condition PostEventSubscriptionBody<RewardCondition>.Transport PostEventSubscriptionBody<RewardCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RewardRemoveSubscription(string, string, string, string) RewardRemoveSubscription(string, string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.RewardRemoveSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.RewardRemoveSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.RewardSubscriptionBase.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.RewardSubscriptionBase.-ctor.html",
    "title": "Constructor RewardSubscriptionBase | AuxLabs.Twitch Documentation",
    "keywords": "Constructor RewardSubscriptionBase Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll RewardSubscriptionBase(string, string, string) public RewardSubscriptionBase(string channelId, string rewardId, string sessionId) Parameters channelId string rewardId string sessionId string RewardSubscriptionBase(string, string, string, string) public RewardSubscriptionBase(string channelId, string rewardId, string callbackUrl, string secret) Parameters channelId string rewardId string callbackUrl string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.RewardSubscriptionBase.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.RewardSubscriptionBase.html",
    "title": "Class RewardSubscriptionBase | AuxLabs.Twitch Documentation",
    "keywords": "Class RewardSubscriptionBase Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public abstract class RewardSubscriptionBase : PostEventSubscriptionBody<RewardCondition>, IScopedRequest Inheritance object PostEventSubscriptionBody<RewardCondition> RewardSubscriptionBase Implements IScopedRequest Derived RedemptionAddSubscription RedemptionUpdateSubscription RewardRemoveSubscription RewardUpdateSubscription Inherited Members PostEventSubscriptionBody<RewardCondition>.Type PostEventSubscriptionBody<RewardCondition>.Version PostEventSubscriptionBody<RewardCondition>.Condition PostEventSubscriptionBody<RewardCondition>.Transport PostEventSubscriptionBody<RewardCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RewardSubscriptionBase(string, string, string, string) RewardSubscriptionBase(string, string, string) Properties Scopes The scopes required for this request. Methods Validate(IEnumerable<string>)"
  },
  "api/AuxLabs.Twitch.Rest.Requests.RewardSubscriptionBase.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.RewardSubscriptionBase.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public abstract string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.RewardSubscriptionBase.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.RewardSubscriptionBase.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate(IEnumerable<string>) public void Validate(IEnumerable<string> scopes) Parameters scopes IEnumerable<string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.RewardUpdateSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.RewardUpdateSubscription.-ctor.html",
    "title": "Constructor RewardUpdateSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor RewardUpdateSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll RewardUpdateSubscription(string, string, string) public RewardUpdateSubscription(string channelId, string rewardId, string sessionId) Parameters channelId string rewardId string sessionId string RewardUpdateSubscription(string, string, string, string) public RewardUpdateSubscription(string channelId, string rewardId, string callback, string secret) Parameters channelId string rewardId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.RewardUpdateSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.RewardUpdateSubscription.html",
    "title": "Class RewardUpdateSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class RewardUpdateSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class RewardUpdateSubscription : RewardSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<RewardCondition> RewardSubscriptionBase RewardUpdateSubscription Implements IScopedRequest Inherited Members RewardSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<RewardCondition>.Type PostEventSubscriptionBody<RewardCondition>.Version PostEventSubscriptionBody<RewardCondition>.Condition PostEventSubscriptionBody<RewardCondition>.Transport PostEventSubscriptionBody<RewardCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RewardUpdateSubscription(string, string, string, string) RewardUpdateSubscription(string, string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.RewardUpdateSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.RewardUpdateSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.SearchCategoriesArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.SearchCategoriesArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.SearchCategoriesArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.SearchCategoriesArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.SearchCategoriesArgs.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.SearchCategoriesArgs.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. public int? First { get; set; } Property Value int? Remarks The minimum value is 1 the maximum is 100, defaults to 1."
  },
  "api/AuxLabs.Twitch.Rest.Requests.SearchCategoriesArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.SearchCategoriesArgs.html",
    "title": "Class SearchCategoriesArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class SearchCategoriesArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class SearchCategoriesArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Inheritance object QueryMap SearchCategoriesArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. First The maximum number of items to return per page in the response. Query The search string. Methods CreateQueryMap() Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.SearchCategoriesArgs.Query.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.SearchCategoriesArgs.Query.html",
    "title": "Property Query | AuxLabs.Twitch Documentation",
    "keywords": "Property Query Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Query The search string. public string Query { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.SearchCategoriesArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.SearchCategoriesArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.SearchChannelsArgs.After.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.SearchChannelsArgs.After.html",
    "title": "Property After | AuxLabs.Twitch Documentation",
    "keywords": "Property After Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll After The cursor used to get the next page of results. public string After { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.SearchChannelsArgs.CreateQueryMap.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.SearchChannelsArgs.CreateQueryMap.html",
    "title": "Method CreateQueryMap | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateQueryMap Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll CreateQueryMap() public override IDictionary<string, string> CreateQueryMap() Returns IDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.Rest.Requests.SearchChannelsArgs.First.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.SearchChannelsArgs.First.html",
    "title": "Property First | AuxLabs.Twitch Documentation",
    "keywords": "Property First Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll First The maximum number of items to return per page in the response. public int? First { get; set; } Property Value int? Remarks The minimum value is 1 the maximum is 100, defaults to 1."
  },
  "api/AuxLabs.Twitch.Rest.Requests.SearchChannelsArgs.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.SearchChannelsArgs.html",
    "title": "Class SearchChannelsArgs | AuxLabs.Twitch Documentation",
    "keywords": "Class SearchChannelsArgs Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class SearchChannelsArgs : QueryMap, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, IPaginatedRequest Inheritance object QueryMap SearchChannelsArgs Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable IPaginatedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After The cursor used to get the next page of results. First The maximum number of items to return per page in the response. LiveOnly Determines whether the response includes only channels that are currently streaming live. Query The search string. Methods CreateQueryMap() Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.SearchChannelsArgs.LiveOnly.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.SearchChannelsArgs.LiveOnly.html",
    "title": "Property LiveOnly | AuxLabs.Twitch Documentation",
    "keywords": "Property LiveOnly Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll LiveOnly Determines whether the response includes only channels that are currently streaming live. public bool? LiveOnly { get; set; } Property Value bool?"
  },
  "api/AuxLabs.Twitch.Rest.Requests.SearchChannelsArgs.Query.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.SearchChannelsArgs.Query.html",
    "title": "Property Query | AuxLabs.Twitch Documentation",
    "keywords": "Property Query Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Query The search string. public string Query { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.SearchChannelsArgs.Validate.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.SearchChannelsArgs.Validate.html",
    "title": "Method Validate | AuxLabs.Twitch Documentation",
    "keywords": "Method Validate Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Validate() public void Validate()"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ShieldModeEndSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ShieldModeEndSubscription.-ctor.html",
    "title": "Constructor ShieldModeEndSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor ShieldModeEndSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ShieldModeEndSubscription(string, string, string) public ShieldModeEndSubscription(string channelId, string moderatorId, string sessionId) Parameters channelId string moderatorId string sessionId string ShieldModeEndSubscription(string, string, string, string) public ShieldModeEndSubscription(string channelId, string moderatorId, string callback, string secret) Parameters channelId string moderatorId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ShieldModeEndSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ShieldModeEndSubscription.html",
    "title": "Class ShieldModeEndSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class ShieldModeEndSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class ShieldModeEndSubscription : ModeratorSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<ModeratorCondition> ModeratorSubscriptionBase ShieldModeEndSubscription Implements IScopedRequest Inherited Members ModeratorSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<ModeratorCondition>.Type PostEventSubscriptionBody<ModeratorCondition>.Version PostEventSubscriptionBody<ModeratorCondition>.Condition PostEventSubscriptionBody<ModeratorCondition>.Transport PostEventSubscriptionBody<ModeratorCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ShieldModeEndSubscription(string, string, string, string) ShieldModeEndSubscription(string, string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.ShieldModeEndSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ShieldModeEndSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ShieldModeStartSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ShieldModeStartSubscription.-ctor.html",
    "title": "Constructor ShieldModeStartSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor ShieldModeStartSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ShieldModeStartSubscription(string, string, string) public ShieldModeStartSubscription(string channelId, string moderatorId, string sessionId) Parameters channelId string moderatorId string sessionId string ShieldModeStartSubscription(string, string, string, string) public ShieldModeStartSubscription(string channelId, string moderatorId, string callback, string secret) Parameters channelId string moderatorId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ShieldModeStartSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ShieldModeStartSubscription.html",
    "title": "Class ShieldModeStartSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class ShieldModeStartSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class ShieldModeStartSubscription : ModeratorSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<ModeratorCondition> ModeratorSubscriptionBase ShieldModeStartSubscription Implements IScopedRequest Inherited Members ModeratorSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<ModeratorCondition>.Type PostEventSubscriptionBody<ModeratorCondition>.Version PostEventSubscriptionBody<ModeratorCondition>.Condition PostEventSubscriptionBody<ModeratorCondition>.Transport PostEventSubscriptionBody<ModeratorCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ShieldModeStartSubscription(string, string, string, string) ShieldModeStartSubscription(string, string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.ShieldModeStartSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ShieldModeStartSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ShoutoutCreateSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ShoutoutCreateSubscription.-ctor.html",
    "title": "Constructor ShoutoutCreateSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor ShoutoutCreateSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ShoutoutCreateSubscription(string, string, string) public ShoutoutCreateSubscription(string channelId, string moderatorId, string sessionId) Parameters channelId string moderatorId string sessionId string ShoutoutCreateSubscription(string, string, string, string) public ShoutoutCreateSubscription(string channelId, string moderatorId, string callback, string secret) Parameters channelId string moderatorId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ShoutoutCreateSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ShoutoutCreateSubscription.html",
    "title": "Class ShoutoutCreateSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class ShoutoutCreateSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class ShoutoutCreateSubscription : ModeratorSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<ModeratorCondition> ModeratorSubscriptionBase ShoutoutCreateSubscription Implements IScopedRequest Inherited Members ModeratorSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<ModeratorCondition>.Type PostEventSubscriptionBody<ModeratorCondition>.Version PostEventSubscriptionBody<ModeratorCondition>.Condition PostEventSubscriptionBody<ModeratorCondition>.Transport PostEventSubscriptionBody<ModeratorCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ShoutoutCreateSubscription(string, string, string, string) ShoutoutCreateSubscription(string, string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.ShoutoutCreateSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ShoutoutCreateSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ShoutoutReceiveSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ShoutoutReceiveSubscription.-ctor.html",
    "title": "Constructor ShoutoutReceiveSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor ShoutoutReceiveSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll ShoutoutReceiveSubscription(string, string, string) public ShoutoutReceiveSubscription(string channelId, string moderatorId, string sessionId) Parameters channelId string moderatorId string sessionId string ShoutoutReceiveSubscription(string, string, string, string) public ShoutoutReceiveSubscription(string channelId, string moderatorId, string callback, string secret) Parameters channelId string moderatorId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.ShoutoutReceiveSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ShoutoutReceiveSubscription.html",
    "title": "Class ShoutoutReceiveSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class ShoutoutReceiveSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class ShoutoutReceiveSubscription : ModeratorSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<ModeratorCondition> ModeratorSubscriptionBase ShoutoutReceiveSubscription Implements IScopedRequest Inherited Members ModeratorSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<ModeratorCondition>.Type PostEventSubscriptionBody<ModeratorCondition>.Version PostEventSubscriptionBody<ModeratorCondition>.Condition PostEventSubscriptionBody<ModeratorCondition>.Transport PostEventSubscriptionBody<ModeratorCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ShoutoutReceiveSubscription(string, string, string, string) ShoutoutReceiveSubscription(string, string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.ShoutoutReceiveSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.ShoutoutReceiveSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.SubscribeSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.SubscribeSubscription.-ctor.html",
    "title": "Constructor SubscribeSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor SubscribeSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll SubscribeSubscription(string, string) public SubscribeSubscription(string channelId, string sessionId) Parameters channelId string sessionId string SubscribeSubscription(string, string, string) public SubscribeSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.SubscribeSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.SubscribeSubscription.html",
    "title": "Class SubscribeSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class SubscribeSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class SubscribeSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase SubscribeSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SubscribeSubscription(string, string, string) SubscribeSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.SubscribeSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.SubscribeSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.SubscriptionEndSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.SubscriptionEndSubscription.-ctor.html",
    "title": "Constructor SubscriptionEndSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor SubscriptionEndSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll SubscriptionEndSubscription(string, string) public SubscriptionEndSubscription(string channelId, string sessionId) Parameters channelId string sessionId string SubscriptionEndSubscription(string, string, string) public SubscriptionEndSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.SubscriptionEndSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.SubscriptionEndSubscription.html",
    "title": "Class SubscriptionEndSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class SubscriptionEndSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class SubscriptionEndSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase SubscriptionEndSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SubscriptionEndSubscription(string, string, string) SubscriptionEndSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.SubscriptionEndSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.SubscriptionEndSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.SubscriptionGiftSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.SubscriptionGiftSubscription.-ctor.html",
    "title": "Constructor SubscriptionGiftSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor SubscriptionGiftSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll SubscriptionGiftSubscription(string, string) public SubscriptionGiftSubscription(string channelId, string sessionId) Parameters channelId string sessionId string SubscriptionGiftSubscription(string, string, string) public SubscriptionGiftSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.SubscriptionGiftSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.SubscriptionGiftSubscription.html",
    "title": "Class SubscriptionGiftSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class SubscriptionGiftSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class SubscriptionGiftSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase SubscriptionGiftSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SubscriptionGiftSubscription(string, string, string) SubscriptionGiftSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.SubscriptionGiftSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.SubscriptionGiftSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.SubscriptionMessageSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.SubscriptionMessageSubscription.-ctor.html",
    "title": "Constructor SubscriptionMessageSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor SubscriptionMessageSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll SubscriptionMessageSubscription(string, string) public SubscriptionMessageSubscription(string channelId, string sessionId) Parameters channelId string sessionId string SubscriptionMessageSubscription(string, string, string) public SubscriptionMessageSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.SubscriptionMessageSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.SubscriptionMessageSubscription.html",
    "title": "Class SubscriptionMessageSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class SubscriptionMessageSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class SubscriptionMessageSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase SubscriptionMessageSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SubscriptionMessageSubscription(string, string, string) SubscriptionMessageSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.SubscriptionMessageSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.SubscriptionMessageSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.UnbanSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.UnbanSubscription.-ctor.html",
    "title": "Constructor UnbanSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor UnbanSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll UnbanSubscription(string, string) public UnbanSubscription(string channelId, string sessionId) Parameters channelId string sessionId string UnbanSubscription(string, string, string) public UnbanSubscription(string channelId, string callback, string secret) Parameters channelId string callback string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.UnbanSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.UnbanSubscription.html",
    "title": "Class UnbanSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class UnbanSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class UnbanSubscription : BroadcasterSubscriptionBase, IScopedRequest Inheritance object PostEventSubscriptionBody<BroadcasterCondition> BroadcasterSubscriptionBase UnbanSubscription Implements IScopedRequest Inherited Members BroadcasterSubscriptionBase.Validate(IEnumerable<string>) PostEventSubscriptionBody<BroadcasterCondition>.Type PostEventSubscriptionBody<BroadcasterCondition>.Version PostEventSubscriptionBody<BroadcasterCondition>.Condition PostEventSubscriptionBody<BroadcasterCondition>.Transport PostEventSubscriptionBody<BroadcasterCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UnbanSubscription(string, string, string) UnbanSubscription(string, string) Properties Scopes The scopes required for this request."
  },
  "api/AuxLabs.Twitch.Rest.Requests.UnbanSubscription.Scopes.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.UnbanSubscription.Scopes.html",
    "title": "Property Scopes | AuxLabs.Twitch Documentation",
    "keywords": "Property Scopes Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll Scopes The scopes required for this request. public override string[] Scopes { get; } Property Value string[]"
  },
  "api/AuxLabs.Twitch.Rest.Requests.UserUpdateSubscription.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.UserUpdateSubscription.-ctor.html",
    "title": "Constructor UserUpdateSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Constructor UserUpdateSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll UserUpdateSubscription(string, string) public UserUpdateSubscription(string userId, string sessionId) Parameters userId string sessionId string UserUpdateSubscription(string, string, string) public UserUpdateSubscription(string userId, string callbackUrl, string secret) Parameters userId string callbackUrl string secret string"
  },
  "api/AuxLabs.Twitch.Rest.Requests.UserUpdateSubscription.html": {
    "href": "api/AuxLabs.Twitch.Rest.Requests.UserUpdateSubscription.html",
    "title": "Class UserUpdateSubscription | AuxLabs.Twitch Documentation",
    "keywords": "Class UserUpdateSubscription Namespace AuxLabs.Twitch.Rest.Requests Assembly AuxLabs.Twitch.Rest.Api.dll public class UserUpdateSubscription : PostEventSubscriptionBody<UserCondition> Inheritance object PostEventSubscriptionBody<UserCondition> UserUpdateSubscription Inherited Members PostEventSubscriptionBody<UserCondition>.Type PostEventSubscriptionBody<UserCondition>.Version PostEventSubscriptionBody<UserCondition>.Condition PostEventSubscriptionBody<UserCondition>.Transport PostEventSubscriptionBody<UserCondition>.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserUpdateSubscription(string, string, string) UserUpdateSubscription(string, string)"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.-ctor.html",
    "title": "Constructor TwitchRestClient | AuxLabs.Twitch Documentation",
    "keywords": "Constructor TwitchRestClient Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll TwitchRestClient(TwitchRestConfig) public TwitchRestClient(TwitchRestConfig config = null) Parameters config TwitchRestConfig TwitchRestClient(string, TwitchRestConfig) public TwitchRestClient(string url, TwitchRestConfig config = null) Parameters url string config TwitchRestConfig"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.CreateClipAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.CreateClipAsync.html",
    "title": "Method CreateClipAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateClipAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll CreateClipAsync(string, bool, CancellationToken?) public Task<RestSimpleClip> CreateClipAsync(string channelId, bool withDelay = false, CancellationToken? cancelToken = null) Parameters channelId string The channel whose stream you want to create a clip for. withDelay bool cancelToken CancellationToken? Returns Task<RestSimpleClip>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.CreateEventSubscriptionAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.CreateEventSubscriptionAsync.html",
    "title": "Method CreateEventSubscriptionAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateEventSubscriptionAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll CreateEventSubscriptionAsync<TCondition>(Action<PostEventSubscriptionBody<TCondition>>) public Task<RestEventSubscription> CreateEventSubscriptionAsync<TCondition>(Action<PostEventSubscriptionBody<TCondition>> func) where TCondition : IEventCondition Parameters func Action<PostEventSubscriptionBody<TCondition>> Returns Task<RestEventSubscription> Type Parameters TCondition CreateEventSubscriptionAsync<TCondition>(PostEventSubscriptionBody<TCondition>) public Task<RestEventSubscription> CreateEventSubscriptionAsync<TCondition>(PostEventSubscriptionBody<TCondition> args) where TCondition : IEventCondition Parameters args PostEventSubscriptionBody<TCondition> Returns Task<RestEventSubscription> Type Parameters TCondition"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.CreateMarkerAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.CreateMarkerAsync.html",
    "title": "Method CreateMarkerAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method CreateMarkerAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll CreateMarkerAsync(string, CancellationToken?) public Task<RestMarker> CreateMarkerAsync(string description = null, CancellationToken? cancelToken = null) Parameters description string cancelToken CancellationToken? Returns Task<RestMarker>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.DeleteEventSubscriptionAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.DeleteEventSubscriptionAsync.html",
    "title": "Method DeleteEventSubscriptionAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method DeleteEventSubscriptionAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll DeleteEventSubscriptionAsync(string) public Task DeleteEventSubscriptionAsync(string subscriptionId) Parameters subscriptionId string Returns Task"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.Dispose.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.Dispose.html",
    "title": "Method Dispose | AuxLabs.Twitch Documentation",
    "keywords": "Method Dispose Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetBitsLeaderboardAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetBitsLeaderboardAsync.html",
    "title": "Method GetBitsLeaderboardAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetBitsLeaderboardAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetBitsLeaderboardAsync(string, DateTime?, BitsPeriod?, int, CancellationToken?) public Task<IReadOnlyCollection<RestBitsUser>> GetBitsLeaderboardAsync(string userId = null, DateTime? startAt = null, BitsPeriod? bitsPeriod = null, int count = 10, CancellationToken? cancelToken = null) Parameters userId string startAt DateTime? bitsPeriod BitsPeriod? count int cancelToken CancellationToken? Returns Task<IReadOnlyCollection<RestBitsUser>>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastByIdAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastByIdAsync.html",
    "title": "Method GetBroadcastByIdAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetBroadcastByIdAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetBroadcastByIdAsync(string) public Task<RestBroadcast> GetBroadcastByIdAsync(string channelId) Parameters channelId string Returns Task<RestBroadcast>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastByNameAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastByNameAsync.html",
    "title": "Method GetBroadcastByNameAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetBroadcastByNameAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetBroadcastByNameAsync(string) public Task<RestBroadcast> GetBroadcastByNameAsync(string channelName) Parameters channelName string Returns Task<RestBroadcast>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsAsync.html",
    "title": "Method GetBroadcastsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetBroadcastsAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetBroadcastsAsync(string[], string[], string[], string[], int, CancellationToken?) public IAsyncEnumerable<IReadOnlyCollection<RestBroadcast>> GetBroadcastsAsync(string[] userNames = null, string[] userIds = null, string[] gameIds = null, string[] languages = null, int count = 20, CancellationToken? cancelToken = null) Parameters userNames string[] userIds string[] gameIds string[] languages string[] count int cancelToken CancellationToken? Returns IAsyncEnumerable<IReadOnlyCollection<RestBroadcast>>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsByIdAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsByIdAsync.html",
    "title": "Method GetBroadcastsByIdAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetBroadcastsByIdAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetBroadcastsByIdAsync(params string[]) public Task<IReadOnlyCollection<RestBroadcast>> GetBroadcastsByIdAsync(params string[] channelIds) Parameters channelIds string[] Returns Task<IReadOnlyCollection<RestBroadcast>>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsByNameAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsByNameAsync.html",
    "title": "Method GetBroadcastsByNameAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetBroadcastsByNameAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetBroadcastsByNameAsync(params string[]) public Task<IReadOnlyCollection<RestBroadcast>> GetBroadcastsByNameAsync(params string[] channelNames) Parameters channelNames string[] Returns Task<IReadOnlyCollection<RestBroadcast>>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelAsync.html",
    "title": "Method GetChannelAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetChannelAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetChannelAsync(string) public Task<RestChannel> GetChannelAsync(string channelId) Parameters channelId string Returns Task<RestChannel>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelClipsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelClipsAsync.html",
    "title": "Method GetChannelClipsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetChannelClipsAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetChannelClipsAsync(string, DateTime?, DateTime?, int, CancellationToken?) public IAsyncEnumerable<IReadOnlyCollection<RestClip>> GetChannelClipsAsync(string channelId, DateTime? startAt = null, DateTime? endAt = null, int count = 20, CancellationToken? cancelToken = null) Parameters channelId string startAt DateTime? endAt DateTime? count int cancelToken CancellationToken? Returns IAsyncEnumerable<IReadOnlyCollection<RestClip>>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelEditors.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelEditors.html",
    "title": "Method GetChannelEditors | AuxLabs.Twitch Documentation",
    "keywords": "Method GetChannelEditors Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetChannelEditors(string) public Task<IReadOnlyCollection<RestEditor>> GetChannelEditors(string channelId) Parameters channelId string Returns Task<IReadOnlyCollection<RestEditor>>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelsAsync.html",
    "title": "Method GetChannelsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetChannelsAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetChannelsAsync(params string[]) public Task<IReadOnlyCollection<RestChannel>> GetChannelsAsync(params string[] channelIds) Parameters channelIds string[] Returns Task<IReadOnlyCollection<RestChannel>>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetChatSettingsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetChatSettingsAsync.html",
    "title": "Method GetChatSettingsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetChatSettingsAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetChatSettingsAsync(string, CancellationToken?) public Task<ChatSettings> GetChatSettingsAsync(string channelId, CancellationToken? cancelToken = null) Parameters channelId string cancelToken CancellationToken? Returns Task<ChatSettings>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetChattersAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetChattersAsync.html",
    "title": "Method GetChattersAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetChattersAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetChattersAsync(string, int, CancellationToken?) public IAsyncEnumerable<IReadOnlyCollection<RestSimpleUser>> GetChattersAsync(string channelId, int count = 20, CancellationToken? cancelToken = null) Parameters channelId string count int cancelToken CancellationToken? Returns IAsyncEnumerable<IReadOnlyCollection<RestSimpleUser>>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetCheermotesAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetCheermotesAsync.html",
    "title": "Method GetCheermotesAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetCheermotesAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetCheermotesAsync(string) public Task<IReadOnlyCollection<Cheermote>> GetCheermotesAsync(string broadcasterId = null) Parameters broadcasterId string Returns Task<IReadOnlyCollection<Cheermote>>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetClipAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetClipAsync.html",
    "title": "Method GetClipAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetClipAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetClipAsync(string, CancellationToken?) public Task<RestClip> GetClipAsync(string clipId, CancellationToken? cancelToken = null) Parameters clipId string cancelToken CancellationToken? Returns Task<RestClip> GetClipAsync(params string[]) public Task<IReadOnlyCollection<RestClip>> GetClipAsync(params string[] clipIds) Parameters clipIds string[] Returns Task<IReadOnlyCollection<RestClip>>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetClipsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetClipsAsync.html",
    "title": "Method GetClipsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetClipsAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetClipsAsync(string[], CancellationToken?) public Task<IReadOnlyCollection<RestClip>> GetClipsAsync(string[] clipIds, CancellationToken? cancelToken = null) Parameters clipIds string[] cancelToken CancellationToken? Returns Task<IReadOnlyCollection<RestClip>>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetEmotesAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetEmotesAsync.html",
    "title": "Method GetEmotesAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetEmotesAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetEmotesAsync(CancellationToken?) public Task<IReadOnlyCollection<RestGlobalEmote>> GetEmotesAsync(CancellationToken? cancelToken = null) Parameters cancelToken CancellationToken? Returns Task<IReadOnlyCollection<RestGlobalEmote>> GetEmotesAsync(string, CancellationToken?) public Task<IReadOnlyCollection<RestEmote>> GetEmotesAsync(string channelId, CancellationToken? cancelToken = null) Parameters channelId string cancelToken CancellationToken? Returns Task<IReadOnlyCollection<RestEmote>>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetAsync.html",
    "title": "Method GetEmoteSetAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetEmoteSetAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetEmoteSetAsync(string, CancellationToken?) public Task<IReadOnlyCollection<RestEmote>> GetEmoteSetAsync(string emoteSetId, CancellationToken? cancelToken = null) Parameters emoteSetId string cancelToken CancellationToken? Returns Task<IReadOnlyCollection<RestEmote>>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetsAsync.html",
    "title": "Method GetEmoteSetsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetEmoteSetsAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetEmoteSetsAsync(params string[]) public Task<IReadOnlyCollection<RestEmote>> GetEmoteSetsAsync(params string[] emoteSetIds) Parameters emoteSetIds string[] Returns Task<IReadOnlyCollection<RestEmote>> GetEmoteSetsAsync(string[], CancellationToken?) public Task<IReadOnlyCollection<RestEmote>> GetEmoteSetsAsync(string[] emoteSetIds, CancellationToken? cancelToken = null) Parameters emoteSetIds string[] cancelToken CancellationToken? Returns Task<IReadOnlyCollection<RestEmote>>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetEventSubscriptionsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetEventSubscriptionsAsync.html",
    "title": "Method GetEventSubscriptionsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetEventSubscriptionsAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetEventSubscriptionsAsync(string, EventSubStatus?, EventSubType?) public Task<IReadOnlyCollection<RestEventSubscription>> GetEventSubscriptionsAsync(string userId = null, EventSubStatus? status = null, EventSubType? type = null) Parameters userId string status EventSubStatus? type EventSubType? Returns Task<IReadOnlyCollection<RestEventSubscription>>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionAnalyticAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionAnalyticAsync.html",
    "title": "Method GetExtensionAnalyticAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetExtensionAnalyticAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetExtensionAnalyticAsync(string, DateTime?, DateTime?, CancellationToken?) public Task<ExtensionAnalytic> GetExtensionAnalyticAsync(string extensionId, DateTime? startAt = null, DateTime? endAt = null, CancellationToken? cancelToken = null) Parameters extensionId string startAt DateTime? endAt DateTime? cancelToken CancellationToken? Returns Task<ExtensionAnalytic>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionAnalyticsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionAnalyticsAsync.html",
    "title": "Method GetExtensionAnalyticsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetExtensionAnalyticsAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetExtensionAnalyticsAsync(string, DateTime?, DateTime?, int, CancellationToken?) public IAsyncEnumerable<IReadOnlyCollection<ExtensionAnalytic>> GetExtensionAnalyticsAsync(string extensionId = null, DateTime? startAt = null, DateTime? endAt = null, int count = 20, CancellationToken? cancelToken = null) Parameters extensionId string startAt DateTime? endAt DateTime? count int cancelToken CancellationToken? Returns IAsyncEnumerable<IReadOnlyCollection<ExtensionAnalytic>>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionTransactionsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionTransactionsAsync.html",
    "title": "Method GetExtensionTransactionsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetExtensionTransactionsAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetExtensionTransactionsAsync(string, int) public Task<IReadOnlyCollection<RestExtensionTransaction>> GetExtensionTransactionsAsync(string extensionId, int count = 20) Parameters extensionId string count int Returns Task<IReadOnlyCollection<RestExtensionTransaction>> GetExtensionTransactionsAsync(string, int, params string[]) public Task<IReadOnlyCollection<RestExtensionTransaction>> GetExtensionTransactionsAsync(string extensionId, int count = 20, params string[] transactionIds) Parameters extensionId string count int transactionIds string[] Returns Task<IReadOnlyCollection<RestExtensionTransaction>>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowedBroadcastsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowedBroadcastsAsync.html",
    "title": "Method GetFollowedBroadcastsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetFollowedBroadcastsAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetFollowedBroadcastsAsync(int, CancellationToken?) public IAsyncEnumerable<IReadOnlyCollection<RestBroadcast>> GetFollowedBroadcastsAsync(int count = 20, CancellationToken? cancelToken = null) Parameters count int cancelToken CancellationToken? Returns IAsyncEnumerable<IReadOnlyCollection<RestBroadcast>>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowedChannelAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowedChannelAsync.html",
    "title": "Method GetFollowedChannelAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetFollowedChannelAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetFollowedChannelAsync(string) public Task<RestFollowUser> GetFollowedChannelAsync(string broadcasterId) Parameters broadcasterId string Returns Task<RestFollowUser>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowedChannelsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowedChannelsAsync.html",
    "title": "Method GetFollowedChannelsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetFollowedChannelsAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetFollowedChannelsAsync(int, CancellationToken?) public IAsyncEnumerable<IReadOnlyCollection<RestFollowUser>> GetFollowedChannelsAsync(int count = 20, CancellationToken? cancelToken = null) Parameters count int cancelToken CancellationToken? Returns IAsyncEnumerable<IReadOnlyCollection<RestFollowUser>>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowerAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowerAsync.html",
    "title": "Method GetFollowerAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetFollowerAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetFollowerAsync(string) public Task<RestFollowUser> GetFollowerAsync(string userId) Parameters userId string Returns Task<RestFollowUser>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowersAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowersAsync.html",
    "title": "Method GetFollowersAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetFollowersAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetFollowersAsync(int, CancellationToken?) public IAsyncEnumerable<IReadOnlyCollection<RestFollowUser>> GetFollowersAsync(int count = 20, CancellationToken? cancelToken = null) Parameters count int cancelToken CancellationToken? Returns IAsyncEnumerable<IReadOnlyCollection<RestFollowUser>>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetGameAnalyticAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetGameAnalyticAsync.html",
    "title": "Method GetGameAnalyticAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetGameAnalyticAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetGameAnalyticAsync(string, DateTime?, DateTime?, CancellationToken?) public Task<GameAnalytic> GetGameAnalyticAsync(string gameId, DateTime? startAt = null, DateTime? endAt = null, CancellationToken? cancelToken = null) Parameters gameId string startAt DateTime? endAt DateTime? cancelToken CancellationToken? Returns Task<GameAnalytic>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetGameAnalyticsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetGameAnalyticsAsync.html",
    "title": "Method GetGameAnalyticsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetGameAnalyticsAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetGameAnalyticsAsync(string, DateTime?, DateTime?, int, CancellationToken?) public IAsyncEnumerable<IReadOnlyCollection<GameAnalytic>> GetGameAnalyticsAsync(string gameId = null, DateTime? startAt = null, DateTime? endAt = null, int count = 20, CancellationToken? cancelToken = null) Parameters gameId string startAt DateTime? endAt DateTime? count int cancelToken CancellationToken? Returns IAsyncEnumerable<IReadOnlyCollection<GameAnalytic>>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetGameClipsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetGameClipsAsync.html",
    "title": "Method GetGameClipsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetGameClipsAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetGameClipsAsync(string, DateTime?, DateTime?, int, CancellationToken?) public IAsyncEnumerable<IReadOnlyCollection<RestClip>> GetGameClipsAsync(string gameId, DateTime? startAt = null, DateTime? endAt = null, int count = 20, CancellationToken? cancelToken = null) Parameters gameId string startAt DateTime? endAt DateTime? count int cancelToken CancellationToken? Returns IAsyncEnumerable<IReadOnlyCollection<RestClip>>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetMarkersAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetMarkersAsync.html",
    "title": "Method GetMarkersAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetMarkersAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetMarkersAsync(string, string, int, CancellationToken?) public IAsyncEnumerable<IReadOnlyCollection<RestMarker>> GetMarkersAsync(string channelId, string videoId, int count = 20, CancellationToken? cancelToken = null) Parameters channelId string videoId string count int cancelToken CancellationToken? Returns IAsyncEnumerable<IReadOnlyCollection<RestMarker>>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetMyChannelAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetMyChannelAsync.html",
    "title": "Method GetMyChannelAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetMyChannelAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetMyChannelAsync() public Task<RestChannel> GetMyChannelAsync() Returns Task<RestChannel>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetMyUserAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetMyUserAsync.html",
    "title": "Method GetMyUserAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetMyUserAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetMyUserAsync() public Task<RestSelfUser> GetMyUserAsync() Returns Task<RestSelfUser>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetStreamKeyAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetStreamKeyAsync.html",
    "title": "Method GetStreamKeyAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetStreamKeyAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetStreamKeyAsync() public Task<string> GetStreamKeyAsync() Returns Task<string>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetUserByIdAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetUserByIdAsync.html",
    "title": "Method GetUserByIdAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetUserByIdAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetUserByIdAsync(string) public Task<RestUser> GetUserByIdAsync(string id) Parameters id string Returns Task<RestUser>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetUserByNameAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetUserByNameAsync.html",
    "title": "Method GetUserByNameAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetUserByNameAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetUserByNameAsync(string) public Task<RestUser> GetUserByNameAsync(string username) Parameters username string Returns Task<RestUser>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorAsync.html",
    "title": "Method GetUserChatColorAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetUserChatColorAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetUserChatColorAsync(string, CancellationToken?) public Task<RestChatUser> GetUserChatColorAsync(string userId, CancellationToken? cancelToken = null) Parameters userId string cancelToken CancellationToken? Returns Task<RestChatUser>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorsAsync.html",
    "title": "Method GetUserChatColorsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetUserChatColorsAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetUserChatColorsAsync(params string[]) public Task<IReadOnlyCollection<RestChatUser>> GetUserChatColorsAsync(params string[] userIds) Parameters userIds string[] Returns Task<IReadOnlyCollection<RestChatUser>> GetUserChatColorsAsync(string[], CancellationToken?) public Task<IReadOnlyCollection<RestChatUser>> GetUserChatColorsAsync(string[] userIds, CancellationToken? cancelToken = null) Parameters userIds string[] cancelToken CancellationToken? Returns Task<IReadOnlyCollection<RestChatUser>>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetUsersByIdAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetUsersByIdAsync.html",
    "title": "Method GetUsersByIdAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetUsersByIdAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetUsersByIdAsync(params string[]) public Task<IReadOnlyCollection<RestUser>> GetUsersByIdAsync(params string[] userIds) Parameters userIds string[] Returns Task<IReadOnlyCollection<RestUser>>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetUsersByNameAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.GetUsersByNameAsync.html",
    "title": "Method GetUsersByNameAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method GetUsersByNameAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll GetUsersByNameAsync(params string[]) public Task<IReadOnlyCollection<RestUser>> GetUsersByNameAsync(params string[] userNames) Parameters userNames string[] Returns Task<IReadOnlyCollection<RestUser>>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.html",
    "title": "Class TwitchRestClient | AuxLabs.Twitch Documentation",
    "keywords": "Class TwitchRestClient Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll public class TwitchRestClient : IDisposable Inheritance object TwitchRestClient Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TwitchRestClient(TwitchRestConfig) TwitchRestClient(string, TwitchRestConfig) Properties Identity MyChannel MyUser Methods CreateClipAsync(string, bool, CancellationToken?) CreateEventSubscriptionAsync<TCondition>(PostEventSubscriptionBody<TCondition>) CreateEventSubscriptionAsync<TCondition>(Action<PostEventSubscriptionBody<TCondition>>) CreateMarkerAsync(string, CancellationToken?) DeleteEventSubscriptionAsync(string) Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Dispose(bool) GetBitsLeaderboardAsync(string, DateTime?, BitsPeriod?, int, CancellationToken?) GetBroadcastByIdAsync(string) GetBroadcastByNameAsync(string) GetBroadcastsAsync(string[], string[], string[], string[], int, CancellationToken?) GetBroadcastsByIdAsync(params string[]) GetBroadcastsByNameAsync(params string[]) GetChannelAsync(string) GetChannelClipsAsync(string, DateTime?, DateTime?, int, CancellationToken?) GetChannelEditors(string) GetChannelsAsync(params string[]) GetChatSettingsAsync(string, CancellationToken?) GetChattersAsync(string, int, CancellationToken?) GetCheermotesAsync(string) GetClipAsync(string, CancellationToken?) GetClipAsync(params string[]) GetClipsAsync(string[], CancellationToken?) GetEmotesAsync(CancellationToken?) GetEmotesAsync(string, CancellationToken?) GetEmoteSetAsync(string, CancellationToken?) GetEmoteSetsAsync(string[], CancellationToken?) GetEmoteSetsAsync(params string[]) GetEventSubscriptionsAsync(string, EventSubStatus?, EventSubType?) GetExtensionAnalyticAsync(string, DateTime?, DateTime?, CancellationToken?) GetExtensionAnalyticsAsync(string, DateTime?, DateTime?, int, CancellationToken?) GetExtensionTransactionsAsync(string, int, params string[]) GetExtensionTransactionsAsync(string, int) GetFollowedBroadcastsAsync(int, CancellationToken?) GetFollowedChannelAsync(string) GetFollowedChannelsAsync(int, CancellationToken?) GetFollowerAsync(string) GetFollowersAsync(int, CancellationToken?) GetGameAnalyticAsync(string, DateTime?, DateTime?, CancellationToken?) GetGameAnalyticsAsync(string, DateTime?, DateTime?, int, CancellationToken?) GetGameClipsAsync(string, DateTime?, DateTime?, int, CancellationToken?) GetMarkersAsync(string, string, int, CancellationToken?) GetMyChannelAsync() GetMyUserAsync() GetStreamKeyAsync() GetUserByIdAsync(string) GetUserByNameAsync(string) GetUserChatColorAsync(string, CancellationToken?) GetUserChatColorsAsync(string[], CancellationToken?) GetUserChatColorsAsync(params string[]) GetUsersByIdAsync(params string[]) GetUsersByNameAsync(params string[]) ModifyChatSettingsAsync(string, Action<PatchChatSettingsBody>, CancellationToken?) ModifyMyColorAsync(ChatColor, CancellationToken?) ModifyMyColorAsync(Color, CancellationToken?) ModifyMyUserAsync(string) SendAnnouncementAsync(string, string, AnnouncementColor?, CancellationToken?) SendShoutoutAsync(string, string, CancellationToken?) StartCommercialAsync(int, CancellationToken?) Starts a commercial on the currently authorized user's channel. UpdateMyChannelAsync(Action<PatchChannelBody>) ValidateAsync() ValidateAsync(string, string)"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.Identity.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.Identity.html",
    "title": "Property Identity | AuxLabs.Twitch Documentation",
    "keywords": "Property Identity Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll Identity public AppIdentity Identity { get; } Property Value AppIdentity"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.ModifyChatSettingsAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.ModifyChatSettingsAsync.html",
    "title": "Method ModifyChatSettingsAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method ModifyChatSettingsAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll ModifyChatSettingsAsync(string, Action<PatchChatSettingsBody>, CancellationToken?) public Task<ChatSettings> ModifyChatSettingsAsync(string channelId, Action<PatchChatSettingsBody> func, CancellationToken? cancelToken = null) Parameters channelId string func Action<PatchChatSettingsBody> cancelToken CancellationToken? Returns Task<ChatSettings>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyColorAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyColorAsync.html",
    "title": "Method ModifyMyColorAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method ModifyMyColorAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll ModifyMyColorAsync(ChatColor, CancellationToken?) public Task ModifyMyColorAsync(ChatColor color, CancellationToken? cancelToken = null) Parameters color ChatColor cancelToken CancellationToken? Returns Task ModifyMyColorAsync(Color, CancellationToken?) public Task ModifyMyColorAsync(Color color, CancellationToken? cancelToken = null) Parameters color Color cancelToken CancellationToken? Returns Task"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyUserAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyUserAsync.html",
    "title": "Method ModifyMyUserAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method ModifyMyUserAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll ModifyMyUserAsync(string) public Task<RestSelfUser> ModifyMyUserAsync(string description) Parameters description string Returns Task<RestSelfUser>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.MyChannel.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.MyChannel.html",
    "title": "Property MyChannel | AuxLabs.Twitch Documentation",
    "keywords": "Property MyChannel Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll MyChannel public RestChannel MyChannel { get; } Property Value RestChannel"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.MyUser.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.MyUser.html",
    "title": "Property MyUser | AuxLabs.Twitch Documentation",
    "keywords": "Property MyUser Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll MyUser public RestSelfUser MyUser { get; } Property Value RestSelfUser"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.SendAnnouncementAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.SendAnnouncementAsync.html",
    "title": "Method SendAnnouncementAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method SendAnnouncementAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll SendAnnouncementAsync(string, string, AnnouncementColor?, CancellationToken?) public Task SendAnnouncementAsync(string channelId, string message, AnnouncementColor? color = null, CancellationToken? cancelToken = null) Parameters channelId string message string color AnnouncementColor? cancelToken CancellationToken? Returns Task"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.SendShoutoutAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.SendShoutoutAsync.html",
    "title": "Method SendShoutoutAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method SendShoutoutAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll SendShoutoutAsync(string, string, CancellationToken?) public Task SendShoutoutAsync(string fromChannelId, string toChannelId, CancellationToken? cancelToken = null) Parameters fromChannelId string toChannelId string cancelToken CancellationToken? Returns Task"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.StartCommercialAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.StartCommercialAsync.html",
    "title": "Method StartCommercialAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method StartCommercialAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll StartCommercialAsync(int, CancellationToken?) Starts a commercial on the currently authorized user's channel. public Task<Commercial> StartCommercialAsync(int length, CancellationToken? cancelToken = null) Parameters length int The length of the commercial to run, in seconds. cancelToken CancellationToken? Returns Task<Commercial> A single Commercial object. Remarks Requires a user access token with the channel:edit:commercial scope. Exceptions TwitchRestException 400 Bad Request The specified broadcaster is not currently live. The internal commercial ratelimit has been exceeded. MissingScopeException The authorized user does not have the channel:edit:commercial scope."
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.UpdateMyChannelAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.UpdateMyChannelAsync.html",
    "title": "Method UpdateMyChannelAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method UpdateMyChannelAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll UpdateMyChannelAsync(Action<PatchChannelBody>) public Task<RestChannel> UpdateMyChannelAsync(Action<PatchChannelBody> func) Parameters func Action<PatchChannelBody> Returns Task<RestChannel>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestClient.ValidateAsync.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestClient.ValidateAsync.html",
    "title": "Method ValidateAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method ValidateAsync Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll ValidateAsync() public Task<AppIdentity> ValidateAsync() Returns Task<AppIdentity> ValidateAsync(string, string) public Task<AccessTokenInfo> ValidateAsync(string token, string refreshToken = null) Parameters token string refreshToken string Returns Task<AccessTokenInfo>"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestConfig.DownloadMyInformation.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestConfig.DownloadMyInformation.html",
    "title": "Field DownloadMyInformation | AuxLabs.Twitch Documentation",
    "keywords": "Field DownloadMyInformation Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll Whether the client should automatically download information about the currently authenticated user after validation. public bool DownloadMyInformation Returns bool"
  },
  "api/AuxLabs.Twitch.Rest.TwitchRestConfig.html": {
    "href": "api/AuxLabs.Twitch.Rest.TwitchRestConfig.html",
    "title": "Class TwitchRestConfig | AuxLabs.Twitch Documentation",
    "keywords": "Class TwitchRestConfig Namespace AuxLabs.Twitch.Rest Assembly AuxLabs.Twitch.Rest.dll public class TwitchRestConfig : TwitchRestApiConfig Inheritance object TwitchRestApiConfig TwitchRestConfig Inherited Members TwitchRestApiConfig.ClientId TwitchRestApiConfig.ClientSecret object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DownloadMyInformation Whether the client should automatically download information about the currently authenticated user after validation."
  },
  "api/AuxLabs.Twitch.RFCDateTimeConverter.html": {
    "href": "api/AuxLabs.Twitch.RFCDateTimeConverter.html",
    "title": "Class RFCDateTimeConverter | AuxLabs.Twitch Documentation",
    "keywords": "Class RFCDateTimeConverter Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public class RFCDateTimeConverter : JsonConverter<DateTime> Inheritance object JsonConverter JsonConverter<DateTime> RFCDateTimeConverter Inherited Members JsonConverter<DateTime>.CanConvert(Type) JsonConverter<DateTime>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<DateTime>.WriteAsPropertyName(Utf8JsonWriter, DateTime, JsonSerializerOptions) JsonConverter<DateTime>.HandleNull object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Write(Utf8JsonWriter, DateTime, JsonSerializerOptions)"
  },
  "api/AuxLabs.Twitch.RFCDateTimeConverter.Read.html": {
    "href": "api/AuxLabs.Twitch.RFCDateTimeConverter.Read.html",
    "title": "Method Read | AuxLabs.Twitch Documentation",
    "keywords": "Method Read Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Read(ref Utf8JsonReader, Type, JsonSerializerOptions) public override DateTime Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader typeToConvert Type options JsonSerializerOptions Returns DateTime"
  },
  "api/AuxLabs.Twitch.RFCDateTimeConverter.Write.html": {
    "href": "api/AuxLabs.Twitch.RFCDateTimeConverter.Write.html",
    "title": "Method Write | AuxLabs.Twitch Documentation",
    "keywords": "Method Write Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Write(Utf8JsonWriter, DateTime, JsonSerializerOptions) public override void Write(Utf8JsonWriter writer, DateTime value, JsonSerializerOptions options) Parameters writer Utf8JsonWriter value DateTime options JsonSerializerOptions"
  },
  "api/AuxLabs.Twitch.SimpleReward.Cost.html": {
    "href": "api/AuxLabs.Twitch.SimpleReward.Cost.html",
    "title": "Property Cost | AuxLabs.Twitch Documentation",
    "keywords": "Property Cost Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Cost The cost of the reward in channel points. [JsonInclude] [JsonPropertyName(\"cost\")] public int Cost { get; set; } Property Value int"
  },
  "api/AuxLabs.Twitch.SimpleReward.html": {
    "href": "api/AuxLabs.Twitch.SimpleReward.html",
    "title": "Class SimpleReward | AuxLabs.Twitch Documentation",
    "keywords": "Class SimpleReward Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public class SimpleReward Inheritance object SimpleReward Derived Reward Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Cost The cost of the reward in channel points. Id The ID that uniquely identifies this custom reward. Prompt The prompt shown to the viewer when they redeem the reward if user input is required. Title The title of the reward."
  },
  "api/AuxLabs.Twitch.SimpleReward.Id.html": {
    "href": "api/AuxLabs.Twitch.SimpleReward.Id.html",
    "title": "Property Id | AuxLabs.Twitch Documentation",
    "keywords": "Property Id Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Id The ID that uniquely identifies this custom reward. [JsonInclude] [JsonPropertyName(\"id\")] public string Id { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.SimpleReward.Prompt.html": {
    "href": "api/AuxLabs.Twitch.SimpleReward.Prompt.html",
    "title": "Property Prompt | AuxLabs.Twitch Documentation",
    "keywords": "Property Prompt Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Prompt The prompt shown to the viewer when they redeem the reward if user input is required. [JsonInclude] [JsonPropertyName(\"prompt\")] public string Prompt { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.SimpleReward.Title.html": {
    "href": "api/AuxLabs.Twitch.SimpleReward.Title.html",
    "title": "Property Title | AuxLabs.Twitch Documentation",
    "keywords": "Property Title Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Title The title of the reward. [JsonInclude] [JsonPropertyName(\"title\")] public string Title { get; set; } Property Value string"
  },
  "api/AuxLabs.Twitch.SubscriptionType.html": {
    "href": "api/AuxLabs.Twitch.SubscriptionType.html",
    "title": "Enum SubscriptionType | AuxLabs.Twitch Documentation",
    "keywords": "Enum SubscriptionType Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum SubscriptionType Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"Prime\")] Prime = 0 [EnumMember(Value = \"1000\")] Tier1 = 1 [EnumMember(Value = \"2000\")] Tier2 = 2 [EnumMember(Value = \"3000\")] Tier3 = 3"
  },
  "api/AuxLabs.Twitch.Title.-ctor.html": {
    "href": "api/AuxLabs.Twitch.Title.-ctor.html",
    "title": "Constructor Title | AuxLabs.Twitch Documentation",
    "keywords": "Constructor Title Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Title(string) [JsonConstructor] public Title(string value) Parameters value string"
  },
  "api/AuxLabs.Twitch.Title.html": {
    "href": "api/AuxLabs.Twitch.Title.html",
    "title": "Struct Title | AuxLabs.Twitch Documentation",
    "keywords": "Struct Title Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public readonly struct Title Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Title(string) Properties Value Methods ToString() Operators implicit operator string(Title) implicit operator Title(string)"
  },
  "api/AuxLabs.Twitch.Title.op_Implicit.html": {
    "href": "api/AuxLabs.Twitch.Title.op_Implicit.html",
    "title": "Operator implicit operator | AuxLabs.Twitch Documentation",
    "keywords": "Operator implicit operator Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll implicit operator string(Title) public static implicit operator string(Title value) Parameters value Title Returns string implicit operator Title(string) public static implicit operator Title(string v) Parameters v string Returns Title"
  },
  "api/AuxLabs.Twitch.Title.ToString.html": {
    "href": "api/AuxLabs.Twitch.Title.ToString.html",
    "title": "Method ToString | AuxLabs.Twitch Documentation",
    "keywords": "Method ToString Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll ToString() public override string ToString() Returns string"
  },
  "api/AuxLabs.Twitch.Title.Value.html": {
    "href": "api/AuxLabs.Twitch.Title.Value.html",
    "title": "Property Value | AuxLabs.Twitch Documentation",
    "keywords": "Property Value Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Value [JsonPropertyName(\"title\")] public string Value { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.TokenType.html": {
    "href": "api/AuxLabs.Twitch.TokenType.html",
    "title": "Enum TokenType | AuxLabs.Twitch Documentation",
    "keywords": "Enum TokenType Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum TokenType Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"Bearer\")] Bearer = 1 None = 0"
  },
  "api/AuxLabs.Twitch.TrackSourceType.html": {
    "href": "api/AuxLabs.Twitch.TrackSourceType.html",
    "title": "Enum TrackSourceType | AuxLabs.Twitch Documentation",
    "keywords": "Enum TrackSourceType Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum TrackSourceType Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"PLAYLIST\")] Playlist = 0 [EnumMember(Value = \"STATION\")] Station = 1"
  },
  "api/AuxLabs.Twitch.TransportMethod.html": {
    "href": "api/AuxLabs.Twitch.TransportMethod.html",
    "title": "Enum TransportMethod | AuxLabs.Twitch Documentation",
    "keywords": "Enum TransportMethod Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum TransportMethod Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"webhook\")] Webhook = 0 [EnumMember(Value = \"websocket\")] WebSocket = 1"
  },
  "api/AuxLabs.Twitch.TwitchConstants.AnonymousNamePrefix.html": {
    "href": "api/AuxLabs.Twitch.TwitchConstants.AnonymousNamePrefix.html",
    "title": "Field AnonymousNamePrefix | AuxLabs.Twitch Documentation",
    "keywords": "Field AnonymousNamePrefix Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public const string AnonymousNamePrefix = \"justinfan\" Returns string"
  },
  "api/AuxLabs.Twitch.TwitchConstants.ChatIrcUrl.html": {
    "href": "api/AuxLabs.Twitch.TwitchConstants.ChatIrcUrl.html",
    "title": "Field ChatIrcUrl | AuxLabs.Twitch Documentation",
    "keywords": "Field ChatIrcUrl Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public const string ChatIrcUrl = \"\\tirc://irc.chat.twitch.tv:6667\" Returns string"
  },
  "api/AuxLabs.Twitch.TwitchConstants.ChatSecureIrcUrl.html": {
    "href": "api/AuxLabs.Twitch.TwitchConstants.ChatSecureIrcUrl.html",
    "title": "Field ChatSecureIrcUrl | AuxLabs.Twitch Documentation",
    "keywords": "Field ChatSecureIrcUrl Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public const string ChatSecureIrcUrl = \"irc://irc.chat.twitch.tv:6697\" Returns string"
  },
  "api/AuxLabs.Twitch.TwitchConstants.ChatSecureWebSocketUrl.html": {
    "href": "api/AuxLabs.Twitch.TwitchConstants.ChatSecureWebSocketUrl.html",
    "title": "Field ChatSecureWebSocketUrl | AuxLabs.Twitch Documentation",
    "keywords": "Field ChatSecureWebSocketUrl Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public const string ChatSecureWebSocketUrl = \"wss://irc-ws.chat.twitch.tv:443\" Returns string"
  },
  "api/AuxLabs.Twitch.TwitchConstants.ChatWebSocketUrl.html": {
    "href": "api/AuxLabs.Twitch.TwitchConstants.ChatWebSocketUrl.html",
    "title": "Field ChatWebSocketUrl | AuxLabs.Twitch Documentation",
    "keywords": "Field ChatWebSocketUrl Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public const string ChatWebSocketUrl = \"ws://irc-ws.chat.twitch.tv:80\" Returns string"
  },
  "api/AuxLabs.Twitch.TwitchConstants.DefaultMaxPerPage.html": {
    "href": "api/AuxLabs.Twitch.TwitchConstants.DefaultMaxPerPage.html",
    "title": "Field DefaultMaxPerPage | AuxLabs.Twitch Documentation",
    "keywords": "Field DefaultMaxPerPage Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public const int DefaultMaxPerPage = 100 Returns int"
  },
  "api/AuxLabs.Twitch.TwitchConstants.EmoteImageUrl.html": {
    "href": "api/AuxLabs.Twitch.TwitchConstants.EmoteImageUrl.html",
    "title": "Field EmoteImageUrl | AuxLabs.Twitch Documentation",
    "keywords": "Field EmoteImageUrl Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public const string EmoteImageUrl = \"https://static-cdn.jtvnw.net/emoticons/v2/{0}/{1}/{2}/{3}\" Returns string"
  },
  "api/AuxLabs.Twitch.TwitchConstants.EventSubUrl.html": {
    "href": "api/AuxLabs.Twitch.TwitchConstants.EventSubUrl.html",
    "title": "Field EventSubUrl | AuxLabs.Twitch Documentation",
    "keywords": "Field EventSubUrl Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public const string EventSubUrl = \"wss://eventsub.wss.twitch.tv/ws\" Returns string"
  },
  "api/AuxLabs.Twitch.TwitchConstants.GlobalRatelimitBucket.html": {
    "href": "api/AuxLabs.Twitch.TwitchConstants.GlobalRatelimitBucket.html",
    "title": "Field GlobalRatelimitBucket | AuxLabs.Twitch Documentation",
    "keywords": "Field GlobalRatelimitBucket Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public const string GlobalRatelimitBucket = \"GLOBAL\" Returns string"
  },
  "api/AuxLabs.Twitch.TwitchConstants.html": {
    "href": "api/AuxLabs.Twitch.TwitchConstants.html",
    "title": "Class TwitchConstants | AuxLabs.Twitch Documentation",
    "keywords": "Class TwitchConstants Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public static class TwitchConstants Inheritance object TwitchConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AnonymousNamePrefix ChatIrcUrl ChatSecureIrcUrl ChatSecureWebSocketUrl ChatWebSocketUrl DefaultMaxPerPage EmoteImageUrl EventSubUrl GlobalRatelimitBucket PubSubUrl RestApiUrl RestIdentityApiUrl StreamPreviewImageUrl"
  },
  "api/AuxLabs.Twitch.TwitchConstants.PubSubUrl.html": {
    "href": "api/AuxLabs.Twitch.TwitchConstants.PubSubUrl.html",
    "title": "Field PubSubUrl | AuxLabs.Twitch Documentation",
    "keywords": "Field PubSubUrl Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public const string PubSubUrl = \"wss://pubsub-edge.twitch.tv\" Returns string"
  },
  "api/AuxLabs.Twitch.TwitchConstants.RestApiUrl.html": {
    "href": "api/AuxLabs.Twitch.TwitchConstants.RestApiUrl.html",
    "title": "Field RestApiUrl | AuxLabs.Twitch Documentation",
    "keywords": "Field RestApiUrl Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public const string RestApiUrl = \"https://api.twitch.tv/helix/\" Returns string"
  },
  "api/AuxLabs.Twitch.TwitchConstants.RestIdentityApiUrl.html": {
    "href": "api/AuxLabs.Twitch.TwitchConstants.RestIdentityApiUrl.html",
    "title": "Field RestIdentityApiUrl | AuxLabs.Twitch Documentation",
    "keywords": "Field RestIdentityApiUrl Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public const string RestIdentityApiUrl = \"https://id.twitch.tv/oauth2/\" Returns string"
  },
  "api/AuxLabs.Twitch.TwitchConstants.StreamPreviewImageUrl.html": {
    "href": "api/AuxLabs.Twitch.TwitchConstants.StreamPreviewImageUrl.html",
    "title": "Field StreamPreviewImageUrl | AuxLabs.Twitch Documentation",
    "keywords": "Field StreamPreviewImageUrl Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public const string StreamPreviewImageUrl = \"https://static-cdn.jtvnw.net/previews-ttv/live_user_{0}-{1}x{2}.jpg\" Returns string"
  },
  "api/AuxLabs.Twitch.TwitchException.-ctor.html": {
    "href": "api/AuxLabs.Twitch.TwitchException.-ctor.html",
    "title": "Constructor TwitchException | AuxLabs.Twitch Documentation",
    "keywords": "Constructor TwitchException Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll TwitchException() public TwitchException() TwitchException(string) public TwitchException(string message) Parameters message string"
  },
  "api/AuxLabs.Twitch.TwitchException.html": {
    "href": "api/AuxLabs.Twitch.TwitchException.html",
    "title": "Class TwitchException | AuxLabs.Twitch Documentation",
    "keywords": "Class TwitchException Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public class TwitchException : Exception, ISerializable Inheritance object Exception TwitchException Implements ISerializable Derived TwitchChatException MissingScopeException TwitchRestException Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TwitchException() TwitchException(string)"
  },
  "api/AuxLabs.Twitch.TwitchImage.html": {
    "href": "api/AuxLabs.Twitch.TwitchImage.html",
    "title": "Struct TwitchImage | AuxLabs.Twitch Documentation",
    "keywords": "Struct TwitchImage Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public struct TwitchImage Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties LargeImageUrl A URL to the large version (112px x 112px) of the image. MediumImageUrl A URL to the medium version (56px x 56px) of the image. SmallImageUrl A URL to the small version (28px x 28px) of the image."
  },
  "api/AuxLabs.Twitch.TwitchImage.LargeImageUrl.html": {
    "href": "api/AuxLabs.Twitch.TwitchImage.LargeImageUrl.html",
    "title": "Property LargeImageUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property LargeImageUrl Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll LargeImageUrl A URL to the large version (112px x 112px) of the image. [JsonInclude] [JsonPropertyName(\"url_4x\")] public readonly string LargeImageUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.TwitchImage.MediumImageUrl.html": {
    "href": "api/AuxLabs.Twitch.TwitchImage.MediumImageUrl.html",
    "title": "Property MediumImageUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property MediumImageUrl Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll MediumImageUrl A URL to the medium version (56px x 56px) of the image. [JsonInclude] [JsonPropertyName(\"url_2x\")] public readonly string MediumImageUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.TwitchImage.SmallImageUrl.html": {
    "href": "api/AuxLabs.Twitch.TwitchImage.SmallImageUrl.html",
    "title": "Property SmallImageUrl | AuxLabs.Twitch Documentation",
    "keywords": "Property SmallImageUrl Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll SmallImageUrl A URL to the small version (28px x 28px) of the image. [JsonInclude] [JsonPropertyName(\"url_1x\")] public readonly string SmallImageUrl { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.TwitchRestException.-ctor.html": {
    "href": "api/AuxLabs.Twitch.TwitchRestException.-ctor.html",
    "title": "Constructor TwitchRestException | AuxLabs.Twitch Documentation",
    "keywords": "Constructor TwitchRestException Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll TwitchRestException(HttpStatusCode, int?, string) public TwitchRestException(HttpStatusCode httpCode, int? code = null, string reason = null) Parameters httpCode HttpStatusCode code int? reason string"
  },
  "api/AuxLabs.Twitch.TwitchRestException.Code.html": {
    "href": "api/AuxLabs.Twitch.TwitchRestException.Code.html",
    "title": "Property Code | AuxLabs.Twitch Documentation",
    "keywords": "Property Code Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Code public int? Code { get; } Property Value int?"
  },
  "api/AuxLabs.Twitch.TwitchRestException.html": {
    "href": "api/AuxLabs.Twitch.TwitchRestException.html",
    "title": "Class TwitchRestException | AuxLabs.Twitch Documentation",
    "keywords": "Class TwitchRestException Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public class TwitchRestException : TwitchException, ISerializable Inheritance object Exception TwitchException TwitchRestException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TwitchRestException(HttpStatusCode, int?, string) Properties Code HttpCode Reason"
  },
  "api/AuxLabs.Twitch.TwitchRestException.HttpCode.html": {
    "href": "api/AuxLabs.Twitch.TwitchRestException.HttpCode.html",
    "title": "Property HttpCode | AuxLabs.Twitch Documentation",
    "keywords": "Property HttpCode Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll HttpCode public HttpStatusCode HttpCode { get; } Property Value HttpStatusCode"
  },
  "api/AuxLabs.Twitch.TwitchRestException.Reason.html": {
    "href": "api/AuxLabs.Twitch.TwitchRestException.Reason.html",
    "title": "Property Reason | AuxLabs.Twitch Documentation",
    "keywords": "Property Reason Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Reason public string Reason { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.UnexpectedTagsException.-ctor.html": {
    "href": "api/AuxLabs.Twitch.UnexpectedTagsException.-ctor.html",
    "title": "Constructor UnexpectedTagsException | AuxLabs.Twitch Documentation",
    "keywords": "Constructor UnexpectedTagsException Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll UnexpectedTagsException(string, IDictionary<string, string>, Dictionary<string, string>) public UnexpectedTagsException(string eventName, IDictionary<string, string> expected, Dictionary<string, string> provided) Parameters eventName string expected IDictionary<string, string> provided Dictionary<string, string>"
  },
  "api/AuxLabs.Twitch.UnexpectedTagsException.EventName.html": {
    "href": "api/AuxLabs.Twitch.UnexpectedTagsException.EventName.html",
    "title": "Property EventName | AuxLabs.Twitch Documentation",
    "keywords": "Property EventName Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll EventName public string EventName { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.UnexpectedTagsException.Expected.html": {
    "href": "api/AuxLabs.Twitch.UnexpectedTagsException.Expected.html",
    "title": "Property Expected | AuxLabs.Twitch Documentation",
    "keywords": "Property Expected Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Expected public SortedDictionary<string, string> Expected { get; } Property Value SortedDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.UnexpectedTagsException.html": {
    "href": "api/AuxLabs.Twitch.UnexpectedTagsException.html",
    "title": "Class UnexpectedTagsException | AuxLabs.Twitch Documentation",
    "keywords": "Class UnexpectedTagsException Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public class UnexpectedTagsException : SerializationException, ISerializable Inheritance object Exception SystemException SerializationException UnexpectedTagsException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors UnexpectedTagsException(string, IDictionary<string, string>, Dictionary<string, string>) Properties EventName Expected Provided Unique"
  },
  "api/AuxLabs.Twitch.UnexpectedTagsException.Provided.html": {
    "href": "api/AuxLabs.Twitch.UnexpectedTagsException.Provided.html",
    "title": "Property Provided | AuxLabs.Twitch Documentation",
    "keywords": "Property Provided Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Provided public SortedDictionary<string, string> Provided { get; } Property Value SortedDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.UnexpectedTagsException.Unique.html": {
    "href": "api/AuxLabs.Twitch.UnexpectedTagsException.Unique.html",
    "title": "Property Unique | AuxLabs.Twitch Documentation",
    "keywords": "Property Unique Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Unique public SortedDictionary<string, string> Unique { get; } Property Value SortedDictionary<string, string>"
  },
  "api/AuxLabs.Twitch.UserType.html": {
    "href": "api/AuxLabs.Twitch.UserType.html",
    "title": "Enum UserType | AuxLabs.Twitch Documentation",
    "keywords": "Enum UserType Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum UserType Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"admin\")] Admin = 2 [EnumMember(Value = \"global_mod\")] GlobalModerator = 3 [EnumMember(Value = \"\")] None = 0 [EnumMember(Value = \"staff\")] Staff = 1"
  },
  "api/AuxLabs.Twitch.VideoPeriod.html": {
    "href": "api/AuxLabs.Twitch.VideoPeriod.html",
    "title": "Enum VideoPeriod | AuxLabs.Twitch Documentation",
    "keywords": "Enum VideoPeriod Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum VideoPeriod Extension Methods EnumHelper.GetStringValue<T>(T) Fields All = 0 [EnumMember(Value = \"day\")] Day = 1 [EnumMember(Value = \"month\")] Month = 2 [EnumMember(Value = \"week\")] Week = 3"
  },
  "api/AuxLabs.Twitch.VideoSort.html": {
    "href": "api/AuxLabs.Twitch.VideoSort.html",
    "title": "Enum VideoSort | AuxLabs.Twitch Documentation",
    "keywords": "Enum VideoSort Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum VideoSort Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"time\")] Time = 0 [EnumMember(Value = \"trending\")] Trending = 1 [EnumMember(Value = \"views\")] Views = 2"
  },
  "api/AuxLabs.Twitch.VideoType.html": {
    "href": "api/AuxLabs.Twitch.VideoType.html",
    "title": "Enum VideoType | AuxLabs.Twitch Documentation",
    "keywords": "Enum VideoType Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public enum VideoType Extension Methods EnumHelper.GetStringValue<T>(T) Fields [EnumMember(Value = \"all\")] All = 0 [EnumMember(Value = \"archive\")] Archive = 1 An on-demand video (VOD) of one of the broadcaster's past streams. [EnumMember(Value = \"highlight\")] Highlight = 2 A highlight reel of one of the broadcaster's past streams. [EnumMember(Value = \"upload\")] Upload = 3 A video that the broadcaster uploaded to their video library."
  },
  "api/AuxLabs.Twitch.WebSocketClosedException.-ctor.html": {
    "href": "api/AuxLabs.Twitch.WebSocketClosedException.-ctor.html",
    "title": "Constructor WebSocketClosedException | AuxLabs.Twitch Documentation",
    "keywords": "Constructor WebSocketClosedException Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll WebSocketClosedException(int, string) public WebSocketClosedException(int closeCode, string reason = null) Parameters closeCode int reason string"
  },
  "api/AuxLabs.Twitch.WebSocketClosedException.CloseCode.html": {
    "href": "api/AuxLabs.Twitch.WebSocketClosedException.CloseCode.html",
    "title": "Property CloseCode | AuxLabs.Twitch Documentation",
    "keywords": "Property CloseCode Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll CloseCode public int CloseCode { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.WebSocketClosedException.html": {
    "href": "api/AuxLabs.Twitch.WebSocketClosedException.html",
    "title": "Class WebSocketClosedException | AuxLabs.Twitch Documentation",
    "keywords": "Class WebSocketClosedException Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll public class WebSocketClosedException : Exception, ISerializable Inheritance object Exception WebSocketClosedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors WebSocketClosedException(int, string) Properties CloseCode Reason"
  },
  "api/AuxLabs.Twitch.WebSocketClosedException.Reason.html": {
    "href": "api/AuxLabs.Twitch.WebSocketClosedException.Reason.html",
    "title": "Property Reason | AuxLabs.Twitch Documentation",
    "keywords": "Property Reason Namespace AuxLabs.Twitch Assembly AuxLabs.Twitch.dll Reason public string Reason { get; } Property Value string"
  },
  "api/AuxLabs.Twitch.WebSockets.ConnectionState.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.ConnectionState.html",
    "title": "Enum ConnectionState | AuxLabs.Twitch Documentation",
    "keywords": "Enum ConnectionState Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll public enum ConnectionState Extension Methods EnumHelper.GetStringValue<T>(T) Fields Connected = 2 Connecting = 1 Disconnected = 0 Disconnecting = 3"
  },
  "api/AuxLabs.Twitch.WebSockets.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.html",
    "title": "Namespace AuxLabs.Twitch.WebSockets | AuxLabs.Twitch Documentation",
    "keywords": "Namespace AuxLabs.Twitch.WebSockets Classes TwitchJsonSerializer<TPayload> WebSocketClosedException Interfaces IPayload ISerializer<TPayload> ISocketClient<TPayload> Enums ConnectionState"
  },
  "api/AuxLabs.Twitch.WebSockets.IPayload.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.IPayload.html",
    "title": "Interface IPayload | AuxLabs.Twitch Documentation",
    "keywords": "Interface IPayload Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll public interface IPayload Properties IsHelloEvent"
  },
  "api/AuxLabs.Twitch.WebSockets.IPayload.IsHelloEvent.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.IPayload.IsHelloEvent.html",
    "title": "Property IsHelloEvent | AuxLabs.Twitch Documentation",
    "keywords": "Property IsHelloEvent Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll IsHelloEvent [JsonIgnore] bool IsHelloEvent { get; } Property Value bool"
  },
  "api/AuxLabs.Twitch.WebSockets.ISerializer-1.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.ISerializer-1.html",
    "title": "Interface ISerializer<TPayload> | AuxLabs.Twitch Documentation",
    "keywords": "Interface ISerializer<TPayload> Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll public interface ISerializer<TPayload> Type Parameters TPayload Methods Read(ref ReadOnlySpan<byte>) Write(TPayload)"
  },
  "api/AuxLabs.Twitch.WebSockets.ISerializer-1.Read.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.ISerializer-1.Read.html",
    "title": "Method Read | AuxLabs.Twitch Documentation",
    "keywords": "Method Read Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll Read(ref ReadOnlySpan<byte>) TPayload Read(ref ReadOnlySpan<byte> data) Parameters data ReadOnlySpan<byte> Returns TPayload"
  },
  "api/AuxLabs.Twitch.WebSockets.ISerializer-1.Write.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.ISerializer-1.Write.html",
    "title": "Method Write | AuxLabs.Twitch Documentation",
    "keywords": "Method Write Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll Write(TPayload) ReadOnlyMemory<byte> Write(TPayload payload) Parameters payload TPayload Returns ReadOnlyMemory<byte>"
  },
  "api/AuxLabs.Twitch.WebSockets.ISocketClient-1.Connected.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.ISocketClient-1.Connected.html",
    "title": "Event Connected | AuxLabs.Twitch Documentation",
    "keywords": "Event Connected Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll event Action Connected Returns Action"
  },
  "api/AuxLabs.Twitch.WebSockets.ISocketClient-1.Disconnected.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.ISocketClient-1.Disconnected.html",
    "title": "Event Disconnected | AuxLabs.Twitch Documentation",
    "keywords": "Event Disconnected Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll event Action<Exception> Disconnected Returns Action<Exception>"
  },
  "api/AuxLabs.Twitch.WebSockets.ISocketClient-1.Heartbeat.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.ISocketClient-1.Heartbeat.html",
    "title": "Event Heartbeat | AuxLabs.Twitch Documentation",
    "keywords": "Event Heartbeat Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll event Action Heartbeat Returns Action"
  },
  "api/AuxLabs.Twitch.WebSockets.ISocketClient-1.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.ISocketClient-1.html",
    "title": "Interface ISocketClient<TPayload> | AuxLabs.Twitch Documentation",
    "keywords": "Interface ISocketClient<TPayload> Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll public interface ISocketClient<TPayload> : IDisposable where TPayload : IPayload Type Parameters TPayload Inherited Members IDisposable.Dispose() Properties State Methods Run(string) RunAsync(string) Send(TPayload) SendAsync(TPayload, CancellationToken) Stop() StopAsync() Events Connected Disconnected Heartbeat Identify PayloadReceived"
  },
  "api/AuxLabs.Twitch.WebSockets.ISocketClient-1.Identify.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.ISocketClient-1.Identify.html",
    "title": "Event Identify | AuxLabs.Twitch Documentation",
    "keywords": "Event Identify Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll event Action Identify Returns Action"
  },
  "api/AuxLabs.Twitch.WebSockets.ISocketClient-1.PayloadReceived.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.ISocketClient-1.PayloadReceived.html",
    "title": "Event PayloadReceived | AuxLabs.Twitch Documentation",
    "keywords": "Event PayloadReceived Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll event Action<TPayload, TaskCompletionSource<bool>> PayloadReceived Returns Action<TPayload, TaskCompletionSource<bool>>"
  },
  "api/AuxLabs.Twitch.WebSockets.ISocketClient-1.Run.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.ISocketClient-1.Run.html",
    "title": "Method Run | AuxLabs.Twitch Documentation",
    "keywords": "Method Run Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll Run(string) void Run(string url) Parameters url string"
  },
  "api/AuxLabs.Twitch.WebSockets.ISocketClient-1.RunAsync.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.ISocketClient-1.RunAsync.html",
    "title": "Method RunAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method RunAsync Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll RunAsync(string) Task RunAsync(string url) Parameters url string Returns Task"
  },
  "api/AuxLabs.Twitch.WebSockets.ISocketClient-1.Send.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.ISocketClient-1.Send.html",
    "title": "Method Send | AuxLabs.Twitch Documentation",
    "keywords": "Method Send Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll Send(TPayload) void Send(TPayload payload) Parameters payload TPayload"
  },
  "api/AuxLabs.Twitch.WebSockets.ISocketClient-1.SendAsync.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.ISocketClient-1.SendAsync.html",
    "title": "Method SendAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method SendAsync Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll SendAsync(TPayload, CancellationToken) Task SendAsync(TPayload payload, CancellationToken cancelToken) Parameters payload TPayload cancelToken CancellationToken Returns Task"
  },
  "api/AuxLabs.Twitch.WebSockets.ISocketClient-1.State.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.ISocketClient-1.State.html",
    "title": "Property State | AuxLabs.Twitch Documentation",
    "keywords": "Property State Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll State ConnectionState State { get; } Property Value ConnectionState"
  },
  "api/AuxLabs.Twitch.WebSockets.ISocketClient-1.Stop.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.ISocketClient-1.Stop.html",
    "title": "Method Stop | AuxLabs.Twitch Documentation",
    "keywords": "Method Stop Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll Stop() void Stop()"
  },
  "api/AuxLabs.Twitch.WebSockets.ISocketClient-1.StopAsync.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.ISocketClient-1.StopAsync.html",
    "title": "Method StopAsync | AuxLabs.Twitch Documentation",
    "keywords": "Method StopAsync Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll StopAsync() Task StopAsync() Returns Task"
  },
  "api/AuxLabs.Twitch.WebSockets.TwitchJsonSerializer-1.-ctor.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.TwitchJsonSerializer-1.-ctor.html",
    "title": "Constructor TwitchJsonSerializer | AuxLabs.Twitch Documentation",
    "keywords": "Constructor TwitchJsonSerializer Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll TwitchJsonSerializer(JsonSerializerOptions) public TwitchJsonSerializer(JsonSerializerOptions jsonSerializerOptions = null) Parameters jsonSerializerOptions JsonSerializerOptions"
  },
  "api/AuxLabs.Twitch.WebSockets.TwitchJsonSerializer-1.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.TwitchJsonSerializer-1.html",
    "title": "Class TwitchJsonSerializer<TPayload> | AuxLabs.Twitch Documentation",
    "keywords": "Class TwitchJsonSerializer<TPayload> Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll public class TwitchJsonSerializer<TPayload> : ISerializer<TPayload> Type Parameters TPayload Inheritance object TwitchJsonSerializer<TPayload> Implements ISerializer<TPayload> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TwitchJsonSerializer(JsonSerializerOptions) Methods Read(ref ReadOnlySpan<byte>) Write(TPayload)"
  },
  "api/AuxLabs.Twitch.WebSockets.TwitchJsonSerializer-1.Read.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.TwitchJsonSerializer-1.Read.html",
    "title": "Method Read | AuxLabs.Twitch Documentation",
    "keywords": "Method Read Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll Read(ref ReadOnlySpan<byte>) public TPayload Read(ref ReadOnlySpan<byte> data) Parameters data ReadOnlySpan<byte> Returns TPayload"
  },
  "api/AuxLabs.Twitch.WebSockets.TwitchJsonSerializer-1.Write.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.TwitchJsonSerializer-1.Write.html",
    "title": "Method Write | AuxLabs.Twitch Documentation",
    "keywords": "Method Write Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll Write(TPayload) public ReadOnlyMemory<byte> Write(TPayload payload) Parameters payload TPayload Returns ReadOnlyMemory<byte>"
  },
  "api/AuxLabs.Twitch.WebSockets.WebSocketClosedException.-ctor.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.WebSocketClosedException.-ctor.html",
    "title": "Constructor WebSocketClosedException | AuxLabs.Twitch Documentation",
    "keywords": "Constructor WebSocketClosedException Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll WebSocketClosedException(WebSocketCloseStatus, string) public WebSocketClosedException(WebSocketCloseStatus status, string reason = null) Parameters status WebSocketCloseStatus reason string WebSocketClosedException(string, WebSocketCloseStatus, string) public WebSocketClosedException(string message, WebSocketCloseStatus status, string reason = null) Parameters message string status WebSocketCloseStatus reason string WebSocketClosedException(string, Exception, WebSocketCloseStatus, string) public WebSocketClosedException(string message, Exception innerException, WebSocketCloseStatus status, string reason = null) Parameters message string innerException Exception status WebSocketCloseStatus reason string"
  },
  "api/AuxLabs.Twitch.WebSockets.WebSocketClosedException.CloseStatus.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.WebSocketClosedException.CloseStatus.html",
    "title": "Property CloseStatus | AuxLabs.Twitch Documentation",
    "keywords": "Property CloseStatus Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll CloseStatus public WebSocketCloseStatus? CloseStatus { get; } Property Value WebSocketCloseStatus?"
  },
  "api/AuxLabs.Twitch.WebSockets.WebSocketClosedException.Code.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.WebSocketClosedException.Code.html",
    "title": "Property Code | AuxLabs.Twitch Documentation",
    "keywords": "Property Code Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll Code public int Code { get; } Property Value int"
  },
  "api/AuxLabs.Twitch.WebSockets.WebSocketClosedException.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.WebSocketClosedException.html",
    "title": "Class WebSocketClosedException | AuxLabs.Twitch Documentation",
    "keywords": "Class WebSocketClosedException Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll public class WebSocketClosedException : Exception, ISerializable Inheritance object Exception WebSocketClosedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors WebSocketClosedException(WebSocketCloseStatus, string) WebSocketClosedException(string, Exception, WebSocketCloseStatus, string) WebSocketClosedException(string, WebSocketCloseStatus, string) Properties CloseStatus Code Reason"
  },
  "api/AuxLabs.Twitch.WebSockets.WebSocketClosedException.Reason.html": {
    "href": "api/AuxLabs.Twitch.WebSockets.WebSocketClosedException.Reason.html",
    "title": "Property Reason | AuxLabs.Twitch Documentation",
    "keywords": "Property Reason Namespace AuxLabs.Twitch.WebSockets Assembly AuxLabs.Twitch.WebSockets.dll Reason public string Reason { get; } Property Value string"
  },
  "guides/chat/advanced/cacheing.html": {
    "href": "guides/chat/advanced/cacheing.html",
    "title": "PLACEHOLDER | AuxLabs.Twitch Documentation",
    "keywords": "PLACEHOLDER Nothing here yet"
  },
  "guides/chat/advanced/verified-accounts.html": {
    "href": "guides/chat/advanced/verified-accounts.html",
    "title": "PLACEHOLDER | AuxLabs.Twitch Documentation",
    "keywords": "PLACEHOLDER Nothing here yet"
  },
  "guides/chat/index.html": {
    "href": "guides/chat/index.html",
    "title": "PLACEHOLDER | AuxLabs.Twitch Documentation",
    "keywords": "PLACEHOLDER Nothing here yet"
  },
  "guides/eventsub/advanced/webhooks.html": {
    "href": "guides/eventsub/advanced/webhooks.html",
    "title": "PLACEHOLDER | AuxLabs.Twitch Documentation",
    "keywords": "PLACEHOLDER Nothing here yet"
  },
  "guides/eventsub/index.html": {
    "href": "guides/eventsub/index.html",
    "title": "PLACEHOLDER | AuxLabs.Twitch Documentation",
    "keywords": "PLACEHOLDER Nothing here yet"
  },
  "guides/eventsub/subscription-costs.html": {
    "href": "guides/eventsub/subscription-costs.html",
    "title": "PLACEHOLDER | AuxLabs.Twitch Documentation",
    "keywords": "PLACEHOLDER Nothing here yet"
  },
  "guides/identity/auth-flows.html": {
    "href": "guides/identity/auth-flows.html",
    "title": "PLACEHOLDER | AuxLabs.Twitch Documentation",
    "keywords": "PLACEHOLDER Nothing here yet"
  },
  "guides/identity/getting-tokens.html": {
    "href": "guides/identity/getting-tokens.html",
    "title": "PLACEHOLDER | AuxLabs.Twitch Documentation",
    "keywords": "PLACEHOLDER Nothing here yet"
  },
  "guides/identity/index.html": {
    "href": "guides/identity/index.html",
    "title": "PLACEHOLDER | AuxLabs.Twitch Documentation",
    "keywords": "PLACEHOLDER Nothing here yet"
  },
  "guides/identity/storing-tokens.html": {
    "href": "guides/identity/storing-tokens.html",
    "title": "PLACEHOLDER | AuxLabs.Twitch Documentation",
    "keywords": "PLACEHOLDER Nothing here yet"
  },
  "guides/pubsub/advanced/unstable-topics.html": {
    "href": "guides/pubsub/advanced/unstable-topics.html",
    "title": "PLACEHOLDER | AuxLabs.Twitch Documentation",
    "keywords": "PLACEHOLDER Nothing here yet"
  },
  "guides/pubsub/index.html": {
    "href": "guides/pubsub/index.html",
    "title": "PLACEHOLDER | AuxLabs.Twitch Documentation",
    "keywords": "PLACEHOLDER Nothing here yet"
  },
  "guides/rest/advanced/ratelimits.html": {
    "href": "guides/rest/advanced/ratelimits.html",
    "title": "PLACEHOLDER | AuxLabs.Twitch Documentation",
    "keywords": "PLACEHOLDER Nothing here yet"
  },
  "guides/rest/async-enumerables.html": {
    "href": "guides/rest/async-enumerables.html",
    "title": "PLACEHOLDER | AuxLabs.Twitch Documentation",
    "keywords": "PLACEHOLDER Nothing here yet"
  },
  "guides/rest/index.html": {
    "href": "guides/rest/index.html",
    "title": "PLACEHOLDER | AuxLabs.Twitch Documentation",
    "keywords": "PLACEHOLDER Nothing here yet"
  },
  "index.html": {
    "href": "index.html",
    "title": "Twitch | AuxLabs.Twitch Documentation",
    "keywords": "Twitch Twitch is an implementation of the Twitch Developer API that aims to reformat the data provided by these APIs into a more standardized structure where possible, present itself in a way that isn't overly complicated for a beginner to understand, and cover compatibility for modern platforms. Currently, only the base-level implementation is available via the *.Api libraries. Builds Release builds will be available through Nuget, and development builds are available publicly through Github Packages. Documentation The API reference, starter tutorials, and other documentation will be available at the documentation site. Samples For examples and sample projects look at the examples repository. Features Rest Implementation - [x] Global ratelimit handling - [ ] Unique endpoint ratelimit handling - [x] Check arguments for validity before requests - [x] Scope confirmation before requests - [x] Ability to implement a custom ratelimiter - [x] Ability to specify a custom rest api url - [ ] All endpoint categories progress - [x] 5/5 Identity - [x] 1/1 Ads - [x] 2/2 Analytics - [x] 3/3 Bits - [x] 3/3 Channels - [x] 6/6 Channel Points - [x] 2/2 Charity - [x] 12/12 Chat - [x] 2/2 Clips - [x] 4/4 Entitlements - [ ] 0/12 Extensions - [x] 3/3 EventSub - [x] 2/2 Games - [x] 1/1 Goals - [x] 1/1 Hype Trains - [x] 19/19 Moderation - [x] 3/3 Polls - [x] 3/3 Predictions - [x] 2/2 Raids - [x] 6/6 Schedule - [x] 2/2 Search - [x] 3/3 Music - [x] 5/5 Streams - [x] 2/2 Subscriptions - [x] 2/2 Teams - [x] 9/9 Users - [x] 2/2 Videos - [x] 1/1 Whispers Chat Implementation - [ ] Ratelimit handling - [x] Automatic heartbeat - [x] Automatic reconnection - [x] Auto-detect unhandled tags - [x] Provide a custom irc serializer - [x] Connect to a custom websocket chat url - [x] Authenticate anonymously - [x] Handle all available events - [x] Capability Acknowledged - [x] Capability Denied - [x] Chat Cleared - [x] Message Deleted - [x] Global User State - [x] Notice Received - [x] Message Received - [x] Room State Received - [x] User Notice Received - [x] User State Received - [x] Whisper Received - [x] Channel Joined - [x] Channel Left - [x] Names Received EventSub Implementation - [x] Subscribe/Unsubscribe/View subscriptions through Rest client - [ ] Ratelimits and Subscription Costs - [x] WebSocket client - [ ] WebHook client - [x] Automatic heartbeat - [x] Automatic reconnection - [x] Handle all available events - [x] Followers - [x] Subscriptions - [x] Bits Cheered - [x] Raids - [x] User Banned - [x] User Unbanned - [x] Moderators - [x] Rewards - [x] Redemptions - [x] Polls - [x] Predictions - [x] Charity Donations - [x] Charity Campaigns - [x] Drops Entitlements - [x] Extension Bits Transactions - [x] Goals - [x] Hype Trains - [x] Shield Mode - [x] Shoutouts - [x] Stream Status - [x] Authorization Granted/Revoked - [x] User Updated PubSub Implementation - [ ] Ratelimits - [x] Automatic heartbeat - [x] Automatic reconnection - [ ] Handle all available events - [ ] Bits - [ ] Bist Badge Unlocks - [ ] Channel Point Redemptions - [ ] Channel Subscriptions - [ ] Automod Queue - [ ] Moderator Actions - [ ] Low Trust User Status - [ ] Mdoerator Notifications - [ ] Whispers"
  }
}