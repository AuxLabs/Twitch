### YamlMime:ManagedReference
items:
- uid: AuxLabs.Twitch.WebSockets.ISerializer`1
  commentId: T:AuxLabs.Twitch.WebSockets.ISerializer`1
  id: ISerializer`1
  parent: AuxLabs.Twitch.WebSockets
  children:
  - AuxLabs.Twitch.WebSockets.ISerializer`1.Read(System.ReadOnlySpan{System.Byte}@)
  - AuxLabs.Twitch.WebSockets.ISerializer`1.Write(`0)
  langs:
  - csharp
  - vb
  name: ISerializer<TPayload>
  nameWithType: ISerializer<TPayload>
  fullName: AuxLabs.Twitch.WebSockets.ISerializer<TPayload>
  type: Interface
  source:
    remote:
      path: src/AuxLabs.Twitch.WebSockets/Serialization/ISerializer.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: ISerializer
    path: ../src/AuxLabs.Twitch.WebSockets/Serialization/ISerializer.cs
    startLine: 4
  assemblies:
  - AuxLabs.Twitch.WebSockets
  namespace: AuxLabs.Twitch.WebSockets
  syntax:
    content: public interface ISerializer<TPayload>
    typeParameters:
    - id: TPayload
    content.vb: Public Interface ISerializer(Of TPayload)
  nameWithType.vb: ISerializer(Of TPayload)
  fullName.vb: AuxLabs.Twitch.WebSockets.ISerializer(Of TPayload)
  name.vb: ISerializer(Of TPayload)
- uid: AuxLabs.Twitch.WebSockets.ISerializer`1.Write(`0)
  commentId: M:AuxLabs.Twitch.WebSockets.ISerializer`1.Write(`0)
  id: Write(`0)
  parent: AuxLabs.Twitch.WebSockets.ISerializer`1
  langs:
  - csharp
  - vb
  name: Write(TPayload)
  nameWithType: ISerializer<TPayload>.Write(TPayload)
  fullName: AuxLabs.Twitch.WebSockets.ISerializer<TPayload>.Write(TPayload)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.WebSockets/Serialization/ISerializer.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: Write
    path: ../src/AuxLabs.Twitch.WebSockets/Serialization/ISerializer.cs
    startLine: 6
  assemblies:
  - AuxLabs.Twitch.WebSockets
  namespace: AuxLabs.Twitch.WebSockets
  syntax:
    content: ReadOnlyMemory<byte> Write(TPayload payload)
    parameters:
    - id: payload
      type: '{TPayload}'
    return:
      type: System.ReadOnlyMemory{System.Byte}
    content.vb: Function Write(payload As TPayload) As ReadOnlyMemory(Of Byte)
  overload: AuxLabs.Twitch.WebSockets.ISerializer`1.Write*
  nameWithType.vb: ISerializer(Of TPayload).Write(TPayload)
  fullName.vb: AuxLabs.Twitch.WebSockets.ISerializer(Of TPayload).Write(TPayload)
- uid: AuxLabs.Twitch.WebSockets.ISerializer`1.Read(System.ReadOnlySpan{System.Byte}@)
  commentId: M:AuxLabs.Twitch.WebSockets.ISerializer`1.Read(System.ReadOnlySpan{System.Byte}@)
  id: Read(System.ReadOnlySpan{System.Byte}@)
  parent: AuxLabs.Twitch.WebSockets.ISerializer`1
  langs:
  - csharp
  - vb
  name: Read(ref ReadOnlySpan<byte>)
  nameWithType: ISerializer<TPayload>.Read(ref ReadOnlySpan<byte>)
  fullName: AuxLabs.Twitch.WebSockets.ISerializer<TPayload>.Read(ref System.ReadOnlySpan<byte>)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.WebSockets/Serialization/ISerializer.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: Read
    path: ../src/AuxLabs.Twitch.WebSockets/Serialization/ISerializer.cs
    startLine: 7
  assemblies:
  - AuxLabs.Twitch.WebSockets
  namespace: AuxLabs.Twitch.WebSockets
  syntax:
    content: TPayload Read(ref ReadOnlySpan<byte> data)
    parameters:
    - id: data
      type: System.ReadOnlySpan{System.Byte}
    return:
      type: '{TPayload}'
    content.vb: Function Read(data As ReadOnlySpan(Of Byte)) As TPayload
  overload: AuxLabs.Twitch.WebSockets.ISerializer`1.Read*
  nameWithType.vb: ISerializer(Of TPayload).Read(ReadOnlySpan(Of Byte))
  fullName.vb: AuxLabs.Twitch.WebSockets.ISerializer(Of TPayload).Read(System.ReadOnlySpan(Of Byte))
  name.vb: Read(ReadOnlySpan(Of Byte))
references:
- uid: AuxLabs.Twitch.WebSockets
  commentId: N:AuxLabs.Twitch.WebSockets
  href: AuxLabs.html
  name: AuxLabs.Twitch.WebSockets
  nameWithType: AuxLabs.Twitch.WebSockets
  fullName: AuxLabs.Twitch.WebSockets
  spec.csharp:
  - uid: AuxLabs
    name: AuxLabs
    href: AuxLabs.html
  - name: .
  - uid: AuxLabs.Twitch
    name: Twitch
    href: AuxLabs.Twitch.html
  - name: .
  - uid: AuxLabs.Twitch.WebSockets
    name: WebSockets
    href: AuxLabs.Twitch.WebSockets.html
  spec.vb:
  - uid: AuxLabs
    name: AuxLabs
    href: AuxLabs.html
  - name: .
  - uid: AuxLabs.Twitch
    name: Twitch
    href: AuxLabs.Twitch.html
  - name: .
  - uid: AuxLabs.Twitch.WebSockets
    name: WebSockets
    href: AuxLabs.Twitch.WebSockets.html
- uid: AuxLabs.Twitch.WebSockets.ISerializer`1.Write*
  commentId: Overload:AuxLabs.Twitch.WebSockets.ISerializer`1.Write
  href: AuxLabs.Twitch.WebSockets.ISerializer-1.Write(-0).html
  name: Write
  nameWithType: ISerializer<TPayload>.Write
  fullName: AuxLabs.Twitch.WebSockets.ISerializer<TPayload>.Write
  nameWithType.vb: ISerializer(Of TPayload).Write
  fullName.vb: AuxLabs.Twitch.WebSockets.ISerializer(Of TPayload).Write
- uid: '{TPayload}'
  commentId: '!:TPayload'
  definition: TPayload
  name: TPayload
  nameWithType: TPayload
  fullName: TPayload
- uid: System.ReadOnlyMemory{System.Byte}
  commentId: T:System.ReadOnlyMemory{System.Byte}
  parent: System
  definition: System.ReadOnlyMemory`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  name: ReadOnlyMemory<byte>
  nameWithType: ReadOnlyMemory<byte>
  fullName: System.ReadOnlyMemory<byte>
  nameWithType.vb: ReadOnlyMemory(Of Byte)
  fullName.vb: System.ReadOnlyMemory(Of Byte)
  name.vb: ReadOnlyMemory(Of Byte)
  spec.csharp:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
- uid: TPayload
  name: TPayload
  nameWithType: TPayload
  fullName: TPayload
- uid: System.ReadOnlyMemory`1
  commentId: T:System.ReadOnlyMemory`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  name: ReadOnlyMemory<T>
  nameWithType: ReadOnlyMemory<T>
  fullName: System.ReadOnlyMemory<T>
  nameWithType.vb: ReadOnlyMemory(Of T)
  fullName.vb: System.ReadOnlyMemory(Of T)
  name.vb: ReadOnlyMemory(Of T)
  spec.csharp:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: AuxLabs.Twitch.WebSockets.ISerializer`1.Read*
  commentId: Overload:AuxLabs.Twitch.WebSockets.ISerializer`1.Read
  href: AuxLabs.Twitch.WebSockets.ISerializer-1.Read(System.ReadOnlySpan{System.Byte}@).html
  name: Read
  nameWithType: ISerializer<TPayload>.Read
  fullName: AuxLabs.Twitch.WebSockets.ISerializer<TPayload>.Read
  nameWithType.vb: ISerializer(Of TPayload).Read
  fullName.vb: AuxLabs.Twitch.WebSockets.ISerializer(Of TPayload).Read
- uid: System.ReadOnlySpan{System.Byte}
  commentId: T:System.ReadOnlySpan{System.Byte}
  parent: System
  definition: System.ReadOnlySpan`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<byte>
  nameWithType: ReadOnlySpan<byte>
  fullName: System.ReadOnlySpan<byte>
  nameWithType.vb: ReadOnlySpan(Of Byte)
  fullName.vb: System.ReadOnlySpan(Of Byte)
  name.vb: ReadOnlySpan(Of Byte)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
memberLayout: SeparatePages
