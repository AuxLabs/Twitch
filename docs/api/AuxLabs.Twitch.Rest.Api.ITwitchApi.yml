### YamlMime:ManagedReference
items:
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi
  commentId: T:AuxLabs.Twitch.Rest.Api.ITwitchApi
  id: ITwitchApi
  parent: AuxLabs.Twitch.Rest.Api
  children:
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.Authorization
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.ClientId
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBanAsync(AuxLabs.Twitch.Rest.Requests.DeleteBanArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBlockAsync(AuxLabs.Twitch.Rest.Requests.DeleteBlockArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBlockedTermAsync(AuxLabs.Twitch.Rest.Requests.DeleteBlockedTermsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteChatMessagesAsync(AuxLabs.Twitch.Rest.Requests.DeleteMessageArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteEventSubscriptionAsync(AuxLabs.Twitch.Rest.Requests.DeleteEventSubscriptionArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteModeratorAsync(AuxLabs.Twitch.Rest.Requests.ManageModeratorArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteRaidAsync(AuxLabs.Twitch.Rest.Requests.DeleteRaidArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteRewardAsync(AuxLabs.Twitch.Rest.Requests.ManageRewardArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteSegmentAsync(AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteVideoAsync(AuxLabs.Twitch.Rest.Requests.DeleteVideosArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteVipAsync(AuxLabs.Twitch.Rest.Requests.ManageVipArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetActiveExtensionsAsync(AuxLabs.Twitch.Rest.Requests.GetActiveExtensionsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetAutomodSettingsAsync(AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBadgesAsync(AuxLabs.Twitch.Rest.Requests.GetBadgesArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBadgesAsync(System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBannedUsersAsync(AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBitsLeaderboardAsync(AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBlockedTermsAsync(AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBlocksAsync(AuxLabs.Twitch.Rest.Requests.GetBlocksArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastKeyAsync(AuxLabs.Twitch.Rest.Requests.GetBroadcastKeyArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastMarkersAsync(AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastsAsync(AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCategoriesAsync(AuxLabs.Twitch.Rest.Requests.SearchCategoriesArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelEditorsAsync(AuxLabs.Twitch.Rest.Requests.GetChannelEditorsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelsAsync(AuxLabs.Twitch.Rest.Requests.GetChannelsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelsAsync(AuxLabs.Twitch.Rest.Requests.SearchChannelsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCharityCampaignAsync(AuxLabs.Twitch.Rest.Requests.GetCharityCampaignArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCharityDonationsAsync(AuxLabs.Twitch.Rest.Requests.GetCharityDonationsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChatSettingsAsync(AuxLabs.Twitch.Rest.Requests.GetChatSettingsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChattersAsync(AuxLabs.Twitch.Rest.Requests.GetChattersArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCheermotesAsync(AuxLabs.Twitch.Rest.Requests.GetCheermotesArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetClipsAsync(AuxLabs.Twitch.Rest.Requests.GetClipsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCurrentTrackAsync(AuxLabs.Twitch.Rest.Requests.GetCurrentTrackArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetDropsStatusAsync(AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmotesAsync(AuxLabs.Twitch.Rest.Requests.GetEmotesArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmotesAsync(System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmoteSetsAsync(AuxLabs.Twitch.Rest.Requests.GetEmoteSetsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEventSubscriptionsAsync(AuxLabs.Twitch.Rest.Requests.GetEventSubscriptionsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetExtensionAnalyticsAsync(AuxLabs.Twitch.Rest.Requests.GetExtensionAnalyticsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetExtensionTransactionsAsync(AuxLabs.Twitch.Rest.Requests.GetExtensionTransactionsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowedBroadcastsAsync(AuxLabs.Twitch.Rest.Requests.GetFollowedBroadcastsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowedChannelsAsync(AuxLabs.Twitch.Rest.Requests.GetFollowedChannelsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowersAsync(AuxLabs.Twitch.Rest.Requests.GetFollowersArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGameAnalyticsAsync(AuxLabs.Twitch.Rest.Requests.GetGameAnalyticsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGamesAsync(AuxLabs.Twitch.Rest.Requests.GetGamesArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGoalsAsync(AuxLabs.Twitch.Rest.Requests.GetGoalsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetHypetrainEventsAsync(AuxLabs.Twitch.Rest.Requests.GetHypeTrainsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetModeratorsAsync(AuxLabs.Twitch.Rest.Requests.GetModeratorsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPlaylistsAsync(AuxLabs.Twitch.Rest.Requests.GetPlaylistsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPlaylistTracksAsync(AuxLabs.Twitch.Rest.Requests.GetPlaylistTracksArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPollAsync(AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPredictionAsync(AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetRewardRedemptionAsync(AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetRewardsAsync(AuxLabs.Twitch.Rest.Requests.GetRewardArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetScheduleAsync(AuxLabs.Twitch.Rest.Requests.GetScheduleArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetShieldModeAsync(AuxLabs.Twitch.Rest.Requests.GetShieldModeArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetSubscriberAsync(AuxLabs.Twitch.Rest.Requests.GetSubscriberArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetSubscriptionsAsync(AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTeamAsync(AuxLabs.Twitch.Rest.Requests.GetTeamArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTeamsAsync(AuxLabs.Twitch.Rest.Requests.GetChannelTeamsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTopGamesAsync(AuxLabs.Twitch.Rest.Requests.GetTopGamesArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUserChatColorsAsync(AuxLabs.Twitch.Rest.Requests.GetUserColorArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUserExtensionsAsync(System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUsersAsync(AuxLabs.Twitch.Rest.Requests.GetUsersArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetVideosAsync(AuxLabs.Twitch.Rest.Requests.GetVideosArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.GetVipsAsync(AuxLabs.Twitch.Rest.Requests.GetVipsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchChannelAsync(AuxLabs.Twitch.Rest.Requests.PatchChannelArgs,AuxLabs.Twitch.Rest.Requests.PatchChannelBody,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchChatSettingsAsync(AuxLabs.Twitch.Rest.Requests.PatchChatSettingsArgs,AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchDropsStatusAsync(AuxLabs.Twitch.Rest.Requests.PatchDropsStatusArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchPollAsync(AuxLabs.Twitch.Rest.Requests.PatchPollBody,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchPredictionaAsync(AuxLabs.Twitch.Rest.Requests.PostPredictionBody,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchRewardAsync(AuxLabs.Twitch.Rest.Requests.ManageRewardArgs,AuxLabs.Twitch.Rest.Requests.PostRewardBody,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchRewardRedemptionAsync(AuxLabs.Twitch.RedemptionStatus,AuxLabs.Twitch.Rest.Requests.ModifyRedemptionsArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchScheduleAsync(AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchSegmentAsync(AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs,AuxLabs.Twitch.Rest.Requests.PatchSegmentBody,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PostAutomodMessageAsync(AuxLabs.Twitch.Rest.Requests.PostAutomodMessageArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBanAsync(AuxLabs.Twitch.Rest.Requests.PostBanArgs,AuxLabs.Twitch.Rest.Requests.PostBanBody,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBlockedTermAsync(AuxLabs.Twitch.Rest.Requests.PostBlockedTermArgs,AuxLabs.Twitch.Rest.Requests.PostBlockedTermBody,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBroadcastMarkerAsync(AuxLabs.Twitch.Rest.Requests.PostBroadcastMarkerBody,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PostChatAnnouncementAsync(AuxLabs.Twitch.Rest.Requests.PostAnnouncementArgs,AuxLabs.Twitch.Rest.Requests.PostAnnouncementBody,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PostClipAsync(AuxLabs.Twitch.Rest.Requests.PostClipArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PostCommercialAsync(AuxLabs.Twitch.Rest.Requests.PostCommercialBody,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PostEnforcementStatusAsync(AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusArgs,AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusBody,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PostEventSubscriptionAsync``1(AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody{``0},System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PostModeratorAsync(AuxLabs.Twitch.Rest.Requests.ManageModeratorArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PostPollAsync(AuxLabs.Twitch.Rest.Requests.PutPollBody,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PostPredictionAsync(AuxLabs.Twitch.Rest.Requests.PostPredictionBody,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PostRaidAsync(AuxLabs.Twitch.Rest.Requests.PostRaidArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PostRewardsAsync(AuxLabs.Twitch.Rest.Requests.PostRewardArgs,AuxLabs.Twitch.Rest.Requests.PostRewardBody,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PostSegmentAsync(AuxLabs.Twitch.Rest.Requests.PostSegmentArgs,AuxLabs.Twitch.Rest.Requests.PostSegmentBody,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PostShoutoutAsync(AuxLabs.Twitch.Rest.Requests.PostShoutoutArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PostVipAsync(AuxLabs.Twitch.Rest.Requests.ManageVipArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PostWhisperAsync(AuxLabs.Twitch.Rest.Requests.PostWhisperArgs,AuxLabs.Twitch.Rest.Requests.PostWhisperBody,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PutAutomodSettingsAsync(AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs,AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PutBlockAsync(AuxLabs.Twitch.Rest.Requests.PutBlockArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PutExtensionsAsync(AuxLabs.Twitch.Rest.Models.ExtensionMap,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PutShieldModeAsync(AuxLabs.Twitch.Rest.Requests.PutShieldModeArgs,AuxLabs.Twitch.Rest.Requests.PutShieldModeBody,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PutUserAsync(AuxLabs.Twitch.Rest.Requests.PutUserArgs,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.Api.ITwitchApi.PutUserChatColorAsync(AuxLabs.Twitch.Rest.Requests.PutUserChatColorArgs,System.Nullable{System.Threading.CancellationToken})
  langs:
  - csharp
  - vb
  name: ITwitchApi
  nameWithType: ITwitchApi
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi
  type: Interface
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: ITwitchApi
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 10
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  syntax:
    content: >-
      [Header("User-Agent", "AuxLabs (https://github.com/AuxLabs/Twitch)")]

      public interface ITwitchApi : IDisposable
    content.vb: >-
      <Header("User-Agent", "AuxLabs (https://github.com/AuxLabs/Twitch)")>

      Public Interface ITwitchApi Inherits IDisposable
  inheritedMembers:
  - System.IDisposable.Dispose
  attributes:
  - type: RestEase.HeaderAttribute
    ctor: RestEase.HeaderAttribute.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: User-Agent
    - type: System.String
      value: AuxLabs (https://github.com/AuxLabs/Twitch)
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.Authorization
  commentId: P:AuxLabs.Twitch.Rest.Api.ITwitchApi.Authorization
  id: Authorization
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: Authorization
  nameWithType: ITwitchApi.Authorization
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.Authorization
  type: Property
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: Authorization
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 13
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  syntax:
    content: >-
      [Header("Authorization")]

      AuthenticationHeaderValue Authorization { get; set; }
    parameters: []
    return:
      type: System.Net.Http.Headers.AuthenticationHeaderValue
    content.vb: >-
      <Header("Authorization")>

      Property Authorization As AuthenticationHeaderValue
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.Authorization*
  attributes:
  - type: RestEase.HeaderAttribute
    ctor: RestEase.HeaderAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Authorization
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.ClientId
  commentId: P:AuxLabs.Twitch.Rest.Api.ITwitchApi.ClientId
  id: ClientId
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: ClientId
  nameWithType: ITwitchApi.ClientId
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.ClientId
  type: Property
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: ClientId
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 15
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  syntax:
    content: >-
      [Header("Client-ID")]

      string ClientId { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <Header("Client-ID")>

      Property ClientId As String
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.ClientId*
  attributes:
  - type: RestEase.HeaderAttribute
    ctor: RestEase.HeaderAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Client-ID
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostCommercialAsync(AuxLabs.Twitch.Rest.Requests.PostCommercialBody,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostCommercialAsync(AuxLabs.Twitch.Rest.Requests.PostCommercialBody,System.Nullable{System.Threading.CancellationToken})
  id: PostCommercialAsync(AuxLabs.Twitch.Rest.Requests.PostCommercialBody,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PostCommercialAsync(PostCommercialBody, CancellationToken?)
  nameWithType: ITwitchApi.PostCommercialAsync(PostCommercialBody, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostCommercialAsync(AuxLabs.Twitch.Rest.Requests.PostCommercialBody, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PostCommercialAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 26
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Starts a commercial on the specified channel.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:edit:commercial</code> scope.
  example: []
  syntax:
    content: >-
      [Post("channels/commercial")]

      Task<TwitchResponse<Commercial>> PostCommercialAsync(PostCommercialBody args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.PostCommercialBody
      attributes:
      - type: RestEase.BodyAttribute
        ctor: RestEase.BodyAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Commercial}}
      description: A single <xref href="AuxLabs.Twitch.Rest.Models.Commercial" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Post("channels/commercial")>

      Function PostCommercialAsync(args As PostCommercialBody, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of Commercial))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostCommercialAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 404 Not Found
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PostAttribute
    ctor: RestEase.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: channels/commercial
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetExtensionAnalyticsAsync(AuxLabs.Twitch.Rest.Requests.GetExtensionAnalyticsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetExtensionAnalyticsAsync(AuxLabs.Twitch.Rest.Requests.GetExtensionAnalyticsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetExtensionAnalyticsAsync(AuxLabs.Twitch.Rest.Requests.GetExtensionAnalyticsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetExtensionAnalyticsAsync(GetExtensionAnalyticsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetExtensionAnalyticsAsync(GetExtensionAnalyticsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetExtensionAnalyticsAsync(AuxLabs.Twitch.Rest.Requests.GetExtensionAnalyticsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetExtensionAnalyticsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 38
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets an analytics report for one or more extensions. The response contains the URLs used to download the reports (CSV files).
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>analytics:read:extensions</code> scope.
  example: []
  syntax:
    content: >-
      [Get("analytics/extensions")]

      Task<TwitchMetaResponse<ExtensionAnalytic>> GetExtensionAnalyticsAsync(GetExtensionAnalyticsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetExtensionAnalyticsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.ExtensionAnalytic}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.ExtensionAnalytic" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("analytics/extensions")>

      Function GetExtensionAnalyticsAsync(args As GetExtensionAnalyticsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of ExtensionAnalytic))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetExtensionAnalyticsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 404 Not Found
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: analytics/extensions
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGameAnalyticsAsync(AuxLabs.Twitch.Rest.Requests.GetGameAnalyticsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGameAnalyticsAsync(AuxLabs.Twitch.Rest.Requests.GetGameAnalyticsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetGameAnalyticsAsync(AuxLabs.Twitch.Rest.Requests.GetGameAnalyticsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetGameAnalyticsAsync(GetGameAnalyticsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetGameAnalyticsAsync(GetGameAnalyticsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGameAnalyticsAsync(AuxLabs.Twitch.Rest.Requests.GetGameAnalyticsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetGameAnalyticsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 47
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets an analytics report for one or more games. The response contains the URLs used to download the reports (CSV files).
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>analytics:read:games</code> scope.
  example: []
  syntax:
    content: >-
      [Get("analytics/games")]

      Task<TwitchMetaResponse<GameAnalytic>> GetGameAnalyticsAsync(GetGameAnalyticsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetGameAnalyticsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.GameAnalytic}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.GameAnalytic" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("analytics/games")>

      Function GetGameAnalyticsAsync(args As GetGameAnalyticsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of GameAnalytic))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGameAnalyticsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 404 Not Found
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: analytics/games
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBitsLeaderboardAsync(AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBitsLeaderboardAsync(AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetBitsLeaderboardAsync(AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetBitsLeaderboardAsync(GetBitsLeaderboardArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetBitsLeaderboardAsync(GetBitsLeaderboardArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBitsLeaderboardAsync(AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetBitsLeaderboardAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 59
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets the Bits leaderboard for the authenticated broadcaster.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>bits:read</code> scope.
  example: []
  syntax:
    content: >-
      [Get("bits/leaderboard")]

      Task<TwitchMetaResponse<BitsUser>> GetBitsLeaderboardAsync(GetBitsLeaderboardArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.BitsUser}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.BitsUser" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("bits/leaderboard")>

      Function GetBitsLeaderboardAsync(args As GetBitsLeaderboardArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of BitsUser))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBitsLeaderboardAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 404 Not Found
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: bits/leaderboard
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCheermotesAsync(AuxLabs.Twitch.Rest.Requests.GetCheermotesArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCheermotesAsync(AuxLabs.Twitch.Rest.Requests.GetCheermotesArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetCheermotesAsync(AuxLabs.Twitch.Rest.Requests.GetCheermotesArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetCheermotesAsync(GetCheermotesArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetCheermotesAsync(GetCheermotesArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCheermotesAsync(AuxLabs.Twitch.Rest.Requests.GetCheermotesArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetCheermotesAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 64
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets a collection of Cheermotes that can be used to cheer bits in any bits-enabled channel.
  example: []
  syntax:
    content: >-
      [Get("bits/cheermotes")]

      Task<TwitchResponse<Cheermote>> GetCheermotesAsync(GetCheermotesArgs args = null, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetCheermotesArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Cheermote}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.Cheermote" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("bits/cheermotes")>

      Function GetCheermotesAsync(args As GetCheermotesArgs = Nothing, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of Cheermote))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCheermotesAsync*
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: bits/cheermotes
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetExtensionTransactionsAsync(AuxLabs.Twitch.Rest.Requests.GetExtensionTransactionsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetExtensionTransactionsAsync(AuxLabs.Twitch.Rest.Requests.GetExtensionTransactionsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetExtensionTransactionsAsync(AuxLabs.Twitch.Rest.Requests.GetExtensionTransactionsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetExtensionTransactionsAsync(GetExtensionTransactionsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetExtensionTransactionsAsync(GetExtensionTransactionsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetExtensionTransactionsAsync(AuxLabs.Twitch.Rest.Requests.GetExtensionTransactionsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetExtensionTransactionsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 71
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets an extension’s list of transactions.
  remarks: Requires an <a href="https://dev.twitch.tv/docs/authentication#app-access-tokens">app access token</a>.
  example: []
  syntax:
    content: >-
      [Get("extensions/transactions")]

      Task<TwitchMetaResponse<ExtensionTransaction>> GetExtensionTransactionsAsync(GetExtensionTransactionsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetExtensionTransactionsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.ExtensionTransaction}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.ExtensionTransaction" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("extensions/transactions")>

      Function GetExtensionTransactionsAsync(args As GetExtensionTransactionsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of ExtensionTransaction))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetExtensionTransactionsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 404 Not Found
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: extensions/transactions
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelsAsync(AuxLabs.Twitch.Rest.Requests.GetChannelsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelsAsync(AuxLabs.Twitch.Rest.Requests.GetChannelsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetChannelsAsync(AuxLabs.Twitch.Rest.Requests.GetChannelsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetChannelsAsync(GetChannelsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetChannelsAsync(GetChannelsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelsAsync(AuxLabs.Twitch.Rest.Requests.GetChannelsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetChannelsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 80
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets information about one or more channels.
  example: []
  syntax:
    content: >-
      [Get("channels")]

      Task<TwitchResponse<Channel>> GetChannelsAsync(GetChannelsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetChannelsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Channel}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.Channel" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("channels")>

      Function GetChannelsAsync(args As GetChannelsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of Channel))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 404 Not Found
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: channels
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchChannelAsync(AuxLabs.Twitch.Rest.Requests.PatchChannelArgs,AuxLabs.Twitch.Rest.Requests.PatchChannelBody,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchChannelAsync(AuxLabs.Twitch.Rest.Requests.PatchChannelArgs,AuxLabs.Twitch.Rest.Requests.PatchChannelBody,System.Nullable{System.Threading.CancellationToken})
  id: PatchChannelAsync(AuxLabs.Twitch.Rest.Requests.PatchChannelArgs,AuxLabs.Twitch.Rest.Requests.PatchChannelBody,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PatchChannelAsync(PatchChannelArgs, PatchChannelBody, CancellationToken?)
  nameWithType: ITwitchApi.PatchChannelAsync(PatchChannelArgs, PatchChannelBody, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchChannelAsync(AuxLabs.Twitch.Rest.Requests.PatchChannelArgs, AuxLabs.Twitch.Rest.Requests.PatchChannelBody, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PatchChannelAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 88
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Updates a channel’s properties.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:manage:broadcast</code> scope.
  example: []
  syntax:
    content: >-
      [Patch("channels")]

      Task PatchChannelAsync(PatchChannelArgs args, PatchChannelBody body, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.PatchChannelArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: body
      type: AuxLabs.Twitch.Rest.Requests.PatchChannelBody
      attributes:
      - type: RestEase.BodyAttribute
        ctor: RestEase.BodyAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Patch("channels")>

      Function PatchChannelAsync(args As PatchChannelArgs, body As PatchChannelBody, cancelToken As CancellationToken? = Nothing) As Task
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchChannelAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PatchAttribute
    ctor: RestEase.PatchAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: channels
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelEditorsAsync(AuxLabs.Twitch.Rest.Requests.GetChannelEditorsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelEditorsAsync(AuxLabs.Twitch.Rest.Requests.GetChannelEditorsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetChannelEditorsAsync(AuxLabs.Twitch.Rest.Requests.GetChannelEditorsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetChannelEditorsAsync(GetChannelEditorsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetChannelEditorsAsync(GetChannelEditorsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelEditorsAsync(AuxLabs.Twitch.Rest.Requests.GetChannelEditorsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetChannelEditorsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 97
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets the broadcaster’s list editors.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:read:editors</code> scope.
  example: []
  syntax:
    content: >-
      [Get("channels/editors")]

      Task<TwitchResponse<ChannelEditor>> GetChannelEditorsAsync(GetChannelEditorsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetChannelEditorsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.ChannelEditor}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.ChannelEditor" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("channels/editors")>

      Function GetChannelEditorsAsync(args As GetChannelEditorsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of ChannelEditor))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelEditorsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 404 Not Found
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: channels/editors
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowedChannelsAsync(AuxLabs.Twitch.Rest.Requests.GetFollowedChannelsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowedChannelsAsync(AuxLabs.Twitch.Rest.Requests.GetFollowedChannelsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetFollowedChannelsAsync(AuxLabs.Twitch.Rest.Requests.GetFollowedChannelsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetFollowedChannelsAsync(GetFollowedChannelsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetFollowedChannelsAsync(GetFollowedChannelsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowedChannelsAsync(AuxLabs.Twitch.Rest.Requests.GetFollowedChannelsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetFollowedChannelsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 106
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets a list of broadcasters that the specified user follows.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>user:read:follows</code> scope.
  example: []
  syntax:
    content: >-
      [Get("channels/followed")]

      Task<TwitchMetaResponse<FollowedChannel>> GetFollowedChannelsAsync(GetFollowedChannelsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetFollowedChannelsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.FollowedChannel}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.FollowedChannel" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("channels/followed")>

      Function GetFollowedChannelsAsync(args As GetFollowedChannelsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of FollowedChannel))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowedChannelsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: channels/followed
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowersAsync(AuxLabs.Twitch.Rest.Requests.GetFollowersArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowersAsync(AuxLabs.Twitch.Rest.Requests.GetFollowersArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetFollowersAsync(AuxLabs.Twitch.Rest.Requests.GetFollowersArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetFollowersAsync(GetFollowersArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetFollowersAsync(GetFollowersArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowersAsync(AuxLabs.Twitch.Rest.Requests.GetFollowersArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetFollowersAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 115
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets a list of users that follow the specified broadcaster.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>moderator:read:followers</code> scope.
  example: []
  syntax:
    content: >-
      [Get("channels/followed")]

      Task<TwitchMetaResponse<Follower>> GetFollowersAsync(GetFollowersArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetFollowersArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Follower}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.Follower" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("channels/followed")>

      Function GetFollowersAsync(args As GetFollowersArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of Follower))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowersAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: channels/followed
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostRewardsAsync(AuxLabs.Twitch.Rest.Requests.PostRewardArgs,AuxLabs.Twitch.Rest.Requests.PostRewardBody,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostRewardsAsync(AuxLabs.Twitch.Rest.Requests.PostRewardArgs,AuxLabs.Twitch.Rest.Requests.PostRewardBody,System.Nullable{System.Threading.CancellationToken})
  id: PostRewardsAsync(AuxLabs.Twitch.Rest.Requests.PostRewardArgs,AuxLabs.Twitch.Rest.Requests.PostRewardBody,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PostRewardsAsync(PostRewardArgs, PostRewardBody, CancellationToken?)
  nameWithType: ITwitchApi.PostRewardsAsync(PostRewardArgs, PostRewardBody, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostRewardsAsync(AuxLabs.Twitch.Rest.Requests.PostRewardArgs, AuxLabs.Twitch.Rest.Requests.PostRewardBody, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PostRewardsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 127
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Creates a custom reward in the broadcaster’s channel.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:manage:redemptions</code> scope.
  example: []
  syntax:
    content: >-
      [Post("channel_points/custom_rewards")]

      Task<TwitchResponse<Reward>> PostRewardsAsync(PostRewardArgs args, PostRewardBody body, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.PostRewardArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: body
      type: AuxLabs.Twitch.Rest.Requests.PostRewardBody
      attributes:
      - type: RestEase.BodyAttribute
        ctor: RestEase.BodyAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Reward}}
      description: A single <xref href="AuxLabs.Twitch.Rest.Models.Reward" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Post("channel_points/custom_rewards")>

      Function PostRewardsAsync(args As PostRewardArgs, body As PostRewardBody, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of Reward))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostRewardsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PostAttribute
    ctor: RestEase.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: channel_points/custom_rewards
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteRewardAsync(AuxLabs.Twitch.Rest.Requests.ManageRewardArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteRewardAsync(AuxLabs.Twitch.Rest.Requests.ManageRewardArgs,System.Nullable{System.Threading.CancellationToken})
  id: DeleteRewardAsync(AuxLabs.Twitch.Rest.Requests.ManageRewardArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: DeleteRewardAsync(ManageRewardArgs, CancellationToken?)
  nameWithType: ITwitchApi.DeleteRewardAsync(ManageRewardArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteRewardAsync(AuxLabs.Twitch.Rest.Requests.ManageRewardArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: DeleteRewardAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 135
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Deletes a custom reward that the broadcaster created. Only the app that created a reward is able to delete it.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:manage:redemptions</code> scope.
  example: []
  syntax:
    content: >-
      [Delete("channel_points/custom_rewards")]

      Task DeleteRewardAsync(ManageRewardArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.ManageRewardArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Delete("channel_points/custom_rewards")>

      Function DeleteRewardAsync(args As ManageRewardArgs, cancelToken As CancellationToken? = Nothing) As Task
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteRewardAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.DeleteAttribute
    ctor: RestEase.DeleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: channel_points/custom_rewards
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetRewardsAsync(AuxLabs.Twitch.Rest.Requests.GetRewardArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetRewardsAsync(AuxLabs.Twitch.Rest.Requests.GetRewardArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetRewardsAsync(AuxLabs.Twitch.Rest.Requests.GetRewardArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetRewardsAsync(GetRewardArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetRewardsAsync(GetRewardArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetRewardsAsync(AuxLabs.Twitch.Rest.Requests.GetRewardArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetRewardsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 144
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets a list of custom rewards that the specified broadcaster created.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with either the <code>channel:read:redemptions</code> or <code>channel:manage:redemptions</code> scopes.
  example: []
  syntax:
    content: >-
      [Get("channel_points/custom_rewards")]

      Task<TwitchResponse<Reward>> GetRewardsAsync(GetRewardArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetRewardArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Reward}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.Reward" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("channel_points/custom_rewards")>

      Function GetRewardsAsync(args As GetRewardArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of Reward))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetRewardsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: channel_points/custom_rewards
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetRewardRedemptionAsync(AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetRewardRedemptionAsync(AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetRewardRedemptionAsync(AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetRewardRedemptionAsync(GetRedemptionsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetRewardRedemptionAsync(GetRedemptionsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetRewardRedemptionAsync(AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetRewardRedemptionAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 153
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets a list of redemptions for the specified custom reward. Only the app that created a reward is able to see it's redemptions.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with either the <code>channel:read:redemptions</code> or <code>channel:manage:redemptions</code> scopes.
  example: []
  syntax:
    content: >-
      [Get("channel_points/custom_rewards/redemptions")]

      Task<TwitchResponse<Redemption>> GetRewardRedemptionAsync(GetRedemptionsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Redemption}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.Redemption" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("channel_points/custom_rewards/redemptions")>

      Function GetRewardRedemptionAsync(args As GetRedemptionsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of Redemption))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetRewardRedemptionAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: channel_points/custom_rewards/redemptions
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchRewardAsync(AuxLabs.Twitch.Rest.Requests.ManageRewardArgs,AuxLabs.Twitch.Rest.Requests.PostRewardBody,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchRewardAsync(AuxLabs.Twitch.Rest.Requests.ManageRewardArgs,AuxLabs.Twitch.Rest.Requests.PostRewardBody,System.Nullable{System.Threading.CancellationToken})
  id: PatchRewardAsync(AuxLabs.Twitch.Rest.Requests.ManageRewardArgs,AuxLabs.Twitch.Rest.Requests.PostRewardBody,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PatchRewardAsync(ManageRewardArgs, PostRewardBody, CancellationToken?)
  nameWithType: ITwitchApi.PatchRewardAsync(ManageRewardArgs, PostRewardBody, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchRewardAsync(AuxLabs.Twitch.Rest.Requests.ManageRewardArgs, AuxLabs.Twitch.Rest.Requests.PostRewardBody, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PatchRewardAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 162
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Updates a custom reward. The app used to create the reward is the only app that may update the reward.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:manage:redemptions</code> scope.
  example: []
  syntax:
    content: >-
      [Patch("channel_points/custom_rewards")]

      Task<TwitchResponse<Reward>> PatchRewardAsync(ManageRewardArgs args, PostRewardBody body, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.ManageRewardArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: body
      type: AuxLabs.Twitch.Rest.Requests.PostRewardBody
      attributes:
      - type: RestEase.BodyAttribute
        ctor: RestEase.BodyAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Reward}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.Reward" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Patch("channel_points/custom_rewards")>

      Function PatchRewardAsync(args As ManageRewardArgs, body As PostRewardBody, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of Reward))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchRewardAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PatchAttribute
    ctor: RestEase.PatchAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: channel_points/custom_rewards
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchRewardRedemptionAsync(AuxLabs.Twitch.RedemptionStatus,AuxLabs.Twitch.Rest.Requests.ModifyRedemptionsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchRewardRedemptionAsync(AuxLabs.Twitch.RedemptionStatus,AuxLabs.Twitch.Rest.Requests.ModifyRedemptionsArgs,System.Nullable{System.Threading.CancellationToken})
  id: PatchRewardRedemptionAsync(AuxLabs.Twitch.RedemptionStatus,AuxLabs.Twitch.Rest.Requests.ModifyRedemptionsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PatchRewardRedemptionAsync(RedemptionStatus, ModifyRedemptionsArgs, CancellationToken?)
  nameWithType: ITwitchApi.PatchRewardRedemptionAsync(RedemptionStatus, ModifyRedemptionsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchRewardRedemptionAsync(AuxLabs.Twitch.RedemptionStatus, AuxLabs.Twitch.Rest.Requests.ModifyRedemptionsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PatchRewardRedemptionAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 171
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Updates a redemption’s status. The app used to create the reward is the only app that may update the redemption.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:manage:redemptions</code> scope.
  example: []
  syntax:
    content: >-
      [Patch("channel_points/custom_rewards/redemptions")]

      Task<TwitchResponse<Redemption>> PatchRewardRedemptionAsync(RedemptionStatus status, ModifyRedemptionsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: status
      type: AuxLabs.Twitch.RedemptionStatus
      attributes:
      - type: RestEase.BodyAttribute
        ctor: RestEase.BodyAttribute.#ctor
        arguments: []
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.ModifyRedemptionsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Redemption}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.Reward" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Patch("channel_points/custom_rewards/redemptions")>

      Function PatchRewardRedemptionAsync(status As RedemptionStatus, args As ModifyRedemptionsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of Redemption))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchRewardRedemptionAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PatchAttribute
    ctor: RestEase.PatchAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: channel_points/custom_rewards/redemptions
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCharityCampaignAsync(AuxLabs.Twitch.Rest.Requests.GetCharityCampaignArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCharityCampaignAsync(AuxLabs.Twitch.Rest.Requests.GetCharityCampaignArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetCharityCampaignAsync(AuxLabs.Twitch.Rest.Requests.GetCharityCampaignArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetCharityCampaignAsync(GetCharityCampaignArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetCharityCampaignAsync(GetCharityCampaignArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCharityCampaignAsync(AuxLabs.Twitch.Rest.Requests.GetCharityCampaignArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetCharityCampaignAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 183
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets information about the charity campaign that a broadcaster is running.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:read:charity</code> scope.
  example: []
  syntax:
    content: >-
      [Get("charity/campaigns")]

      Task<TwitchResponse<CharityCampaign>> GetCharityCampaignAsync(GetCharityCampaignArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetCharityCampaignArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.CharityCampaign}}
      description: A <xref href="AuxLabs.Twitch.Rest.Models.CharityCampaign" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Get("charity/campaigns")>

      Function GetCharityCampaignAsync(args As GetCharityCampaignArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of CharityCampaign))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCharityCampaignAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: charity/campaigns
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCharityDonationsAsync(AuxLabs.Twitch.Rest.Requests.GetCharityDonationsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCharityDonationsAsync(AuxLabs.Twitch.Rest.Requests.GetCharityDonationsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetCharityDonationsAsync(AuxLabs.Twitch.Rest.Requests.GetCharityDonationsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetCharityDonationsAsync(GetCharityDonationsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetCharityDonationsAsync(GetCharityDonationsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCharityDonationsAsync(AuxLabs.Twitch.Rest.Requests.GetCharityDonationsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetCharityDonationsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 192
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets the list of donations that users have made to the broadcaster’s active charity campaign.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:read:charity</code> scope.
  example: []
  syntax:
    content: >-
      [Get("charity/donations")]

      Task<TwitchMetaResponse<CharityDonation>> GetCharityDonationsAsync(GetCharityDonationsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetCharityDonationsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.CharityDonation}}
      description: A <xref href="AuxLabs.Twitch.Rest.Models.CharityDonation" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Get("charity/donations")>

      Function GetCharityDonationsAsync(args As GetCharityDonationsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of CharityDonation))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCharityDonationsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: charity/donations
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChattersAsync(AuxLabs.Twitch.Rest.Requests.GetChattersArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChattersAsync(AuxLabs.Twitch.Rest.Requests.GetChattersArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetChattersAsync(AuxLabs.Twitch.Rest.Requests.GetChattersArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetChattersAsync(GetChattersArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetChattersAsync(GetChattersArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChattersAsync(AuxLabs.Twitch.Rest.Requests.GetChattersArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetChattersAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 204
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets the list of users that are connected to the broadcaster’s chat session.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>moderator:read:chatters</code> scope.
  example: []
  syntax:
    content: >-
      [Get("chat/chatters")]

      Task<TwitchMetaResponse<SimpleUser>> GetChattersAsync(GetChattersArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetChattersArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.SimpleUser}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.SimpleUser" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("chat/chatters")>

      Function GetChattersAsync(args As GetChattersArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of SimpleUser))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChattersAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: chat/chatters
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmotesAsync(AuxLabs.Twitch.Rest.Requests.GetEmotesArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmotesAsync(AuxLabs.Twitch.Rest.Requests.GetEmotesArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetEmotesAsync(AuxLabs.Twitch.Rest.Requests.GetEmotesArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetEmotesAsync(GetEmotesArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetEmotesAsync(GetEmotesArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmotesAsync(AuxLabs.Twitch.Rest.Requests.GetEmotesArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetEmotesAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 210
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets the broadcaster’s list of custom emotes.
  example: []
  syntax:
    content: >-
      [Get("chat/emotes")]

      Task<TwitchResponse<Emote>> GetEmotesAsync(GetEmotesArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetEmotesArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Emote}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.Emote" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("chat/emotes")>

      Function GetEmotesAsync(args As GetEmotesArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of Emote))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmotesAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: chat/emotes
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmotesAsync(System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmotesAsync(System.Nullable{System.Threading.CancellationToken})
  id: GetEmotesAsync(System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetEmotesAsync(CancellationToken?)
  nameWithType: ITwitchApi.GetEmotesAsync(CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmotesAsync(System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetEmotesAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 216
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets the list of global emotes.
  example: []
  syntax:
    content: >-
      [Get("chat/emotes/global")]

      Task<TwitchResponse<GlobalEmote>> GetEmotesAsync(CancellationToken? cancelToken = null)
    parameters:
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.GlobalEmote}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.GlobalEmote" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("chat/emotes/global")>

      Function GetEmotesAsync(cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of GlobalEmote))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmotesAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 401 Unauthorized
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: chat/emotes/global
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmoteSetsAsync(AuxLabs.Twitch.Rest.Requests.GetEmoteSetsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmoteSetsAsync(AuxLabs.Twitch.Rest.Requests.GetEmoteSetsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetEmoteSetsAsync(AuxLabs.Twitch.Rest.Requests.GetEmoteSetsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetEmoteSetsAsync(GetEmoteSetsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetEmoteSetsAsync(GetEmoteSetsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmoteSetsAsync(AuxLabs.Twitch.Rest.Requests.GetEmoteSetsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetEmoteSetsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 222
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets emotes for one or more specified emote sets.
  example: []
  syntax:
    content: >-
      [Get("chat/emotes/set")]

      Task<TwitchResponse<Emote>> GetEmoteSetsAsync(GetEmoteSetsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetEmoteSetsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Emote}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.Emote" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("chat/emotes/set")>

      Function GetEmoteSetsAsync(args As GetEmoteSetsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of Emote))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmoteSetsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: chat/emotes/set
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBadgesAsync(AuxLabs.Twitch.Rest.Requests.GetBadgesArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBadgesAsync(AuxLabs.Twitch.Rest.Requests.GetBadgesArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetBadgesAsync(AuxLabs.Twitch.Rest.Requests.GetBadgesArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetBadgesAsync(GetBadgesArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetBadgesAsync(GetBadgesArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBadgesAsync(AuxLabs.Twitch.Rest.Requests.GetBadgesArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetBadgesAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 228
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets the broadcaster’s list of custom chat badges.
  example: []
  syntax:
    content: >-
      [Get("chat/badges")]

      Task<TwitchResponse<BadgeSet>> GetBadgesAsync(GetBadgesArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetBadgesArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.BadgeSet}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.BadgeSet" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("chat/badges")>

      Function GetBadgesAsync(args As GetBadgesArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of BadgeSet))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBadgesAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: chat/badges
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBadgesAsync(System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBadgesAsync(System.Nullable{System.Threading.CancellationToken})
  id: GetBadgesAsync(System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetBadgesAsync(CancellationToken?)
  nameWithType: ITwitchApi.GetBadgesAsync(CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBadgesAsync(System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetBadgesAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 234
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets Twitch’s list of chat badges, which users may use in any channel’s chat room.
  example: []
  syntax:
    content: >-
      [Get("chat/badges/global")]

      Task<TwitchResponse<BadgeSet>> GetBadgesAsync(CancellationToken? cancelToken = null)
    parameters:
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.BadgeSet}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.BadgeSet" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("chat/badges/global")>

      Function GetBadgesAsync(cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of BadgeSet))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBadgesAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 401 Unauthorized
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: chat/badges/global
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChatSettingsAsync(AuxLabs.Twitch.Rest.Requests.GetChatSettingsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChatSettingsAsync(AuxLabs.Twitch.Rest.Requests.GetChatSettingsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetChatSettingsAsync(AuxLabs.Twitch.Rest.Requests.GetChatSettingsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetChatSettingsAsync(GetChatSettingsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetChatSettingsAsync(GetChatSettingsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChatSettingsAsync(AuxLabs.Twitch.Rest.Requests.GetChatSettingsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetChatSettingsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 240
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets the broadcaster’s chat settings.
  example: []
  syntax:
    content: >-
      [Get("chat/settings")]

      Task<TwitchResponse<ChatSettings>> GetChatSettingsAsync(GetChatSettingsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetChatSettingsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.ChatSettings}}
      description: A single <xref href="AuxLabs.Twitch.Rest.Models.ChatSettings" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Get("chat/settings")>

      Function GetChatSettingsAsync(args As GetChatSettingsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of ChatSettings))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChatSettingsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: chat/settings
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchChatSettingsAsync(AuxLabs.Twitch.Rest.Requests.PatchChatSettingsArgs,AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchChatSettingsAsync(AuxLabs.Twitch.Rest.Requests.PatchChatSettingsArgs,AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody,System.Nullable{System.Threading.CancellationToken})
  id: PatchChatSettingsAsync(AuxLabs.Twitch.Rest.Requests.PatchChatSettingsArgs,AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PatchChatSettingsAsync(PatchChatSettingsArgs, PatchChatSettingsBody, CancellationToken?)
  nameWithType: ITwitchApi.PatchChatSettingsAsync(PatchChatSettingsArgs, PatchChatSettingsBody, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchChatSettingsAsync(AuxLabs.Twitch.Rest.Requests.PatchChatSettingsArgs, AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PatchChatSettingsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 249
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Updates the broadcaster’s chat settings.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>moderator:manage:chat_settings</code> scope.
  example: []
  syntax:
    content: >-
      [Patch("chat/settings")]

      Task<TwitchResponse<ChatSettings>> PatchChatSettingsAsync(PatchChatSettingsArgs args, PatchChatSettingsBody body, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: body
      type: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody
      attributes:
      - type: RestEase.BodyAttribute
        ctor: RestEase.BodyAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.ChatSettings}}
      description: A single <xref href="AuxLabs.Twitch.Rest.Models.ChatSettings" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Patch("chat/settings")>

      Function PatchChatSettingsAsync(args As PatchChatSettingsArgs, body As PatchChatSettingsBody, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of ChatSettings))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchChatSettingsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PatchAttribute
    ctor: RestEase.PatchAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: chat/settings
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostChatAnnouncementAsync(AuxLabs.Twitch.Rest.Requests.PostAnnouncementArgs,AuxLabs.Twitch.Rest.Requests.PostAnnouncementBody,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostChatAnnouncementAsync(AuxLabs.Twitch.Rest.Requests.PostAnnouncementArgs,AuxLabs.Twitch.Rest.Requests.PostAnnouncementBody,System.Nullable{System.Threading.CancellationToken})
  id: PostChatAnnouncementAsync(AuxLabs.Twitch.Rest.Requests.PostAnnouncementArgs,AuxLabs.Twitch.Rest.Requests.PostAnnouncementBody,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PostChatAnnouncementAsync(PostAnnouncementArgs, PostAnnouncementBody, CancellationToken?)
  nameWithType: ITwitchApi.PostChatAnnouncementAsync(PostAnnouncementArgs, PostAnnouncementBody, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostChatAnnouncementAsync(AuxLabs.Twitch.Rest.Requests.PostAnnouncementArgs, AuxLabs.Twitch.Rest.Requests.PostAnnouncementBody, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PostChatAnnouncementAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 257
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Sends an announcement to the broadcaster’s chat room.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>moderator:manage:announcements</code> scope.
  example: []
  syntax:
    content: >-
      [Post("chat/announcements")]

      Task PostChatAnnouncementAsync(PostAnnouncementArgs args, PostAnnouncementBody body, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.PostAnnouncementArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: body
      type: AuxLabs.Twitch.Rest.Requests.PostAnnouncementBody
      attributes:
      - type: RestEase.BodyAttribute
        ctor: RestEase.BodyAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Post("chat/announcements")>

      Function PostChatAnnouncementAsync(args As PostAnnouncementArgs, body As PostAnnouncementBody, cancelToken As CancellationToken? = Nothing) As Task
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostChatAnnouncementAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PostAttribute
    ctor: RestEase.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: chat/announcements
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostShoutoutAsync(AuxLabs.Twitch.Rest.Requests.PostShoutoutArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostShoutoutAsync(AuxLabs.Twitch.Rest.Requests.PostShoutoutArgs,System.Nullable{System.Threading.CancellationToken})
  id: PostShoutoutAsync(AuxLabs.Twitch.Rest.Requests.PostShoutoutArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PostShoutoutAsync(PostShoutoutArgs, CancellationToken?)
  nameWithType: ITwitchApi.PostShoutoutAsync(PostShoutoutArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostShoutoutAsync(AuxLabs.Twitch.Rest.Requests.PostShoutoutArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PostShoutoutAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 265
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Sends a shoutout to the specified broadcaster.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>moderator:manage:shoutouts</code> scope.
  example: []
  syntax:
    content: >-
      [Post("chat/shoutouts")]

      Task PostShoutoutAsync(PostShoutoutArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.PostShoutoutArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Post("chat/shoutouts")>

      Function PostShoutoutAsync(args As PostShoutoutArgs, cancelToken As CancellationToken? = Nothing) As Task
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostShoutoutAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PostAttribute
    ctor: RestEase.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: chat/shoutouts
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUserChatColorsAsync(AuxLabs.Twitch.Rest.Requests.GetUserColorArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUserChatColorsAsync(AuxLabs.Twitch.Rest.Requests.GetUserColorArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetUserChatColorsAsync(AuxLabs.Twitch.Rest.Requests.GetUserColorArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetUserChatColorsAsync(GetUserColorArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetUserChatColorsAsync(GetUserColorArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUserChatColorsAsync(AuxLabs.Twitch.Rest.Requests.GetUserColorArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetUserChatColorsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 271
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets the color used for the user’s name in chat.
  example: []
  syntax:
    content: >-
      [Get("chat/color")]

      Task<TwitchResponse<SimpleChatUser>> GetUserChatColorsAsync(GetUserColorArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetUserColorArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.SimpleChatUser}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.SimpleChatUser" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("chat/color")>

      Function GetUserChatColorsAsync(args As GetUserColorArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of SimpleChatUser))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUserChatColorsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: chat/color
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutUserChatColorAsync(AuxLabs.Twitch.Rest.Requests.PutUserChatColorArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PutUserChatColorAsync(AuxLabs.Twitch.Rest.Requests.PutUserChatColorArgs,System.Nullable{System.Threading.CancellationToken})
  id: PutUserChatColorAsync(AuxLabs.Twitch.Rest.Requests.PutUserChatColorArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PutUserChatColorAsync(PutUserChatColorArgs, CancellationToken?)
  nameWithType: ITwitchApi.PutUserChatColorAsync(PutUserChatColorArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutUserChatColorAsync(AuxLabs.Twitch.Rest.Requests.PutUserChatColorArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PutUserChatColorAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 279
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Updates the color used for the user's name in chat.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>user:manage:chat_color</code> scope.
  example: []
  syntax:
    content: >-
      [Put("chat/color")]

      Task PutUserChatColorAsync(PutUserChatColorArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.PutUserChatColorArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Put("chat/color")>

      Function PutUserChatColorAsync(args As PutUserChatColorArgs, cancelToken As CancellationToken? = Nothing) As Task
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutUserChatColorAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PutAttribute
    ctor: RestEase.PutAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: chat/color
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostClipAsync(AuxLabs.Twitch.Rest.Requests.PostClipArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostClipAsync(AuxLabs.Twitch.Rest.Requests.PostClipArgs,System.Nullable{System.Threading.CancellationToken})
  id: PostClipAsync(AuxLabs.Twitch.Rest.Requests.PostClipArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PostClipAsync(PostClipArgs, CancellationToken?)
  nameWithType: ITwitchApi.PostClipAsync(PostClipArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostClipAsync(AuxLabs.Twitch.Rest.Requests.PostClipArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PostClipAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 291
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Creates a clip from the broadcaster’s stream.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>clips:edit</code> scope.
  example: []
  syntax:
    content: >-
      [Post("clips")]

      Task<TwitchResponse<SimpleClip>> PostClipAsync(PostClipArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.PostClipArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.SimpleClip}}
      description: A single <xref href="AuxLabs.Twitch.Rest.Models.SimpleClip" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Post("clips")>

      Function PostClipAsync(args As PostClipArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of SimpleClip))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostClipAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PostAttribute
    ctor: RestEase.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: clips
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetClipsAsync(AuxLabs.Twitch.Rest.Requests.GetClipsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetClipsAsync(AuxLabs.Twitch.Rest.Requests.GetClipsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetClipsAsync(AuxLabs.Twitch.Rest.Requests.GetClipsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetClipsAsync(GetClipsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetClipsAsync(GetClipsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetClipsAsync(AuxLabs.Twitch.Rest.Requests.GetClipsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetClipsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 297
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets one or more video clips that were captured from streams.
  example: []
  syntax:
    content: >-
      [Get("clips")]

      Task<TwitchMetaResponse<Clip>> GetClipsAsync(GetClipsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetClipsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Clip}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.Clip" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("clips")>

      Function GetClipsAsync(args As GetClipsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of Clip))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetClipsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 404 Not Found
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: clips
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetDropsStatusAsync(AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetDropsStatusAsync(AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetDropsStatusAsync(AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetDropsStatusAsync(GetDropStatusArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetDropsStatusAsync(GetDropStatusArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetDropsStatusAsync(AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetDropsStatusAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 306
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets an organization’s list of entitlements that have been granted to a game, a user, or both.
  example: []
  syntax:
    content: >-
      [Get("entitlements/drops")]

      Task<TwitchMetaResponse<Entitlement>> GetDropsStatusAsync(GetDropStatusArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Entitlement}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.Entitlement" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("entitlements/drops")>

      Function GetDropsStatusAsync(args As GetDropStatusArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of Entitlement))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetDropsStatusAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: entitlements/drops
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchDropsStatusAsync(AuxLabs.Twitch.Rest.Requests.PatchDropsStatusArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchDropsStatusAsync(AuxLabs.Twitch.Rest.Requests.PatchDropsStatusArgs,System.Nullable{System.Threading.CancellationToken})
  id: PatchDropsStatusAsync(AuxLabs.Twitch.Rest.Requests.PatchDropsStatusArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PatchDropsStatusAsync(PatchDropsStatusArgs, CancellationToken?)
  nameWithType: ITwitchApi.PatchDropsStatusAsync(PatchDropsStatusArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchDropsStatusAsync(AuxLabs.Twitch.Rest.Requests.PatchDropsStatusArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PatchDropsStatusAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 312
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Updates the Drop entitlement’s fulfillment status.
  example: []
  syntax:
    content: >-
      [Patch("entitlements/drops")]

      Task<TwitchResponse<EntitlementDrop>> PatchDropsStatusAsync(PatchDropsStatusArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.PatchDropsStatusArgs
      attributes:
      - type: RestEase.BodyAttribute
        ctor: RestEase.BodyAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.EntitlementDrop}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.EntitlementDrop" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Patch("entitlements/drops")>

      Function PatchDropsStatusAsync(args As PatchDropsStatusArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of EntitlementDrop))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchDropsStatusAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  attributes:
  - type: RestEase.PatchAttribute
    ctor: RestEase.PatchAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: entitlements/drops
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostEventSubscriptionAsync``1(AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody{``0},System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostEventSubscriptionAsync``1(AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody{``0},System.Nullable{System.Threading.CancellationToken})
  id: PostEventSubscriptionAsync``1(AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody{``0},System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PostEventSubscriptionAsync<TCondition>(PostEventSubscriptionBody<TCondition>, CancellationToken?)
  nameWithType: ITwitchApi.PostEventSubscriptionAsync<TCondition>(PostEventSubscriptionBody<TCondition>, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostEventSubscriptionAsync<TCondition>(AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody<TCondition>, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PostEventSubscriptionAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 352
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Creates an EventSub subscription.
  remarks: >-
    Webhook transports require a <a href="https://dev.twitch.tv/docs/authentication#app-access-tokens">app access token</a> and 
       Websocket transports require a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>.
  example: []
  syntax:
    content: >-
      [Post("eventsub/subscriptions")]

      Task<EventSubResponse> PostEventSubscriptionAsync<TCondition>(PostEventSubscriptionBody<TCondition> args, CancellationToken? cancelToken = null) where TCondition : IEventCondition
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody{{TCondition}}
      attributes:
      - type: RestEase.BodyAttribute
        ctor: RestEase.BodyAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    typeParameters:
    - id: TCondition
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.EventSubResponse}
      description: An <xref href="AuxLabs.Twitch.Rest.Models.EventSubResponse" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Post("eventsub/subscriptions")>

      Function PostEventSubscriptionAsync(Of TCondition As IEventCondition)(args As PostEventSubscriptionBody(Of TCondition), cancelToken As CancellationToken? = Nothing) As Task(Of EventSubResponse)
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostEventSubscriptionAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden, 409 Conflict
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PostAttribute
    ctor: RestEase.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: eventsub/subscriptions
  nameWithType.vb: ITwitchApi.PostEventSubscriptionAsync(Of TCondition)(PostEventSubscriptionBody(Of TCondition), CancellationToken?)
  fullName.vb: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostEventSubscriptionAsync(Of TCondition)(AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody(Of TCondition), System.Threading.CancellationToken?)
  name.vb: PostEventSubscriptionAsync(Of TCondition)(PostEventSubscriptionBody(Of TCondition), CancellationToken?)
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteEventSubscriptionAsync(AuxLabs.Twitch.Rest.Requests.DeleteEventSubscriptionArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteEventSubscriptionAsync(AuxLabs.Twitch.Rest.Requests.DeleteEventSubscriptionArgs,System.Nullable{System.Threading.CancellationToken})
  id: DeleteEventSubscriptionAsync(AuxLabs.Twitch.Rest.Requests.DeleteEventSubscriptionArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: DeleteEventSubscriptionAsync(DeleteEventSubscriptionArgs, CancellationToken?)
  nameWithType: ITwitchApi.DeleteEventSubscriptionAsync(DeleteEventSubscriptionArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteEventSubscriptionAsync(AuxLabs.Twitch.Rest.Requests.DeleteEventSubscriptionArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: DeleteEventSubscriptionAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 360
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Deletes an EventSub subscription.
  remarks: >-
    Webhook transports require a <a href="https://dev.twitch.tv/docs/authentication#app-access-tokens">app access token</a> and 
       Websocket transports require a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>.
  example: []
  syntax:
    content: >-
      [Delete("eventsub/subscriptions")]

      Task DeleteEventSubscriptionAsync(DeleteEventSubscriptionArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.DeleteEventSubscriptionArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Delete("eventsub/subscriptions")>

      Function DeleteEventSubscriptionAsync(args As DeleteEventSubscriptionArgs, cancelToken As CancellationToken? = Nothing) As Task
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteEventSubscriptionAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 404 Not Found
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.DeleteAttribute
    ctor: RestEase.DeleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: eventsub/subscriptions
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEventSubscriptionsAsync(AuxLabs.Twitch.Rest.Requests.GetEventSubscriptionsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEventSubscriptionsAsync(AuxLabs.Twitch.Rest.Requests.GetEventSubscriptionsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetEventSubscriptionsAsync(AuxLabs.Twitch.Rest.Requests.GetEventSubscriptionsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetEventSubscriptionsAsync(GetEventSubscriptionsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetEventSubscriptionsAsync(GetEventSubscriptionsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEventSubscriptionsAsync(AuxLabs.Twitch.Rest.Requests.GetEventSubscriptionsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetEventSubscriptionsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 369
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets a collection of EventSub subscriptions that the client in the access token created.
  remarks: >-
    Webhook transports require a <a href="https://dev.twitch.tv/docs/authentication#app-access-tokens">app access token</a> and 
       Websocket transports require a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>.
  example: []
  syntax:
    content: >-
      [Get("eventsub/subscriptions")]

      Task<EventSubResponse> GetEventSubscriptionsAsync(GetEventSubscriptionsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetEventSubscriptionsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.EventSubResponse}
      description: An <xref href="AuxLabs.Twitch.Rest.Models.EventSubResponse" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Get("eventsub/subscriptions")>

      Function GetEventSubscriptionsAsync(args As GetEventSubscriptionsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of EventSubResponse)
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEventSubscriptionsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 404 Not Found
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: eventsub/subscriptions
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTopGamesAsync(AuxLabs.Twitch.Rest.Requests.GetTopGamesArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTopGamesAsync(AuxLabs.Twitch.Rest.Requests.GetTopGamesArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetTopGamesAsync(AuxLabs.Twitch.Rest.Requests.GetTopGamesArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetTopGamesAsync(GetTopGamesArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetTopGamesAsync(GetTopGamesArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTopGamesAsync(AuxLabs.Twitch.Rest.Requests.GetTopGamesArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetTopGamesAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 378
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets information about all broadcasts on Twitch.
  example: []
  syntax:
    content: >-
      [Get("games/top")]

      Task<TwitchMetaResponse<Game>> GetTopGamesAsync(GetTopGamesArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetTopGamesArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Game}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.Game" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("games/top")>

      Function GetTopGamesAsync(args As GetTopGamesArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of Game))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTopGamesAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: games/top
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGamesAsync(AuxLabs.Twitch.Rest.Requests.GetGamesArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGamesAsync(AuxLabs.Twitch.Rest.Requests.GetGamesArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetGamesAsync(AuxLabs.Twitch.Rest.Requests.GetGamesArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetGamesAsync(GetGamesArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetGamesAsync(GetGamesArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGamesAsync(AuxLabs.Twitch.Rest.Requests.GetGamesArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetGamesAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 384
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets information about specified categories or games.
  example: []
  syntax:
    content: >-
      [Get("games")]

      Task<TwitchMetaResponse<Game>> GetGamesAsync(GetGamesArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetGamesArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Game}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.Game" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("games")>

      Function GetGamesAsync(args As GetGamesArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of Game))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGamesAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: games
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGoalsAsync(AuxLabs.Twitch.Rest.Requests.GetGoalsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGoalsAsync(AuxLabs.Twitch.Rest.Requests.GetGoalsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetGoalsAsync(AuxLabs.Twitch.Rest.Requests.GetGoalsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetGoalsAsync(GetGoalsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetGoalsAsync(GetGoalsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGoalsAsync(AuxLabs.Twitch.Rest.Requests.GetGoalsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetGoalsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 396
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets the broadcaster’s list of active goals.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:read:goals</code> scope.
  example: []
  syntax:
    content: >-
      [Get("goals")]

      Task<TwitchResponse<Goal>> GetGoalsAsync(GetGoalsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetGoalsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Goal}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.Goal" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("goals")>

      Function GetGoalsAsync(args As GetGoalsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of Goal))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGoalsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: goals
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetHypetrainEventsAsync(AuxLabs.Twitch.Rest.Requests.GetHypeTrainsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetHypetrainEventsAsync(AuxLabs.Twitch.Rest.Requests.GetHypeTrainsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetHypetrainEventsAsync(AuxLabs.Twitch.Rest.Requests.GetHypeTrainsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetHypetrainEventsAsync(GetHypeTrainsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetHypetrainEventsAsync(GetHypeTrainsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetHypetrainEventsAsync(AuxLabs.Twitch.Rest.Requests.GetHypeTrainsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetHypetrainEventsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 408
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets information about the broadcaster’s current or most recent Hype Train event.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:read:hype_train</code> scope.
  example: []
  syntax:
    content: >-
      [Get("hypetrain/events")]

      Task<TwitchMetaResponse<HypeTrainInfo>> GetHypetrainEventsAsync(GetHypeTrainsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetHypeTrainsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.HypeTrainInfo}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.HypeTrainInfo" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("hypetrain/events")>

      Function GetHypetrainEventsAsync(args As GetHypeTrainsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of HypeTrainInfo))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetHypetrainEventsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: hypetrain/events
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostEnforcementStatusAsync(AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusArgs,AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusBody,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostEnforcementStatusAsync(AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusArgs,AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusBody,System.Nullable{System.Threading.CancellationToken})
  id: PostEnforcementStatusAsync(AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusArgs,AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusBody,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PostEnforcementStatusAsync(PostEnforcementStatusArgs, PostEnforcementStatusBody, CancellationToken?)
  nameWithType: ITwitchApi.PostEnforcementStatusAsync(PostEnforcementStatusArgs, PostEnforcementStatusBody, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostEnforcementStatusAsync(AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusArgs, AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusBody, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PostEnforcementStatusAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 420
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Checks whether AutoMod would flag the specified message for review.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>moderation:read</code> scope.
  example: []
  syntax:
    content: >-
      [Post("moderation/enforcements/status")]

      Task<TwitchResponse<MockMessage>> PostEnforcementStatusAsync(PostEnforcementStatusArgs args, PostEnforcementStatusBody body, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: body
      type: AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusBody
      attributes:
      - type: RestEase.BodyAttribute
        ctor: RestEase.BodyAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.MockMessage}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.MockMessage" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Post("moderation/enforcements/status")>

      Function PostEnforcementStatusAsync(args As PostEnforcementStatusArgs, body As PostEnforcementStatusBody, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of MockMessage))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostEnforcementStatusAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PostAttribute
    ctor: RestEase.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: moderation/enforcements/status
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostAutomodMessageAsync(AuxLabs.Twitch.Rest.Requests.PostAutomodMessageArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostAutomodMessageAsync(AuxLabs.Twitch.Rest.Requests.PostAutomodMessageArgs,System.Nullable{System.Threading.CancellationToken})
  id: PostAutomodMessageAsync(AuxLabs.Twitch.Rest.Requests.PostAutomodMessageArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PostAutomodMessageAsync(PostAutomodMessageArgs, CancellationToken?)
  nameWithType: ITwitchApi.PostAutomodMessageAsync(PostAutomodMessageArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostAutomodMessageAsync(AuxLabs.Twitch.Rest.Requests.PostAutomodMessageArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PostAutomodMessageAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 428
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Allow or deny the message that AutoMod flagged for review.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>moderator:manage:automod</code> scope.
  example: []
  syntax:
    content: >-
      [Post("moderation/automod/message")]

      Task PostAutomodMessageAsync(PostAutomodMessageArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.PostAutomodMessageArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Post("moderation/automod/message")>

      Function PostAutomodMessageAsync(args As PostAutomodMessageArgs, cancelToken As CancellationToken? = Nothing) As Task
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostAutomodMessageAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PostAttribute
    ctor: RestEase.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: moderation/automod/message
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetAutomodSettingsAsync(AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetAutomodSettingsAsync(AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetAutomodSettingsAsync(AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetAutomodSettingsAsync(AutomodSettingsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetAutomodSettingsAsync(AutomodSettingsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetAutomodSettingsAsync(AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetAutomodSettingsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 437
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets the broadcaster’s AutoMod settings.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>moderator:read:automod_settings</code> scope.
  example: []
  syntax:
    content: >-
      [Get("moderation/automod/settings")]

      Task<TwitchResponse<AutomodSettings>> GetAutomodSettingsAsync(AutomodSettingsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.AutomodSettings}}
      description: A single <xref href="AuxLabs.Twitch.Rest.Models.AutomodSettings" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Get("moderation/automod/settings")>

      Function GetAutomodSettingsAsync(args As AutomodSettingsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of AutomodSettings))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetAutomodSettingsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: moderation/automod/settings
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutAutomodSettingsAsync(AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs,AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PutAutomodSettingsAsync(AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs,AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody,System.Nullable{System.Threading.CancellationToken})
  id: PutAutomodSettingsAsync(AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs,AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PutAutomodSettingsAsync(AutomodSettingsArgs, PutAutomodSettingsBody, CancellationToken?)
  nameWithType: ITwitchApi.PutAutomodSettingsAsync(AutomodSettingsArgs, PutAutomodSettingsBody, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutAutomodSettingsAsync(AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs, AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PutAutomodSettingsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 446
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Updates the broadcaster’s AutoMod settings.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>moderator:manage:automod_settings</code> scope.
  example: []
  syntax:
    content: >-
      [Put("moderation/automod/settings")]

      Task<TwitchResponse<AutomodSettings>> PutAutomodSettingsAsync(AutomodSettingsArgs args, PutAutomodSettingsBody body, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: body
      type: AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody
      attributes:
      - type: RestEase.BodyAttribute
        ctor: RestEase.BodyAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.AutomodSettings}}
      description: A single <xref href="AuxLabs.Twitch.Rest.Models.AutomodSettings" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Put("moderation/automod/settings")>

      Function PutAutomodSettingsAsync(args As AutomodSettingsArgs, body As PutAutomodSettingsBody, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of AutomodSettings))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutAutomodSettingsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PutAttribute
    ctor: RestEase.PutAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: moderation/automod/settings
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBannedUsersAsync(AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBannedUsersAsync(AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetBannedUsersAsync(AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetBannedUsersAsync(GetBannedUsersArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetBannedUsersAsync(GetBannedUsersArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBannedUsersAsync(AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetBannedUsersAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 455
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets all users that the broadcaster banned or put in a timeout.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>moderation:read</code> or <code>moderator:manage:banned_users</code> scopes.
  example: []
  syntax:
    content: >-
      [Get("moderation/banned")]

      Task<TwitchMetaResponse<BannedUser>> GetBannedUsersAsync(GetBannedUsersArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.BannedUser}}
      description: A single <xref href="AuxLabs.Twitch.Rest.Models.BannedUser" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Get("moderation/banned")>

      Function GetBannedUsersAsync(args As GetBannedUsersArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of BannedUser))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBannedUsersAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: moderation/banned
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBanAsync(AuxLabs.Twitch.Rest.Requests.PostBanArgs,AuxLabs.Twitch.Rest.Requests.PostBanBody,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBanAsync(AuxLabs.Twitch.Rest.Requests.PostBanArgs,AuxLabs.Twitch.Rest.Requests.PostBanBody,System.Nullable{System.Threading.CancellationToken})
  id: PostBanAsync(AuxLabs.Twitch.Rest.Requests.PostBanArgs,AuxLabs.Twitch.Rest.Requests.PostBanBody,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PostBanAsync(PostBanArgs, PostBanBody, CancellationToken?)
  nameWithType: ITwitchApi.PostBanAsync(PostBanArgs, PostBanBody, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBanAsync(AuxLabs.Twitch.Rest.Requests.PostBanArgs, AuxLabs.Twitch.Rest.Requests.PostBanBody, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PostBanAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 464
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Bans a user from participating in the specified broadcaster’s chat room or puts them in a timeout.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>moderator:manage:banned_users</code> scope.
  example: []
  syntax:
    content: >-
      [Post("moderation/bans")]

      Task<TwitchResponse<Ban>> PostBanAsync(PostBanArgs args, PostBanBody body, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.PostBanArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: body
      type: AuxLabs.Twitch.Rest.Requests.PostBanBody
      attributes:
      - type: RestEase.BodyAttribute
        ctor: RestEase.BodyAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Ban}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.Ban" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Post("moderation/bans")>

      Function PostBanAsync(args As PostBanArgs, body As PostBanBody, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of Ban))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBanAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Fordbidden, 409 Conflict
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PostAttribute
    ctor: RestEase.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: moderation/bans
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBanAsync(AuxLabs.Twitch.Rest.Requests.DeleteBanArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBanAsync(AuxLabs.Twitch.Rest.Requests.DeleteBanArgs,System.Nullable{System.Threading.CancellationToken})
  id: DeleteBanAsync(AuxLabs.Twitch.Rest.Requests.DeleteBanArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: DeleteBanAsync(DeleteBanArgs, CancellationToken?)
  nameWithType: ITwitchApi.DeleteBanAsync(DeleteBanArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBanAsync(AuxLabs.Twitch.Rest.Requests.DeleteBanArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: DeleteBanAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 472
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Removes the ban or timeout that was placed on the specified user.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>moderator:manage:banned_users</code> scope.
  example: []
  syntax:
    content: >-
      [Delete("moderation/bans")]

      Task DeleteBanAsync(DeleteBanArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.DeleteBanArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Delete("moderation/bans")>

      Function DeleteBanAsync(args As DeleteBanArgs, cancelToken As CancellationToken? = Nothing) As Task
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBanAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Fordbidden, 409 Conflict
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.DeleteAttribute
    ctor: RestEase.DeleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: moderation/bans
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBlockedTermsAsync(AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBlockedTermsAsync(AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetBlockedTermsAsync(AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetBlockedTermsAsync(GetBlockedTermsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetBlockedTermsAsync(GetBlockedTermsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBlockedTermsAsync(AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetBlockedTermsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 481
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets the broadcaster’s list of non-private, blocked words or phrases.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>moderator:read:blocked_terms</code> or <code>moderator:manage:blocked_terms</code> scopes.
  example: []
  syntax:
    content: >-
      [Get("moderation/blocked_terms")]

      Task<TwitchMetaResponse<BlockedTerm>> GetBlockedTermsAsync(GetBlockedTermsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.BlockedTerm}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.BlockedTerm" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("moderation/blocked_terms")>

      Function GetBlockedTermsAsync(args As GetBlockedTermsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of BlockedTerm))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBlockedTermsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Fordbidden
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: moderation/blocked_terms
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBlockedTermAsync(AuxLabs.Twitch.Rest.Requests.PostBlockedTermArgs,AuxLabs.Twitch.Rest.Requests.PostBlockedTermBody,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBlockedTermAsync(AuxLabs.Twitch.Rest.Requests.PostBlockedTermArgs,AuxLabs.Twitch.Rest.Requests.PostBlockedTermBody,System.Nullable{System.Threading.CancellationToken})
  id: PostBlockedTermAsync(AuxLabs.Twitch.Rest.Requests.PostBlockedTermArgs,AuxLabs.Twitch.Rest.Requests.PostBlockedTermBody,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PostBlockedTermAsync(PostBlockedTermArgs, PostBlockedTermBody, CancellationToken?)
  nameWithType: ITwitchApi.PostBlockedTermAsync(PostBlockedTermArgs, PostBlockedTermBody, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBlockedTermAsync(AuxLabs.Twitch.Rest.Requests.PostBlockedTermArgs, AuxLabs.Twitch.Rest.Requests.PostBlockedTermBody, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PostBlockedTermAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 490
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets the broadcaster’s list of non-private, blocked words or phrases.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>moderator:manage:blocked_terms</code> scope.
  example: []
  syntax:
    content: >-
      [Post("moderation/blocked_terms")]

      Task<TwitchResponse<BlockedTerm>> PostBlockedTermAsync(PostBlockedTermArgs args, PostBlockedTermBody body, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.PostBlockedTermArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: body
      type: AuxLabs.Twitch.Rest.Requests.PostBlockedTermBody
      attributes:
      - type: RestEase.BodyAttribute
        ctor: RestEase.BodyAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.BlockedTerm}}
      description: A single <xref href="AuxLabs.Twitch.Rest.Models.BlockedTerm" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Post("moderation/blocked_terms")>

      Function PostBlockedTermAsync(args As PostBlockedTermArgs, body As PostBlockedTermBody, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of BlockedTerm))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBlockedTermAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Fordbidden
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PostAttribute
    ctor: RestEase.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: moderation/blocked_terms
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBlockedTermAsync(AuxLabs.Twitch.Rest.Requests.DeleteBlockedTermsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBlockedTermAsync(AuxLabs.Twitch.Rest.Requests.DeleteBlockedTermsArgs,System.Nullable{System.Threading.CancellationToken})
  id: DeleteBlockedTermAsync(AuxLabs.Twitch.Rest.Requests.DeleteBlockedTermsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: DeleteBlockedTermAsync(DeleteBlockedTermsArgs, CancellationToken?)
  nameWithType: ITwitchApi.DeleteBlockedTermAsync(DeleteBlockedTermsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBlockedTermAsync(AuxLabs.Twitch.Rest.Requests.DeleteBlockedTermsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: DeleteBlockedTermAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 498
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Removes the word or phrase from the broadcaster’s list of blocked terms.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>moderator:manage:blocked_terms</code> scope.
  example: []
  syntax:
    content: >-
      [Delete("moderation/blocked_term")]

      Task DeleteBlockedTermAsync(DeleteBlockedTermsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.DeleteBlockedTermsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Delete("moderation/blocked_term")>

      Function DeleteBlockedTermAsync(args As DeleteBlockedTermsArgs, cancelToken As CancellationToken? = Nothing) As Task
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBlockedTermAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Fordbidden
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.DeleteAttribute
    ctor: RestEase.DeleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: moderation/blocked_term
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteChatMessagesAsync(AuxLabs.Twitch.Rest.Requests.DeleteMessageArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteChatMessagesAsync(AuxLabs.Twitch.Rest.Requests.DeleteMessageArgs,System.Nullable{System.Threading.CancellationToken})
  id: DeleteChatMessagesAsync(AuxLabs.Twitch.Rest.Requests.DeleteMessageArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: DeleteChatMessagesAsync(DeleteMessageArgs, CancellationToken?)
  nameWithType: ITwitchApi.DeleteChatMessagesAsync(DeleteMessageArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteChatMessagesAsync(AuxLabs.Twitch.Rest.Requests.DeleteMessageArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: DeleteChatMessagesAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 506
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Removes a single chat message or all chat messages from the broadcaster’s chat room.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>moderator:manage:chat_messages</code> scope.
  example: []
  syntax:
    content: >-
      [Delete("moderation/chat")]

      Task DeleteChatMessagesAsync(DeleteMessageArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.DeleteMessageArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Delete("moderation/chat")>

      Function DeleteChatMessagesAsync(args As DeleteMessageArgs, cancelToken As CancellationToken? = Nothing) As Task
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteChatMessagesAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Fordbidden, 404 Not Found
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.DeleteAttribute
    ctor: RestEase.DeleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: moderation/chat
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetModeratorsAsync(AuxLabs.Twitch.Rest.Requests.GetModeratorsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetModeratorsAsync(AuxLabs.Twitch.Rest.Requests.GetModeratorsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetModeratorsAsync(AuxLabs.Twitch.Rest.Requests.GetModeratorsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetModeratorsAsync(GetModeratorsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetModeratorsAsync(GetModeratorsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetModeratorsAsync(AuxLabs.Twitch.Rest.Requests.GetModeratorsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetModeratorsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 515
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets all users allowed to moderate the broadcaster’s chat room.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>moderation:read</code> or <code>channel:manage:moderators</code> scopes.
  example: []
  syntax:
    content: >-
      [Get("moderation/moderators")]

      Task<TwitchMetaResponse<SimpleUser>> GetModeratorsAsync(GetModeratorsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetModeratorsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.SimpleUser}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.SimpleUser" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("moderation/moderators")>

      Function GetModeratorsAsync(args As GetModeratorsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of SimpleUser))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetModeratorsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Fordbidden
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: moderation/moderators
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostModeratorAsync(AuxLabs.Twitch.Rest.Requests.ManageModeratorArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostModeratorAsync(AuxLabs.Twitch.Rest.Requests.ManageModeratorArgs,System.Nullable{System.Threading.CancellationToken})
  id: PostModeratorAsync(AuxLabs.Twitch.Rest.Requests.ManageModeratorArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PostModeratorAsync(ManageModeratorArgs, CancellationToken?)
  nameWithType: ITwitchApi.PostModeratorAsync(ManageModeratorArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostModeratorAsync(AuxLabs.Twitch.Rest.Requests.ManageModeratorArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PostModeratorAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 523
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Adds a moderator to the broadcaster’s chat room.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:manage:moderators</code> scope.
  example: []
  syntax:
    content: >-
      [Post("moderation/moderators")]

      Task PostModeratorAsync(ManageModeratorArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.ManageModeratorArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Post("moderation/moderators")>

      Function PostModeratorAsync(args As ManageModeratorArgs, cancelToken As CancellationToken? = Nothing) As Task
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostModeratorAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 422 Unprocessable
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PostAttribute
    ctor: RestEase.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: moderation/moderators
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteModeratorAsync(AuxLabs.Twitch.Rest.Requests.ManageModeratorArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteModeratorAsync(AuxLabs.Twitch.Rest.Requests.ManageModeratorArgs,System.Nullable{System.Threading.CancellationToken})
  id: DeleteModeratorAsync(AuxLabs.Twitch.Rest.Requests.ManageModeratorArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: DeleteModeratorAsync(ManageModeratorArgs, CancellationToken?)
  nameWithType: ITwitchApi.DeleteModeratorAsync(ManageModeratorArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteModeratorAsync(AuxLabs.Twitch.Rest.Requests.ManageModeratorArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: DeleteModeratorAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 531
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Removes a moderator from the broadcaster’s chat room.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:manage:moderators</code> scope.
  example: []
  syntax:
    content: >-
      [Delete("moderation/moderators")]

      Task DeleteModeratorAsync(ManageModeratorArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.ManageModeratorArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Delete("moderation/moderators")>

      Function DeleteModeratorAsync(args As ManageModeratorArgs, cancelToken As CancellationToken? = Nothing) As Task
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteModeratorAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 422 Unprocessable
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.DeleteAttribute
    ctor: RestEase.DeleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: moderation/moderators
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetVipsAsync(AuxLabs.Twitch.Rest.Requests.GetVipsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetVipsAsync(AuxLabs.Twitch.Rest.Requests.GetVipsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetVipsAsync(AuxLabs.Twitch.Rest.Requests.GetVipsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetVipsAsync(GetVipsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetVipsAsync(GetVipsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetVipsAsync(AuxLabs.Twitch.Rest.Requests.GetVipsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetVipsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 540
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets a list of the broadcaster’s VIPs.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>moderation:read</code> or <code>channel:manage:moderators</code> scopes.
  example: []
  syntax:
    content: >-
      [Get("channels/vips")]

      Task<TwitchMetaResponse<SimpleUser>> GetVipsAsync(GetVipsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetVipsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.SimpleUser}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.SimpleUser" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("channels/vips")>

      Function GetVipsAsync(args As GetVipsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of SimpleUser))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetVipsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: channels/vips
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostVipAsync(AuxLabs.Twitch.Rest.Requests.ManageVipArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostVipAsync(AuxLabs.Twitch.Rest.Requests.ManageVipArgs,System.Nullable{System.Threading.CancellationToken})
  id: PostVipAsync(AuxLabs.Twitch.Rest.Requests.ManageVipArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PostVipAsync(ManageVipArgs, CancellationToken?)
  nameWithType: ITwitchApi.PostVipAsync(ManageVipArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostVipAsync(AuxLabs.Twitch.Rest.Requests.ManageVipArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PostVipAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 548
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Adds the specified user as a VIP in the broadcaster’s channel.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:manage:vips</code> scope.
  example: []
  syntax:
    content: >-
      [Post("channels/vips")]

      Task PostVipAsync(ManageVipArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.ManageVipArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Post("channels/vips")>

      Function PostVipAsync(args As ManageVipArgs, cancelToken As CancellationToken? = Nothing) As Task
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostVipAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, 409 Conflict, 422 Unprocessable, 425 Too Early
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PostAttribute
    ctor: RestEase.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: channels/vips
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteVipAsync(AuxLabs.Twitch.Rest.Requests.ManageVipArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteVipAsync(AuxLabs.Twitch.Rest.Requests.ManageVipArgs,System.Nullable{System.Threading.CancellationToken})
  id: DeleteVipAsync(AuxLabs.Twitch.Rest.Requests.ManageVipArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: DeleteVipAsync(ManageVipArgs, CancellationToken?)
  nameWithType: ITwitchApi.DeleteVipAsync(ManageVipArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteVipAsync(AuxLabs.Twitch.Rest.Requests.ManageVipArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: DeleteVipAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 556
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Removes the specified user as a VIP in the broadcaster’s channel.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:manage:vips</code> scope.
  example: []
  syntax:
    content: >-
      [Delete("channels/vips")]

      Task DeleteVipAsync(ManageVipArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.ManageVipArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Delete("channels/vips")>

      Function DeleteVipAsync(args As ManageVipArgs, cancelToken As CancellationToken? = Nothing) As Task
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteVipAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, 422 Unprocessable
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.DeleteAttribute
    ctor: RestEase.DeleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: channels/vips
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutShieldModeAsync(AuxLabs.Twitch.Rest.Requests.PutShieldModeArgs,AuxLabs.Twitch.Rest.Requests.PutShieldModeBody,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PutShieldModeAsync(AuxLabs.Twitch.Rest.Requests.PutShieldModeArgs,AuxLabs.Twitch.Rest.Requests.PutShieldModeBody,System.Nullable{System.Threading.CancellationToken})
  id: PutShieldModeAsync(AuxLabs.Twitch.Rest.Requests.PutShieldModeArgs,AuxLabs.Twitch.Rest.Requests.PutShieldModeBody,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PutShieldModeAsync(PutShieldModeArgs, PutShieldModeBody, CancellationToken?)
  nameWithType: ITwitchApi.PutShieldModeAsync(PutShieldModeArgs, PutShieldModeBody, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutShieldModeAsync(AuxLabs.Twitch.Rest.Requests.PutShieldModeArgs, AuxLabs.Twitch.Rest.Requests.PutShieldModeBody, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PutShieldModeAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 565
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Activates or deactivates the broadcaster’s Shield Mode.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>moderator:manage:shield_mode</code> scope.
  example: []
  syntax:
    content: >-
      [Put("moderation/shield_mode")]

      Task<TwitchResponse<ShieldMode>> PutShieldModeAsync(PutShieldModeArgs args, PutShieldModeBody body, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.PutShieldModeArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: body
      type: AuxLabs.Twitch.Rest.Requests.PutShieldModeBody
      attributes:
      - type: RestEase.BodyAttribute
        ctor: RestEase.BodyAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.ShieldMode}}
      description: A single <xref href="AuxLabs.Twitch.Rest.Models.ShieldMode" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Put("moderation/shield_mode")>

      Function PutShieldModeAsync(args As PutShieldModeArgs, body As PutShieldModeBody, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of ShieldMode))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutShieldModeAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PutAttribute
    ctor: RestEase.PutAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: moderation/shield_mode
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetShieldModeAsync(AuxLabs.Twitch.Rest.Requests.GetShieldModeArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetShieldModeAsync(AuxLabs.Twitch.Rest.Requests.GetShieldModeArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetShieldModeAsync(AuxLabs.Twitch.Rest.Requests.GetShieldModeArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetShieldModeAsync(GetShieldModeArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetShieldModeAsync(GetShieldModeArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetShieldModeAsync(AuxLabs.Twitch.Rest.Requests.GetShieldModeArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetShieldModeAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 574
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Activates or deactivates the broadcaster’s Shield Mode.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>moderator:read:shield_mode</code> or <code>moderator:manage:shield_mode</code> scopes.
  example: []
  syntax:
    content: >-
      [Get("moderation/shield_mode")]

      Task<TwitchResponse<ShieldMode>> GetShieldModeAsync(GetShieldModeArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetShieldModeArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.ShieldMode}}
      description: A single <xref href="AuxLabs.Twitch.Rest.Models.ShieldMode" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Get("moderation/shield_mode")>

      Function GetShieldModeAsync(args As GetShieldModeArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of ShieldMode))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetShieldModeAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: moderation/shield_mode
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPollAsync(AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPollAsync(AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetPollAsync(AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetPollAsync(GetPredictionsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetPollAsync(GetPredictionsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPollAsync(AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetPollAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 586
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets a list of polls that the broadcaster created.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:read:polls</code> or <code>channel:manage:polls</code> scopes.
  example: []
  syntax:
    content: >-
      [Get("polls")]

      Task<TwitchMetaResponse<Poll>> GetPollAsync(GetPredictionsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Poll}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.Poll" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("polls")>

      Function GetPollAsync(args As GetPredictionsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of Poll))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPollAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: polls
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostPollAsync(AuxLabs.Twitch.Rest.Requests.PutPollBody,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostPollAsync(AuxLabs.Twitch.Rest.Requests.PutPollBody,System.Nullable{System.Threading.CancellationToken})
  id: PostPollAsync(AuxLabs.Twitch.Rest.Requests.PutPollBody,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PostPollAsync(PutPollBody, CancellationToken?)
  nameWithType: ITwitchApi.PostPollAsync(PutPollBody, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostPollAsync(AuxLabs.Twitch.Rest.Requests.PutPollBody, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PostPollAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 595
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Creates a poll that viewers in the broadcaster’s channel can vote on.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:manage:polls</code> scope.
  example: []
  syntax:
    content: >-
      [Post("polls")]

      Task<TwitchResponse<Poll>> PostPollAsync(PutPollBody args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.PutPollBody
      attributes:
      - type: RestEase.BodyAttribute
        ctor: RestEase.BodyAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Poll}}
      description: A single <xref href="AuxLabs.Twitch.Rest.Models.Poll" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Post("polls")>

      Function PostPollAsync(args As PutPollBody, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of Poll))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostPollAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PostAttribute
    ctor: RestEase.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: polls
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchPollAsync(AuxLabs.Twitch.Rest.Requests.PatchPollBody,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchPollAsync(AuxLabs.Twitch.Rest.Requests.PatchPollBody,System.Nullable{System.Threading.CancellationToken})
  id: PatchPollAsync(AuxLabs.Twitch.Rest.Requests.PatchPollBody,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PatchPollAsync(PatchPollBody, CancellationToken?)
  nameWithType: ITwitchApi.PatchPollAsync(PatchPollBody, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchPollAsync(AuxLabs.Twitch.Rest.Requests.PatchPollBody, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PatchPollAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 604
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Ends an active poll.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:manage:polls</code> scope.
  example: []
  syntax:
    content: >-
      [Patch("polls")]

      Task<TwitchResponse<Poll>> PatchPollAsync(PatchPollBody args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.PatchPollBody
      attributes:
      - type: RestEase.BodyAttribute
        ctor: RestEase.BodyAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Poll}}
      description: A single <xref href="AuxLabs.Twitch.Rest.Models.Poll" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Patch("polls")>

      Function PatchPollAsync(args As PatchPollBody, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of Poll))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchPollAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PatchAttribute
    ctor: RestEase.PatchAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: polls
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPredictionAsync(AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPredictionAsync(AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetPredictionAsync(AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetPredictionAsync(GetPredictionsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetPredictionAsync(GetPredictionsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPredictionAsync(AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetPredictionAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 616
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets a list of Channel Points Predictions that the broadcaster created.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:read:predictions</code> or <code>channel:manage:predictions</code> scopes.
  example: []
  syntax:
    content: >-
      [Get("predictions")]

      Task<TwitchMetaResponse<Prediction>> GetPredictionAsync(GetPredictionsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Prediction}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.Prediction" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("predictions")>

      Function GetPredictionAsync(args As GetPredictionsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of Prediction))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPredictionAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: predictions
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostPredictionAsync(AuxLabs.Twitch.Rest.Requests.PostPredictionBody,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostPredictionAsync(AuxLabs.Twitch.Rest.Requests.PostPredictionBody,System.Nullable{System.Threading.CancellationToken})
  id: PostPredictionAsync(AuxLabs.Twitch.Rest.Requests.PostPredictionBody,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PostPredictionAsync(PostPredictionBody, CancellationToken?)
  nameWithType: ITwitchApi.PostPredictionAsync(PostPredictionBody, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostPredictionAsync(AuxLabs.Twitch.Rest.Requests.PostPredictionBody, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PostPredictionAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 625
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Creates a Channel Points Prediction.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:manage:predictions</code> scope.
  example: []
  syntax:
    content: >-
      [Post("predictions")]

      Task<TwitchResponse<Prediction>> PostPredictionAsync(PostPredictionBody args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.PostPredictionBody
      attributes:
      - type: RestEase.BodyAttribute
        ctor: RestEase.BodyAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Prediction}}
      description: A single <xref href="AuxLabs.Twitch.Rest.Models.Prediction" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Post("predictions")>

      Function PostPredictionAsync(args As PostPredictionBody, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of Prediction))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostPredictionAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PostAttribute
    ctor: RestEase.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: predictions
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchPredictionaAsync(AuxLabs.Twitch.Rest.Requests.PostPredictionBody,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchPredictionaAsync(AuxLabs.Twitch.Rest.Requests.PostPredictionBody,System.Nullable{System.Threading.CancellationToken})
  id: PatchPredictionaAsync(AuxLabs.Twitch.Rest.Requests.PostPredictionBody,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PatchPredictionaAsync(PostPredictionBody, CancellationToken?)
  nameWithType: ITwitchApi.PatchPredictionaAsync(PostPredictionBody, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchPredictionaAsync(AuxLabs.Twitch.Rest.Requests.PostPredictionBody, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PatchPredictionaAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 634
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Locks, resolves, or cancels a Channel Points Prediction.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:manage:predictions</code> scope.
  example: []
  syntax:
    content: >-
      [Patch("predictions")]

      Task<TwitchResponse<Prediction>> PatchPredictionaAsync(PostPredictionBody args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.PostPredictionBody
      attributes:
      - type: RestEase.BodyAttribute
        ctor: RestEase.BodyAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Prediction}}
      description: A single <xref href="AuxLabs.Twitch.Rest.Models.Prediction" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Patch("predictions")>

      Function PatchPredictionaAsync(args As PostPredictionBody, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of Prediction))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchPredictionaAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PatchAttribute
    ctor: RestEase.PatchAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: predictions
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostRaidAsync(AuxLabs.Twitch.Rest.Requests.PostRaidArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostRaidAsync(AuxLabs.Twitch.Rest.Requests.PostRaidArgs,System.Nullable{System.Threading.CancellationToken})
  id: PostRaidAsync(AuxLabs.Twitch.Rest.Requests.PostRaidArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PostRaidAsync(PostRaidArgs, CancellationToken?)
  nameWithType: ITwitchApi.PostRaidAsync(PostRaidArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostRaidAsync(AuxLabs.Twitch.Rest.Requests.PostRaidArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PostRaidAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 646
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Raid another channel by sending the broadcaster’s viewers to the targeted channel.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:manage:raids</code> scope.
  example: []
  syntax:
    content: >-
      [Post("raids")]

      Task<TwitchResponse<Raid>> PostRaidAsync(PostRaidArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.PostRaidArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Raid}}
      description: A single <xref href="AuxLabs.Twitch.Rest.Models.Raid" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Post("raids")>

      Function PostRaidAsync(args As PostRaidArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of Raid))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostRaidAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 404 Not Found, 409 Conflict
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PostAttribute
    ctor: RestEase.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: raids
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteRaidAsync(AuxLabs.Twitch.Rest.Requests.DeleteRaidArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteRaidAsync(AuxLabs.Twitch.Rest.Requests.DeleteRaidArgs,System.Nullable{System.Threading.CancellationToken})
  id: DeleteRaidAsync(AuxLabs.Twitch.Rest.Requests.DeleteRaidArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: DeleteRaidAsync(DeleteRaidArgs, CancellationToken?)
  nameWithType: ITwitchApi.DeleteRaidAsync(DeleteRaidArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteRaidAsync(AuxLabs.Twitch.Rest.Requests.DeleteRaidArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: DeleteRaidAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 654
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Cancel a pending raid.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:manage:raids</code> scope.
  example: []
  syntax:
    content: >-
      [Delete("raids")]

      Task DeleteRaidAsync(DeleteRaidArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.DeleteRaidArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Delete("raids")>

      Function DeleteRaidAsync(args As DeleteRaidArgs, cancelToken As CancellationToken? = Nothing) As Task
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteRaidAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.DeleteAttribute
    ctor: RestEase.DeleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: raids
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetScheduleAsync(AuxLabs.Twitch.Rest.Requests.GetScheduleArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetScheduleAsync(AuxLabs.Twitch.Rest.Requests.GetScheduleArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetScheduleAsync(AuxLabs.Twitch.Rest.Requests.GetScheduleArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetScheduleAsync(GetScheduleArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetScheduleAsync(GetScheduleArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetScheduleAsync(AuxLabs.Twitch.Rest.Requests.GetScheduleArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetScheduleAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 663
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets the broadcaster’s streaming schedule.
  example: []
  syntax:
    content: >-
      [Get("schedule")]

      Task<TwitchMetaResponse<Schedule>> GetScheduleAsync(GetScheduleArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetScheduleArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Schedule}}
      description: A single <xref href="AuxLabs.Twitch.Rest.Models.Schedule" data-throw-if-not-resolved="false"></xref> object with a collection of <xref href="AuxLabs.Twitch.Rest.Models.ScheduleSegment" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("schedule")>

      Function GetScheduleAsync(args As GetScheduleArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of Schedule))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetScheduleAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: schedule
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchScheduleAsync(AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchScheduleAsync(AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs,System.Nullable{System.Threading.CancellationToken})
  id: PatchScheduleAsync(AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PatchScheduleAsync(PatchScheduleArgs, CancellationToken?)
  nameWithType: ITwitchApi.PatchScheduleAsync(PatchScheduleArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchScheduleAsync(AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PatchScheduleAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 671
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Updates the broadcaster’s schedule settings, such as scheduling a vacation.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:manage:schedule</code> scope.
  example: []
  syntax:
    content: >-
      [Patch("schedule/settings")]

      Task PatchScheduleAsync(PatchScheduleArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Patch("schedule/settings")>

      Function PatchScheduleAsync(args As PatchScheduleArgs, cancelToken As CancellationToken? = Nothing) As Task
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchScheduleAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 404 Not Found
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PatchAttribute
    ctor: RestEase.PatchAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: schedule/settings
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostSegmentAsync(AuxLabs.Twitch.Rest.Requests.PostSegmentArgs,AuxLabs.Twitch.Rest.Requests.PostSegmentBody,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostSegmentAsync(AuxLabs.Twitch.Rest.Requests.PostSegmentArgs,AuxLabs.Twitch.Rest.Requests.PostSegmentBody,System.Nullable{System.Threading.CancellationToken})
  id: PostSegmentAsync(AuxLabs.Twitch.Rest.Requests.PostSegmentArgs,AuxLabs.Twitch.Rest.Requests.PostSegmentBody,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PostSegmentAsync(PostSegmentArgs, PostSegmentBody, CancellationToken?)
  nameWithType: ITwitchApi.PostSegmentAsync(PostSegmentArgs, PostSegmentBody, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostSegmentAsync(AuxLabs.Twitch.Rest.Requests.PostSegmentArgs, AuxLabs.Twitch.Rest.Requests.PostSegmentBody, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PostSegmentAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 680
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Adds a single or recurring broadcast to the broadcaster’s streaming schedule.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:manage:schedule</code> scope.
  example: []
  syntax:
    content: >-
      [Post("schedule/segment")]

      Task<TwitchResponse<Schedule>> PostSegmentAsync(PostSegmentArgs args, PostSegmentBody body, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.PostSegmentArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: body
      type: AuxLabs.Twitch.Rest.Requests.PostSegmentBody
      attributes:
      - type: RestEase.BodyAttribute
        ctor: RestEase.BodyAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Schedule}}
      description: A single <xref href="AuxLabs.Twitch.Rest.Models.Schedule" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Post("schedule/segment")>

      Function PostSegmentAsync(args As PostSegmentArgs, body As PostSegmentBody, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of Schedule))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostSegmentAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PostAttribute
    ctor: RestEase.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: schedule/segment
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchSegmentAsync(AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs,AuxLabs.Twitch.Rest.Requests.PatchSegmentBody,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchSegmentAsync(AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs,AuxLabs.Twitch.Rest.Requests.PatchSegmentBody,System.Nullable{System.Threading.CancellationToken})
  id: PatchSegmentAsync(AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs,AuxLabs.Twitch.Rest.Requests.PatchSegmentBody,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PatchSegmentAsync(ManageSegmentArgs, PatchSegmentBody, CancellationToken?)
  nameWithType: ITwitchApi.PatchSegmentAsync(ManageSegmentArgs, PatchSegmentBody, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchSegmentAsync(AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs, AuxLabs.Twitch.Rest.Requests.PatchSegmentBody, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PatchSegmentAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 689
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Updates a scheduled broadcast segment.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:manage:schedule</code> scope.
  example: []
  syntax:
    content: >-
      [Patch("schedule/segment")]

      Task<TwitchResponse<Schedule>> PatchSegmentAsync(ManageSegmentArgs args, PatchSegmentBody body, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: body
      type: AuxLabs.Twitch.Rest.Requests.PatchSegmentBody
      attributes:
      - type: RestEase.BodyAttribute
        ctor: RestEase.BodyAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Schedule}}
      description: A single <xref href="AuxLabs.Twitch.Rest.Models.Schedule" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Patch("schedule/segment")>

      Function PatchSegmentAsync(args As ManageSegmentArgs, body As PatchSegmentBody, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of Schedule))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchSegmentAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PatchAttribute
    ctor: RestEase.PatchAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: schedule/segment
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteSegmentAsync(AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteSegmentAsync(AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs,System.Nullable{System.Threading.CancellationToken})
  id: DeleteSegmentAsync(AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: DeleteSegmentAsync(ManageSegmentArgs, CancellationToken?)
  nameWithType: ITwitchApi.DeleteSegmentAsync(ManageSegmentArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteSegmentAsync(AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: DeleteSegmentAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 697
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Updates a scheduled broadcast segment.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:manage:schedule</code> scope.
  example: []
  syntax:
    content: >-
      [Delete("schedule/segment")]

      Task DeleteSegmentAsync(ManageSegmentArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Delete("schedule/segment")>

      Function DeleteSegmentAsync(args As ManageSegmentArgs, cancelToken As CancellationToken? = Nothing) As Task
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteSegmentAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.DeleteAttribute
    ctor: RestEase.DeleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: schedule/segment
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCategoriesAsync(AuxLabs.Twitch.Rest.Requests.SearchCategoriesArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCategoriesAsync(AuxLabs.Twitch.Rest.Requests.SearchCategoriesArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetCategoriesAsync(AuxLabs.Twitch.Rest.Requests.SearchCategoriesArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetCategoriesAsync(SearchCategoriesArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetCategoriesAsync(SearchCategoriesArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCategoriesAsync(AuxLabs.Twitch.Rest.Requests.SearchCategoriesArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetCategoriesAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 706
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets the games or categories that match the specified query.
  example: []
  syntax:
    content: >-
      [Get("search/categories")]

      Task<TwitchMetaResponse<Category>> GetCategoriesAsync(SearchCategoriesArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.SearchCategoriesArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Category}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.Category" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("search/categories")>

      Function GetCategoriesAsync(args As SearchCategoriesArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of Category))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCategoriesAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: search/categories
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelsAsync(AuxLabs.Twitch.Rest.Requests.SearchChannelsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelsAsync(AuxLabs.Twitch.Rest.Requests.SearchChannelsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetChannelsAsync(AuxLabs.Twitch.Rest.Requests.SearchChannelsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetChannelsAsync(SearchChannelsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetChannelsAsync(SearchChannelsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelsAsync(AuxLabs.Twitch.Rest.Requests.SearchChannelsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetChannelsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 712
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets the channels that match the specified query and have streamed content within the past 6 months.
  example: []
  syntax:
    content: >-
      [Get("search/channels")]

      Task<TwitchMetaResponse<ChannelBroadcast>> GetChannelsAsync(SearchChannelsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.SearchChannelsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.ChannelBroadcast}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.ChannelBroadcast" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("search/channels")>

      Function GetChannelsAsync(args As SearchChannelsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of ChannelBroadcast))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: search/channels
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCurrentTrackAsync(AuxLabs.Twitch.Rest.Requests.GetCurrentTrackArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCurrentTrackAsync(AuxLabs.Twitch.Rest.Requests.GetCurrentTrackArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetCurrentTrackAsync(AuxLabs.Twitch.Rest.Requests.GetCurrentTrackArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetCurrentTrackAsync(GetCurrentTrackArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetCurrentTrackAsync(GetCurrentTrackArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCurrentTrackAsync(AuxLabs.Twitch.Rest.Requests.GetCurrentTrackArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetCurrentTrackAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 721
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets the Soundtrack track that the broadcaster is playing.
  example: []
  syntax:
    content: >-
      [Get("soundtrack/current_track")]

      Task<TwitchResponse<Soundtrack>> GetCurrentTrackAsync(GetCurrentTrackArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetCurrentTrackArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Soundtrack}}
      description: A single <xref href="AuxLabs.Twitch.Rest.Models.Soundtrack" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Get("soundtrack/current_track")>

      Function GetCurrentTrackAsync(args As GetCurrentTrackArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of Soundtrack))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCurrentTrackAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 404 Not Found
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: soundtrack/current_track
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPlaylistTracksAsync(AuxLabs.Twitch.Rest.Requests.GetPlaylistTracksArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPlaylistTracksAsync(AuxLabs.Twitch.Rest.Requests.GetPlaylistTracksArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetPlaylistTracksAsync(AuxLabs.Twitch.Rest.Requests.GetPlaylistTracksArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetPlaylistTracksAsync(GetPlaylistTracksArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetPlaylistTracksAsync(GetPlaylistTracksArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPlaylistTracksAsync(AuxLabs.Twitch.Rest.Requests.GetPlaylistTracksArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetPlaylistTracksAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 727
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets the Soundtrack playlist’s tracks.
  example: []
  syntax:
    content: >-
      [Get("soundtrack/playlist")]

      Task<TwitchMetaResponse<Track>> GetPlaylistTracksAsync(GetPlaylistTracksArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetPlaylistTracksArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Track}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.Track" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("soundtrack/playlist")>

      Function GetPlaylistTracksAsync(args As GetPlaylistTracksArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of Track))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPlaylistTracksAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 404 Not Found
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: soundtrack/playlist
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPlaylistsAsync(AuxLabs.Twitch.Rest.Requests.GetPlaylistsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPlaylistsAsync(AuxLabs.Twitch.Rest.Requests.GetPlaylistsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetPlaylistsAsync(AuxLabs.Twitch.Rest.Requests.GetPlaylistsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetPlaylistsAsync(GetPlaylistsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetPlaylistsAsync(GetPlaylistsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPlaylistsAsync(AuxLabs.Twitch.Rest.Requests.GetPlaylistsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetPlaylistsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 733
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets a list of Soundtrack playlists.
  example: []
  syntax:
    content: >-
      [Get("soundtrack/playlists")]

      Task<TwitchMetaResponse<Playlist>> GetPlaylistsAsync(GetPlaylistsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetPlaylistsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Playlist}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.Track" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("soundtrack/playlists")>

      Function GetPlaylistsAsync(args As GetPlaylistsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of Playlist))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPlaylistsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 404 Not Found
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: soundtrack/playlists
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastKeyAsync(AuxLabs.Twitch.Rest.Requests.GetBroadcastKeyArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastKeyAsync(AuxLabs.Twitch.Rest.Requests.GetBroadcastKeyArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetBroadcastKeyAsync(AuxLabs.Twitch.Rest.Requests.GetBroadcastKeyArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetBroadcastKeyAsync(GetBroadcastKeyArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetBroadcastKeyAsync(GetBroadcastKeyArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastKeyAsync(AuxLabs.Twitch.Rest.Requests.GetBroadcastKeyArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetBroadcastKeyAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 745
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets the channel’s broadcast key.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:read:stream_key</code> scope.
  example: []
  syntax:
    content: >-
      [Get("stream/key")]

      Task<TwitchResponse<string>> GetBroadcastKeyAsync(GetBroadcastKeyArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetBroadcastKeyArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{System.String}}
      description: A single <xref href="System.String" data-throw-if-not-resolved="false"></xref> object that represents the broadcaster's stream key.
    content.vb: >-
      <Get("stream/key")>

      Function GetBroadcastKeyAsync(args As GetBroadcastKeyArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of String))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastKeyAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: stream/key
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastsAsync(AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastsAsync(AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetBroadcastsAsync(AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetBroadcastsAsync(GetBroadcastsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetBroadcastsAsync(GetBroadcastsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastsAsync(AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetBroadcastsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 751
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets a list of all broadcasts.
  example: []
  syntax:
    content: >-
      [Get("streams")]

      Task<TwitchMetaResponse<Broadcast>> GetBroadcastsAsync(GetBroadcastsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Broadcast}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.Broadcast" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("streams")>

      Function GetBroadcastsAsync(args As GetBroadcastsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of Broadcast))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: streams
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowedBroadcastsAsync(AuxLabs.Twitch.Rest.Requests.GetFollowedBroadcastsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowedBroadcastsAsync(AuxLabs.Twitch.Rest.Requests.GetFollowedBroadcastsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetFollowedBroadcastsAsync(AuxLabs.Twitch.Rest.Requests.GetFollowedBroadcastsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetFollowedBroadcastsAsync(GetFollowedBroadcastsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetFollowedBroadcastsAsync(GetFollowedBroadcastsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowedBroadcastsAsync(AuxLabs.Twitch.Rest.Requests.GetFollowedBroadcastsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetFollowedBroadcastsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 760
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets the list of broadcasters that the user follows and that are streaming live.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>user:read:follows</code> scope.
  example: []
  syntax:
    content: >-
      [Get("streams/followed")]

      Task<TwitchMetaResponse<Broadcast>> GetFollowedBroadcastsAsync(GetFollowedBroadcastsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetFollowedBroadcastsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Broadcast}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.Broadcast" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("streams/followed")>

      Function GetFollowedBroadcastsAsync(args As GetFollowedBroadcastsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of Broadcast))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowedBroadcastsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: streams/followed
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBroadcastMarkerAsync(AuxLabs.Twitch.Rest.Requests.PostBroadcastMarkerBody,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBroadcastMarkerAsync(AuxLabs.Twitch.Rest.Requests.PostBroadcastMarkerBody,System.Nullable{System.Threading.CancellationToken})
  id: PostBroadcastMarkerAsync(AuxLabs.Twitch.Rest.Requests.PostBroadcastMarkerBody,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PostBroadcastMarkerAsync(PostBroadcastMarkerBody, CancellationToken?)
  nameWithType: ITwitchApi.PostBroadcastMarkerAsync(PostBroadcastMarkerBody, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBroadcastMarkerAsync(AuxLabs.Twitch.Rest.Requests.PostBroadcastMarkerBody, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PostBroadcastMarkerAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 769
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Adds a marker to a live stream.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:manage:broadcast</code> scope.
  example: []
  syntax:
    content: >-
      [Post("streams/markers")]

      Task<TwitchResponse<BroadcastMarker>> PostBroadcastMarkerAsync(PostBroadcastMarkerBody body, CancellationToken? cancelToken = null)
    parameters:
    - id: body
      type: AuxLabs.Twitch.Rest.Requests.PostBroadcastMarkerBody
      attributes:
      - type: RestEase.BodyAttribute
        ctor: RestEase.BodyAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.BroadcastMarker}}
      description: A single <xref href="AuxLabs.Twitch.Rest.Models.BroadcastMarker" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Post("streams/markers")>

      Function PostBroadcastMarkerAsync(body As PostBroadcastMarkerBody, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of BroadcastMarker))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBroadcastMarkerAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PostAttribute
    ctor: RestEase.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: streams/markers
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastMarkersAsync(AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastMarkersAsync(AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetBroadcastMarkersAsync(AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetBroadcastMarkersAsync(GetBroadcastMarkersArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetBroadcastMarkersAsync(GetBroadcastMarkersArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastMarkersAsync(AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetBroadcastMarkersAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 778
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets a list of markers from the user’s most recent stream or from the specified VOD/video.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>user:read:broadcast</code> or <code>channel:manage:broadcast</code> scopes.
  example: []
  syntax:
    content: >-
      [Get("streams/markers")]

      Task<TwitchMetaResponse<BroadcastMarker>> GetBroadcastMarkersAsync(GetBroadcastMarkersArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.BroadcastMarker}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.BroadcastMarker" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("streams/markers")>

      Function GetBroadcastMarkersAsync(args As GetBroadcastMarkersArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of BroadcastMarker))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastMarkersAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: streams/markers
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetSubscriptionsAsync(AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetSubscriptionsAsync(AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetSubscriptionsAsync(AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetSubscriptionsAsync(GetSubscriptionsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetSubscriptionsAsync(GetSubscriptionsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetSubscriptionsAsync(AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetSubscriptionsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 791
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Updates the specified user’s information.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       or <a href="https://dev.twitch.tv/docs/authentication#app-access-tokens">app access token</a>
       with the <code>channel:read:subscriptions</code> scope.
  example: []
  syntax:
    content: >-
      [Get("subscriptions")]

      Task<TwitchMetaResponse<Subscription>> GetSubscriptionsAsync(GetSubscriptionsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Subscription}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.Subscription" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("subscriptions")>

      Function GetSubscriptionsAsync(args As GetSubscriptionsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of Subscription))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetSubscriptionsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: subscriptions
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetSubscriberAsync(AuxLabs.Twitch.Rest.Requests.GetSubscriberArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetSubscriberAsync(AuxLabs.Twitch.Rest.Requests.GetSubscriberArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetSubscriberAsync(AuxLabs.Twitch.Rest.Requests.GetSubscriberArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetSubscriberAsync(GetSubscriberArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetSubscriberAsync(GetSubscriberArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetSubscriberAsync(AuxLabs.Twitch.Rest.Requests.GetSubscriberArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetSubscriberAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 801
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Checks whether the user subscribes to the broadcaster’s channel.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       or <a href="https://dev.twitch.tv/docs/authentication#app-access-tokens">app access token</a>
       with the <code>channel:read:subscriptions</code> scope.
  example: []
  syntax:
    content: >-
      [Get("subscriptions/user")]

      Task<TwitchResponse<SimpleSubscription>> GetSubscriberAsync(GetSubscriberArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetSubscriberArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.SimpleSubscription}}
      description: A single <xref href="AuxLabs.Twitch.Rest.Models.SimpleSubscription" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Get("subscriptions/user")>

      Function GetSubscriberAsync(args As GetSubscriberArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of SimpleSubscription))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetSubscriberAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: subscriptions/user
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTeamsAsync(AuxLabs.Twitch.Rest.Requests.GetChannelTeamsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTeamsAsync(AuxLabs.Twitch.Rest.Requests.GetChannelTeamsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetTeamsAsync(AuxLabs.Twitch.Rest.Requests.GetChannelTeamsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetTeamsAsync(GetChannelTeamsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetTeamsAsync(GetChannelTeamsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTeamsAsync(AuxLabs.Twitch.Rest.Requests.GetChannelTeamsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetTeamsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 810
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets information about one or more users.
  example: []
  syntax:
    content: >-
      [Get("teams/channel")]

      Task<TwitchResponse<ChannelTeam>> GetTeamsAsync(GetChannelTeamsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetChannelTeamsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.ChannelTeam}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.ChannelTeam" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("teams/channel")>

      Function GetTeamsAsync(args As GetChannelTeamsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of ChannelTeam))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTeamsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 404 Not Found
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: teams/channel
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTeamAsync(AuxLabs.Twitch.Rest.Requests.GetTeamArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTeamAsync(AuxLabs.Twitch.Rest.Requests.GetTeamArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetTeamAsync(AuxLabs.Twitch.Rest.Requests.GetTeamArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetTeamAsync(GetTeamArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetTeamAsync(GetTeamArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTeamAsync(AuxLabs.Twitch.Rest.Requests.GetTeamArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetTeamAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 816
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets information about the specified Twitch team.
  example: []
  syntax:
    content: >-
      [Get("teams")]

      Task<TwitchResponse<Team>> GetTeamAsync(GetTeamArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetTeamArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Team}}
      description: A single <xref href="AuxLabs.Twitch.Rest.Models.Team" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Get("teams")>

      Function GetTeamAsync(args As GetTeamArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of Team))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTeamAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 404 Not Found
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: teams
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUsersAsync(AuxLabs.Twitch.Rest.Requests.GetUsersArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUsersAsync(AuxLabs.Twitch.Rest.Requests.GetUsersArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetUsersAsync(AuxLabs.Twitch.Rest.Requests.GetUsersArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetUsersAsync(GetUsersArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetUsersAsync(GetUsersArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUsersAsync(AuxLabs.Twitch.Rest.Requests.GetUsersArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetUsersAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 825
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets information about one or more users.
  example: []
  syntax:
    content: >-
      [Get("users")]

      Task<TwitchResponse<User>> GetUsersAsync(GetUsersArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetUsersArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.User}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.User" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("users")>

      Function GetUsersAsync(args As GetUsersArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of User))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUsersAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: users
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutUserAsync(AuxLabs.Twitch.Rest.Requests.PutUserArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PutUserAsync(AuxLabs.Twitch.Rest.Requests.PutUserArgs,System.Nullable{System.Threading.CancellationToken})
  id: PutUserAsync(AuxLabs.Twitch.Rest.Requests.PutUserArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PutUserAsync(PutUserArgs, CancellationToken?)
  nameWithType: ITwitchApi.PutUserAsync(PutUserArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutUserAsync(AuxLabs.Twitch.Rest.Requests.PutUserArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PutUserAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 834
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Updates the specified user’s information.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>user:edit</code> scope.
  example: []
  syntax:
    content: >-
      [Put("users")]

      Task<TwitchResponse<User>> PutUserAsync(PutUserArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.PutUserArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.User}}
      description: A single <xref href="AuxLabs.Twitch.Rest.Models.User" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Put("users")>

      Function PutUserAsync(args As PutUserArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of User))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutUserAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PutAttribute
    ctor: RestEase.PutAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: users
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBlocksAsync(AuxLabs.Twitch.Rest.Requests.GetBlocksArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBlocksAsync(AuxLabs.Twitch.Rest.Requests.GetBlocksArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetBlocksAsync(AuxLabs.Twitch.Rest.Requests.GetBlocksArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetBlocksAsync(GetBlocksArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetBlocksAsync(GetBlocksArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBlocksAsync(AuxLabs.Twitch.Rest.Requests.GetBlocksArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetBlocksAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 843
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets the list of users that the broadcaster has blocked.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>user:read:blocked_users</code> scope.
  example: []
  syntax:
    content: >-
      [Get("users/blocks")]

      Task<TwitchMetaResponse<SimpleUser>> GetBlocksAsync(GetBlocksArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetBlocksArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.SimpleUser}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.SimpleUser" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("users/blocks")>

      Function GetBlocksAsync(args As GetBlocksArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of SimpleUser))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBlocksAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: users/blocks
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutBlockAsync(AuxLabs.Twitch.Rest.Requests.PutBlockArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PutBlockAsync(AuxLabs.Twitch.Rest.Requests.PutBlockArgs,System.Nullable{System.Threading.CancellationToken})
  id: PutBlockAsync(AuxLabs.Twitch.Rest.Requests.PutBlockArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PutBlockAsync(PutBlockArgs, CancellationToken?)
  nameWithType: ITwitchApi.PutBlockAsync(PutBlockArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutBlockAsync(AuxLabs.Twitch.Rest.Requests.PutBlockArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PutBlockAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 851
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Blocks the specified user from interacting with or having contact with the broadcaster.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>user:manage:blocked_users</code> scope.
  example: []
  syntax:
    content: >-
      [Put("users/blocks")]

      Task PutBlockAsync(PutBlockArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.PutBlockArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Put("users/blocks")>

      Function PutBlockAsync(args As PutBlockArgs, cancelToken As CancellationToken? = Nothing) As Task
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutBlockAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PutAttribute
    ctor: RestEase.PutAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: users/blocks
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBlockAsync(AuxLabs.Twitch.Rest.Requests.DeleteBlockArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBlockAsync(AuxLabs.Twitch.Rest.Requests.DeleteBlockArgs,System.Nullable{System.Threading.CancellationToken})
  id: DeleteBlockAsync(AuxLabs.Twitch.Rest.Requests.DeleteBlockArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: DeleteBlockAsync(DeleteBlockArgs, CancellationToken?)
  nameWithType: ITwitchApi.DeleteBlockAsync(DeleteBlockArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBlockAsync(AuxLabs.Twitch.Rest.Requests.DeleteBlockArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: DeleteBlockAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 859
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Removes the user from the broadcaster’s list of blocked users.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>user:manage:blocked_users</code> scope.
  example: []
  syntax:
    content: >-
      [Delete("users/blocks")]

      Task DeleteBlockAsync(DeleteBlockArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.DeleteBlockArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Delete("users/blocks")>

      Function DeleteBlockAsync(args As DeleteBlockArgs, cancelToken As CancellationToken? = Nothing) As Task
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBlockAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.DeleteAttribute
    ctor: RestEase.DeleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: users/blocks
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUserExtensionsAsync(System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUserExtensionsAsync(System.Nullable{System.Threading.CancellationToken})
  id: GetUserExtensionsAsync(System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetUserExtensionsAsync(CancellationToken?)
  nameWithType: ITwitchApi.GetUserExtensionsAsync(CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUserExtensionsAsync(System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetUserExtensionsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 868
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets a list of all extensions (both active and inactive) that the broadcaster has installed.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>user:read:broadcast</code> or <code>user:edit:broadcast</code> scope. Inactive extensions are only included with the <code>user:edit:broadcast</code> scope.
  example: []
  syntax:
    content: >-
      [Get("users/extensions/list")]

      Task<TwitchResponse<Extension>> GetUserExtensionsAsync(CancellationToken? cancelToken = null)
    parameters:
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Extension}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.Extension" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("users/extensions/list")>

      Function GetUserExtensionsAsync(cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of Extension))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUserExtensionsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: users/extensions/list
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetActiveExtensionsAsync(AuxLabs.Twitch.Rest.Requests.GetActiveExtensionsArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetActiveExtensionsAsync(AuxLabs.Twitch.Rest.Requests.GetActiveExtensionsArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetActiveExtensionsAsync(AuxLabs.Twitch.Rest.Requests.GetActiveExtensionsArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetActiveExtensionsAsync(GetActiveExtensionsArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetActiveExtensionsAsync(GetActiveExtensionsArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetActiveExtensionsAsync(AuxLabs.Twitch.Rest.Requests.GetActiveExtensionsArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetActiveExtensionsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 878
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets a list of all extensions (both active and inactive) that the broadcaster has installed.
  remarks: >-
    Requires an <a href="https://dev.twitch.tv/docs/authentication#app-access-tokens">app access token</a> or a
       <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a> with the 
       <code>user:read:broadcast</code> or <code>user:edit:broadcast</code> scope.
  example: []
  syntax:
    content: >-
      [Get("users/extensions")]

      Task<TwitchResponse<ExtensionMap>> GetActiveExtensionsAsync(GetActiveExtensionsArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetActiveExtensionsArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.ExtensionMap}}
      description: A single <xref href="AuxLabs.Twitch.Rest.Models.ExtensionMap" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Get("users/extensions")>

      Function GetActiveExtensionsAsync(args As GetActiveExtensionsArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of ExtensionMap))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetActiveExtensionsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: users/extensions
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutExtensionsAsync(AuxLabs.Twitch.Rest.Models.ExtensionMap,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PutExtensionsAsync(AuxLabs.Twitch.Rest.Models.ExtensionMap,System.Nullable{System.Threading.CancellationToken})
  id: PutExtensionsAsync(AuxLabs.Twitch.Rest.Models.ExtensionMap,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PutExtensionsAsync(ExtensionMap, CancellationToken?)
  nameWithType: ITwitchApi.PutExtensionsAsync(ExtensionMap, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutExtensionsAsync(AuxLabs.Twitch.Rest.Models.ExtensionMap, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PutExtensionsAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 887
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Updates an installed extension’s information.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>user:read:broadcast</code> or <code>user:edit:broadcast</code> scope.
  example: []
  syntax:
    content: >-
      [Put("users/extensions")]

      Task<TwitchResponse<ExtensionMap>> PutExtensionsAsync(ExtensionMap args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Models.ExtensionMap
      attributes:
      - type: RestEase.BodyAttribute
        ctor: RestEase.BodyAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.ExtensionMap}}
      description: A single <xref href="AuxLabs.Twitch.Rest.Models.ExtensionMap" data-throw-if-not-resolved="false"></xref> object.
    content.vb: >-
      <Put("users/extensions")>

      Function PutExtensionsAsync(args As ExtensionMap, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of ExtensionMap))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutExtensionsAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PutAttribute
    ctor: RestEase.PutAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: users/extensions
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetVideosAsync(AuxLabs.Twitch.Rest.Requests.GetVideosArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetVideosAsync(AuxLabs.Twitch.Rest.Requests.GetVideosArgs,System.Nullable{System.Threading.CancellationToken})
  id: GetVideosAsync(AuxLabs.Twitch.Rest.Requests.GetVideosArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: GetVideosAsync(GetVideosArgs, CancellationToken?)
  nameWithType: ITwitchApi.GetVideosAsync(GetVideosArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetVideosAsync(AuxLabs.Twitch.Rest.Requests.GetVideosArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetVideosAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 896
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Gets information about one or more published videos.
  example: []
  syntax:
    content: >-
      [Get("videos")]

      Task<TwitchMetaResponse<Video>> GetVideosAsync(GetVideosArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.GetVideosArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Video}}
      description: A collection of <xref href="AuxLabs.Twitch.Rest.Models.Video" data-throw-if-not-resolved="false"></xref> objects.
    content.vb: >-
      <Get("videos")>

      Function GetVideosAsync(args As GetVideosArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchMetaResponse(Of Video))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetVideosAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 404 Not Found
  attributes:
  - type: RestEase.GetAttribute
    ctor: RestEase.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: videos
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteVideoAsync(AuxLabs.Twitch.Rest.Requests.DeleteVideosArgs,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteVideoAsync(AuxLabs.Twitch.Rest.Requests.DeleteVideosArgs,System.Nullable{System.Threading.CancellationToken})
  id: DeleteVideoAsync(AuxLabs.Twitch.Rest.Requests.DeleteVideosArgs,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: DeleteVideoAsync(DeleteVideosArgs, CancellationToken?)
  nameWithType: ITwitchApi.DeleteVideoAsync(DeleteVideosArgs, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteVideoAsync(AuxLabs.Twitch.Rest.Requests.DeleteVideosArgs, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: DeleteVideoAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 905
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Deletes one or more videos. You may delete past broadcasts, highlights, or uploads.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>channel:manage:videos</code> scope.
  example: []
  syntax:
    content: >-
      [Delete("videos")]

      Task<TwitchResponse<string>> DeleteVideoAsync(DeleteVideosArgs args, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.DeleteVideosArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{System.String}}
      description: A collection of <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represent the deleted videos' ids.
    content.vb: >-
      <Delete("videos")>

      Function DeleteVideoAsync(args As DeleteVideosArgs, cancelToken As CancellationToken? = Nothing) As Task(Of TwitchResponse(Of String))
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteVideoAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.DeleteAttribute
    ctor: RestEase.DeleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: videos
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostWhisperAsync(AuxLabs.Twitch.Rest.Requests.PostWhisperArgs,AuxLabs.Twitch.Rest.Requests.PostWhisperBody,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostWhisperAsync(AuxLabs.Twitch.Rest.Requests.PostWhisperArgs,AuxLabs.Twitch.Rest.Requests.PostWhisperBody,System.Nullable{System.Threading.CancellationToken})
  id: PostWhisperAsync(AuxLabs.Twitch.Rest.Requests.PostWhisperArgs,AuxLabs.Twitch.Rest.Requests.PostWhisperBody,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.Api.ITwitchApi
  langs:
  - csharp
  - vb
  name: PostWhisperAsync(PostWhisperArgs, PostWhisperBody, CancellationToken?)
  nameWithType: ITwitchApi.PostWhisperAsync(PostWhisperArgs, PostWhisperBody, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostWhisperAsync(AuxLabs.Twitch.Rest.Requests.PostWhisperArgs, AuxLabs.Twitch.Rest.Requests.PostWhisperBody, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PostWhisperAsync
    path: ../src/AuxLabs.Twitch.Rest.Api/ITwitchApi.cs
    startLine: 916
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Api
  summary: Sends a whisper message to the specified user.
  remarks: >-
    Requires a <a href="https://dev.twitch.tv/docs/authentication#user-access-tokens">user access token</a>
       with the <code>user:manage:whispers</code> scope.
  example: []
  syntax:
    content: >-
      [Post("whispers")]

      Task PostWhisperAsync(PostWhisperArgs args, PostWhisperBody body, CancellationToken? cancelToken = null)
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.PostWhisperArgs
      attributes:
      - type: RestEase.QueryMapAttribute
        ctor: RestEase.QueryMapAttribute.#ctor
        arguments: []
    - id: body
      type: AuxLabs.Twitch.Rest.Requests.PostWhisperBody
      attributes:
      - type: RestEase.BodyAttribute
        ctor: RestEase.BodyAttribute.#ctor
        arguments: []
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Post("whispers")>

      Function PostWhisperAsync(args As PostWhisperArgs, body As PostWhisperBody, cancelToken As CancellationToken? = Nothing) As Task
  overload: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostWhisperAsync*
  exceptions:
  - type: AuxLabs.Twitch.TwitchRestException
    commentId: T:AuxLabs.Twitch.TwitchRestException
    description: 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not found
  - type: AuxLabs.Twitch.MissingScopeException
    commentId: T:AuxLabs.Twitch.MissingScopeException
    description: ''
  attributes:
  - type: RestEase.PostAttribute
    ctor: RestEase.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: whispers
references:
- uid: AuxLabs.Twitch.Rest.Api
  commentId: N:AuxLabs.Twitch.Rest.Api
  href: AuxLabs.html
  name: AuxLabs.Twitch.Rest.Api
  nameWithType: AuxLabs.Twitch.Rest.Api
  fullName: AuxLabs.Twitch.Rest.Api
  spec.csharp:
  - uid: AuxLabs
    name: AuxLabs
    href: AuxLabs.html
  - name: .
  - uid: AuxLabs.Twitch
    name: Twitch
    href: AuxLabs.Twitch.html
  - name: .
  - uid: AuxLabs.Twitch.Rest
    name: Rest
    href: AuxLabs.Twitch.Rest.html
  - name: .
  - uid: AuxLabs.Twitch.Rest.Api
    name: Api
    href: AuxLabs.Twitch.Rest.Api.html
  spec.vb:
  - uid: AuxLabs
    name: AuxLabs
    href: AuxLabs.html
  - name: .
  - uid: AuxLabs.Twitch
    name: Twitch
    href: AuxLabs.Twitch.html
  - name: .
  - uid: AuxLabs.Twitch.Rest
    name: Rest
    href: AuxLabs.Twitch.Rest.html
  - name: .
  - uid: AuxLabs.Twitch.Rest.Api
    name: Api
    href: AuxLabs.Twitch.Rest.Api.html
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.Authorization*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.Authorization
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.Authorization.html
  name: Authorization
  nameWithType: ITwitchApi.Authorization
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.Authorization
- uid: System.Net.Http.Headers.AuthenticationHeaderValue
  commentId: T:System.Net.Http.Headers.AuthenticationHeaderValue
  parent: System.Net.Http.Headers
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.net.http.headers.authenticationheadervalue
  name: AuthenticationHeaderValue
  nameWithType: AuthenticationHeaderValue
  fullName: System.Net.Http.Headers.AuthenticationHeaderValue
- uid: System.Net.Http.Headers
  commentId: N:System.Net.Http.Headers
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Net.Http.Headers
  nameWithType: System.Net.Http.Headers
  fullName: System.Net.Http.Headers
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Net
    name: Net
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net
  - name: .
  - uid: System.Net.Http
    name: Http
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net.http
  - name: .
  - uid: System.Net.Http.Headers
    name: Headers
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net.http.headers
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Net
    name: Net
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net
  - name: .
  - uid: System.Net.Http
    name: Http
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net.http
  - name: .
  - uid: System.Net.Http.Headers
    name: Headers
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net.http.headers
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.ClientId*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.ClientId
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.ClientId.html
  name: ClientId
  nameWithType: ITwitchApi.ClientId
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.ClientId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: AuxLabs.Twitch.Rest.Models.Commercial
  commentId: T:AuxLabs.Twitch.Rest.Models.Commercial
  href: AuxLabs.Twitch.Rest.Models.Commercial.html
  name: Commercial
  nameWithType: Commercial
  fullName: AuxLabs.Twitch.Rest.Models.Commercial
- uid: AuxLabs.Twitch.TwitchRestException
  commentId: T:AuxLabs.Twitch.TwitchRestException
  href: AuxLabs.Twitch.TwitchRestException.html
  name: TwitchRestException
  nameWithType: TwitchRestException
  fullName: AuxLabs.Twitch.TwitchRestException
- uid: AuxLabs.Twitch.MissingScopeException
  commentId: T:AuxLabs.Twitch.MissingScopeException
  href: AuxLabs.Twitch.MissingScopeException.html
  name: MissingScopeException
  nameWithType: MissingScopeException
  fullName: AuxLabs.Twitch.MissingScopeException
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostCommercialAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostCommercialAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostCommercialAsync(AuxLabs.Twitch.Rest.Requests.PostCommercialBody,System.Nullable{System.Threading.CancellationToken}).html
  name: PostCommercialAsync
  nameWithType: ITwitchApi.PostCommercialAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostCommercialAsync
- uid: AuxLabs.Twitch.Rest.Requests.PostCommercialBody
  commentId: T:AuxLabs.Twitch.Rest.Requests.PostCommercialBody
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PostCommercialBody.html
  name: PostCommercialBody
  nameWithType: PostCommercialBody
  fullName: AuxLabs.Twitch.Rest.Requests.PostCommercialBody
- uid: System.Nullable{System.Threading.CancellationToken}
  commentId: T:System.Nullable{System.Threading.CancellationToken}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken?
  nameWithType: CancellationToken?
  fullName: System.Threading.CancellationToken?
  spec.csharp:
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
  spec.vb:
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Commercial}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Commercial}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<Commercial>>
  nameWithType: Task<TwitchResponse<Commercial>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.Commercial>>
  nameWithType.vb: Task(Of TwitchResponse(Of Commercial))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.Commercial))
  name.vb: Task(Of TwitchResponse(Of Commercial))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Commercial
    name: Commercial
    href: AuxLabs.Twitch.Rest.Models.Commercial.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Commercial
    name: Commercial
    href: AuxLabs.Twitch.Rest.Models.Commercial.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Requests
  commentId: N:AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.html
  name: AuxLabs.Twitch.Rest.Requests
  nameWithType: AuxLabs.Twitch.Rest.Requests
  fullName: AuxLabs.Twitch.Rest.Requests
  spec.csharp:
  - uid: AuxLabs
    name: AuxLabs
    href: AuxLabs.html
  - name: .
  - uid: AuxLabs.Twitch
    name: Twitch
    href: AuxLabs.Twitch.html
  - name: .
  - uid: AuxLabs.Twitch.Rest
    name: Rest
    href: AuxLabs.Twitch.Rest.html
  - name: .
  - uid: AuxLabs.Twitch.Rest.Requests
    name: Requests
    href: AuxLabs.Twitch.Rest.Requests.html
  spec.vb:
  - uid: AuxLabs
    name: AuxLabs
    href: AuxLabs.html
  - name: .
  - uid: AuxLabs.Twitch
    name: Twitch
    href: AuxLabs.Twitch.html
  - name: .
  - uid: AuxLabs.Twitch.Rest
    name: Rest
    href: AuxLabs.Twitch.Rest.html
  - name: .
  - uid: AuxLabs.Twitch.Rest.Requests
    name: Requests
    href: AuxLabs.Twitch.Rest.Requests.html
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: AuxLabs.Twitch.Rest.Models.ExtensionAnalytic
  commentId: T:AuxLabs.Twitch.Rest.Models.ExtensionAnalytic
  href: AuxLabs.Twitch.Rest.Models.ExtensionAnalytic.html
  name: ExtensionAnalytic
  nameWithType: ExtensionAnalytic
  fullName: AuxLabs.Twitch.Rest.Models.ExtensionAnalytic
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetExtensionAnalyticsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetExtensionAnalyticsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetExtensionAnalyticsAsync(AuxLabs.Twitch.Rest.Requests.GetExtensionAnalyticsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetExtensionAnalyticsAsync
  nameWithType: ITwitchApi.GetExtensionAnalyticsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetExtensionAnalyticsAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetExtensionAnalyticsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetExtensionAnalyticsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetExtensionAnalyticsArgs.html
  name: GetExtensionAnalyticsArgs
  nameWithType: GetExtensionAnalyticsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetExtensionAnalyticsArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.ExtensionAnalytic}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.ExtensionAnalytic}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchMetaResponse<ExtensionAnalytic>>
  nameWithType: Task<TwitchMetaResponse<ExtensionAnalytic>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchMetaResponse<AuxLabs.Twitch.Rest.Models.ExtensionAnalytic>>
  nameWithType.vb: Task(Of TwitchMetaResponse(Of ExtensionAnalytic))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchMetaResponse(Of AuxLabs.Twitch.Rest.Models.ExtensionAnalytic))
  name.vb: Task(Of TwitchMetaResponse(Of ExtensionAnalytic))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.ExtensionAnalytic
    name: ExtensionAnalytic
    href: AuxLabs.Twitch.Rest.Models.ExtensionAnalytic.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.ExtensionAnalytic
    name: ExtensionAnalytic
    href: AuxLabs.Twitch.Rest.Models.ExtensionAnalytic.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.GameAnalytic
  commentId: T:AuxLabs.Twitch.Rest.Models.GameAnalytic
  href: AuxLabs.Twitch.Rest.Models.GameAnalytic.html
  name: GameAnalytic
  nameWithType: GameAnalytic
  fullName: AuxLabs.Twitch.Rest.Models.GameAnalytic
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGameAnalyticsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGameAnalyticsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGameAnalyticsAsync(AuxLabs.Twitch.Rest.Requests.GetGameAnalyticsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetGameAnalyticsAsync
  nameWithType: ITwitchApi.GetGameAnalyticsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGameAnalyticsAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetGameAnalyticsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetGameAnalyticsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetGameAnalyticsArgs.html
  name: GetGameAnalyticsArgs
  nameWithType: GetGameAnalyticsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetGameAnalyticsArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.GameAnalytic}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.GameAnalytic}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchMetaResponse<GameAnalytic>>
  nameWithType: Task<TwitchMetaResponse<GameAnalytic>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchMetaResponse<AuxLabs.Twitch.Rest.Models.GameAnalytic>>
  nameWithType.vb: Task(Of TwitchMetaResponse(Of GameAnalytic))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchMetaResponse(Of AuxLabs.Twitch.Rest.Models.GameAnalytic))
  name.vb: Task(Of TwitchMetaResponse(Of GameAnalytic))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.GameAnalytic
    name: GameAnalytic
    href: AuxLabs.Twitch.Rest.Models.GameAnalytic.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.GameAnalytic
    name: GameAnalytic
    href: AuxLabs.Twitch.Rest.Models.GameAnalytic.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.BitsUser
  commentId: T:AuxLabs.Twitch.Rest.Models.BitsUser
  href: AuxLabs.Twitch.Rest.Models.BitsUser.html
  name: BitsUser
  nameWithType: BitsUser
  fullName: AuxLabs.Twitch.Rest.Models.BitsUser
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBitsLeaderboardAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBitsLeaderboardAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBitsLeaderboardAsync(AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetBitsLeaderboardAsync
  nameWithType: ITwitchApi.GetBitsLeaderboardAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBitsLeaderboardAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs.html
  name: GetBitsLeaderboardArgs
  nameWithType: GetBitsLeaderboardArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetBitsLeaderboardArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.BitsUser}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.BitsUser}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchMetaResponse<BitsUser>>
  nameWithType: Task<TwitchMetaResponse<BitsUser>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchMetaResponse<AuxLabs.Twitch.Rest.Models.BitsUser>>
  nameWithType.vb: Task(Of TwitchMetaResponse(Of BitsUser))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchMetaResponse(Of AuxLabs.Twitch.Rest.Models.BitsUser))
  name.vb: Task(Of TwitchMetaResponse(Of BitsUser))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.BitsUser
    name: BitsUser
    href: AuxLabs.Twitch.Rest.Models.BitsUser.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.BitsUser
    name: BitsUser
    href: AuxLabs.Twitch.Rest.Models.BitsUser.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.Cheermote
  commentId: T:AuxLabs.Twitch.Rest.Models.Cheermote
  href: AuxLabs.Twitch.Rest.Models.Cheermote.html
  name: Cheermote
  nameWithType: Cheermote
  fullName: AuxLabs.Twitch.Rest.Models.Cheermote
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCheermotesAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCheermotesAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCheermotesAsync(AuxLabs.Twitch.Rest.Requests.GetCheermotesArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetCheermotesAsync
  nameWithType: ITwitchApi.GetCheermotesAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCheermotesAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetCheermotesArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetCheermotesArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetCheermotesArgs.html
  name: GetCheermotesArgs
  nameWithType: GetCheermotesArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetCheermotesArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Cheermote}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Cheermote}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<Cheermote>>
  nameWithType: Task<TwitchResponse<Cheermote>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.Cheermote>>
  nameWithType.vb: Task(Of TwitchResponse(Of Cheermote))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.Cheermote))
  name.vb: Task(Of TwitchResponse(Of Cheermote))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Cheermote
    name: Cheermote
    href: AuxLabs.Twitch.Rest.Models.Cheermote.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Cheermote
    name: Cheermote
    href: AuxLabs.Twitch.Rest.Models.Cheermote.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.ExtensionTransaction
  commentId: T:AuxLabs.Twitch.Rest.Models.ExtensionTransaction
  href: AuxLabs.Twitch.Rest.Models.ExtensionTransaction.html
  name: ExtensionTransaction
  nameWithType: ExtensionTransaction
  fullName: AuxLabs.Twitch.Rest.Models.ExtensionTransaction
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetExtensionTransactionsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetExtensionTransactionsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetExtensionTransactionsAsync(AuxLabs.Twitch.Rest.Requests.GetExtensionTransactionsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetExtensionTransactionsAsync
  nameWithType: ITwitchApi.GetExtensionTransactionsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetExtensionTransactionsAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetExtensionTransactionsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetExtensionTransactionsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetExtensionTransactionsArgs.html
  name: GetExtensionTransactionsArgs
  nameWithType: GetExtensionTransactionsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetExtensionTransactionsArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.ExtensionTransaction}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.ExtensionTransaction}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchMetaResponse<ExtensionTransaction>>
  nameWithType: Task<TwitchMetaResponse<ExtensionTransaction>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchMetaResponse<AuxLabs.Twitch.Rest.Models.ExtensionTransaction>>
  nameWithType.vb: Task(Of TwitchMetaResponse(Of ExtensionTransaction))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchMetaResponse(Of AuxLabs.Twitch.Rest.Models.ExtensionTransaction))
  name.vb: Task(Of TwitchMetaResponse(Of ExtensionTransaction))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.ExtensionTransaction
    name: ExtensionTransaction
    href: AuxLabs.Twitch.Rest.Models.ExtensionTransaction.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.ExtensionTransaction
    name: ExtensionTransaction
    href: AuxLabs.Twitch.Rest.Models.ExtensionTransaction.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.Channel
  commentId: T:AuxLabs.Twitch.Rest.Models.Channel
  parent: AuxLabs.Twitch.Rest.Models
  href: AuxLabs.Twitch.Rest.Models.Channel.html
  name: Channel
  nameWithType: Channel
  fullName: AuxLabs.Twitch.Rest.Models.Channel
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelsAsync(AuxLabs.Twitch.Rest.Requests.GetChannelsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetChannelsAsync
  nameWithType: ITwitchApi.GetChannelsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelsAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetChannelsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetChannelsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetChannelsArgs.html
  name: GetChannelsArgs
  nameWithType: GetChannelsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetChannelsArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Channel}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Channel}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<Channel>>
  nameWithType: Task<TwitchResponse<Channel>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.Channel>>
  nameWithType.vb: Task(Of TwitchResponse(Of Channel))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.Channel))
  name.vb: Task(Of TwitchResponse(Of Channel))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Channel
    name: Channel
    href: AuxLabs.Twitch.Rest.Models.Channel.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Channel
    name: Channel
    href: AuxLabs.Twitch.Rest.Models.Channel.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models
  commentId: N:AuxLabs.Twitch.Rest.Models
  href: AuxLabs.html
  name: AuxLabs.Twitch.Rest.Models
  nameWithType: AuxLabs.Twitch.Rest.Models
  fullName: AuxLabs.Twitch.Rest.Models
  spec.csharp:
  - uid: AuxLabs
    name: AuxLabs
    href: AuxLabs.html
  - name: .
  - uid: AuxLabs.Twitch
    name: Twitch
    href: AuxLabs.Twitch.html
  - name: .
  - uid: AuxLabs.Twitch.Rest
    name: Rest
    href: AuxLabs.Twitch.Rest.html
  - name: .
  - uid: AuxLabs.Twitch.Rest.Models
    name: Models
    href: AuxLabs.Twitch.Rest.Models.html
  spec.vb:
  - uid: AuxLabs
    name: AuxLabs
    href: AuxLabs.html
  - name: .
  - uid: AuxLabs.Twitch
    name: Twitch
    href: AuxLabs.Twitch.html
  - name: .
  - uid: AuxLabs.Twitch.Rest
    name: Rest
    href: AuxLabs.Twitch.Rest.html
  - name: .
  - uid: AuxLabs.Twitch.Rest.Models
    name: Models
    href: AuxLabs.Twitch.Rest.Models.html
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchChannelAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchChannelAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchChannelAsync(AuxLabs.Twitch.Rest.Requests.PatchChannelArgs,AuxLabs.Twitch.Rest.Requests.PatchChannelBody,System.Nullable{System.Threading.CancellationToken}).html
  name: PatchChannelAsync
  nameWithType: ITwitchApi.PatchChannelAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchChannelAsync
- uid: AuxLabs.Twitch.Rest.Requests.PatchChannelArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.PatchChannelArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PatchChannelArgs.html
  name: PatchChannelArgs
  nameWithType: PatchChannelArgs
  fullName: AuxLabs.Twitch.Rest.Requests.PatchChannelArgs
- uid: AuxLabs.Twitch.Rest.Requests.PatchChannelBody
  commentId: T:AuxLabs.Twitch.Rest.Requests.PatchChannelBody
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PatchChannelBody.html
  name: PatchChannelBody
  nameWithType: PatchChannelBody
  fullName: AuxLabs.Twitch.Rest.Requests.PatchChannelBody
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: AuxLabs.Twitch.Rest.Models.ChannelEditor
  commentId: T:AuxLabs.Twitch.Rest.Models.ChannelEditor
  href: AuxLabs.Twitch.Rest.Models.ChannelEditor.html
  name: ChannelEditor
  nameWithType: ChannelEditor
  fullName: AuxLabs.Twitch.Rest.Models.ChannelEditor
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelEditorsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelEditorsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelEditorsAsync(AuxLabs.Twitch.Rest.Requests.GetChannelEditorsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetChannelEditorsAsync
  nameWithType: ITwitchApi.GetChannelEditorsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChannelEditorsAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetChannelEditorsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetChannelEditorsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetChannelEditorsArgs.html
  name: GetChannelEditorsArgs
  nameWithType: GetChannelEditorsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetChannelEditorsArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.ChannelEditor}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.ChannelEditor}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<ChannelEditor>>
  nameWithType: Task<TwitchResponse<ChannelEditor>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.ChannelEditor>>
  nameWithType.vb: Task(Of TwitchResponse(Of ChannelEditor))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.ChannelEditor))
  name.vb: Task(Of TwitchResponse(Of ChannelEditor))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.ChannelEditor
    name: ChannelEditor
    href: AuxLabs.Twitch.Rest.Models.ChannelEditor.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.ChannelEditor
    name: ChannelEditor
    href: AuxLabs.Twitch.Rest.Models.ChannelEditor.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.FollowedChannel
  commentId: T:AuxLabs.Twitch.Rest.Models.FollowedChannel
  href: AuxLabs.Twitch.Rest.Models.FollowedChannel.html
  name: FollowedChannel
  nameWithType: FollowedChannel
  fullName: AuxLabs.Twitch.Rest.Models.FollowedChannel
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowedChannelsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowedChannelsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowedChannelsAsync(AuxLabs.Twitch.Rest.Requests.GetFollowedChannelsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetFollowedChannelsAsync
  nameWithType: ITwitchApi.GetFollowedChannelsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowedChannelsAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetFollowedChannelsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetFollowedChannelsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetFollowedChannelsArgs.html
  name: GetFollowedChannelsArgs
  nameWithType: GetFollowedChannelsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetFollowedChannelsArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.FollowedChannel}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.FollowedChannel}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchMetaResponse<FollowedChannel>>
  nameWithType: Task<TwitchMetaResponse<FollowedChannel>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchMetaResponse<AuxLabs.Twitch.Rest.Models.FollowedChannel>>
  nameWithType.vb: Task(Of TwitchMetaResponse(Of FollowedChannel))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchMetaResponse(Of AuxLabs.Twitch.Rest.Models.FollowedChannel))
  name.vb: Task(Of TwitchMetaResponse(Of FollowedChannel))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.FollowedChannel
    name: FollowedChannel
    href: AuxLabs.Twitch.Rest.Models.FollowedChannel.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.FollowedChannel
    name: FollowedChannel
    href: AuxLabs.Twitch.Rest.Models.FollowedChannel.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.Follower
  commentId: T:AuxLabs.Twitch.Rest.Models.Follower
  href: AuxLabs.Twitch.Rest.Models.Follower.html
  name: Follower
  nameWithType: Follower
  fullName: AuxLabs.Twitch.Rest.Models.Follower
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowersAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowersAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowersAsync(AuxLabs.Twitch.Rest.Requests.GetFollowersArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetFollowersAsync
  nameWithType: ITwitchApi.GetFollowersAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowersAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetFollowersArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetFollowersArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetFollowersArgs.html
  name: GetFollowersArgs
  nameWithType: GetFollowersArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetFollowersArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Follower}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Follower}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchMetaResponse<Follower>>
  nameWithType: Task<TwitchMetaResponse<Follower>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchMetaResponse<AuxLabs.Twitch.Rest.Models.Follower>>
  nameWithType.vb: Task(Of TwitchMetaResponse(Of Follower))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchMetaResponse(Of AuxLabs.Twitch.Rest.Models.Follower))
  name.vb: Task(Of TwitchMetaResponse(Of Follower))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Follower
    name: Follower
    href: AuxLabs.Twitch.Rest.Models.Follower.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Follower
    name: Follower
    href: AuxLabs.Twitch.Rest.Models.Follower.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.Reward
  commentId: T:AuxLabs.Twitch.Rest.Models.Reward
  href: AuxLabs.Twitch.Rest.Models.Reward.html
  name: Reward
  nameWithType: Reward
  fullName: AuxLabs.Twitch.Rest.Models.Reward
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostRewardsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostRewardsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostRewardsAsync(AuxLabs.Twitch.Rest.Requests.PostRewardArgs,AuxLabs.Twitch.Rest.Requests.PostRewardBody,System.Nullable{System.Threading.CancellationToken}).html
  name: PostRewardsAsync
  nameWithType: ITwitchApi.PostRewardsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostRewardsAsync
- uid: AuxLabs.Twitch.Rest.Requests.PostRewardArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.PostRewardArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PostRewardArgs.html
  name: PostRewardArgs
  nameWithType: PostRewardArgs
  fullName: AuxLabs.Twitch.Rest.Requests.PostRewardArgs
- uid: AuxLabs.Twitch.Rest.Requests.PostRewardBody
  commentId: T:AuxLabs.Twitch.Rest.Requests.PostRewardBody
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PostRewardBody.html
  name: PostRewardBody
  nameWithType: PostRewardBody
  fullName: AuxLabs.Twitch.Rest.Requests.PostRewardBody
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Reward}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Reward}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<Reward>>
  nameWithType: Task<TwitchResponse<Reward>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.Reward>>
  nameWithType.vb: Task(Of TwitchResponse(Of Reward))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.Reward))
  name.vb: Task(Of TwitchResponse(Of Reward))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Reward
    name: Reward
    href: AuxLabs.Twitch.Rest.Models.Reward.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Reward
    name: Reward
    href: AuxLabs.Twitch.Rest.Models.Reward.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteRewardAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteRewardAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteRewardAsync(AuxLabs.Twitch.Rest.Requests.ManageRewardArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: DeleteRewardAsync
  nameWithType: ITwitchApi.DeleteRewardAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteRewardAsync
- uid: AuxLabs.Twitch.Rest.Requests.ManageRewardArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.ManageRewardArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.ManageRewardArgs.html
  name: ManageRewardArgs
  nameWithType: ManageRewardArgs
  fullName: AuxLabs.Twitch.Rest.Requests.ManageRewardArgs
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetRewardsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetRewardsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetRewardsAsync(AuxLabs.Twitch.Rest.Requests.GetRewardArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetRewardsAsync
  nameWithType: ITwitchApi.GetRewardsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetRewardsAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetRewardArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetRewardArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetRewardArgs.html
  name: GetRewardArgs
  nameWithType: GetRewardArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetRewardArgs
- uid: AuxLabs.Twitch.Rest.Models.Redemption
  commentId: T:AuxLabs.Twitch.Rest.Models.Redemption
  href: AuxLabs.Twitch.Rest.Models.Redemption.html
  name: Redemption
  nameWithType: Redemption
  fullName: AuxLabs.Twitch.Rest.Models.Redemption
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetRewardRedemptionAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetRewardRedemptionAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetRewardRedemptionAsync(AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetRewardRedemptionAsync
  nameWithType: ITwitchApi.GetRewardRedemptionAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetRewardRedemptionAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs.html
  name: GetRedemptionsArgs
  nameWithType: GetRedemptionsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetRedemptionsArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Redemption}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Redemption}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<Redemption>>
  nameWithType: Task<TwitchResponse<Redemption>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.Redemption>>
  nameWithType.vb: Task(Of TwitchResponse(Of Redemption))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.Redemption))
  name.vb: Task(Of TwitchResponse(Of Redemption))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Redemption
    name: Redemption
    href: AuxLabs.Twitch.Rest.Models.Redemption.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Redemption
    name: Redemption
    href: AuxLabs.Twitch.Rest.Models.Redemption.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchRewardAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchRewardAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchRewardAsync(AuxLabs.Twitch.Rest.Requests.ManageRewardArgs,AuxLabs.Twitch.Rest.Requests.PostRewardBody,System.Nullable{System.Threading.CancellationToken}).html
  name: PatchRewardAsync
  nameWithType: ITwitchApi.PatchRewardAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchRewardAsync
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchRewardRedemptionAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchRewardRedemptionAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchRewardRedemptionAsync(AuxLabs.Twitch.RedemptionStatus,AuxLabs.Twitch.Rest.Requests.ModifyRedemptionsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: PatchRewardRedemptionAsync
  nameWithType: ITwitchApi.PatchRewardRedemptionAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchRewardRedemptionAsync
- uid: AuxLabs.Twitch.RedemptionStatus
  commentId: T:AuxLabs.Twitch.RedemptionStatus
  parent: AuxLabs.Twitch
  href: AuxLabs.Twitch.RedemptionStatus.html
  name: RedemptionStatus
  nameWithType: RedemptionStatus
  fullName: AuxLabs.Twitch.RedemptionStatus
- uid: AuxLabs.Twitch.Rest.Requests.ModifyRedemptionsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.ModifyRedemptionsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.ModifyRedemptionsArgs.html
  name: ModifyRedemptionsArgs
  nameWithType: ModifyRedemptionsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.ModifyRedemptionsArgs
- uid: AuxLabs.Twitch
  commentId: N:AuxLabs.Twitch
  href: AuxLabs.html
  name: AuxLabs.Twitch
  nameWithType: AuxLabs.Twitch
  fullName: AuxLabs.Twitch
  spec.csharp:
  - uid: AuxLabs
    name: AuxLabs
    href: AuxLabs.html
  - name: .
  - uid: AuxLabs.Twitch
    name: Twitch
    href: AuxLabs.Twitch.html
  spec.vb:
  - uid: AuxLabs
    name: AuxLabs
    href: AuxLabs.html
  - name: .
  - uid: AuxLabs.Twitch
    name: Twitch
    href: AuxLabs.Twitch.html
- uid: AuxLabs.Twitch.Rest.Models.CharityCampaign
  commentId: T:AuxLabs.Twitch.Rest.Models.CharityCampaign
  href: AuxLabs.Twitch.Rest.Models.CharityCampaign.html
  name: CharityCampaign
  nameWithType: CharityCampaign
  fullName: AuxLabs.Twitch.Rest.Models.CharityCampaign
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCharityCampaignAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCharityCampaignAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCharityCampaignAsync(AuxLabs.Twitch.Rest.Requests.GetCharityCampaignArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetCharityCampaignAsync
  nameWithType: ITwitchApi.GetCharityCampaignAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCharityCampaignAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetCharityCampaignArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetCharityCampaignArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetCharityCampaignArgs.html
  name: GetCharityCampaignArgs
  nameWithType: GetCharityCampaignArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetCharityCampaignArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.CharityCampaign}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.CharityCampaign}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<CharityCampaign>>
  nameWithType: Task<TwitchResponse<CharityCampaign>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.CharityCampaign>>
  nameWithType.vb: Task(Of TwitchResponse(Of CharityCampaign))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.CharityCampaign))
  name.vb: Task(Of TwitchResponse(Of CharityCampaign))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.CharityCampaign
    name: CharityCampaign
    href: AuxLabs.Twitch.Rest.Models.CharityCampaign.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.CharityCampaign
    name: CharityCampaign
    href: AuxLabs.Twitch.Rest.Models.CharityCampaign.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.CharityDonation
  commentId: T:AuxLabs.Twitch.Rest.Models.CharityDonation
  href: AuxLabs.Twitch.Rest.Models.CharityDonation.html
  name: CharityDonation
  nameWithType: CharityDonation
  fullName: AuxLabs.Twitch.Rest.Models.CharityDonation
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCharityDonationsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCharityDonationsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCharityDonationsAsync(AuxLabs.Twitch.Rest.Requests.GetCharityDonationsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetCharityDonationsAsync
  nameWithType: ITwitchApi.GetCharityDonationsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCharityDonationsAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetCharityDonationsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetCharityDonationsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetCharityDonationsArgs.html
  name: GetCharityDonationsArgs
  nameWithType: GetCharityDonationsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetCharityDonationsArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.CharityDonation}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.CharityDonation}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchMetaResponse<CharityDonation>>
  nameWithType: Task<TwitchMetaResponse<CharityDonation>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchMetaResponse<AuxLabs.Twitch.Rest.Models.CharityDonation>>
  nameWithType.vb: Task(Of TwitchMetaResponse(Of CharityDonation))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchMetaResponse(Of AuxLabs.Twitch.Rest.Models.CharityDonation))
  name.vb: Task(Of TwitchMetaResponse(Of CharityDonation))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.CharityDonation
    name: CharityDonation
    href: AuxLabs.Twitch.Rest.Models.CharityDonation.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.CharityDonation
    name: CharityDonation
    href: AuxLabs.Twitch.Rest.Models.CharityDonation.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.SimpleUser
  commentId: T:AuxLabs.Twitch.Rest.Models.SimpleUser
  parent: AuxLabs.Twitch.Rest.Models
  href: AuxLabs.Twitch.Rest.Models.SimpleUser.html
  name: SimpleUser
  nameWithType: SimpleUser
  fullName: AuxLabs.Twitch.Rest.Models.SimpleUser
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChattersAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChattersAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChattersAsync(AuxLabs.Twitch.Rest.Requests.GetChattersArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetChattersAsync
  nameWithType: ITwitchApi.GetChattersAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChattersAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetChattersArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetChattersArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetChattersArgs.html
  name: GetChattersArgs
  nameWithType: GetChattersArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetChattersArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.SimpleUser}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.SimpleUser}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchMetaResponse<SimpleUser>>
  nameWithType: Task<TwitchMetaResponse<SimpleUser>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchMetaResponse<AuxLabs.Twitch.Rest.Models.SimpleUser>>
  nameWithType.vb: Task(Of TwitchMetaResponse(Of SimpleUser))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchMetaResponse(Of AuxLabs.Twitch.Rest.Models.SimpleUser))
  name.vb: Task(Of TwitchMetaResponse(Of SimpleUser))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.SimpleUser
    name: SimpleUser
    href: AuxLabs.Twitch.Rest.Models.SimpleUser.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.SimpleUser
    name: SimpleUser
    href: AuxLabs.Twitch.Rest.Models.SimpleUser.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.Emote
  commentId: T:AuxLabs.Twitch.Rest.Models.Emote
  href: AuxLabs.Twitch.Rest.Models.Emote.html
  name: Emote
  nameWithType: Emote
  fullName: AuxLabs.Twitch.Rest.Models.Emote
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmotesAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmotesAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmotesAsync(AuxLabs.Twitch.Rest.Requests.GetEmotesArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetEmotesAsync
  nameWithType: ITwitchApi.GetEmotesAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmotesAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetEmotesArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetEmotesArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetEmotesArgs.html
  name: GetEmotesArgs
  nameWithType: GetEmotesArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetEmotesArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Emote}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Emote}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<Emote>>
  nameWithType: Task<TwitchResponse<Emote>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.Emote>>
  nameWithType.vb: Task(Of TwitchResponse(Of Emote))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.Emote))
  name.vb: Task(Of TwitchResponse(Of Emote))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Emote
    name: Emote
    href: AuxLabs.Twitch.Rest.Models.Emote.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Emote
    name: Emote
    href: AuxLabs.Twitch.Rest.Models.Emote.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.GlobalEmote
  commentId: T:AuxLabs.Twitch.Rest.Models.GlobalEmote
  parent: AuxLabs.Twitch.Rest.Models
  href: AuxLabs.Twitch.Rest.Models.GlobalEmote.html
  name: GlobalEmote
  nameWithType: GlobalEmote
  fullName: AuxLabs.Twitch.Rest.Models.GlobalEmote
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.GlobalEmote}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.GlobalEmote}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<GlobalEmote>>
  nameWithType: Task<TwitchResponse<GlobalEmote>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.GlobalEmote>>
  nameWithType.vb: Task(Of TwitchResponse(Of GlobalEmote))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.GlobalEmote))
  name.vb: Task(Of TwitchResponse(Of GlobalEmote))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.GlobalEmote
    name: GlobalEmote
    href: AuxLabs.Twitch.Rest.Models.GlobalEmote.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.GlobalEmote
    name: GlobalEmote
    href: AuxLabs.Twitch.Rest.Models.GlobalEmote.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmoteSetsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmoteSetsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmoteSetsAsync(AuxLabs.Twitch.Rest.Requests.GetEmoteSetsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetEmoteSetsAsync
  nameWithType: ITwitchApi.GetEmoteSetsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEmoteSetsAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetEmoteSetsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetEmoteSetsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetEmoteSetsArgs.html
  name: GetEmoteSetsArgs
  nameWithType: GetEmoteSetsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetEmoteSetsArgs
- uid: AuxLabs.Twitch.Rest.Models.BadgeSet
  commentId: T:AuxLabs.Twitch.Rest.Models.BadgeSet
  href: AuxLabs.Twitch.Rest.Models.BadgeSet.html
  name: BadgeSet
  nameWithType: BadgeSet
  fullName: AuxLabs.Twitch.Rest.Models.BadgeSet
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBadgesAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBadgesAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBadgesAsync(AuxLabs.Twitch.Rest.Requests.GetBadgesArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetBadgesAsync
  nameWithType: ITwitchApi.GetBadgesAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBadgesAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetBadgesArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetBadgesArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetBadgesArgs.html
  name: GetBadgesArgs
  nameWithType: GetBadgesArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetBadgesArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.BadgeSet}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.BadgeSet}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<BadgeSet>>
  nameWithType: Task<TwitchResponse<BadgeSet>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.BadgeSet>>
  nameWithType.vb: Task(Of TwitchResponse(Of BadgeSet))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.BadgeSet))
  name.vb: Task(Of TwitchResponse(Of BadgeSet))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.BadgeSet
    name: BadgeSet
    href: AuxLabs.Twitch.Rest.Models.BadgeSet.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.BadgeSet
    name: BadgeSet
    href: AuxLabs.Twitch.Rest.Models.BadgeSet.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.ChatSettings
  commentId: T:AuxLabs.Twitch.Rest.Models.ChatSettings
  href: AuxLabs.Twitch.Rest.Models.ChatSettings.html
  name: ChatSettings
  nameWithType: ChatSettings
  fullName: AuxLabs.Twitch.Rest.Models.ChatSettings
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChatSettingsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChatSettingsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChatSettingsAsync(AuxLabs.Twitch.Rest.Requests.GetChatSettingsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetChatSettingsAsync
  nameWithType: ITwitchApi.GetChatSettingsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetChatSettingsAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetChatSettingsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetChatSettingsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetChatSettingsArgs.html
  name: GetChatSettingsArgs
  nameWithType: GetChatSettingsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetChatSettingsArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.ChatSettings}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.ChatSettings}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<ChatSettings>>
  nameWithType: Task<TwitchResponse<ChatSettings>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.ChatSettings>>
  nameWithType.vb: Task(Of TwitchResponse(Of ChatSettings))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.ChatSettings))
  name.vb: Task(Of TwitchResponse(Of ChatSettings))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.ChatSettings
    name: ChatSettings
    href: AuxLabs.Twitch.Rest.Models.ChatSettings.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.ChatSettings
    name: ChatSettings
    href: AuxLabs.Twitch.Rest.Models.ChatSettings.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchChatSettingsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchChatSettingsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchChatSettingsAsync(AuxLabs.Twitch.Rest.Requests.PatchChatSettingsArgs,AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody,System.Nullable{System.Threading.CancellationToken}).html
  name: PatchChatSettingsAsync
  nameWithType: ITwitchApi.PatchChatSettingsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchChatSettingsAsync
- uid: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.PatchChatSettingsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsArgs.html
  name: PatchChatSettingsArgs
  nameWithType: PatchChatSettingsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsArgs
- uid: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody
  commentId: T:AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.html
  name: PatchChatSettingsBody
  nameWithType: PatchChatSettingsBody
  fullName: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostChatAnnouncementAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostChatAnnouncementAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostChatAnnouncementAsync(AuxLabs.Twitch.Rest.Requests.PostAnnouncementArgs,AuxLabs.Twitch.Rest.Requests.PostAnnouncementBody,System.Nullable{System.Threading.CancellationToken}).html
  name: PostChatAnnouncementAsync
  nameWithType: ITwitchApi.PostChatAnnouncementAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostChatAnnouncementAsync
- uid: AuxLabs.Twitch.Rest.Requests.PostAnnouncementArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.PostAnnouncementArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PostAnnouncementArgs.html
  name: PostAnnouncementArgs
  nameWithType: PostAnnouncementArgs
  fullName: AuxLabs.Twitch.Rest.Requests.PostAnnouncementArgs
- uid: AuxLabs.Twitch.Rest.Requests.PostAnnouncementBody
  commentId: T:AuxLabs.Twitch.Rest.Requests.PostAnnouncementBody
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PostAnnouncementBody.html
  name: PostAnnouncementBody
  nameWithType: PostAnnouncementBody
  fullName: AuxLabs.Twitch.Rest.Requests.PostAnnouncementBody
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostShoutoutAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostShoutoutAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostShoutoutAsync(AuxLabs.Twitch.Rest.Requests.PostShoutoutArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: PostShoutoutAsync
  nameWithType: ITwitchApi.PostShoutoutAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostShoutoutAsync
- uid: AuxLabs.Twitch.Rest.Requests.PostShoutoutArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.PostShoutoutArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PostShoutoutArgs.html
  name: PostShoutoutArgs
  nameWithType: PostShoutoutArgs
  fullName: AuxLabs.Twitch.Rest.Requests.PostShoutoutArgs
- uid: AuxLabs.Twitch.Rest.Models.SimpleChatUser
  commentId: T:AuxLabs.Twitch.Rest.Models.SimpleChatUser
  href: AuxLabs.Twitch.Rest.Models.SimpleChatUser.html
  name: SimpleChatUser
  nameWithType: SimpleChatUser
  fullName: AuxLabs.Twitch.Rest.Models.SimpleChatUser
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUserChatColorsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUserChatColorsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUserChatColorsAsync(AuxLabs.Twitch.Rest.Requests.GetUserColorArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetUserChatColorsAsync
  nameWithType: ITwitchApi.GetUserChatColorsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUserChatColorsAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetUserColorArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetUserColorArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetUserColorArgs.html
  name: GetUserColorArgs
  nameWithType: GetUserColorArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetUserColorArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.SimpleChatUser}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.SimpleChatUser}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<SimpleChatUser>>
  nameWithType: Task<TwitchResponse<SimpleChatUser>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.SimpleChatUser>>
  nameWithType.vb: Task(Of TwitchResponse(Of SimpleChatUser))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.SimpleChatUser))
  name.vb: Task(Of TwitchResponse(Of SimpleChatUser))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.SimpleChatUser
    name: SimpleChatUser
    href: AuxLabs.Twitch.Rest.Models.SimpleChatUser.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.SimpleChatUser
    name: SimpleChatUser
    href: AuxLabs.Twitch.Rest.Models.SimpleChatUser.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutUserChatColorAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PutUserChatColorAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutUserChatColorAsync(AuxLabs.Twitch.Rest.Requests.PutUserChatColorArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: PutUserChatColorAsync
  nameWithType: ITwitchApi.PutUserChatColorAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutUserChatColorAsync
- uid: AuxLabs.Twitch.Rest.Requests.PutUserChatColorArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.PutUserChatColorArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PutUserChatColorArgs.html
  name: PutUserChatColorArgs
  nameWithType: PutUserChatColorArgs
  fullName: AuxLabs.Twitch.Rest.Requests.PutUserChatColorArgs
- uid: AuxLabs.Twitch.Rest.Models.SimpleClip
  commentId: T:AuxLabs.Twitch.Rest.Models.SimpleClip
  parent: AuxLabs.Twitch.Rest.Models
  href: AuxLabs.Twitch.Rest.Models.SimpleClip.html
  name: SimpleClip
  nameWithType: SimpleClip
  fullName: AuxLabs.Twitch.Rest.Models.SimpleClip
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostClipAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostClipAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostClipAsync(AuxLabs.Twitch.Rest.Requests.PostClipArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: PostClipAsync
  nameWithType: ITwitchApi.PostClipAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostClipAsync
- uid: AuxLabs.Twitch.Rest.Requests.PostClipArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.PostClipArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PostClipArgs.html
  name: PostClipArgs
  nameWithType: PostClipArgs
  fullName: AuxLabs.Twitch.Rest.Requests.PostClipArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.SimpleClip}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.SimpleClip}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<SimpleClip>>
  nameWithType: Task<TwitchResponse<SimpleClip>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.SimpleClip>>
  nameWithType.vb: Task(Of TwitchResponse(Of SimpleClip))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.SimpleClip))
  name.vb: Task(Of TwitchResponse(Of SimpleClip))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.SimpleClip
    name: SimpleClip
    href: AuxLabs.Twitch.Rest.Models.SimpleClip.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.SimpleClip
    name: SimpleClip
    href: AuxLabs.Twitch.Rest.Models.SimpleClip.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.Clip
  commentId: T:AuxLabs.Twitch.Rest.Models.Clip
  href: AuxLabs.Twitch.Rest.Models.Clip.html
  name: Clip
  nameWithType: Clip
  fullName: AuxLabs.Twitch.Rest.Models.Clip
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetClipsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetClipsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetClipsAsync(AuxLabs.Twitch.Rest.Requests.GetClipsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetClipsAsync
  nameWithType: ITwitchApi.GetClipsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetClipsAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetClipsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetClipsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetClipsArgs.html
  name: GetClipsArgs
  nameWithType: GetClipsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetClipsArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Clip}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Clip}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchMetaResponse<Clip>>
  nameWithType: Task<TwitchMetaResponse<Clip>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchMetaResponse<AuxLabs.Twitch.Rest.Models.Clip>>
  nameWithType.vb: Task(Of TwitchMetaResponse(Of Clip))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchMetaResponse(Of AuxLabs.Twitch.Rest.Models.Clip))
  name.vb: Task(Of TwitchMetaResponse(Of Clip))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Clip
    name: Clip
    href: AuxLabs.Twitch.Rest.Models.Clip.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Clip
    name: Clip
    href: AuxLabs.Twitch.Rest.Models.Clip.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.Entitlement
  commentId: T:AuxLabs.Twitch.Rest.Models.Entitlement
  href: AuxLabs.Twitch.Rest.Models.Entitlement.html
  name: Entitlement
  nameWithType: Entitlement
  fullName: AuxLabs.Twitch.Rest.Models.Entitlement
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetDropsStatusAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetDropsStatusAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetDropsStatusAsync(AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetDropsStatusAsync
  nameWithType: ITwitchApi.GetDropsStatusAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetDropsStatusAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs.html
  name: GetDropStatusArgs
  nameWithType: GetDropStatusArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetDropStatusArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Entitlement}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Entitlement}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchMetaResponse<Entitlement>>
  nameWithType: Task<TwitchMetaResponse<Entitlement>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchMetaResponse<AuxLabs.Twitch.Rest.Models.Entitlement>>
  nameWithType.vb: Task(Of TwitchMetaResponse(Of Entitlement))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchMetaResponse(Of AuxLabs.Twitch.Rest.Models.Entitlement))
  name.vb: Task(Of TwitchMetaResponse(Of Entitlement))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Entitlement
    name: Entitlement
    href: AuxLabs.Twitch.Rest.Models.Entitlement.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Entitlement
    name: Entitlement
    href: AuxLabs.Twitch.Rest.Models.Entitlement.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.EntitlementDrop
  commentId: T:AuxLabs.Twitch.Rest.Models.EntitlementDrop
  href: AuxLabs.Twitch.Rest.Models.EntitlementDrop.html
  name: EntitlementDrop
  nameWithType: EntitlementDrop
  fullName: AuxLabs.Twitch.Rest.Models.EntitlementDrop
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchDropsStatusAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchDropsStatusAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchDropsStatusAsync(AuxLabs.Twitch.Rest.Requests.PatchDropsStatusArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: PatchDropsStatusAsync
  nameWithType: ITwitchApi.PatchDropsStatusAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchDropsStatusAsync
- uid: AuxLabs.Twitch.Rest.Requests.PatchDropsStatusArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.PatchDropsStatusArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PatchDropsStatusArgs.html
  name: PatchDropsStatusArgs
  nameWithType: PatchDropsStatusArgs
  fullName: AuxLabs.Twitch.Rest.Requests.PatchDropsStatusArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.EntitlementDrop}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.EntitlementDrop}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<EntitlementDrop>>
  nameWithType: Task<TwitchResponse<EntitlementDrop>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.EntitlementDrop>>
  nameWithType.vb: Task(Of TwitchResponse(Of EntitlementDrop))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.EntitlementDrop))
  name.vb: Task(Of TwitchResponse(Of EntitlementDrop))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.EntitlementDrop
    name: EntitlementDrop
    href: AuxLabs.Twitch.Rest.Models.EntitlementDrop.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.EntitlementDrop
    name: EntitlementDrop
    href: AuxLabs.Twitch.Rest.Models.EntitlementDrop.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.EventSubResponse
  commentId: T:AuxLabs.Twitch.Rest.Models.EventSubResponse
  href: AuxLabs.Twitch.Rest.Models.EventSubResponse.html
  name: EventSubResponse
  nameWithType: EventSubResponse
  fullName: AuxLabs.Twitch.Rest.Models.EventSubResponse
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostEventSubscriptionAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostEventSubscriptionAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostEventSubscriptionAsync--1(AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody{--0},System.Nullable{System.Threading.CancellationToken}).html
  name: PostEventSubscriptionAsync
  nameWithType: ITwitchApi.PostEventSubscriptionAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostEventSubscriptionAsync
- uid: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody{{TCondition}}
  commentId: T:AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody{``0}
  parent: AuxLabs.Twitch.Rest.Requests
  definition: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody`1
  href: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.html
  name: PostEventSubscriptionBody<TCondition>
  nameWithType: PostEventSubscriptionBody<TCondition>
  fullName: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody<TCondition>
  nameWithType.vb: PostEventSubscriptionBody(Of TCondition)
  fullName.vb: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody(Of TCondition)
  name.vb: PostEventSubscriptionBody(Of TCondition)
  spec.csharp:
  - uid: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody`1
    name: PostEventSubscriptionBody
    href: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.html
  - name: <
  - name: TCondition
  - name: '>'
  spec.vb:
  - uid: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody`1
    name: PostEventSubscriptionBody
    href: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TCondition
  - name: )
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.EventSubResponse}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.EventSubResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<EventSubResponse>
  nameWithType: Task<EventSubResponse>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.EventSubResponse>
  nameWithType.vb: Task(Of EventSubResponse)
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.EventSubResponse)
  name.vb: Task(Of EventSubResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.EventSubResponse
    name: EventSubResponse
    href: AuxLabs.Twitch.Rest.Models.EventSubResponse.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.EventSubResponse
    name: EventSubResponse
    href: AuxLabs.Twitch.Rest.Models.EventSubResponse.html
  - name: )
- uid: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody`1
  commentId: T:AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody`1
  href: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.html
  name: PostEventSubscriptionBody<TCondition>
  nameWithType: PostEventSubscriptionBody<TCondition>
  fullName: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody<TCondition>
  nameWithType.vb: PostEventSubscriptionBody(Of TCondition)
  fullName.vb: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody(Of TCondition)
  name.vb: PostEventSubscriptionBody(Of TCondition)
  spec.csharp:
  - uid: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody`1
    name: PostEventSubscriptionBody
    href: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.html
  - name: <
  - name: TCondition
  - name: '>'
  spec.vb:
  - uid: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody`1
    name: PostEventSubscriptionBody
    href: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TCondition
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteEventSubscriptionAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteEventSubscriptionAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteEventSubscriptionAsync(AuxLabs.Twitch.Rest.Requests.DeleteEventSubscriptionArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: DeleteEventSubscriptionAsync
  nameWithType: ITwitchApi.DeleteEventSubscriptionAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteEventSubscriptionAsync
- uid: AuxLabs.Twitch.Rest.Requests.DeleteEventSubscriptionArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.DeleteEventSubscriptionArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.DeleteEventSubscriptionArgs.html
  name: DeleteEventSubscriptionArgs
  nameWithType: DeleteEventSubscriptionArgs
  fullName: AuxLabs.Twitch.Rest.Requests.DeleteEventSubscriptionArgs
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEventSubscriptionsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEventSubscriptionsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEventSubscriptionsAsync(AuxLabs.Twitch.Rest.Requests.GetEventSubscriptionsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetEventSubscriptionsAsync
  nameWithType: ITwitchApi.GetEventSubscriptionsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetEventSubscriptionsAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetEventSubscriptionsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetEventSubscriptionsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetEventSubscriptionsArgs.html
  name: GetEventSubscriptionsArgs
  nameWithType: GetEventSubscriptionsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetEventSubscriptionsArgs
- uid: AuxLabs.Twitch.Rest.Models.Game
  commentId: T:AuxLabs.Twitch.Rest.Models.Game
  href: AuxLabs.Twitch.Rest.Models.Game.html
  name: Game
  nameWithType: Game
  fullName: AuxLabs.Twitch.Rest.Models.Game
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTopGamesAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTopGamesAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTopGamesAsync(AuxLabs.Twitch.Rest.Requests.GetTopGamesArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetTopGamesAsync
  nameWithType: ITwitchApi.GetTopGamesAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTopGamesAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetTopGamesArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetTopGamesArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetTopGamesArgs.html
  name: GetTopGamesArgs
  nameWithType: GetTopGamesArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetTopGamesArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Game}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Game}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchMetaResponse<Game>>
  nameWithType: Task<TwitchMetaResponse<Game>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchMetaResponse<AuxLabs.Twitch.Rest.Models.Game>>
  nameWithType.vb: Task(Of TwitchMetaResponse(Of Game))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchMetaResponse(Of AuxLabs.Twitch.Rest.Models.Game))
  name.vb: Task(Of TwitchMetaResponse(Of Game))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Game
    name: Game
    href: AuxLabs.Twitch.Rest.Models.Game.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Game
    name: Game
    href: AuxLabs.Twitch.Rest.Models.Game.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGamesAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGamesAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGamesAsync(AuxLabs.Twitch.Rest.Requests.GetGamesArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetGamesAsync
  nameWithType: ITwitchApi.GetGamesAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGamesAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetGamesArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetGamesArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetGamesArgs.html
  name: GetGamesArgs
  nameWithType: GetGamesArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetGamesArgs
- uid: AuxLabs.Twitch.Rest.Models.Goal
  commentId: T:AuxLabs.Twitch.Rest.Models.Goal
  parent: AuxLabs.Twitch.Rest.Models
  href: AuxLabs.Twitch.Rest.Models.Goal.html
  name: Goal
  nameWithType: Goal
  fullName: AuxLabs.Twitch.Rest.Models.Goal
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGoalsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGoalsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGoalsAsync(AuxLabs.Twitch.Rest.Requests.GetGoalsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetGoalsAsync
  nameWithType: ITwitchApi.GetGoalsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetGoalsAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetGoalsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetGoalsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetGoalsArgs.html
  name: GetGoalsArgs
  nameWithType: GetGoalsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetGoalsArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Goal}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Goal}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<Goal>>
  nameWithType: Task<TwitchResponse<Goal>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.Goal>>
  nameWithType.vb: Task(Of TwitchResponse(Of Goal))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.Goal))
  name.vb: Task(Of TwitchResponse(Of Goal))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Goal
    name: Goal
    href: AuxLabs.Twitch.Rest.Models.Goal.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Goal
    name: Goal
    href: AuxLabs.Twitch.Rest.Models.Goal.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.HypeTrainInfo
  commentId: T:AuxLabs.Twitch.Rest.Models.HypeTrainInfo
  href: AuxLabs.Twitch.Rest.Models.HypeTrainInfo.html
  name: HypeTrainInfo
  nameWithType: HypeTrainInfo
  fullName: AuxLabs.Twitch.Rest.Models.HypeTrainInfo
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetHypetrainEventsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetHypetrainEventsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetHypetrainEventsAsync(AuxLabs.Twitch.Rest.Requests.GetHypeTrainsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetHypetrainEventsAsync
  nameWithType: ITwitchApi.GetHypetrainEventsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetHypetrainEventsAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetHypeTrainsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetHypeTrainsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetHypeTrainsArgs.html
  name: GetHypeTrainsArgs
  nameWithType: GetHypeTrainsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetHypeTrainsArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.HypeTrainInfo}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.HypeTrainInfo}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchMetaResponse<HypeTrainInfo>>
  nameWithType: Task<TwitchMetaResponse<HypeTrainInfo>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchMetaResponse<AuxLabs.Twitch.Rest.Models.HypeTrainInfo>>
  nameWithType.vb: Task(Of TwitchMetaResponse(Of HypeTrainInfo))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchMetaResponse(Of AuxLabs.Twitch.Rest.Models.HypeTrainInfo))
  name.vb: Task(Of TwitchMetaResponse(Of HypeTrainInfo))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.HypeTrainInfo
    name: HypeTrainInfo
    href: AuxLabs.Twitch.Rest.Models.HypeTrainInfo.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.HypeTrainInfo
    name: HypeTrainInfo
    href: AuxLabs.Twitch.Rest.Models.HypeTrainInfo.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.MockMessage
  commentId: T:AuxLabs.Twitch.Rest.Models.MockMessage
  href: AuxLabs.Twitch.Rest.Models.MockMessage.html
  name: MockMessage
  nameWithType: MockMessage
  fullName: AuxLabs.Twitch.Rest.Models.MockMessage
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostEnforcementStatusAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostEnforcementStatusAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostEnforcementStatusAsync(AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusArgs,AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusBody,System.Nullable{System.Threading.CancellationToken}).html
  name: PostEnforcementStatusAsync
  nameWithType: ITwitchApi.PostEnforcementStatusAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostEnforcementStatusAsync
- uid: AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusArgs.html
  name: PostEnforcementStatusArgs
  nameWithType: PostEnforcementStatusArgs
  fullName: AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusArgs
- uid: AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusBody
  commentId: T:AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusBody
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusBody.html
  name: PostEnforcementStatusBody
  nameWithType: PostEnforcementStatusBody
  fullName: AuxLabs.Twitch.Rest.Requests.PostEnforcementStatusBody
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.MockMessage}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.MockMessage}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<MockMessage>>
  nameWithType: Task<TwitchResponse<MockMessage>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.MockMessage>>
  nameWithType.vb: Task(Of TwitchResponse(Of MockMessage))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.MockMessage))
  name.vb: Task(Of TwitchResponse(Of MockMessage))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.MockMessage
    name: MockMessage
    href: AuxLabs.Twitch.Rest.Models.MockMessage.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.MockMessage
    name: MockMessage
    href: AuxLabs.Twitch.Rest.Models.MockMessage.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostAutomodMessageAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostAutomodMessageAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostAutomodMessageAsync(AuxLabs.Twitch.Rest.Requests.PostAutomodMessageArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: PostAutomodMessageAsync
  nameWithType: ITwitchApi.PostAutomodMessageAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostAutomodMessageAsync
- uid: AuxLabs.Twitch.Rest.Requests.PostAutomodMessageArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.PostAutomodMessageArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PostAutomodMessageArgs.html
  name: PostAutomodMessageArgs
  nameWithType: PostAutomodMessageArgs
  fullName: AuxLabs.Twitch.Rest.Requests.PostAutomodMessageArgs
- uid: AuxLabs.Twitch.Rest.Models.AutomodSettings
  commentId: T:AuxLabs.Twitch.Rest.Models.AutomodSettings
  href: AuxLabs.Twitch.Rest.Models.AutomodSettings.html
  name: AutomodSettings
  nameWithType: AutomodSettings
  fullName: AuxLabs.Twitch.Rest.Models.AutomodSettings
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetAutomodSettingsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetAutomodSettingsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetAutomodSettingsAsync(AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetAutomodSettingsAsync
  nameWithType: ITwitchApi.GetAutomodSettingsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetAutomodSettingsAsync
- uid: AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs.html
  name: AutomodSettingsArgs
  nameWithType: AutomodSettingsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.AutomodSettings}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.AutomodSettings}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<AutomodSettings>>
  nameWithType: Task<TwitchResponse<AutomodSettings>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.AutomodSettings>>
  nameWithType.vb: Task(Of TwitchResponse(Of AutomodSettings))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.AutomodSettings))
  name.vb: Task(Of TwitchResponse(Of AutomodSettings))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.AutomodSettings
    name: AutomodSettings
    href: AuxLabs.Twitch.Rest.Models.AutomodSettings.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.AutomodSettings
    name: AutomodSettings
    href: AuxLabs.Twitch.Rest.Models.AutomodSettings.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutAutomodSettingsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PutAutomodSettingsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutAutomodSettingsAsync(AuxLabs.Twitch.Rest.Requests.AutomodSettingsArgs,AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody,System.Nullable{System.Threading.CancellationToken}).html
  name: PutAutomodSettingsAsync
  nameWithType: ITwitchApi.PutAutomodSettingsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutAutomodSettingsAsync
- uid: AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody
  commentId: T:AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody.html
  name: PutAutomodSettingsBody
  nameWithType: PutAutomodSettingsBody
  fullName: AuxLabs.Twitch.Rest.Requests.PutAutomodSettingsBody
- uid: AuxLabs.Twitch.Rest.Models.BannedUser
  commentId: T:AuxLabs.Twitch.Rest.Models.BannedUser
  href: AuxLabs.Twitch.Rest.Models.BannedUser.html
  name: BannedUser
  nameWithType: BannedUser
  fullName: AuxLabs.Twitch.Rest.Models.BannedUser
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBannedUsersAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBannedUsersAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBannedUsersAsync(AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetBannedUsersAsync
  nameWithType: ITwitchApi.GetBannedUsersAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBannedUsersAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs.html
  name: GetBannedUsersArgs
  nameWithType: GetBannedUsersArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetBannedUsersArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.BannedUser}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.BannedUser}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchMetaResponse<BannedUser>>
  nameWithType: Task<TwitchMetaResponse<BannedUser>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchMetaResponse<AuxLabs.Twitch.Rest.Models.BannedUser>>
  nameWithType.vb: Task(Of TwitchMetaResponse(Of BannedUser))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchMetaResponse(Of AuxLabs.Twitch.Rest.Models.BannedUser))
  name.vb: Task(Of TwitchMetaResponse(Of BannedUser))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.BannedUser
    name: BannedUser
    href: AuxLabs.Twitch.Rest.Models.BannedUser.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.BannedUser
    name: BannedUser
    href: AuxLabs.Twitch.Rest.Models.BannedUser.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.Ban
  commentId: T:AuxLabs.Twitch.Rest.Models.Ban
  href: AuxLabs.Twitch.Rest.Models.Ban.html
  name: Ban
  nameWithType: Ban
  fullName: AuxLabs.Twitch.Rest.Models.Ban
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBanAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBanAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBanAsync(AuxLabs.Twitch.Rest.Requests.PostBanArgs,AuxLabs.Twitch.Rest.Requests.PostBanBody,System.Nullable{System.Threading.CancellationToken}).html
  name: PostBanAsync
  nameWithType: ITwitchApi.PostBanAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBanAsync
- uid: AuxLabs.Twitch.Rest.Requests.PostBanArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.PostBanArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PostBanArgs.html
  name: PostBanArgs
  nameWithType: PostBanArgs
  fullName: AuxLabs.Twitch.Rest.Requests.PostBanArgs
- uid: AuxLabs.Twitch.Rest.Requests.PostBanBody
  commentId: T:AuxLabs.Twitch.Rest.Requests.PostBanBody
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PostBanBody.html
  name: PostBanBody
  nameWithType: PostBanBody
  fullName: AuxLabs.Twitch.Rest.Requests.PostBanBody
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Ban}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Ban}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<Ban>>
  nameWithType: Task<TwitchResponse<Ban>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.Ban>>
  nameWithType.vb: Task(Of TwitchResponse(Of Ban))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.Ban))
  name.vb: Task(Of TwitchResponse(Of Ban))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Ban
    name: Ban
    href: AuxLabs.Twitch.Rest.Models.Ban.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Ban
    name: Ban
    href: AuxLabs.Twitch.Rest.Models.Ban.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBanAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBanAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBanAsync(AuxLabs.Twitch.Rest.Requests.DeleteBanArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: DeleteBanAsync
  nameWithType: ITwitchApi.DeleteBanAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBanAsync
- uid: AuxLabs.Twitch.Rest.Requests.DeleteBanArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.DeleteBanArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.DeleteBanArgs.html
  name: DeleteBanArgs
  nameWithType: DeleteBanArgs
  fullName: AuxLabs.Twitch.Rest.Requests.DeleteBanArgs
- uid: AuxLabs.Twitch.Rest.Models.BlockedTerm
  commentId: T:AuxLabs.Twitch.Rest.Models.BlockedTerm
  href: AuxLabs.Twitch.Rest.Models.BlockedTerm.html
  name: BlockedTerm
  nameWithType: BlockedTerm
  fullName: AuxLabs.Twitch.Rest.Models.BlockedTerm
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBlockedTermsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBlockedTermsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBlockedTermsAsync(AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetBlockedTermsAsync
  nameWithType: ITwitchApi.GetBlockedTermsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBlockedTermsAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs.html
  name: GetBlockedTermsArgs
  nameWithType: GetBlockedTermsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetBlockedTermsArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.BlockedTerm}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.BlockedTerm}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchMetaResponse<BlockedTerm>>
  nameWithType: Task<TwitchMetaResponse<BlockedTerm>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchMetaResponse<AuxLabs.Twitch.Rest.Models.BlockedTerm>>
  nameWithType.vb: Task(Of TwitchMetaResponse(Of BlockedTerm))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchMetaResponse(Of AuxLabs.Twitch.Rest.Models.BlockedTerm))
  name.vb: Task(Of TwitchMetaResponse(Of BlockedTerm))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.BlockedTerm
    name: BlockedTerm
    href: AuxLabs.Twitch.Rest.Models.BlockedTerm.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.BlockedTerm
    name: BlockedTerm
    href: AuxLabs.Twitch.Rest.Models.BlockedTerm.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBlockedTermAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBlockedTermAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBlockedTermAsync(AuxLabs.Twitch.Rest.Requests.PostBlockedTermArgs,AuxLabs.Twitch.Rest.Requests.PostBlockedTermBody,System.Nullable{System.Threading.CancellationToken}).html
  name: PostBlockedTermAsync
  nameWithType: ITwitchApi.PostBlockedTermAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBlockedTermAsync
- uid: AuxLabs.Twitch.Rest.Requests.PostBlockedTermArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.PostBlockedTermArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PostBlockedTermArgs.html
  name: PostBlockedTermArgs
  nameWithType: PostBlockedTermArgs
  fullName: AuxLabs.Twitch.Rest.Requests.PostBlockedTermArgs
- uid: AuxLabs.Twitch.Rest.Requests.PostBlockedTermBody
  commentId: T:AuxLabs.Twitch.Rest.Requests.PostBlockedTermBody
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PostBlockedTermBody.html
  name: PostBlockedTermBody
  nameWithType: PostBlockedTermBody
  fullName: AuxLabs.Twitch.Rest.Requests.PostBlockedTermBody
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.BlockedTerm}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.BlockedTerm}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<BlockedTerm>>
  nameWithType: Task<TwitchResponse<BlockedTerm>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.BlockedTerm>>
  nameWithType.vb: Task(Of TwitchResponse(Of BlockedTerm))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.BlockedTerm))
  name.vb: Task(Of TwitchResponse(Of BlockedTerm))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.BlockedTerm
    name: BlockedTerm
    href: AuxLabs.Twitch.Rest.Models.BlockedTerm.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.BlockedTerm
    name: BlockedTerm
    href: AuxLabs.Twitch.Rest.Models.BlockedTerm.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBlockedTermAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBlockedTermAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBlockedTermAsync(AuxLabs.Twitch.Rest.Requests.DeleteBlockedTermsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: DeleteBlockedTermAsync
  nameWithType: ITwitchApi.DeleteBlockedTermAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBlockedTermAsync
- uid: AuxLabs.Twitch.Rest.Requests.DeleteBlockedTermsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.DeleteBlockedTermsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.DeleteBlockedTermsArgs.html
  name: DeleteBlockedTermsArgs
  nameWithType: DeleteBlockedTermsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.DeleteBlockedTermsArgs
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteChatMessagesAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteChatMessagesAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteChatMessagesAsync(AuxLabs.Twitch.Rest.Requests.DeleteMessageArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: DeleteChatMessagesAsync
  nameWithType: ITwitchApi.DeleteChatMessagesAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteChatMessagesAsync
- uid: AuxLabs.Twitch.Rest.Requests.DeleteMessageArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.DeleteMessageArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.DeleteMessageArgs.html
  name: DeleteMessageArgs
  nameWithType: DeleteMessageArgs
  fullName: AuxLabs.Twitch.Rest.Requests.DeleteMessageArgs
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetModeratorsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetModeratorsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetModeratorsAsync(AuxLabs.Twitch.Rest.Requests.GetModeratorsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetModeratorsAsync
  nameWithType: ITwitchApi.GetModeratorsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetModeratorsAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetModeratorsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetModeratorsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetModeratorsArgs.html
  name: GetModeratorsArgs
  nameWithType: GetModeratorsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetModeratorsArgs
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostModeratorAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostModeratorAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostModeratorAsync(AuxLabs.Twitch.Rest.Requests.ManageModeratorArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: PostModeratorAsync
  nameWithType: ITwitchApi.PostModeratorAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostModeratorAsync
- uid: AuxLabs.Twitch.Rest.Requests.ManageModeratorArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.ManageModeratorArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.ManageModeratorArgs.html
  name: ManageModeratorArgs
  nameWithType: ManageModeratorArgs
  fullName: AuxLabs.Twitch.Rest.Requests.ManageModeratorArgs
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteModeratorAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteModeratorAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteModeratorAsync(AuxLabs.Twitch.Rest.Requests.ManageModeratorArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: DeleteModeratorAsync
  nameWithType: ITwitchApi.DeleteModeratorAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteModeratorAsync
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetVipsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetVipsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetVipsAsync(AuxLabs.Twitch.Rest.Requests.GetVipsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetVipsAsync
  nameWithType: ITwitchApi.GetVipsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetVipsAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetVipsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetVipsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetVipsArgs.html
  name: GetVipsArgs
  nameWithType: GetVipsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetVipsArgs
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostVipAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostVipAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostVipAsync(AuxLabs.Twitch.Rest.Requests.ManageVipArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: PostVipAsync
  nameWithType: ITwitchApi.PostVipAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostVipAsync
- uid: AuxLabs.Twitch.Rest.Requests.ManageVipArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.ManageVipArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.ManageVipArgs.html
  name: ManageVipArgs
  nameWithType: ManageVipArgs
  fullName: AuxLabs.Twitch.Rest.Requests.ManageVipArgs
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteVipAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteVipAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteVipAsync(AuxLabs.Twitch.Rest.Requests.ManageVipArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: DeleteVipAsync
  nameWithType: ITwitchApi.DeleteVipAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteVipAsync
- uid: AuxLabs.Twitch.Rest.Models.ShieldMode
  commentId: T:AuxLabs.Twitch.Rest.Models.ShieldMode
  href: AuxLabs.Twitch.Rest.Models.ShieldMode.html
  name: ShieldMode
  nameWithType: ShieldMode
  fullName: AuxLabs.Twitch.Rest.Models.ShieldMode
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutShieldModeAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PutShieldModeAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutShieldModeAsync(AuxLabs.Twitch.Rest.Requests.PutShieldModeArgs,AuxLabs.Twitch.Rest.Requests.PutShieldModeBody,System.Nullable{System.Threading.CancellationToken}).html
  name: PutShieldModeAsync
  nameWithType: ITwitchApi.PutShieldModeAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutShieldModeAsync
- uid: AuxLabs.Twitch.Rest.Requests.PutShieldModeArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.PutShieldModeArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PutShieldModeArgs.html
  name: PutShieldModeArgs
  nameWithType: PutShieldModeArgs
  fullName: AuxLabs.Twitch.Rest.Requests.PutShieldModeArgs
- uid: AuxLabs.Twitch.Rest.Requests.PutShieldModeBody
  commentId: T:AuxLabs.Twitch.Rest.Requests.PutShieldModeBody
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PutShieldModeBody.html
  name: PutShieldModeBody
  nameWithType: PutShieldModeBody
  fullName: AuxLabs.Twitch.Rest.Requests.PutShieldModeBody
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.ShieldMode}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.ShieldMode}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<ShieldMode>>
  nameWithType: Task<TwitchResponse<ShieldMode>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.ShieldMode>>
  nameWithType.vb: Task(Of TwitchResponse(Of ShieldMode))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.ShieldMode))
  name.vb: Task(Of TwitchResponse(Of ShieldMode))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.ShieldMode
    name: ShieldMode
    href: AuxLabs.Twitch.Rest.Models.ShieldMode.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.ShieldMode
    name: ShieldMode
    href: AuxLabs.Twitch.Rest.Models.ShieldMode.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetShieldModeAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetShieldModeAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetShieldModeAsync(AuxLabs.Twitch.Rest.Requests.GetShieldModeArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetShieldModeAsync
  nameWithType: ITwitchApi.GetShieldModeAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetShieldModeAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetShieldModeArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetShieldModeArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetShieldModeArgs.html
  name: GetShieldModeArgs
  nameWithType: GetShieldModeArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetShieldModeArgs
- uid: AuxLabs.Twitch.Rest.Models.Poll
  commentId: T:AuxLabs.Twitch.Rest.Models.Poll
  href: AuxLabs.Twitch.Rest.Models.Poll.html
  name: Poll
  nameWithType: Poll
  fullName: AuxLabs.Twitch.Rest.Models.Poll
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPollAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPollAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPollAsync(AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetPollAsync
  nameWithType: ITwitchApi.GetPollAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPollAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs.html
  name: GetPredictionsArgs
  nameWithType: GetPredictionsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Poll}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Poll}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchMetaResponse<Poll>>
  nameWithType: Task<TwitchMetaResponse<Poll>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchMetaResponse<AuxLabs.Twitch.Rest.Models.Poll>>
  nameWithType.vb: Task(Of TwitchMetaResponse(Of Poll))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchMetaResponse(Of AuxLabs.Twitch.Rest.Models.Poll))
  name.vb: Task(Of TwitchMetaResponse(Of Poll))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Poll
    name: Poll
    href: AuxLabs.Twitch.Rest.Models.Poll.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Poll
    name: Poll
    href: AuxLabs.Twitch.Rest.Models.Poll.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostPollAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostPollAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostPollAsync(AuxLabs.Twitch.Rest.Requests.PutPollBody,System.Nullable{System.Threading.CancellationToken}).html
  name: PostPollAsync
  nameWithType: ITwitchApi.PostPollAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostPollAsync
- uid: AuxLabs.Twitch.Rest.Requests.PutPollBody
  commentId: T:AuxLabs.Twitch.Rest.Requests.PutPollBody
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PutPollBody.html
  name: PutPollBody
  nameWithType: PutPollBody
  fullName: AuxLabs.Twitch.Rest.Requests.PutPollBody
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Poll}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Poll}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<Poll>>
  nameWithType: Task<TwitchResponse<Poll>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.Poll>>
  nameWithType.vb: Task(Of TwitchResponse(Of Poll))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.Poll))
  name.vb: Task(Of TwitchResponse(Of Poll))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Poll
    name: Poll
    href: AuxLabs.Twitch.Rest.Models.Poll.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Poll
    name: Poll
    href: AuxLabs.Twitch.Rest.Models.Poll.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchPollAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchPollAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchPollAsync(AuxLabs.Twitch.Rest.Requests.PatchPollBody,System.Nullable{System.Threading.CancellationToken}).html
  name: PatchPollAsync
  nameWithType: ITwitchApi.PatchPollAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchPollAsync
- uid: AuxLabs.Twitch.Rest.Requests.PatchPollBody
  commentId: T:AuxLabs.Twitch.Rest.Requests.PatchPollBody
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PatchPollBody.html
  name: PatchPollBody
  nameWithType: PatchPollBody
  fullName: AuxLabs.Twitch.Rest.Requests.PatchPollBody
- uid: AuxLabs.Twitch.Rest.Models.Prediction
  commentId: T:AuxLabs.Twitch.Rest.Models.Prediction
  href: AuxLabs.Twitch.Rest.Models.Prediction.html
  name: Prediction
  nameWithType: Prediction
  fullName: AuxLabs.Twitch.Rest.Models.Prediction
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPredictionAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPredictionAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPredictionAsync(AuxLabs.Twitch.Rest.Requests.GetPredictionsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetPredictionAsync
  nameWithType: ITwitchApi.GetPredictionAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPredictionAsync
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Prediction}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Prediction}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchMetaResponse<Prediction>>
  nameWithType: Task<TwitchMetaResponse<Prediction>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchMetaResponse<AuxLabs.Twitch.Rest.Models.Prediction>>
  nameWithType.vb: Task(Of TwitchMetaResponse(Of Prediction))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchMetaResponse(Of AuxLabs.Twitch.Rest.Models.Prediction))
  name.vb: Task(Of TwitchMetaResponse(Of Prediction))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Prediction
    name: Prediction
    href: AuxLabs.Twitch.Rest.Models.Prediction.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Prediction
    name: Prediction
    href: AuxLabs.Twitch.Rest.Models.Prediction.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostPredictionAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostPredictionAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostPredictionAsync(AuxLabs.Twitch.Rest.Requests.PostPredictionBody,System.Nullable{System.Threading.CancellationToken}).html
  name: PostPredictionAsync
  nameWithType: ITwitchApi.PostPredictionAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostPredictionAsync
- uid: AuxLabs.Twitch.Rest.Requests.PostPredictionBody
  commentId: T:AuxLabs.Twitch.Rest.Requests.PostPredictionBody
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PostPredictionBody.html
  name: PostPredictionBody
  nameWithType: PostPredictionBody
  fullName: AuxLabs.Twitch.Rest.Requests.PostPredictionBody
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Prediction}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Prediction}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<Prediction>>
  nameWithType: Task<TwitchResponse<Prediction>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.Prediction>>
  nameWithType.vb: Task(Of TwitchResponse(Of Prediction))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.Prediction))
  name.vb: Task(Of TwitchResponse(Of Prediction))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Prediction
    name: Prediction
    href: AuxLabs.Twitch.Rest.Models.Prediction.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Prediction
    name: Prediction
    href: AuxLabs.Twitch.Rest.Models.Prediction.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchPredictionaAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchPredictionaAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchPredictionaAsync(AuxLabs.Twitch.Rest.Requests.PostPredictionBody,System.Nullable{System.Threading.CancellationToken}).html
  name: PatchPredictionaAsync
  nameWithType: ITwitchApi.PatchPredictionaAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchPredictionaAsync
- uid: AuxLabs.Twitch.Rest.Models.Raid
  commentId: T:AuxLabs.Twitch.Rest.Models.Raid
  href: AuxLabs.Twitch.Rest.Models.Raid.html
  name: Raid
  nameWithType: Raid
  fullName: AuxLabs.Twitch.Rest.Models.Raid
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostRaidAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostRaidAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostRaidAsync(AuxLabs.Twitch.Rest.Requests.PostRaidArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: PostRaidAsync
  nameWithType: ITwitchApi.PostRaidAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostRaidAsync
- uid: AuxLabs.Twitch.Rest.Requests.PostRaidArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.PostRaidArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PostRaidArgs.html
  name: PostRaidArgs
  nameWithType: PostRaidArgs
  fullName: AuxLabs.Twitch.Rest.Requests.PostRaidArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Raid}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Raid}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<Raid>>
  nameWithType: Task<TwitchResponse<Raid>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.Raid>>
  nameWithType.vb: Task(Of TwitchResponse(Of Raid))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.Raid))
  name.vb: Task(Of TwitchResponse(Of Raid))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Raid
    name: Raid
    href: AuxLabs.Twitch.Rest.Models.Raid.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Raid
    name: Raid
    href: AuxLabs.Twitch.Rest.Models.Raid.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteRaidAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteRaidAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteRaidAsync(AuxLabs.Twitch.Rest.Requests.DeleteRaidArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: DeleteRaidAsync
  nameWithType: ITwitchApi.DeleteRaidAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteRaidAsync
- uid: AuxLabs.Twitch.Rest.Requests.DeleteRaidArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.DeleteRaidArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.DeleteRaidArgs.html
  name: DeleteRaidArgs
  nameWithType: DeleteRaidArgs
  fullName: AuxLabs.Twitch.Rest.Requests.DeleteRaidArgs
- uid: AuxLabs.Twitch.Rest.Models.Schedule
  commentId: T:AuxLabs.Twitch.Rest.Models.Schedule
  href: AuxLabs.Twitch.Rest.Models.Schedule.html
  name: Schedule
  nameWithType: Schedule
  fullName: AuxLabs.Twitch.Rest.Models.Schedule
- uid: AuxLabs.Twitch.Rest.Models.ScheduleSegment
  commentId: T:AuxLabs.Twitch.Rest.Models.ScheduleSegment
  href: AuxLabs.Twitch.Rest.Models.ScheduleSegment.html
  name: ScheduleSegment
  nameWithType: ScheduleSegment
  fullName: AuxLabs.Twitch.Rest.Models.ScheduleSegment
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetScheduleAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetScheduleAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetScheduleAsync(AuxLabs.Twitch.Rest.Requests.GetScheduleArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetScheduleAsync
  nameWithType: ITwitchApi.GetScheduleAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetScheduleAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetScheduleArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetScheduleArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetScheduleArgs.html
  name: GetScheduleArgs
  nameWithType: GetScheduleArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetScheduleArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Schedule}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Schedule}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchMetaResponse<Schedule>>
  nameWithType: Task<TwitchMetaResponse<Schedule>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchMetaResponse<AuxLabs.Twitch.Rest.Models.Schedule>>
  nameWithType.vb: Task(Of TwitchMetaResponse(Of Schedule))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchMetaResponse(Of AuxLabs.Twitch.Rest.Models.Schedule))
  name.vb: Task(Of TwitchMetaResponse(Of Schedule))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Schedule
    name: Schedule
    href: AuxLabs.Twitch.Rest.Models.Schedule.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Schedule
    name: Schedule
    href: AuxLabs.Twitch.Rest.Models.Schedule.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchScheduleAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchScheduleAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchScheduleAsync(AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: PatchScheduleAsync
  nameWithType: ITwitchApi.PatchScheduleAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchScheduleAsync
- uid: AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs.html
  name: PatchScheduleArgs
  nameWithType: PatchScheduleArgs
  fullName: AuxLabs.Twitch.Rest.Requests.PatchScheduleArgs
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostSegmentAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostSegmentAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostSegmentAsync(AuxLabs.Twitch.Rest.Requests.PostSegmentArgs,AuxLabs.Twitch.Rest.Requests.PostSegmentBody,System.Nullable{System.Threading.CancellationToken}).html
  name: PostSegmentAsync
  nameWithType: ITwitchApi.PostSegmentAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostSegmentAsync
- uid: AuxLabs.Twitch.Rest.Requests.PostSegmentArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.PostSegmentArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PostSegmentArgs.html
  name: PostSegmentArgs
  nameWithType: PostSegmentArgs
  fullName: AuxLabs.Twitch.Rest.Requests.PostSegmentArgs
- uid: AuxLabs.Twitch.Rest.Requests.PostSegmentBody
  commentId: T:AuxLabs.Twitch.Rest.Requests.PostSegmentBody
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PostSegmentBody.html
  name: PostSegmentBody
  nameWithType: PostSegmentBody
  fullName: AuxLabs.Twitch.Rest.Requests.PostSegmentBody
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Schedule}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Schedule}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<Schedule>>
  nameWithType: Task<TwitchResponse<Schedule>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.Schedule>>
  nameWithType.vb: Task(Of TwitchResponse(Of Schedule))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.Schedule))
  name.vb: Task(Of TwitchResponse(Of Schedule))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Schedule
    name: Schedule
    href: AuxLabs.Twitch.Rest.Models.Schedule.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Schedule
    name: Schedule
    href: AuxLabs.Twitch.Rest.Models.Schedule.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchSegmentAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchSegmentAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchSegmentAsync(AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs,AuxLabs.Twitch.Rest.Requests.PatchSegmentBody,System.Nullable{System.Threading.CancellationToken}).html
  name: PatchSegmentAsync
  nameWithType: ITwitchApi.PatchSegmentAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PatchSegmentAsync
- uid: AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs.html
  name: ManageSegmentArgs
  nameWithType: ManageSegmentArgs
  fullName: AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs
- uid: AuxLabs.Twitch.Rest.Requests.PatchSegmentBody
  commentId: T:AuxLabs.Twitch.Rest.Requests.PatchSegmentBody
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PatchSegmentBody.html
  name: PatchSegmentBody
  nameWithType: PatchSegmentBody
  fullName: AuxLabs.Twitch.Rest.Requests.PatchSegmentBody
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteSegmentAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteSegmentAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteSegmentAsync(AuxLabs.Twitch.Rest.Requests.ManageSegmentArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: DeleteSegmentAsync
  nameWithType: ITwitchApi.DeleteSegmentAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteSegmentAsync
- uid: AuxLabs.Twitch.Rest.Models.Category
  commentId: T:AuxLabs.Twitch.Rest.Models.Category
  parent: AuxLabs.Twitch.Rest.Models
  href: AuxLabs.Twitch.Rest.Models.Category.html
  name: Category
  nameWithType: Category
  fullName: AuxLabs.Twitch.Rest.Models.Category
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCategoriesAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCategoriesAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCategoriesAsync(AuxLabs.Twitch.Rest.Requests.SearchCategoriesArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetCategoriesAsync
  nameWithType: ITwitchApi.GetCategoriesAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCategoriesAsync
- uid: AuxLabs.Twitch.Rest.Requests.SearchCategoriesArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.SearchCategoriesArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.SearchCategoriesArgs.html
  name: SearchCategoriesArgs
  nameWithType: SearchCategoriesArgs
  fullName: AuxLabs.Twitch.Rest.Requests.SearchCategoriesArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Category}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Category}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchMetaResponse<Category>>
  nameWithType: Task<TwitchMetaResponse<Category>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchMetaResponse<AuxLabs.Twitch.Rest.Models.Category>>
  nameWithType.vb: Task(Of TwitchMetaResponse(Of Category))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchMetaResponse(Of AuxLabs.Twitch.Rest.Models.Category))
  name.vb: Task(Of TwitchMetaResponse(Of Category))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Category
    name: Category
    href: AuxLabs.Twitch.Rest.Models.Category.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Category
    name: Category
    href: AuxLabs.Twitch.Rest.Models.Category.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.ChannelBroadcast
  commentId: T:AuxLabs.Twitch.Rest.Models.ChannelBroadcast
  href: AuxLabs.Twitch.Rest.Models.ChannelBroadcast.html
  name: ChannelBroadcast
  nameWithType: ChannelBroadcast
  fullName: AuxLabs.Twitch.Rest.Models.ChannelBroadcast
- uid: AuxLabs.Twitch.Rest.Requests.SearchChannelsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.SearchChannelsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.SearchChannelsArgs.html
  name: SearchChannelsArgs
  nameWithType: SearchChannelsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.SearchChannelsArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.ChannelBroadcast}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.ChannelBroadcast}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchMetaResponse<ChannelBroadcast>>
  nameWithType: Task<TwitchMetaResponse<ChannelBroadcast>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchMetaResponse<AuxLabs.Twitch.Rest.Models.ChannelBroadcast>>
  nameWithType.vb: Task(Of TwitchMetaResponse(Of ChannelBroadcast))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchMetaResponse(Of AuxLabs.Twitch.Rest.Models.ChannelBroadcast))
  name.vb: Task(Of TwitchMetaResponse(Of ChannelBroadcast))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.ChannelBroadcast
    name: ChannelBroadcast
    href: AuxLabs.Twitch.Rest.Models.ChannelBroadcast.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.ChannelBroadcast
    name: ChannelBroadcast
    href: AuxLabs.Twitch.Rest.Models.ChannelBroadcast.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.Soundtrack
  commentId: T:AuxLabs.Twitch.Rest.Models.Soundtrack
  href: AuxLabs.Twitch.Rest.Models.Soundtrack.html
  name: Soundtrack
  nameWithType: Soundtrack
  fullName: AuxLabs.Twitch.Rest.Models.Soundtrack
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCurrentTrackAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCurrentTrackAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCurrentTrackAsync(AuxLabs.Twitch.Rest.Requests.GetCurrentTrackArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetCurrentTrackAsync
  nameWithType: ITwitchApi.GetCurrentTrackAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetCurrentTrackAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetCurrentTrackArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetCurrentTrackArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetCurrentTrackArgs.html
  name: GetCurrentTrackArgs
  nameWithType: GetCurrentTrackArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetCurrentTrackArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Soundtrack}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Soundtrack}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<Soundtrack>>
  nameWithType: Task<TwitchResponse<Soundtrack>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.Soundtrack>>
  nameWithType.vb: Task(Of TwitchResponse(Of Soundtrack))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.Soundtrack))
  name.vb: Task(Of TwitchResponse(Of Soundtrack))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Soundtrack
    name: Soundtrack
    href: AuxLabs.Twitch.Rest.Models.Soundtrack.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Soundtrack
    name: Soundtrack
    href: AuxLabs.Twitch.Rest.Models.Soundtrack.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.Track
  commentId: T:AuxLabs.Twitch.Rest.Models.Track
  parent: AuxLabs.Twitch.Rest.Models
  href: AuxLabs.Twitch.Rest.Models.Track.html
  name: Track
  nameWithType: Track
  fullName: AuxLabs.Twitch.Rest.Models.Track
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPlaylistTracksAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPlaylistTracksAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPlaylistTracksAsync(AuxLabs.Twitch.Rest.Requests.GetPlaylistTracksArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetPlaylistTracksAsync
  nameWithType: ITwitchApi.GetPlaylistTracksAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPlaylistTracksAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetPlaylistTracksArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetPlaylistTracksArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetPlaylistTracksArgs.html
  name: GetPlaylistTracksArgs
  nameWithType: GetPlaylistTracksArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetPlaylistTracksArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Track}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Track}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchMetaResponse<Track>>
  nameWithType: Task<TwitchMetaResponse<Track>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchMetaResponse<AuxLabs.Twitch.Rest.Models.Track>>
  nameWithType.vb: Task(Of TwitchMetaResponse(Of Track))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchMetaResponse(Of AuxLabs.Twitch.Rest.Models.Track))
  name.vb: Task(Of TwitchMetaResponse(Of Track))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Track
    name: Track
    href: AuxLabs.Twitch.Rest.Models.Track.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Track
    name: Track
    href: AuxLabs.Twitch.Rest.Models.Track.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPlaylistsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPlaylistsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPlaylistsAsync(AuxLabs.Twitch.Rest.Requests.GetPlaylistsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetPlaylistsAsync
  nameWithType: ITwitchApi.GetPlaylistsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetPlaylistsAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetPlaylistsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetPlaylistsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetPlaylistsArgs.html
  name: GetPlaylistsArgs
  nameWithType: GetPlaylistsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetPlaylistsArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Playlist}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Playlist}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchMetaResponse<Playlist>>
  nameWithType: Task<TwitchMetaResponse<Playlist>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchMetaResponse<AuxLabs.Twitch.Rest.Models.Playlist>>
  nameWithType.vb: Task(Of TwitchMetaResponse(Of Playlist))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchMetaResponse(Of AuxLabs.Twitch.Rest.Models.Playlist))
  name.vb: Task(Of TwitchMetaResponse(Of Playlist))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Playlist
    name: Playlist
    href: AuxLabs.Twitch.Rest.Models.Playlist.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Playlist
    name: Playlist
    href: AuxLabs.Twitch.Rest.Models.Playlist.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastKeyAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastKeyAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastKeyAsync(AuxLabs.Twitch.Rest.Requests.GetBroadcastKeyArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetBroadcastKeyAsync
  nameWithType: ITwitchApi.GetBroadcastKeyAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastKeyAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetBroadcastKeyArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetBroadcastKeyArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetBroadcastKeyArgs.html
  name: GetBroadcastKeyArgs
  nameWithType: GetBroadcastKeyArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetBroadcastKeyArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{System.String}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{System.String}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<string>>
  nameWithType: Task<TwitchResponse<string>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<string>>
  nameWithType.vb: Task(Of TwitchResponse(Of String))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of String))
  name.vb: Task(Of TwitchResponse(Of String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.Broadcast
  commentId: T:AuxLabs.Twitch.Rest.Models.Broadcast
  href: AuxLabs.Twitch.Rest.Models.Broadcast.html
  name: Broadcast
  nameWithType: Broadcast
  fullName: AuxLabs.Twitch.Rest.Models.Broadcast
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastsAsync(AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetBroadcastsAsync
  nameWithType: ITwitchApi.GetBroadcastsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastsAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs.html
  name: GetBroadcastsArgs
  nameWithType: GetBroadcastsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetBroadcastsArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Broadcast}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Broadcast}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchMetaResponse<Broadcast>>
  nameWithType: Task<TwitchMetaResponse<Broadcast>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchMetaResponse<AuxLabs.Twitch.Rest.Models.Broadcast>>
  nameWithType.vb: Task(Of TwitchMetaResponse(Of Broadcast))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchMetaResponse(Of AuxLabs.Twitch.Rest.Models.Broadcast))
  name.vb: Task(Of TwitchMetaResponse(Of Broadcast))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Broadcast
    name: Broadcast
    href: AuxLabs.Twitch.Rest.Models.Broadcast.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Broadcast
    name: Broadcast
    href: AuxLabs.Twitch.Rest.Models.Broadcast.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowedBroadcastsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowedBroadcastsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowedBroadcastsAsync(AuxLabs.Twitch.Rest.Requests.GetFollowedBroadcastsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetFollowedBroadcastsAsync
  nameWithType: ITwitchApi.GetFollowedBroadcastsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetFollowedBroadcastsAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetFollowedBroadcastsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetFollowedBroadcastsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetFollowedBroadcastsArgs.html
  name: GetFollowedBroadcastsArgs
  nameWithType: GetFollowedBroadcastsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetFollowedBroadcastsArgs
- uid: AuxLabs.Twitch.Rest.Models.BroadcastMarker
  commentId: T:AuxLabs.Twitch.Rest.Models.BroadcastMarker
  href: AuxLabs.Twitch.Rest.Models.BroadcastMarker.html
  name: BroadcastMarker
  nameWithType: BroadcastMarker
  fullName: AuxLabs.Twitch.Rest.Models.BroadcastMarker
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBroadcastMarkerAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBroadcastMarkerAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBroadcastMarkerAsync(AuxLabs.Twitch.Rest.Requests.PostBroadcastMarkerBody,System.Nullable{System.Threading.CancellationToken}).html
  name: PostBroadcastMarkerAsync
  nameWithType: ITwitchApi.PostBroadcastMarkerAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostBroadcastMarkerAsync
- uid: AuxLabs.Twitch.Rest.Requests.PostBroadcastMarkerBody
  commentId: T:AuxLabs.Twitch.Rest.Requests.PostBroadcastMarkerBody
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PostBroadcastMarkerBody.html
  name: PostBroadcastMarkerBody
  nameWithType: PostBroadcastMarkerBody
  fullName: AuxLabs.Twitch.Rest.Requests.PostBroadcastMarkerBody
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.BroadcastMarker}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.BroadcastMarker}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<BroadcastMarker>>
  nameWithType: Task<TwitchResponse<BroadcastMarker>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.BroadcastMarker>>
  nameWithType.vb: Task(Of TwitchResponse(Of BroadcastMarker))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.BroadcastMarker))
  name.vb: Task(Of TwitchResponse(Of BroadcastMarker))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.BroadcastMarker
    name: BroadcastMarker
    href: AuxLabs.Twitch.Rest.Models.BroadcastMarker.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.BroadcastMarker
    name: BroadcastMarker
    href: AuxLabs.Twitch.Rest.Models.BroadcastMarker.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastMarkersAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastMarkersAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastMarkersAsync(AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetBroadcastMarkersAsync
  nameWithType: ITwitchApi.GetBroadcastMarkersAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBroadcastMarkersAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs.html
  name: GetBroadcastMarkersArgs
  nameWithType: GetBroadcastMarkersArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetBroadcastMarkersArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.BroadcastMarker}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.BroadcastMarker}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchMetaResponse<BroadcastMarker>>
  nameWithType: Task<TwitchMetaResponse<BroadcastMarker>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchMetaResponse<AuxLabs.Twitch.Rest.Models.BroadcastMarker>>
  nameWithType.vb: Task(Of TwitchMetaResponse(Of BroadcastMarker))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchMetaResponse(Of AuxLabs.Twitch.Rest.Models.BroadcastMarker))
  name.vb: Task(Of TwitchMetaResponse(Of BroadcastMarker))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.BroadcastMarker
    name: BroadcastMarker
    href: AuxLabs.Twitch.Rest.Models.BroadcastMarker.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.BroadcastMarker
    name: BroadcastMarker
    href: AuxLabs.Twitch.Rest.Models.BroadcastMarker.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.Subscription
  commentId: T:AuxLabs.Twitch.Rest.Models.Subscription
  href: AuxLabs.Twitch.Rest.Models.Subscription.html
  name: Subscription
  nameWithType: Subscription
  fullName: AuxLabs.Twitch.Rest.Models.Subscription
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetSubscriptionsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetSubscriptionsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetSubscriptionsAsync(AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetSubscriptionsAsync
  nameWithType: ITwitchApi.GetSubscriptionsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetSubscriptionsAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs.html
  name: GetSubscriptionsArgs
  nameWithType: GetSubscriptionsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetSubscriptionsArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Subscription}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Subscription}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchMetaResponse<Subscription>>
  nameWithType: Task<TwitchMetaResponse<Subscription>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchMetaResponse<AuxLabs.Twitch.Rest.Models.Subscription>>
  nameWithType.vb: Task(Of TwitchMetaResponse(Of Subscription))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchMetaResponse(Of AuxLabs.Twitch.Rest.Models.Subscription))
  name.vb: Task(Of TwitchMetaResponse(Of Subscription))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Subscription
    name: Subscription
    href: AuxLabs.Twitch.Rest.Models.Subscription.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Subscription
    name: Subscription
    href: AuxLabs.Twitch.Rest.Models.Subscription.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.SimpleSubscription
  commentId: T:AuxLabs.Twitch.Rest.Models.SimpleSubscription
  parent: AuxLabs.Twitch.Rest.Models
  href: AuxLabs.Twitch.Rest.Models.SimpleSubscription.html
  name: SimpleSubscription
  nameWithType: SimpleSubscription
  fullName: AuxLabs.Twitch.Rest.Models.SimpleSubscription
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetSubscriberAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetSubscriberAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetSubscriberAsync(AuxLabs.Twitch.Rest.Requests.GetSubscriberArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetSubscriberAsync
  nameWithType: ITwitchApi.GetSubscriberAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetSubscriberAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetSubscriberArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetSubscriberArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetSubscriberArgs.html
  name: GetSubscriberArgs
  nameWithType: GetSubscriberArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetSubscriberArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.SimpleSubscription}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.SimpleSubscription}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<SimpleSubscription>>
  nameWithType: Task<TwitchResponse<SimpleSubscription>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.SimpleSubscription>>
  nameWithType.vb: Task(Of TwitchResponse(Of SimpleSubscription))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.SimpleSubscription))
  name.vb: Task(Of TwitchResponse(Of SimpleSubscription))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.SimpleSubscription
    name: SimpleSubscription
    href: AuxLabs.Twitch.Rest.Models.SimpleSubscription.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.SimpleSubscription
    name: SimpleSubscription
    href: AuxLabs.Twitch.Rest.Models.SimpleSubscription.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.ChannelTeam
  commentId: T:AuxLabs.Twitch.Rest.Models.ChannelTeam
  href: AuxLabs.Twitch.Rest.Models.ChannelTeam.html
  name: ChannelTeam
  nameWithType: ChannelTeam
  fullName: AuxLabs.Twitch.Rest.Models.ChannelTeam
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTeamsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTeamsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTeamsAsync(AuxLabs.Twitch.Rest.Requests.GetChannelTeamsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetTeamsAsync
  nameWithType: ITwitchApi.GetTeamsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTeamsAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetChannelTeamsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetChannelTeamsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetChannelTeamsArgs.html
  name: GetChannelTeamsArgs
  nameWithType: GetChannelTeamsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetChannelTeamsArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.ChannelTeam}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.ChannelTeam}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<ChannelTeam>>
  nameWithType: Task<TwitchResponse<ChannelTeam>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.ChannelTeam>>
  nameWithType.vb: Task(Of TwitchResponse(Of ChannelTeam))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.ChannelTeam))
  name.vb: Task(Of TwitchResponse(Of ChannelTeam))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.ChannelTeam
    name: ChannelTeam
    href: AuxLabs.Twitch.Rest.Models.ChannelTeam.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.ChannelTeam
    name: ChannelTeam
    href: AuxLabs.Twitch.Rest.Models.ChannelTeam.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.Team
  commentId: T:AuxLabs.Twitch.Rest.Models.Team
  href: AuxLabs.Twitch.Rest.Models.Team.html
  name: Team
  nameWithType: Team
  fullName: AuxLabs.Twitch.Rest.Models.Team
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTeamAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTeamAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTeamAsync(AuxLabs.Twitch.Rest.Requests.GetTeamArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetTeamAsync
  nameWithType: ITwitchApi.GetTeamAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetTeamAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetTeamArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetTeamArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetTeamArgs.html
  name: GetTeamArgs
  nameWithType: GetTeamArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetTeamArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Team}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Team}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<Team>>
  nameWithType: Task<TwitchResponse<Team>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.Team>>
  nameWithType.vb: Task(Of TwitchResponse(Of Team))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.Team))
  name.vb: Task(Of TwitchResponse(Of Team))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Team
    name: Team
    href: AuxLabs.Twitch.Rest.Models.Team.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Team
    name: Team
    href: AuxLabs.Twitch.Rest.Models.Team.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.User
  commentId: T:AuxLabs.Twitch.Rest.Models.User
  href: AuxLabs.Twitch.Rest.Models.User.html
  name: User
  nameWithType: User
  fullName: AuxLabs.Twitch.Rest.Models.User
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUsersAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUsersAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUsersAsync(AuxLabs.Twitch.Rest.Requests.GetUsersArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetUsersAsync
  nameWithType: ITwitchApi.GetUsersAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUsersAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetUsersArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetUsersArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetUsersArgs.html
  name: GetUsersArgs
  nameWithType: GetUsersArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetUsersArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.User}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.User}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<User>>
  nameWithType: Task<TwitchResponse<User>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.User>>
  nameWithType.vb: Task(Of TwitchResponse(Of User))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.User))
  name.vb: Task(Of TwitchResponse(Of User))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.User
    name: User
    href: AuxLabs.Twitch.Rest.Models.User.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.User
    name: User
    href: AuxLabs.Twitch.Rest.Models.User.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutUserAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PutUserAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutUserAsync(AuxLabs.Twitch.Rest.Requests.PutUserArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: PutUserAsync
  nameWithType: ITwitchApi.PutUserAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutUserAsync
- uid: AuxLabs.Twitch.Rest.Requests.PutUserArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.PutUserArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PutUserArgs.html
  name: PutUserArgs
  nameWithType: PutUserArgs
  fullName: AuxLabs.Twitch.Rest.Requests.PutUserArgs
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBlocksAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBlocksAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBlocksAsync(AuxLabs.Twitch.Rest.Requests.GetBlocksArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetBlocksAsync
  nameWithType: ITwitchApi.GetBlocksAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetBlocksAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetBlocksArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetBlocksArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetBlocksArgs.html
  name: GetBlocksArgs
  nameWithType: GetBlocksArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetBlocksArgs
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutBlockAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PutBlockAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutBlockAsync(AuxLabs.Twitch.Rest.Requests.PutBlockArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: PutBlockAsync
  nameWithType: ITwitchApi.PutBlockAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutBlockAsync
- uid: AuxLabs.Twitch.Rest.Requests.PutBlockArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.PutBlockArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PutBlockArgs.html
  name: PutBlockArgs
  nameWithType: PutBlockArgs
  fullName: AuxLabs.Twitch.Rest.Requests.PutBlockArgs
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBlockAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBlockAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBlockAsync(AuxLabs.Twitch.Rest.Requests.DeleteBlockArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: DeleteBlockAsync
  nameWithType: ITwitchApi.DeleteBlockAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteBlockAsync
- uid: AuxLabs.Twitch.Rest.Requests.DeleteBlockArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.DeleteBlockArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.DeleteBlockArgs.html
  name: DeleteBlockArgs
  nameWithType: DeleteBlockArgs
  fullName: AuxLabs.Twitch.Rest.Requests.DeleteBlockArgs
- uid: AuxLabs.Twitch.Rest.Models.Extension
  commentId: T:AuxLabs.Twitch.Rest.Models.Extension
  href: AuxLabs.Twitch.Rest.Models.Extension.html
  name: Extension
  nameWithType: Extension
  fullName: AuxLabs.Twitch.Rest.Models.Extension
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUserExtensionsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUserExtensionsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUserExtensionsAsync(System.Nullable{System.Threading.CancellationToken}).html
  name: GetUserExtensionsAsync
  nameWithType: ITwitchApi.GetUserExtensionsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetUserExtensionsAsync
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Extension}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.Extension}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<Extension>>
  nameWithType: Task<TwitchResponse<Extension>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.Extension>>
  nameWithType.vb: Task(Of TwitchResponse(Of Extension))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.Extension))
  name.vb: Task(Of TwitchResponse(Of Extension))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Extension
    name: Extension
    href: AuxLabs.Twitch.Rest.Models.Extension.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Extension
    name: Extension
    href: AuxLabs.Twitch.Rest.Models.Extension.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Models.ExtensionMap
  commentId: T:AuxLabs.Twitch.Rest.Models.ExtensionMap
  parent: AuxLabs.Twitch.Rest.Models
  href: AuxLabs.Twitch.Rest.Models.ExtensionMap.html
  name: ExtensionMap
  nameWithType: ExtensionMap
  fullName: AuxLabs.Twitch.Rest.Models.ExtensionMap
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetActiveExtensionsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetActiveExtensionsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetActiveExtensionsAsync(AuxLabs.Twitch.Rest.Requests.GetActiveExtensionsArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetActiveExtensionsAsync
  nameWithType: ITwitchApi.GetActiveExtensionsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetActiveExtensionsAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetActiveExtensionsArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetActiveExtensionsArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetActiveExtensionsArgs.html
  name: GetActiveExtensionsArgs
  nameWithType: GetActiveExtensionsArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetActiveExtensionsArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.ExtensionMap}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchResponse{AuxLabs.Twitch.Rest.Models.ExtensionMap}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchResponse<ExtensionMap>>
  nameWithType: Task<TwitchResponse<ExtensionMap>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchResponse<AuxLabs.Twitch.Rest.Models.ExtensionMap>>
  nameWithType.vb: Task(Of TwitchResponse(Of ExtensionMap))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchResponse(Of AuxLabs.Twitch.Rest.Models.ExtensionMap))
  name.vb: Task(Of TwitchResponse(Of ExtensionMap))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.ExtensionMap
    name: ExtensionMap
    href: AuxLabs.Twitch.Rest.Models.ExtensionMap.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchResponse`1
    name: TwitchResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.ExtensionMap
    name: ExtensionMap
    href: AuxLabs.Twitch.Rest.Models.ExtensionMap.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutExtensionsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PutExtensionsAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutExtensionsAsync(AuxLabs.Twitch.Rest.Models.ExtensionMap,System.Nullable{System.Threading.CancellationToken}).html
  name: PutExtensionsAsync
  nameWithType: ITwitchApi.PutExtensionsAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PutExtensionsAsync
- uid: AuxLabs.Twitch.Rest.Models.Video
  commentId: T:AuxLabs.Twitch.Rest.Models.Video
  href: AuxLabs.Twitch.Rest.Models.Video.html
  name: Video
  nameWithType: Video
  fullName: AuxLabs.Twitch.Rest.Models.Video
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetVideosAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.GetVideosAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetVideosAsync(AuxLabs.Twitch.Rest.Requests.GetVideosArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: GetVideosAsync
  nameWithType: ITwitchApi.GetVideosAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.GetVideosAsync
- uid: AuxLabs.Twitch.Rest.Requests.GetVideosArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.GetVideosArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.GetVideosArgs.html
  name: GetVideosArgs
  nameWithType: GetVideosArgs
  fullName: AuxLabs.Twitch.Rest.Requests.GetVideosArgs
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Video}}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.TwitchMetaResponse{AuxLabs.Twitch.Rest.Models.Video}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TwitchMetaResponse<Video>>
  nameWithType: Task<TwitchMetaResponse<Video>>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.TwitchMetaResponse<AuxLabs.Twitch.Rest.Models.Video>>
  nameWithType.vb: Task(Of TwitchMetaResponse(Of Video))
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.TwitchMetaResponse(Of AuxLabs.Twitch.Rest.Models.Video))
  name.vb: Task(Of TwitchMetaResponse(Of Video))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Video
    name: Video
    href: AuxLabs.Twitch.Rest.Models.Video.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse`1
    name: TwitchMetaResponse
    href: AuxLabs.Twitch.Rest.Models.TwitchMetaResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Video
    name: Video
    href: AuxLabs.Twitch.Rest.Models.Video.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteVideoAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteVideoAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteVideoAsync(AuxLabs.Twitch.Rest.Requests.DeleteVideosArgs,System.Nullable{System.Threading.CancellationToken}).html
  name: DeleteVideoAsync
  nameWithType: ITwitchApi.DeleteVideoAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.DeleteVideoAsync
- uid: AuxLabs.Twitch.Rest.Requests.DeleteVideosArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.DeleteVideosArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.DeleteVideosArgs.html
  name: DeleteVideosArgs
  nameWithType: DeleteVideosArgs
  fullName: AuxLabs.Twitch.Rest.Requests.DeleteVideosArgs
- uid: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostWhisperAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.Api.ITwitchApi.PostWhisperAsync
  href: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostWhisperAsync(AuxLabs.Twitch.Rest.Requests.PostWhisperArgs,AuxLabs.Twitch.Rest.Requests.PostWhisperBody,System.Nullable{System.Threading.CancellationToken}).html
  name: PostWhisperAsync
  nameWithType: ITwitchApi.PostWhisperAsync
  fullName: AuxLabs.Twitch.Rest.Api.ITwitchApi.PostWhisperAsync
- uid: AuxLabs.Twitch.Rest.Requests.PostWhisperArgs
  commentId: T:AuxLabs.Twitch.Rest.Requests.PostWhisperArgs
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PostWhisperArgs.html
  name: PostWhisperArgs
  nameWithType: PostWhisperArgs
  fullName: AuxLabs.Twitch.Rest.Requests.PostWhisperArgs
- uid: AuxLabs.Twitch.Rest.Requests.PostWhisperBody
  commentId: T:AuxLabs.Twitch.Rest.Requests.PostWhisperBody
  parent: AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.Twitch.Rest.Requests.PostWhisperBody.html
  name: PostWhisperBody
  nameWithType: PostWhisperBody
  fullName: AuxLabs.Twitch.Rest.Requests.PostWhisperBody
memberLayout: SeparatePages
