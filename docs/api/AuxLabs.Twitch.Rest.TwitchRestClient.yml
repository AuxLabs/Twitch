### YamlMime:ManagedReference
items:
- uid: AuxLabs.Twitch.Rest.TwitchRestClient
  commentId: T:AuxLabs.Twitch.Rest.TwitchRestClient
  id: TwitchRestClient
  parent: AuxLabs.Twitch.Rest
  children:
  - AuxLabs.Twitch.Rest.TwitchRestClient.#ctor(AuxLabs.Twitch.Rest.TwitchRestConfig)
  - AuxLabs.Twitch.Rest.TwitchRestClient.#ctor(System.String,AuxLabs.Twitch.Rest.TwitchRestConfig)
  - AuxLabs.Twitch.Rest.TwitchRestClient.CreateEventSubscriptionAsync``1(AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody{``0})
  - AuxLabs.Twitch.Rest.TwitchRestClient.CreateEventSubscriptionAsync``1(System.Action{AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody{``0}})
  - AuxLabs.Twitch.Rest.TwitchRestClient.DeleteEventSubscriptionAsync(System.String)
  - AuxLabs.Twitch.Rest.TwitchRestClient.Dispose
  - AuxLabs.Twitch.Rest.TwitchRestClient.Dispose(System.Boolean)
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetBitsLeaderboardAsync(System.String,System.Nullable{System.DateTime},System.Nullable{AuxLabs.Twitch.BitsPeriod},System.Int32,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastByIdAsync(System.String)
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastByNameAsync(System.String)
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsAsync(System.String[],System.String[],System.String[],System.String[],System.Int32,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsByIdAsync(System.String[])
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsByNameAsync(System.String[])
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelAsync(System.String)
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelEditors(System.String)
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelsAsync(System.String[])
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetChatSettingsAsync(System.String,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetChattersAsync(System.String,System.Int32,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetCheermotesAsync(System.String)
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetEmotesAsync(System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetEmotesAsync(System.String,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetAsync(System.String,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetsAsync(System.String[],System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetsAsync(System.String[])
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetEventSubscriptionsAsync(System.String,System.Nullable{AuxLabs.Twitch.EventSubStatus},System.Nullable{AuxLabs.Twitch.EventSubType})
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionAnalyticAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionAnalyticsAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionTransactionsAsync(System.String,System.Int32,System.String[])
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionTransactionsAsync(System.String,System.Int32)
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowedChannelAsync(System.String)
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowedChannelsAsync(System.Int32)
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowerAsync(System.String,System.String)
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowersAsync(System.String,System.Int32)
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetGameAnalyticAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetGameAnalyticsAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetMyChannelAsync
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetMyUserAsync
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetStreamKeyAsync
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetUserByIdAsync(System.String)
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetUserByNameAsync(System.String)
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorAsync(System.String,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorsAsync(System.String[],System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorsAsync(System.String[])
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetUsersByIdAsync(System.String[])
  - AuxLabs.Twitch.Rest.TwitchRestClient.GetUsersByNameAsync(System.String[])
  - AuxLabs.Twitch.Rest.TwitchRestClient.Identity
  - AuxLabs.Twitch.Rest.TwitchRestClient.ModifyChatSettingsAsync(System.String,System.Action{AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody},System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyColorAsync(AuxLabs.Twitch.ChatColor,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyColorAsync(System.Drawing.Color,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyUserAsync(System.String)
  - AuxLabs.Twitch.Rest.TwitchRestClient.MyChannel
  - AuxLabs.Twitch.Rest.TwitchRestClient.MyUser
  - AuxLabs.Twitch.Rest.TwitchRestClient.SendAnnouncementAsync(System.String,System.String,System.Nullable{AuxLabs.Twitch.AnnouncementColor},System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.TwitchRestClient.SendShoutoutAsync(System.String,System.String,System.Nullable{System.Threading.CancellationToken})
  - AuxLabs.Twitch.Rest.TwitchRestClient.StartCommercialAsync(System.Int32)
  - AuxLabs.Twitch.Rest.TwitchRestClient.UpdateMyChannelAsync(System.Action{AuxLabs.Twitch.Rest.Requests.PatchChannelBody})
  - AuxLabs.Twitch.Rest.TwitchRestClient.ValidateAsync
  - AuxLabs.Twitch.Rest.TwitchRestClient.ValidateAsync(System.String,System.String)
  langs:
  - csharp
  - vb
  name: TwitchRestClient
  nameWithType: TwitchRestClient
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient
  type: Class
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: TwitchRestClient
    path: ../src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
    startLine: 12
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: 'public class TwitchRestClient : IDisposable'
    content.vb: Public Class TwitchRestClient Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionAnalyticAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionAnalyticAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Threading.CancellationToken})
  id: GetExtensionAnalyticAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetExtensionAnalyticAsync(string, DateTime?, DateTime?, CancellationToken?)
  nameWithType: TwitchRestClient.GetExtensionAnalyticAsync(string, DateTime?, DateTime?, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionAnalyticAsync(string, System.DateTime?, System.DateTime?, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Analytics.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetExtensionAnalyticAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Analytics.cs
    startLine: 14
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<ExtensionAnalytic> GetExtensionAnalyticAsync(string extensionId, DateTime? startAt = null, DateTime? endAt = null, CancellationToken? cancelToken = null)
    parameters:
    - id: extensionId
      type: System.String
    - id: startAt
      type: System.Nullable{System.DateTime}
    - id: endAt
      type: System.Nullable{System.DateTime}
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.ExtensionAnalytic}
    content.vb: Public Function GetExtensionAnalyticAsync(extensionId As String, startAt As Date? = Nothing, endAt As Date? = Nothing, cancelToken As CancellationToken? = Nothing) As Task(Of ExtensionAnalytic)
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionAnalyticAsync*
  nameWithType.vb: TwitchRestClient.GetExtensionAnalyticAsync(String, Date?, Date?, CancellationToken?)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionAnalyticAsync(String, Date?, Date?, System.Threading.CancellationToken?)
  name.vb: GetExtensionAnalyticAsync(String, Date?, Date?, CancellationToken?)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionAnalyticsAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionAnalyticsAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Threading.CancellationToken})
  id: GetExtensionAnalyticsAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetExtensionAnalyticsAsync(string, DateTime?, DateTime?, int, CancellationToken?)
  nameWithType: TwitchRestClient.GetExtensionAnalyticsAsync(string, DateTime?, DateTime?, int, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionAnalyticsAsync(string, System.DateTime?, System.DateTime?, int, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Analytics.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetExtensionAnalyticsAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Analytics.cs
    startLine: 24
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<ExtensionAnalytic>> GetExtensionAnalyticsAsync(string extensionId = null, DateTime? startAt = null, DateTime? endAt = null, int count = 20, CancellationToken? cancelToken = null)
    parameters:
    - id: extensionId
      type: System.String
    - id: startAt
      type: System.Nullable{System.DateTime}
    - id: endAt
      type: System.Nullable{System.DateTime}
    - id: count
      type: System.Int32
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Models.ExtensionAnalytic}}
    content.vb: Public Function GetExtensionAnalyticsAsync(extensionId As String = Nothing, startAt As Date? = Nothing, endAt As Date? = Nothing, count As Integer = 20, cancelToken As CancellationToken? = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of ExtensionAnalytic))
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionAnalyticsAsync*
  nameWithType.vb: TwitchRestClient.GetExtensionAnalyticsAsync(String, Date?, Date?, Integer, CancellationToken?)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionAnalyticsAsync(String, Date?, Date?, Integer, System.Threading.CancellationToken?)
  name.vb: GetExtensionAnalyticsAsync(String, Date?, Date?, Integer, CancellationToken?)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetGameAnalyticAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetGameAnalyticAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Threading.CancellationToken})
  id: GetGameAnalyticAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetGameAnalyticAsync(string, DateTime?, DateTime?, CancellationToken?)
  nameWithType: TwitchRestClient.GetGameAnalyticAsync(string, DateTime?, DateTime?, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetGameAnalyticAsync(string, System.DateTime?, System.DateTime?, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Analytics.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetGameAnalyticAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Analytics.cs
    startLine: 51
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<GameAnalytic> GetGameAnalyticAsync(string gameId, DateTime? startAt = null, DateTime? endAt = null, CancellationToken? cancelToken = null)
    parameters:
    - id: gameId
      type: System.String
    - id: startAt
      type: System.Nullable{System.DateTime}
    - id: endAt
      type: System.Nullable{System.DateTime}
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.GameAnalytic}
    content.vb: Public Function GetGameAnalyticAsync(gameId As String, startAt As Date? = Nothing, endAt As Date? = Nothing, cancelToken As CancellationToken? = Nothing) As Task(Of GameAnalytic)
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetGameAnalyticAsync*
  nameWithType.vb: TwitchRestClient.GetGameAnalyticAsync(String, Date?, Date?, CancellationToken?)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetGameAnalyticAsync(String, Date?, Date?, System.Threading.CancellationToken?)
  name.vb: GetGameAnalyticAsync(String, Date?, Date?, CancellationToken?)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetGameAnalyticsAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetGameAnalyticsAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Threading.CancellationToken})
  id: GetGameAnalyticsAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetGameAnalyticsAsync(string, DateTime?, DateTime?, int, CancellationToken?)
  nameWithType: TwitchRestClient.GetGameAnalyticsAsync(string, DateTime?, DateTime?, int, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetGameAnalyticsAsync(string, System.DateTime?, System.DateTime?, int, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Analytics.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetGameAnalyticsAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Analytics.cs
    startLine: 61
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<GameAnalytic>> GetGameAnalyticsAsync(string gameId = null, DateTime? startAt = null, DateTime? endAt = null, int count = 20, CancellationToken? cancelToken = null)
    parameters:
    - id: gameId
      type: System.String
    - id: startAt
      type: System.Nullable{System.DateTime}
    - id: endAt
      type: System.Nullable{System.DateTime}
    - id: count
      type: System.Int32
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Models.GameAnalytic}}
    content.vb: Public Function GetGameAnalyticsAsync(gameId As String = Nothing, startAt As Date? = Nothing, endAt As Date? = Nothing, count As Integer = 20, cancelToken As CancellationToken? = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of GameAnalytic))
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetGameAnalyticsAsync*
  nameWithType.vb: TwitchRestClient.GetGameAnalyticsAsync(String, Date?, Date?, Integer, CancellationToken?)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetGameAnalyticsAsync(String, Date?, Date?, Integer, System.Threading.CancellationToken?)
  name.vb: GetGameAnalyticsAsync(String, Date?, Date?, Integer, CancellationToken?)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetBitsLeaderboardAsync(System.String,System.Nullable{System.DateTime},System.Nullable{AuxLabs.Twitch.BitsPeriod},System.Int32,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetBitsLeaderboardAsync(System.String,System.Nullable{System.DateTime},System.Nullable{AuxLabs.Twitch.BitsPeriod},System.Int32,System.Nullable{System.Threading.CancellationToken})
  id: GetBitsLeaderboardAsync(System.String,System.Nullable{System.DateTime},System.Nullable{AuxLabs.Twitch.BitsPeriod},System.Int32,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetBitsLeaderboardAsync(string, DateTime?, BitsPeriod?, int, CancellationToken?)
  nameWithType: TwitchRestClient.GetBitsLeaderboardAsync(string, DateTime?, BitsPeriod?, int, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetBitsLeaderboardAsync(string, System.DateTime?, AuxLabs.Twitch.BitsPeriod?, int, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Analytics.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetBitsLeaderboardAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Analytics.cs
    startLine: 88
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<RestBitsUser>> GetBitsLeaderboardAsync(string userId = null, DateTime? startAt = null, BitsPeriod? bitsPeriod = null, int count = 10, CancellationToken? cancelToken = null)
    parameters:
    - id: userId
      type: System.String
    - id: startAt
      type: System.Nullable{System.DateTime}
    - id: bitsPeriod
      type: System.Nullable{AuxLabs.Twitch.BitsPeriod}
    - id: count
      type: System.Int32
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestBitsUser}}
    content.vb: Public Function GetBitsLeaderboardAsync(userId As String = Nothing, startAt As Date? = Nothing, bitsPeriod As BitsPeriod? = Nothing, count As Integer = 10, cancelToken As CancellationToken? = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of RestBitsUser))
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetBitsLeaderboardAsync*
  nameWithType.vb: TwitchRestClient.GetBitsLeaderboardAsync(String, Date?, BitsPeriod?, Integer, CancellationToken?)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetBitsLeaderboardAsync(String, Date?, AuxLabs.Twitch.BitsPeriod?, Integer, System.Threading.CancellationToken?)
  name.vb: GetBitsLeaderboardAsync(String, Date?, BitsPeriod?, Integer, CancellationToken?)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetStreamKeyAsync
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetStreamKeyAsync
  id: GetStreamKeyAsync
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetStreamKeyAsync()
  nameWithType: TwitchRestClient.GetStreamKeyAsync()
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetStreamKeyAsync()
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Broadcasts.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetStreamKeyAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Broadcasts.cs
    startLine: 12
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<string> GetStreamKeyAsync()
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Function GetStreamKeyAsync() As Task(Of String)
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetStreamKeyAsync*
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastByIdAsync(System.String)
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastByIdAsync(System.String)
  id: GetBroadcastByIdAsync(System.String)
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetBroadcastByIdAsync(string)
  nameWithType: TwitchRestClient.GetBroadcastByIdAsync(string)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastByIdAsync(string)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Broadcasts.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetBroadcastByIdAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Broadcasts.cs
    startLine: 23
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<RestBroadcast> GetBroadcastByIdAsync(string channelId)
    parameters:
    - id: channelId
      type: System.String
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestBroadcast}
    content.vb: Public Function GetBroadcastByIdAsync(channelId As String) As Task(Of RestBroadcast)
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastByIdAsync*
  nameWithType.vb: TwitchRestClient.GetBroadcastByIdAsync(String)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastByIdAsync(String)
  name.vb: GetBroadcastByIdAsync(String)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsByIdAsync(System.String[])
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsByIdAsync(System.String[])
  id: GetBroadcastsByIdAsync(System.String[])
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetBroadcastsByIdAsync(params string[])
  nameWithType: TwitchRestClient.GetBroadcastsByIdAsync(params string[])
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsByIdAsync(params string[])
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Broadcasts.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetBroadcastsByIdAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Broadcasts.cs
    startLine: 25
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<IReadOnlyCollection<RestBroadcast>> GetBroadcastsByIdAsync(params string[] channelIds)
    parameters:
    - id: channelIds
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestBroadcast}}
    content.vb: Public Function GetBroadcastsByIdAsync(ParamArray channelIds As String()) As Task(Of IReadOnlyCollection(Of RestBroadcast))
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsByIdAsync*
  nameWithType.vb: TwitchRestClient.GetBroadcastsByIdAsync(ParamArray String())
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsByIdAsync(ParamArray String())
  name.vb: GetBroadcastsByIdAsync(ParamArray String())
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastByNameAsync(System.String)
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastByNameAsync(System.String)
  id: GetBroadcastByNameAsync(System.String)
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetBroadcastByNameAsync(string)
  nameWithType: TwitchRestClient.GetBroadcastByNameAsync(string)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastByNameAsync(string)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Broadcasts.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetBroadcastByNameAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Broadcasts.cs
    startLine: 34
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<RestBroadcast> GetBroadcastByNameAsync(string channelName)
    parameters:
    - id: channelName
      type: System.String
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestBroadcast}
    content.vb: Public Function GetBroadcastByNameAsync(channelName As String) As Task(Of RestBroadcast)
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastByNameAsync*
  nameWithType.vb: TwitchRestClient.GetBroadcastByNameAsync(String)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastByNameAsync(String)
  name.vb: GetBroadcastByNameAsync(String)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsByNameAsync(System.String[])
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsByNameAsync(System.String[])
  id: GetBroadcastsByNameAsync(System.String[])
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetBroadcastsByNameAsync(params string[])
  nameWithType: TwitchRestClient.GetBroadcastsByNameAsync(params string[])
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsByNameAsync(params string[])
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Broadcasts.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetBroadcastsByNameAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Broadcasts.cs
    startLine: 36
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<IReadOnlyCollection<RestBroadcast>> GetBroadcastsByNameAsync(params string[] channelNames)
    parameters:
    - id: channelNames
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestBroadcast}}
    content.vb: Public Function GetBroadcastsByNameAsync(ParamArray channelNames As String()) As Task(Of IReadOnlyCollection(Of RestBroadcast))
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsByNameAsync*
  nameWithType.vb: TwitchRestClient.GetBroadcastsByNameAsync(ParamArray String())
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsByNameAsync(ParamArray String())
  name.vb: GetBroadcastsByNameAsync(ParamArray String())
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsAsync(System.String[],System.String[],System.String[],System.String[],System.Int32,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsAsync(System.String[],System.String[],System.String[],System.String[],System.Int32,System.Nullable{System.Threading.CancellationToken})
  id: GetBroadcastsAsync(System.String[],System.String[],System.String[],System.String[],System.Int32,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetBroadcastsAsync(string[], string[], string[], string[], int, CancellationToken?)
  nameWithType: TwitchRestClient.GetBroadcastsAsync(string[], string[], string[], string[], int, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsAsync(string[], string[], string[], string[], int, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Broadcasts.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetBroadcastsAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Broadcasts.cs
    startLine: 45
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<RestBroadcast>> GetBroadcastsAsync(string[] userNames = null, string[] userIds = null, string[] gameIds = null, string[] languages = null, int count = 20, CancellationToken? cancelToken = null)
    parameters:
    - id: userNames
      type: System.String[]
    - id: userIds
      type: System.String[]
    - id: gameIds
      type: System.String[]
    - id: languages
      type: System.String[]
    - id: count
      type: System.Int32
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestBroadcast}}
    content.vb: Public Function GetBroadcastsAsync(userNames As String() = Nothing, userIds As String() = Nothing, gameIds As String() = Nothing, languages As String() = Nothing, count As Integer = 20, cancelToken As CancellationToken? = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of RestBroadcast))
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsAsync*
  nameWithType.vb: TwitchRestClient.GetBroadcastsAsync(String(), String(), String(), String(), Integer, CancellationToken?)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsAsync(String(), String(), String(), String(), Integer, System.Threading.CancellationToken?)
  name.vb: GetBroadcastsAsync(String(), String(), String(), String(), Integer, CancellationToken?)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetMyChannelAsync
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetMyChannelAsync
  id: GetMyChannelAsync
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetMyChannelAsync()
  nameWithType: TwitchRestClient.GetMyChannelAsync()
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetMyChannelAsync()
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Channels.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetMyChannelAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Channels.cs
    startLine: 12
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<RestChannel> GetMyChannelAsync()
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestChannel}
    content.vb: Public Function GetMyChannelAsync() As Task(Of RestChannel)
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetMyChannelAsync*
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.UpdateMyChannelAsync(System.Action{AuxLabs.Twitch.Rest.Requests.PatchChannelBody})
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.UpdateMyChannelAsync(System.Action{AuxLabs.Twitch.Rest.Requests.PatchChannelBody})
  id: UpdateMyChannelAsync(System.Action{AuxLabs.Twitch.Rest.Requests.PatchChannelBody})
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: UpdateMyChannelAsync(Action<PatchChannelBody>)
  nameWithType: TwitchRestClient.UpdateMyChannelAsync(Action<PatchChannelBody>)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.UpdateMyChannelAsync(System.Action<AuxLabs.Twitch.Rest.Requests.PatchChannelBody>)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Channels.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: UpdateMyChannelAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Channels.cs
    startLine: 19
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<RestChannel> UpdateMyChannelAsync(Action<PatchChannelBody> func)
    parameters:
    - id: func
      type: System.Action{AuxLabs.Twitch.Rest.Requests.PatchChannelBody}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestChannel}
    content.vb: Public Function UpdateMyChannelAsync(func As Action(Of PatchChannelBody)) As Task(Of RestChannel)
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.UpdateMyChannelAsync*
  nameWithType.vb: TwitchRestClient.UpdateMyChannelAsync(Action(Of PatchChannelBody))
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.UpdateMyChannelAsync(System.Action(Of AuxLabs.Twitch.Rest.Requests.PatchChannelBody))
  name.vb: UpdateMyChannelAsync(Action(Of PatchChannelBody))
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelAsync(System.String)
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelAsync(System.String)
  id: GetChannelAsync(System.String)
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetChannelAsync(string)
  nameWithType: TwitchRestClient.GetChannelAsync(string)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelAsync(string)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Channels.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetChannelAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Channels.cs
    startLine: 34
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<RestChannel> GetChannelAsync(string channelId)
    parameters:
    - id: channelId
      type: System.String
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestChannel}
    content.vb: Public Function GetChannelAsync(channelId As String) As Task(Of RestChannel)
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelAsync*
  nameWithType.vb: TwitchRestClient.GetChannelAsync(String)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelAsync(String)
  name.vb: GetChannelAsync(String)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelsAsync(System.String[])
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelsAsync(System.String[])
  id: GetChannelsAsync(System.String[])
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetChannelsAsync(params string[])
  nameWithType: TwitchRestClient.GetChannelsAsync(params string[])
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelsAsync(params string[])
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Channels.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetChannelsAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Channels.cs
    startLine: 36
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<IReadOnlyCollection<RestChannel>> GetChannelsAsync(params string[] channelIds)
    parameters:
    - id: channelIds
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestChannel}}
    content.vb: Public Function GetChannelsAsync(ParamArray channelIds As String()) As Task(Of IReadOnlyCollection(Of RestChannel))
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelsAsync*
  nameWithType.vb: TwitchRestClient.GetChannelsAsync(ParamArray String())
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelsAsync(ParamArray String())
  name.vb: GetChannelsAsync(ParamArray String())
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelEditors(System.String)
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelEditors(System.String)
  id: GetChannelEditors(System.String)
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetChannelEditors(string)
  nameWithType: TwitchRestClient.GetChannelEditors(string)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelEditors(string)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Channels.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetChannelEditors
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Channels.cs
    startLine: 42
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<IReadOnlyCollection<RestEditor>> GetChannelEditors(string channelId)
    parameters:
    - id: channelId
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestEditor}}
    content.vb: Public Function GetChannelEditors(channelId As String) As Task(Of IReadOnlyCollection(Of RestEditor))
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelEditors*
  nameWithType.vb: TwitchRestClient.GetChannelEditors(String)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelEditors(String)
  name.vb: GetChannelEditors(String)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyColorAsync(AuxLabs.Twitch.ChatColor,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyColorAsync(AuxLabs.Twitch.ChatColor,System.Nullable{System.Threading.CancellationToken})
  id: ModifyMyColorAsync(AuxLabs.Twitch.ChatColor,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: ModifyMyColorAsync(ChatColor, CancellationToken?)
  nameWithType: TwitchRestClient.ModifyMyColorAsync(ChatColor, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyColorAsync(AuxLabs.Twitch.ChatColor, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: ModifyMyColorAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
    startLine: 15
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task ModifyMyColorAsync(ChatColor color, CancellationToken? cancelToken = null)
    parameters:
    - id: color
      type: AuxLabs.Twitch.ChatColor
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function ModifyMyColorAsync(color As ChatColor, cancelToken As CancellationToken? = Nothing) As Task
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyColorAsync*
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyColorAsync(System.Drawing.Color,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyColorAsync(System.Drawing.Color,System.Nullable{System.Threading.CancellationToken})
  id: ModifyMyColorAsync(System.Drawing.Color,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: ModifyMyColorAsync(Color, CancellationToken?)
  nameWithType: TwitchRestClient.ModifyMyColorAsync(Color, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyColorAsync(System.Drawing.Color, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: ModifyMyColorAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
    startLine: 24
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task ModifyMyColorAsync(Color color, CancellationToken? cancelToken = null)
    parameters:
    - id: color
      type: System.Drawing.Color
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function ModifyMyColorAsync(color As Color, cancelToken As CancellationToken? = Nothing) As Task
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyColorAsync*
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetChattersAsync(System.String,System.Int32,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetChattersAsync(System.String,System.Int32,System.Nullable{System.Threading.CancellationToken})
  id: GetChattersAsync(System.String,System.Int32,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetChattersAsync(string, int, CancellationToken?)
  nameWithType: TwitchRestClient.GetChattersAsync(string, int, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetChattersAsync(string, int, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetChattersAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
    startLine: 35
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<RestSimpleUser>> GetChattersAsync(string channelId, int count = 20, CancellationToken? cancelToken = null)
    parameters:
    - id: channelId
      type: System.String
    - id: count
      type: System.Int32
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestSimpleUser}}
    content.vb: Public Function GetChattersAsync(channelId As String, count As Integer = 20, cancelToken As CancellationToken? = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of RestSimpleUser))
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetChattersAsync*
  nameWithType.vb: TwitchRestClient.GetChattersAsync(String, Integer, CancellationToken?)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetChattersAsync(String, Integer, System.Threading.CancellationToken?)
  name.vb: GetChattersAsync(String, Integer, CancellationToken?)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmotesAsync(System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetEmotesAsync(System.Nullable{System.Threading.CancellationToken})
  id: GetEmotesAsync(System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetEmotesAsync(CancellationToken?)
  nameWithType: TwitchRestClient.GetEmotesAsync(CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmotesAsync(System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetEmotesAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
    startLine: 61
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<IReadOnlyCollection<RestGlobalEmote>> GetEmotesAsync(CancellationToken? cancelToken = null)
    parameters:
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestGlobalEmote}}
    content.vb: Public Function GetEmotesAsync(cancelToken As CancellationToken? = Nothing) As Task(Of IReadOnlyCollection(Of RestGlobalEmote))
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmotesAsync*
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmotesAsync(System.String,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetEmotesAsync(System.String,System.Nullable{System.Threading.CancellationToken})
  id: GetEmotesAsync(System.String,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetEmotesAsync(string, CancellationToken?)
  nameWithType: TwitchRestClient.GetEmotesAsync(string, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmotesAsync(string, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetEmotesAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
    startLine: 67
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<IReadOnlyCollection<RestEmote>> GetEmotesAsync(string channelId, CancellationToken? cancelToken = null)
    parameters:
    - id: channelId
      type: System.String
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestEmote}}
    content.vb: Public Function GetEmotesAsync(channelId As String, cancelToken As CancellationToken? = Nothing) As Task(Of IReadOnlyCollection(Of RestEmote))
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmotesAsync*
  nameWithType.vb: TwitchRestClient.GetEmotesAsync(String, CancellationToken?)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmotesAsync(String, System.Threading.CancellationToken?)
  name.vb: GetEmotesAsync(String, CancellationToken?)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetAsync(System.String,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetAsync(System.String,System.Nullable{System.Threading.CancellationToken})
  id: GetEmoteSetAsync(System.String,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetEmoteSetAsync(string, CancellationToken?)
  nameWithType: TwitchRestClient.GetEmoteSetAsync(string, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetAsync(string, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetEmoteSetAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
    startLine: 73
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<IReadOnlyCollection<RestEmote>> GetEmoteSetAsync(string emoteSetId, CancellationToken? cancelToken = null)
    parameters:
    - id: emoteSetId
      type: System.String
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestEmote}}
    content.vb: Public Function GetEmoteSetAsync(emoteSetId As String, cancelToken As CancellationToken? = Nothing) As Task(Of IReadOnlyCollection(Of RestEmote))
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetAsync*
  nameWithType.vb: TwitchRestClient.GetEmoteSetAsync(String, CancellationToken?)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetAsync(String, System.Threading.CancellationToken?)
  name.vb: GetEmoteSetAsync(String, CancellationToken?)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetsAsync(System.String[])
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetsAsync(System.String[])
  id: GetEmoteSetsAsync(System.String[])
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetEmoteSetsAsync(params string[])
  nameWithType: TwitchRestClient.GetEmoteSetsAsync(params string[])
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetsAsync(params string[])
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetEmoteSetsAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
    startLine: 75
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<IReadOnlyCollection<RestEmote>> GetEmoteSetsAsync(params string[] emoteSetIds)
    parameters:
    - id: emoteSetIds
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestEmote}}
    content.vb: Public Function GetEmoteSetsAsync(ParamArray emoteSetIds As String()) As Task(Of IReadOnlyCollection(Of RestEmote))
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetsAsync*
  nameWithType.vb: TwitchRestClient.GetEmoteSetsAsync(ParamArray String())
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetsAsync(ParamArray String())
  name.vb: GetEmoteSetsAsync(ParamArray String())
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetsAsync(System.String[],System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetsAsync(System.String[],System.Nullable{System.Threading.CancellationToken})
  id: GetEmoteSetsAsync(System.String[],System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetEmoteSetsAsync(string[], CancellationToken?)
  nameWithType: TwitchRestClient.GetEmoteSetsAsync(string[], CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetsAsync(string[], System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetEmoteSetsAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
    startLine: 77
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<IReadOnlyCollection<RestEmote>> GetEmoteSetsAsync(string[] emoteSetIds, CancellationToken? cancelToken = null)
    parameters:
    - id: emoteSetIds
      type: System.String[]
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestEmote}}
    content.vb: Public Function GetEmoteSetsAsync(emoteSetIds As String(), cancelToken As CancellationToken? = Nothing) As Task(Of IReadOnlyCollection(Of RestEmote))
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetsAsync*
  nameWithType.vb: TwitchRestClient.GetEmoteSetsAsync(String(), CancellationToken?)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetsAsync(String(), System.Threading.CancellationToken?)
  name.vb: GetEmoteSetsAsync(String(), CancellationToken?)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetChatSettingsAsync(System.String,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetChatSettingsAsync(System.String,System.Nullable{System.Threading.CancellationToken})
  id: GetChatSettingsAsync(System.String,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetChatSettingsAsync(string, CancellationToken?)
  nameWithType: TwitchRestClient.GetChatSettingsAsync(string, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetChatSettingsAsync(string, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetChatSettingsAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
    startLine: 86
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<ChatSettings> GetChatSettingsAsync(string channelId, CancellationToken? cancelToken = null)
    parameters:
    - id: channelId
      type: System.String
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.ChatSettings}
    content.vb: Public Function GetChatSettingsAsync(channelId As String, cancelToken As CancellationToken? = Nothing) As Task(Of ChatSettings)
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetChatSettingsAsync*
  nameWithType.vb: TwitchRestClient.GetChatSettingsAsync(String, CancellationToken?)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetChatSettingsAsync(String, System.Threading.CancellationToken?)
  name.vb: GetChatSettingsAsync(String, CancellationToken?)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.ModifyChatSettingsAsync(System.String,System.Action{AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody},System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.ModifyChatSettingsAsync(System.String,System.Action{AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody},System.Nullable{System.Threading.CancellationToken})
  id: ModifyChatSettingsAsync(System.String,System.Action{AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody},System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: ModifyChatSettingsAsync(string, Action<PatchChatSettingsBody>, CancellationToken?)
  nameWithType: TwitchRestClient.ModifyChatSettingsAsync(string, Action<PatchChatSettingsBody>, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.ModifyChatSettingsAsync(string, System.Action<AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody>, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: ModifyChatSettingsAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
    startLine: 97
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<ChatSettings> ModifyChatSettingsAsync(string channelId, Action<PatchChatSettingsBody> func, CancellationToken? cancelToken = null)
    parameters:
    - id: channelId
      type: System.String
    - id: func
      type: System.Action{AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody}
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.ChatSettings}
    content.vb: Public Function ModifyChatSettingsAsync(channelId As String, func As Action(Of PatchChatSettingsBody), cancelToken As CancellationToken? = Nothing) As Task(Of ChatSettings)
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.ModifyChatSettingsAsync*
  nameWithType.vb: TwitchRestClient.ModifyChatSettingsAsync(String, Action(Of PatchChatSettingsBody), CancellationToken?)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.ModifyChatSettingsAsync(String, System.Action(Of AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody), System.Threading.CancellationToken?)
  name.vb: ModifyChatSettingsAsync(String, Action(Of PatchChatSettingsBody), CancellationToken?)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.SendAnnouncementAsync(System.String,System.String,System.Nullable{AuxLabs.Twitch.AnnouncementColor},System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.SendAnnouncementAsync(System.String,System.String,System.Nullable{AuxLabs.Twitch.AnnouncementColor},System.Nullable{System.Threading.CancellationToken})
  id: SendAnnouncementAsync(System.String,System.String,System.Nullable{AuxLabs.Twitch.AnnouncementColor},System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: SendAnnouncementAsync(string, string, AnnouncementColor?, CancellationToken?)
  nameWithType: TwitchRestClient.SendAnnouncementAsync(string, string, AnnouncementColor?, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.SendAnnouncementAsync(string, string, AuxLabs.Twitch.AnnouncementColor?, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: SendAnnouncementAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
    startLine: 112
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task SendAnnouncementAsync(string channelId, string message, AnnouncementColor? color = null, CancellationToken? cancelToken = null)
    parameters:
    - id: channelId
      type: System.String
    - id: message
      type: System.String
    - id: color
      type: System.Nullable{AuxLabs.Twitch.AnnouncementColor}
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function SendAnnouncementAsync(channelId As String, message As String, color As AnnouncementColor? = Nothing, cancelToken As CancellationToken? = Nothing) As Task
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.SendAnnouncementAsync*
  nameWithType.vb: TwitchRestClient.SendAnnouncementAsync(String, String, AnnouncementColor?, CancellationToken?)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.SendAnnouncementAsync(String, String, AuxLabs.Twitch.AnnouncementColor?, System.Threading.CancellationToken?)
  name.vb: SendAnnouncementAsync(String, String, AnnouncementColor?, CancellationToken?)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.SendShoutoutAsync(System.String,System.String,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.SendShoutoutAsync(System.String,System.String,System.Nullable{System.Threading.CancellationToken})
  id: SendShoutoutAsync(System.String,System.String,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: SendShoutoutAsync(string, string, CancellationToken?)
  nameWithType: TwitchRestClient.SendShoutoutAsync(string, string, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.SendShoutoutAsync(string, string, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: SendShoutoutAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
    startLine: 127
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task SendShoutoutAsync(string fromChannelId, string toChannelId, CancellationToken? cancelToken = null)
    parameters:
    - id: fromChannelId
      type: System.String
    - id: toChannelId
      type: System.String
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function SendShoutoutAsync(fromChannelId As String, toChannelId As String, cancelToken As CancellationToken? = Nothing) As Task
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.SendShoutoutAsync*
  nameWithType.vb: TwitchRestClient.SendShoutoutAsync(String, String, CancellationToken?)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.SendShoutoutAsync(String, String, System.Threading.CancellationToken?)
  name.vb: SendShoutoutAsync(String, String, CancellationToken?)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorAsync(System.String,System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorAsync(System.String,System.Nullable{System.Threading.CancellationToken})
  id: GetUserChatColorAsync(System.String,System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetUserChatColorAsync(string, CancellationToken?)
  nameWithType: TwitchRestClient.GetUserChatColorAsync(string, CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorAsync(string, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetUserChatColorAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
    startLine: 139
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<RestChatUser> GetUserChatColorAsync(string userId, CancellationToken? cancelToken = null)
    parameters:
    - id: userId
      type: System.String
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestChatUser}
    content.vb: Public Function GetUserChatColorAsync(userId As String, cancelToken As CancellationToken? = Nothing) As Task(Of RestChatUser)
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorAsync*
  nameWithType.vb: TwitchRestClient.GetUserChatColorAsync(String, CancellationToken?)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorAsync(String, System.Threading.CancellationToken?)
  name.vb: GetUserChatColorAsync(String, CancellationToken?)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorsAsync(System.String[])
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorsAsync(System.String[])
  id: GetUserChatColorsAsync(System.String[])
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetUserChatColorsAsync(params string[])
  nameWithType: TwitchRestClient.GetUserChatColorsAsync(params string[])
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorsAsync(params string[])
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetUserChatColorsAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
    startLine: 141
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<IReadOnlyCollection<RestChatUser>> GetUserChatColorsAsync(params string[] userIds)
    parameters:
    - id: userIds
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestChatUser}}
    content.vb: Public Function GetUserChatColorsAsync(ParamArray userIds As String()) As Task(Of IReadOnlyCollection(Of RestChatUser))
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorsAsync*
  nameWithType.vb: TwitchRestClient.GetUserChatColorsAsync(ParamArray String())
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorsAsync(ParamArray String())
  name.vb: GetUserChatColorsAsync(ParamArray String())
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorsAsync(System.String[],System.Nullable{System.Threading.CancellationToken})
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorsAsync(System.String[],System.Nullable{System.Threading.CancellationToken})
  id: GetUserChatColorsAsync(System.String[],System.Nullable{System.Threading.CancellationToken})
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetUserChatColorsAsync(string[], CancellationToken?)
  nameWithType: TwitchRestClient.GetUserChatColorsAsync(string[], CancellationToken?)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorsAsync(string[], System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetUserChatColorsAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Chat.cs
    startLine: 143
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<IReadOnlyCollection<RestChatUser>> GetUserChatColorsAsync(string[] userIds, CancellationToken? cancelToken = null)
    parameters:
    - id: userIds
      type: System.String[]
    - id: cancelToken
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestChatUser}}
    content.vb: Public Function GetUserChatColorsAsync(userIds As String(), cancelToken As CancellationToken? = Nothing) As Task(Of IReadOnlyCollection(Of RestChatUser))
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorsAsync*
  nameWithType.vb: TwitchRestClient.GetUserChatColorsAsync(String(), CancellationToken?)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorsAsync(String(), System.Threading.CancellationToken?)
  name.vb: GetUserChatColorsAsync(String(), CancellationToken?)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetMyUserAsync
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetMyUserAsync
  id: GetMyUserAsync
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetMyUserAsync()
  nameWithType: TwitchRestClient.GetMyUserAsync()
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetMyUserAsync()
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Users.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetMyUserAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Users.cs
    startLine: 11
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<RestSelfUser> GetMyUserAsync()
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestSelfUser}
    content.vb: Public Function GetMyUserAsync() As Task(Of RestSelfUser)
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetMyUserAsync*
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyUserAsync(System.String)
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyUserAsync(System.String)
  id: ModifyMyUserAsync(System.String)
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: ModifyMyUserAsync(string)
  nameWithType: TwitchRestClient.ModifyMyUserAsync(string)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyUserAsync(string)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Users.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: ModifyMyUserAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Users.cs
    startLine: 18
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<RestSelfUser> ModifyMyUserAsync(string description)
    parameters:
    - id: description
      type: System.String
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestSelfUser}
    content.vb: Public Function ModifyMyUserAsync(description As String) As Task(Of RestSelfUser)
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyUserAsync*
  nameWithType.vb: TwitchRestClient.ModifyMyUserAsync(String)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyUserAsync(String)
  name.vb: ModifyMyUserAsync(String)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserByNameAsync(System.String)
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetUserByNameAsync(System.String)
  id: GetUserByNameAsync(System.String)
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetUserByNameAsync(string)
  nameWithType: TwitchRestClient.GetUserByNameAsync(string)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserByNameAsync(string)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Users.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetUserByNameAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Users.cs
    startLine: 24
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<RestUser> GetUserByNameAsync(string username)
    parameters:
    - id: username
      type: System.String
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestUser}
    content.vb: Public Function GetUserByNameAsync(username As String) As Task(Of RestUser)
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserByNameAsync*
  nameWithType.vb: TwitchRestClient.GetUserByNameAsync(String)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserByNameAsync(String)
  name.vb: GetUserByNameAsync(String)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetUsersByNameAsync(System.String[])
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetUsersByNameAsync(System.String[])
  id: GetUsersByNameAsync(System.String[])
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetUsersByNameAsync(params string[])
  nameWithType: TwitchRestClient.GetUsersByNameAsync(params string[])
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetUsersByNameAsync(params string[])
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Users.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetUsersByNameAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Users.cs
    startLine: 26
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<IReadOnlyCollection<RestUser>> GetUsersByNameAsync(params string[] userNames)
    parameters:
    - id: userNames
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestUser}}
    content.vb: Public Function GetUsersByNameAsync(ParamArray userNames As String()) As Task(Of IReadOnlyCollection(Of RestUser))
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetUsersByNameAsync*
  nameWithType.vb: TwitchRestClient.GetUsersByNameAsync(ParamArray String())
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetUsersByNameAsync(ParamArray String())
  name.vb: GetUsersByNameAsync(ParamArray String())
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserByIdAsync(System.String)
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetUserByIdAsync(System.String)
  id: GetUserByIdAsync(System.String)
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetUserByIdAsync(string)
  nameWithType: TwitchRestClient.GetUserByIdAsync(string)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserByIdAsync(string)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Users.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetUserByIdAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Users.cs
    startLine: 33
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<RestUser> GetUserByIdAsync(string id)
    parameters:
    - id: id
      type: System.String
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestUser}
    content.vb: Public Function GetUserByIdAsync(id As String) As Task(Of RestUser)
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserByIdAsync*
  nameWithType.vb: TwitchRestClient.GetUserByIdAsync(String)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserByIdAsync(String)
  name.vb: GetUserByIdAsync(String)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetUsersByIdAsync(System.String[])
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetUsersByIdAsync(System.String[])
  id: GetUsersByIdAsync(System.String[])
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetUsersByIdAsync(params string[])
  nameWithType: TwitchRestClient.GetUsersByIdAsync(params string[])
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetUsersByIdAsync(params string[])
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Users.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetUsersByIdAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Users.cs
    startLine: 35
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<IReadOnlyCollection<RestUser>> GetUsersByIdAsync(params string[] userIds)
    parameters:
    - id: userIds
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestUser}}
    content.vb: Public Function GetUsersByIdAsync(ParamArray userIds As String()) As Task(Of IReadOnlyCollection(Of RestUser))
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetUsersByIdAsync*
  nameWithType.vb: TwitchRestClient.GetUsersByIdAsync(ParamArray String())
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetUsersByIdAsync(ParamArray String())
  name.vb: GetUsersByIdAsync(ParamArray String())
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowersAsync(System.String,System.Int32)
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowersAsync(System.String,System.Int32)
  id: GetFollowersAsync(System.String,System.Int32)
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetFollowersAsync(string, int)
  nameWithType: TwitchRestClient.GetFollowersAsync(string, int)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowersAsync(string, int)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Users.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetFollowersAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Users.cs
    startLine: 45
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<(IReadOnlyCollection<RestFollower> Followers, int Total)> GetFollowersAsync(string broadcasterId, int count = 20)
    parameters:
    - id: broadcasterId
      type: System.String
    - id: count
      type: System.Int32
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestFollower},System.Int32}}
    content.vb: Public Function GetFollowersAsync(broadcasterId As String, count As Integer = 20) As Task(Of (Followers As IReadOnlyCollection(Of RestFollower), Total As Integer))
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowersAsync*
  nameWithType.vb: TwitchRestClient.GetFollowersAsync(String, Integer)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowersAsync(String, Integer)
  name.vb: GetFollowersAsync(String, Integer)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowerAsync(System.String,System.String)
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowerAsync(System.String,System.String)
  id: GetFollowerAsync(System.String,System.String)
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetFollowerAsync(string, string)
  nameWithType: TwitchRestClient.GetFollowerAsync(string, string)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowerAsync(string, string)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Users.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetFollowerAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Users.cs
    startLine: 56
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<RestFollower> GetFollowerAsync(string broadcasterId, string userId)
    parameters:
    - id: broadcasterId
      type: System.String
    - id: userId
      type: System.String
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestFollower}
    content.vb: Public Function GetFollowerAsync(broadcasterId As String, userId As String) As Task(Of RestFollower)
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowerAsync*
  nameWithType.vb: TwitchRestClient.GetFollowerAsync(String, String)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowerAsync(String, String)
  name.vb: GetFollowerAsync(String, String)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowedChannelsAsync(System.Int32)
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowedChannelsAsync(System.Int32)
  id: GetFollowedChannelsAsync(System.Int32)
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetFollowedChannelsAsync(int)
  nameWithType: TwitchRestClient.GetFollowedChannelsAsync(int)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowedChannelsAsync(int)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Users.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetFollowedChannelsAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Users.cs
    startLine: 68
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<(IReadOnlyCollection<RestFollowedChannel> Channels, int Total)> GetFollowedChannelsAsync(int count = 20)
    parameters:
    - id: count
      type: System.Int32
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestFollowedChannel},System.Int32}}
    content.vb: Public Function GetFollowedChannelsAsync(count As Integer = 20) As Task(Of (Channels As IReadOnlyCollection(Of RestFollowedChannel), Total As Integer))
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowedChannelsAsync*
  nameWithType.vb: TwitchRestClient.GetFollowedChannelsAsync(Integer)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowedChannelsAsync(Integer)
  name.vb: GetFollowedChannelsAsync(Integer)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowedChannelAsync(System.String)
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowedChannelAsync(System.String)
  id: GetFollowedChannelAsync(System.String)
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetFollowedChannelAsync(string)
  nameWithType: TwitchRestClient.GetFollowedChannelAsync(string)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowedChannelAsync(string)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Users.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetFollowedChannelAsync
    path: ../src/AuxLabs.Twitch.Rest/Partials/TwitchRestClient.Users.cs
    startLine: 79
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<RestFollowedChannel> GetFollowedChannelAsync(string broadcasterId)
    parameters:
    - id: broadcasterId
      type: System.String
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestFollowedChannel}
    content.vb: Public Function GetFollowedChannelAsync(broadcasterId As String) As Task(Of RestFollowedChannel)
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowedChannelAsync*
  nameWithType.vb: TwitchRestClient.GetFollowedChannelAsync(String)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowedChannelAsync(String)
  name.vb: GetFollowedChannelAsync(String)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.MyUser
  commentId: P:AuxLabs.Twitch.Rest.TwitchRestClient.MyUser
  id: MyUser
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: MyUser
  nameWithType: TwitchRestClient.MyUser
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.MyUser
  type: Property
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: MyUser
    path: ../src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
    startLine: 19
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public RestSelfUser MyUser { get; }
    parameters: []
    return:
      type: AuxLabs.Twitch.Rest.Entities.RestSelfUser
    content.vb: Public Property MyUser As RestSelfUser
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.MyUser*
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.MyChannel
  commentId: P:AuxLabs.Twitch.Rest.TwitchRestClient.MyChannel
  id: MyChannel
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: MyChannel
  nameWithType: TwitchRestClient.MyChannel
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.MyChannel
  type: Property
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: MyChannel
    path: ../src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
    startLine: 20
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public RestChannel MyChannel { get; }
    parameters: []
    return:
      type: AuxLabs.Twitch.Rest.Entities.RestChannel
    content.vb: Public Property MyChannel As RestChannel
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.MyChannel*
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.Identity
  commentId: P:AuxLabs.Twitch.Rest.TwitchRestClient.Identity
  id: Identity
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: Identity
  nameWithType: TwitchRestClient.Identity
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.Identity
  type: Property
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: Identity
    path: ../src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
    startLine: 22
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public AppIdentity Identity { get; }
    parameters: []
    return:
      type: AuxLabs.Twitch.Rest.Models.AppIdentity
    content.vb: Public ReadOnly Property Identity As AppIdentity
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.Identity*
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.#ctor(AuxLabs.Twitch.Rest.TwitchRestConfig)
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.#ctor(AuxLabs.Twitch.Rest.TwitchRestConfig)
  id: '#ctor(AuxLabs.Twitch.Rest.TwitchRestConfig)'
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: TwitchRestClient(TwitchRestConfig)
  nameWithType: TwitchRestClient.TwitchRestClient(TwitchRestConfig)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.TwitchRestClient(AuxLabs.Twitch.Rest.TwitchRestConfig)
  type: Constructor
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: .ctor
    path: ../src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
    startLine: 24
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public TwitchRestClient(TwitchRestConfig config = null)
    parameters:
    - id: config
      type: AuxLabs.Twitch.Rest.TwitchRestConfig
    content.vb: Public Sub New(config As TwitchRestConfig = Nothing)
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.#ctor*
  nameWithType.vb: TwitchRestClient.New(TwitchRestConfig)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.New(AuxLabs.Twitch.Rest.TwitchRestConfig)
  name.vb: New(TwitchRestConfig)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.#ctor(System.String,AuxLabs.Twitch.Rest.TwitchRestConfig)
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.#ctor(System.String,AuxLabs.Twitch.Rest.TwitchRestConfig)
  id: '#ctor(System.String,AuxLabs.Twitch.Rest.TwitchRestConfig)'
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: TwitchRestClient(string, TwitchRestConfig)
  nameWithType: TwitchRestClient.TwitchRestClient(string, TwitchRestConfig)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.TwitchRestClient(string, AuxLabs.Twitch.Rest.TwitchRestConfig)
  type: Constructor
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: .ctor
    path: ../src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
    startLine: 26
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public TwitchRestClient(string url, TwitchRestConfig config = null)
    parameters:
    - id: url
      type: System.String
    - id: config
      type: AuxLabs.Twitch.Rest.TwitchRestConfig
    content.vb: Public Sub New(url As String, config As TwitchRestConfig = Nothing)
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.#ctor*
  nameWithType.vb: TwitchRestClient.New(String, TwitchRestConfig)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.New(String, AuxLabs.Twitch.Rest.TwitchRestConfig)
  name.vb: New(String, TwitchRestConfig)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.Dispose(System.Boolean)
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: Dispose(bool)
  nameWithType: TwitchRestClient.Dispose(bool)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.Dispose(bool)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: Dispose
    path: ../src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
    startLine: 34
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.Dispose*
  nameWithType.vb: TwitchRestClient.Dispose(Boolean)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.Dispose(Boolean)
  name.vb: Dispose(Boolean)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.Dispose
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.Dispose
  id: Dispose
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: TwitchRestClient.Dispose()
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.Dispose()
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: Dispose
    path: ../src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
    startLine: 48
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  summary: Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose()
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.Dispose*
  implements:
  - System.IDisposable.Dispose
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.ValidateAsync
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.ValidateAsync
  id: ValidateAsync
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: ValidateAsync()
  nameWithType: TwitchRestClient.ValidateAsync()
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.ValidateAsync()
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: ValidateAsync
    path: ../src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
    startLine: 63
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  example: []
  syntax:
    content: public Task<AppIdentity> ValidateAsync()
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.AppIdentity}
    content.vb: Public Function ValidateAsync() As Task(Of AppIdentity)
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.ValidateAsync*
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.ValidateAsync(System.String,System.String)
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.ValidateAsync(System.String,System.String)
  id: ValidateAsync(System.String,System.String)
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: ValidateAsync(string, string)
  nameWithType: TwitchRestClient.ValidateAsync(string, string)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.ValidateAsync(string, string)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: ValidateAsync
    path: ../src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
    startLine: 66
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  example: []
  syntax:
    content: public Task<AccessTokenInfo> ValidateAsync(string token, string refreshToken = null)
    parameters:
    - id: token
      type: System.String
    - id: refreshToken
      type: System.String
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.AccessTokenInfo}
    content.vb: Public Function ValidateAsync(token As String, refreshToken As String = Nothing) As Task(Of AccessTokenInfo)
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.ValidateAsync*
  nameWithType.vb: TwitchRestClient.ValidateAsync(String, String)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.ValidateAsync(String, String)
  name.vb: ValidateAsync(String, String)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.StartCommercialAsync(System.Int32)
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.StartCommercialAsync(System.Int32)
  id: StartCommercialAsync(System.Int32)
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: StartCommercialAsync(int)
  nameWithType: TwitchRestClient.StartCommercialAsync(int)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.StartCommercialAsync(int)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: StartCommercialAsync
    path: ../src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
    startLine: 81
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  example: []
  syntax:
    content: public Task<Commercial> StartCommercialAsync(int length)
    parameters:
    - id: length
      type: System.Int32
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.Commercial}
    content.vb: Public Function StartCommercialAsync(length As Integer) As Task(Of Commercial)
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.StartCommercialAsync*
  nameWithType.vb: TwitchRestClient.StartCommercialAsync(Integer)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.StartCommercialAsync(Integer)
  name.vb: StartCommercialAsync(Integer)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetCheermotesAsync(System.String)
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetCheermotesAsync(System.String)
  id: GetCheermotesAsync(System.String)
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetCheermotesAsync(string)
  nameWithType: TwitchRestClient.GetCheermotesAsync(string)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetCheermotesAsync(string)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetCheermotesAsync
    path: ../src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
    startLine: 96
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<Cheermote>> GetCheermotesAsync(string broadcasterId = null)
    parameters:
    - id: broadcasterId
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Models.Cheermote}}
    content.vb: Public Function GetCheermotesAsync(broadcasterId As String = Nothing) As Task(Of IReadOnlyCollection(Of Cheermote))
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetCheermotesAsync*
  nameWithType.vb: TwitchRestClient.GetCheermotesAsync(String)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetCheermotesAsync(String)
  name.vb: GetCheermotesAsync(String)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionTransactionsAsync(System.String,System.Int32)
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionTransactionsAsync(System.String,System.Int32)
  id: GetExtensionTransactionsAsync(System.String,System.Int32)
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetExtensionTransactionsAsync(string, int)
  nameWithType: TwitchRestClient.GetExtensionTransactionsAsync(string, int)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionTransactionsAsync(string, int)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetExtensionTransactionsAsync
    path: ../src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
    startLine: 102
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<IReadOnlyCollection<RestExtensionTransaction>> GetExtensionTransactionsAsync(string extensionId, int count = 20)
    parameters:
    - id: extensionId
      type: System.String
    - id: count
      type: System.Int32
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestExtensionTransaction}}
    content.vb: Public Function GetExtensionTransactionsAsync(extensionId As String, count As Integer = 20) As Task(Of IReadOnlyCollection(Of RestExtensionTransaction))
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionTransactionsAsync*
  nameWithType.vb: TwitchRestClient.GetExtensionTransactionsAsync(String, Integer)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionTransactionsAsync(String, Integer)
  name.vb: GetExtensionTransactionsAsync(String, Integer)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionTransactionsAsync(System.String,System.Int32,System.String[])
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionTransactionsAsync(System.String,System.Int32,System.String[])
  id: GetExtensionTransactionsAsync(System.String,System.Int32,System.String[])
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetExtensionTransactionsAsync(string, int, params string[])
  nameWithType: TwitchRestClient.GetExtensionTransactionsAsync(string, int, params string[])
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionTransactionsAsync(string, int, params string[])
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetExtensionTransactionsAsync
    path: ../src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
    startLine: 111
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<IReadOnlyCollection<RestExtensionTransaction>> GetExtensionTransactionsAsync(string extensionId, int count = 20, params string[] transactionIds)
    parameters:
    - id: extensionId
      type: System.String
    - id: count
      type: System.Int32
    - id: transactionIds
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestExtensionTransaction}}
    content.vb: Public Function GetExtensionTransactionsAsync(extensionId As String, count As Integer = 20, ParamArray transactionIds As String()) As Task(Of IReadOnlyCollection(Of RestExtensionTransaction))
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionTransactionsAsync*
  nameWithType.vb: TwitchRestClient.GetExtensionTransactionsAsync(String, Integer, ParamArray String())
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionTransactionsAsync(String, Integer, ParamArray String())
  name.vb: GetExtensionTransactionsAsync(String, Integer, ParamArray String())
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetEventSubscriptionsAsync(System.String,System.Nullable{AuxLabs.Twitch.EventSubStatus},System.Nullable{AuxLabs.Twitch.EventSubType})
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.GetEventSubscriptionsAsync(System.String,System.Nullable{AuxLabs.Twitch.EventSubStatus},System.Nullable{AuxLabs.Twitch.EventSubType})
  id: GetEventSubscriptionsAsync(System.String,System.Nullable{AuxLabs.Twitch.EventSubStatus},System.Nullable{AuxLabs.Twitch.EventSubType})
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: GetEventSubscriptionsAsync(string, EventSubStatus?, EventSubType?)
  nameWithType: TwitchRestClient.GetEventSubscriptionsAsync(string, EventSubStatus?, EventSubType?)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetEventSubscriptionsAsync(string, AuxLabs.Twitch.EventSubStatus?, AuxLabs.Twitch.EventSubType?)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: GetEventSubscriptionsAsync
    path: ../src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
    startLine: 125
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task<IReadOnlyCollection<RestEventSubscription>> GetEventSubscriptionsAsync(string userId = null, EventSubStatus? status = null, EventSubType? type = null)
    parameters:
    - id: userId
      type: System.String
    - id: status
      type: System.Nullable{AuxLabs.Twitch.EventSubStatus}
    - id: type
      type: System.Nullable{AuxLabs.Twitch.EventSubType}
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestEventSubscription}}
    content.vb: Public Function GetEventSubscriptionsAsync(userId As String = Nothing, status As EventSubStatus? = Nothing, type As EventSubType? = Nothing) As Task(Of IReadOnlyCollection(Of RestEventSubscription))
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.GetEventSubscriptionsAsync*
  nameWithType.vb: TwitchRestClient.GetEventSubscriptionsAsync(String, EventSubStatus?, EventSubType?)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.GetEventSubscriptionsAsync(String, AuxLabs.Twitch.EventSubStatus?, AuxLabs.Twitch.EventSubType?)
  name.vb: GetEventSubscriptionsAsync(String, EventSubStatus?, EventSubType?)
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.CreateEventSubscriptionAsync``1(System.Action{AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody{``0}})
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.CreateEventSubscriptionAsync``1(System.Action{AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody{``0}})
  id: CreateEventSubscriptionAsync``1(System.Action{AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody{``0}})
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: CreateEventSubscriptionAsync<TCondition>(Action<PostEventSubscriptionBody<TCondition>>)
  nameWithType: TwitchRestClient.CreateEventSubscriptionAsync<TCondition>(Action<PostEventSubscriptionBody<TCondition>>)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.CreateEventSubscriptionAsync<TCondition>(System.Action<AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody<TCondition>>)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: CreateEventSubscriptionAsync
    path: ../src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
    startLine: 136
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: 'public Task<RestEventSubscription> CreateEventSubscriptionAsync<TCondition>(Action<PostEventSubscriptionBody<TCondition>> func) where TCondition : IEventCondition'
    parameters:
    - id: func
      type: System.Action{AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody{{TCondition}}}
    typeParameters:
    - id: TCondition
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestEventSubscription}
    content.vb: Public Function CreateEventSubscriptionAsync(Of TCondition As IEventCondition)(func As Action(Of PostEventSubscriptionBody(Of TCondition))) As Task(Of RestEventSubscription)
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.CreateEventSubscriptionAsync*
  nameWithType.vb: TwitchRestClient.CreateEventSubscriptionAsync(Of TCondition)(Action(Of PostEventSubscriptionBody(Of TCondition)))
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.CreateEventSubscriptionAsync(Of TCondition)(System.Action(Of AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody(Of TCondition)))
  name.vb: CreateEventSubscriptionAsync(Of TCondition)(Action(Of PostEventSubscriptionBody(Of TCondition)))
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.CreateEventSubscriptionAsync``1(AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody{``0})
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.CreateEventSubscriptionAsync``1(AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody{``0})
  id: CreateEventSubscriptionAsync``1(AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody{``0})
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: CreateEventSubscriptionAsync<TCondition>(PostEventSubscriptionBody<TCondition>)
  nameWithType: TwitchRestClient.CreateEventSubscriptionAsync<TCondition>(PostEventSubscriptionBody<TCondition>)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.CreateEventSubscriptionAsync<TCondition>(AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody<TCondition>)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: CreateEventSubscriptionAsync
    path: ../src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
    startLine: 144
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: 'public Task<RestEventSubscription> CreateEventSubscriptionAsync<TCondition>(PostEventSubscriptionBody<TCondition> args) where TCondition : IEventCondition'
    parameters:
    - id: args
      type: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody{{TCondition}}
    typeParameters:
    - id: TCondition
    return:
      type: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestEventSubscription}
    content.vb: Public Function CreateEventSubscriptionAsync(Of TCondition As IEventCondition)(args As PostEventSubscriptionBody(Of TCondition)) As Task(Of RestEventSubscription)
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.CreateEventSubscriptionAsync*
  nameWithType.vb: TwitchRestClient.CreateEventSubscriptionAsync(Of TCondition)(PostEventSubscriptionBody(Of TCondition))
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.CreateEventSubscriptionAsync(Of TCondition)(AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody(Of TCondition))
  name.vb: CreateEventSubscriptionAsync(Of TCondition)(PostEventSubscriptionBody(Of TCondition))
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.DeleteEventSubscriptionAsync(System.String)
  commentId: M:AuxLabs.Twitch.Rest.TwitchRestClient.DeleteEventSubscriptionAsync(System.String)
  id: DeleteEventSubscriptionAsync(System.String)
  parent: AuxLabs.Twitch.Rest.TwitchRestClient
  langs:
  - csharp
  - vb
  name: DeleteEventSubscriptionAsync(string)
  nameWithType: TwitchRestClient.DeleteEventSubscriptionAsync(string)
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.DeleteEventSubscriptionAsync(string)
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: DeleteEventSubscriptionAsync
    path: ../src/AuxLabs.Twitch.Rest/TwitchRestClient.cs
    startLine: 151
  assemblies:
  - AuxLabs.Twitch.Rest
  namespace: AuxLabs.Twitch.Rest
  syntax:
    content: public Task DeleteEventSubscriptionAsync(string subscriptionId)
    parameters:
    - id: subscriptionId
      type: System.String
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function DeleteEventSubscriptionAsync(subscriptionId As String) As Task
  overload: AuxLabs.Twitch.Rest.TwitchRestClient.DeleteEventSubscriptionAsync*
  nameWithType.vb: TwitchRestClient.DeleteEventSubscriptionAsync(String)
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.DeleteEventSubscriptionAsync(String)
  name.vb: DeleteEventSubscriptionAsync(String)
references:
- uid: AuxLabs.Twitch.Rest
  commentId: N:AuxLabs.Twitch.Rest
  href: AuxLabs.html
  name: AuxLabs.Twitch.Rest
  nameWithType: AuxLabs.Twitch.Rest
  fullName: AuxLabs.Twitch.Rest
  spec.csharp:
  - uid: AuxLabs
    name: AuxLabs
    href: AuxLabs.html
  - name: .
  - uid: AuxLabs.Twitch
    name: Twitch
    href: AuxLabs.Twitch.html
  - name: .
  - uid: AuxLabs.Twitch.Rest
    name: Rest
    href: AuxLabs.Twitch.Rest.html
  spec.vb:
  - uid: AuxLabs
    name: AuxLabs
    href: AuxLabs.html
  - name: .
  - uid: AuxLabs.Twitch
    name: Twitch
    href: AuxLabs.Twitch.html
  - name: .
  - uid: AuxLabs.Twitch.Rest
    name: Rest
    href: AuxLabs.Twitch.Rest.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionAnalyticAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionAnalyticAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionAnalyticAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Threading.CancellationToken}).html
  name: GetExtensionAnalyticAsync
  nameWithType: TwitchRestClient.GetExtensionAnalyticAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionAnalyticAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.datetime
  name: DateTime?
  nameWithType: DateTime?
  fullName: System.DateTime?
  nameWithType.vb: Date?
  fullName.vb: Date?
  name.vb: Date?
  spec.csharp:
  - uid: System.DateTime
    name: DateTime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime
  - name: '?'
  spec.vb:
  - uid: System.DateTime
    name: Date
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime
  - name: '?'
- uid: System.Nullable{System.Threading.CancellationToken}
  commentId: T:System.Nullable{System.Threading.CancellationToken}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken?
  nameWithType: CancellationToken?
  fullName: System.Threading.CancellationToken?
  spec.csharp:
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
  spec.vb:
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.ExtensionAnalytic}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.ExtensionAnalytic}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ExtensionAnalytic>
  nameWithType: Task<ExtensionAnalytic>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.ExtensionAnalytic>
  nameWithType.vb: Task(Of ExtensionAnalytic)
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.ExtensionAnalytic)
  name.vb: Task(Of ExtensionAnalytic)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.ExtensionAnalytic
    name: ExtensionAnalytic
    href: AuxLabs.Twitch.Rest.Models.ExtensionAnalytic.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.ExtensionAnalytic
    name: ExtensionAnalytic
    href: AuxLabs.Twitch.Rest.Models.ExtensionAnalytic.html
  - name: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionAnalyticsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionAnalyticsAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionAnalyticsAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Threading.CancellationToken}).html
  name: GetExtensionAnalyticsAsync
  nameWithType: TwitchRestClient.GetExtensionAnalyticsAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionAnalyticsAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Models.ExtensionAnalytic}}
  commentId: T:System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Models.ExtensionAnalytic}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IAsyncEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  name: IAsyncEnumerable<IReadOnlyCollection<ExtensionAnalytic>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<ExtensionAnalytic>>
  fullName: System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyCollection<AuxLabs.Twitch.Rest.Models.ExtensionAnalytic>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of ExtensionAnalytic))
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of System.Collections.Generic.IReadOnlyCollection(Of AuxLabs.Twitch.Rest.Models.ExtensionAnalytic))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of ExtensionAnalytic))
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  - name: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.ExtensionAnalytic
    name: ExtensionAnalytic
    href: AuxLabs.Twitch.Rest.Models.ExtensionAnalytic.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.ExtensionAnalytic
    name: ExtensionAnalytic
    href: AuxLabs.Twitch.Rest.Models.ExtensionAnalytic.html
  - name: )
  - name: )
- uid: System.Collections.Generic.IAsyncEnumerable`1
  commentId: T:System.Collections.Generic.IAsyncEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  name: IAsyncEnumerable<T>
  nameWithType: IAsyncEnumerable<T>
  fullName: System.Collections.Generic.IAsyncEnumerable<T>
  nameWithType.vb: IAsyncEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of T)
  name.vb: IAsyncEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetGameAnalyticAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetGameAnalyticAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetGameAnalyticAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Threading.CancellationToken}).html
  name: GetGameAnalyticAsync
  nameWithType: TwitchRestClient.GetGameAnalyticAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetGameAnalyticAsync
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.GameAnalytic}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.GameAnalytic}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<GameAnalytic>
  nameWithType: Task<GameAnalytic>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.GameAnalytic>
  nameWithType.vb: Task(Of GameAnalytic)
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.GameAnalytic)
  name.vb: Task(Of GameAnalytic)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.GameAnalytic
    name: GameAnalytic
    href: AuxLabs.Twitch.Rest.Models.GameAnalytic.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.GameAnalytic
    name: GameAnalytic
    href: AuxLabs.Twitch.Rest.Models.GameAnalytic.html
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetGameAnalyticsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetGameAnalyticsAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetGameAnalyticsAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Nullable{System.Threading.CancellationToken}).html
  name: GetGameAnalyticsAsync
  nameWithType: TwitchRestClient.GetGameAnalyticsAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetGameAnalyticsAsync
- uid: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Models.GameAnalytic}}
  commentId: T:System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Models.GameAnalytic}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IAsyncEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  name: IAsyncEnumerable<IReadOnlyCollection<GameAnalytic>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<GameAnalytic>>
  fullName: System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyCollection<AuxLabs.Twitch.Rest.Models.GameAnalytic>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of GameAnalytic))
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of System.Collections.Generic.IReadOnlyCollection(Of AuxLabs.Twitch.Rest.Models.GameAnalytic))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of GameAnalytic))
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  - name: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.GameAnalytic
    name: GameAnalytic
    href: AuxLabs.Twitch.Rest.Models.GameAnalytic.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.GameAnalytic
    name: GameAnalytic
    href: AuxLabs.Twitch.Rest.Models.GameAnalytic.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetBitsLeaderboardAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetBitsLeaderboardAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetBitsLeaderboardAsync(System.String,System.Nullable{System.DateTime},System.Nullable{AuxLabs.Twitch.BitsPeriod},System.Int32,System.Nullable{System.Threading.CancellationToken}).html
  name: GetBitsLeaderboardAsync
  nameWithType: TwitchRestClient.GetBitsLeaderboardAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetBitsLeaderboardAsync
- uid: System.Nullable{AuxLabs.Twitch.BitsPeriod}
  commentId: T:System.Nullable{AuxLabs.Twitch.BitsPeriod}
  parent: System
  definition: System.Nullable`1
  href: AuxLabs.Twitch.BitsPeriod.html
  name: BitsPeriod?
  nameWithType: BitsPeriod?
  fullName: AuxLabs.Twitch.BitsPeriod?
  spec.csharp:
  - uid: AuxLabs.Twitch.BitsPeriod
    name: BitsPeriod
    href: AuxLabs.Twitch.BitsPeriod.html
  - name: '?'
  spec.vb:
  - uid: AuxLabs.Twitch.BitsPeriod
    name: BitsPeriod
    href: AuxLabs.Twitch.BitsPeriod.html
  - name: '?'
- uid: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestBitsUser}}
  commentId: T:System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestBitsUser}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IAsyncEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  name: IAsyncEnumerable<IReadOnlyCollection<RestBitsUser>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<RestBitsUser>>
  fullName: System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyCollection<AuxLabs.Twitch.Rest.Entities.RestBitsUser>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of RestBitsUser))
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of System.Collections.Generic.IReadOnlyCollection(Of AuxLabs.Twitch.Rest.Entities.RestBitsUser))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of RestBitsUser))
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  - name: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Entities.RestBitsUser
    name: RestBitsUser
    href: AuxLabs.Twitch.Rest.Entities.RestBitsUser.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Entities.RestBitsUser
    name: RestBitsUser
    href: AuxLabs.Twitch.Rest.Entities.RestBitsUser.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetStreamKeyAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetStreamKeyAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetStreamKeyAsync.html
  name: GetStreamKeyAsync
  nameWithType: TwitchRestClient.GetStreamKeyAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetStreamKeyAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<string>
  nameWithType: Task<string>
  fullName: System.Threading.Tasks.Task<string>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastByIdAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastByIdAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastByIdAsync(System.String).html
  name: GetBroadcastByIdAsync
  nameWithType: TwitchRestClient.GetBroadcastByIdAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastByIdAsync
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestBroadcast}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestBroadcast}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<RestBroadcast>
  nameWithType: Task<RestBroadcast>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Entities.RestBroadcast>
  nameWithType.vb: Task(Of RestBroadcast)
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Entities.RestBroadcast)
  name.vb: Task(Of RestBroadcast)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Entities.RestBroadcast
    name: RestBroadcast
    href: AuxLabs.Twitch.Rest.Entities.RestBroadcast.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Entities.RestBroadcast
    name: RestBroadcast
    href: AuxLabs.Twitch.Rest.Entities.RestBroadcast.html
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsByIdAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsByIdAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsByIdAsync(System.String[]).html
  name: GetBroadcastsByIdAsync
  nameWithType: TwitchRestClient.GetBroadcastsByIdAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsByIdAsync
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestBroadcast}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestBroadcast}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IReadOnlyCollection<RestBroadcast>>
  nameWithType: Task<IReadOnlyCollection<RestBroadcast>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<AuxLabs.Twitch.Rest.Entities.RestBroadcast>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestBroadcast))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of AuxLabs.Twitch.Rest.Entities.RestBroadcast))
  name.vb: Task(Of IReadOnlyCollection(Of RestBroadcast))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Entities.RestBroadcast
    name: RestBroadcast
    href: AuxLabs.Twitch.Rest.Entities.RestBroadcast.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Entities.RestBroadcast
    name: RestBroadcast
    href: AuxLabs.Twitch.Rest.Entities.RestBroadcast.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastByNameAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastByNameAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastByNameAsync(System.String).html
  name: GetBroadcastByNameAsync
  nameWithType: TwitchRestClient.GetBroadcastByNameAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastByNameAsync
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsByNameAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsByNameAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsByNameAsync(System.String[]).html
  name: GetBroadcastsByNameAsync
  nameWithType: TwitchRestClient.GetBroadcastsByNameAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsByNameAsync
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsAsync(System.String[],System.String[],System.String[],System.String[],System.Int32,System.Nullable{System.Threading.CancellationToken}).html
  name: GetBroadcastsAsync
  nameWithType: TwitchRestClient.GetBroadcastsAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetBroadcastsAsync
- uid: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestBroadcast}}
  commentId: T:System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestBroadcast}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IAsyncEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  name: IAsyncEnumerable<IReadOnlyCollection<RestBroadcast>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<RestBroadcast>>
  fullName: System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyCollection<AuxLabs.Twitch.Rest.Entities.RestBroadcast>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of RestBroadcast))
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of System.Collections.Generic.IReadOnlyCollection(Of AuxLabs.Twitch.Rest.Entities.RestBroadcast))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of RestBroadcast))
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  - name: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Entities.RestBroadcast
    name: RestBroadcast
    href: AuxLabs.Twitch.Rest.Entities.RestBroadcast.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Entities.RestBroadcast
    name: RestBroadcast
    href: AuxLabs.Twitch.Rest.Entities.RestBroadcast.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetMyChannelAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetMyChannelAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetMyChannelAsync.html
  name: GetMyChannelAsync
  nameWithType: TwitchRestClient.GetMyChannelAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetMyChannelAsync
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestChannel}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestChannel}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<RestChannel>
  nameWithType: Task<RestChannel>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Entities.RestChannel>
  nameWithType.vb: Task(Of RestChannel)
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Entities.RestChannel)
  name.vb: Task(Of RestChannel)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Entities.RestChannel
    name: RestChannel
    href: AuxLabs.Twitch.Rest.Entities.RestChannel.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Entities.RestChannel
    name: RestChannel
    href: AuxLabs.Twitch.Rest.Entities.RestChannel.html
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.UpdateMyChannelAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.UpdateMyChannelAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.UpdateMyChannelAsync(System.Action{AuxLabs.Twitch.Rest.Requests.PatchChannelBody}).html
  name: UpdateMyChannelAsync
  nameWithType: TwitchRestClient.UpdateMyChannelAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.UpdateMyChannelAsync
- uid: System.Action{AuxLabs.Twitch.Rest.Requests.PatchChannelBody}
  commentId: T:System.Action{AuxLabs.Twitch.Rest.Requests.PatchChannelBody}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<PatchChannelBody>
  nameWithType: Action<PatchChannelBody>
  fullName: System.Action<AuxLabs.Twitch.Rest.Requests.PatchChannelBody>
  nameWithType.vb: Action(Of PatchChannelBody)
  fullName.vb: System.Action(Of AuxLabs.Twitch.Rest.Requests.PatchChannelBody)
  name.vb: Action(Of PatchChannelBody)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Requests.PatchChannelBody
    name: PatchChannelBody
    href: AuxLabs.Twitch.Rest.Requests.PatchChannelBody.html
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Requests.PatchChannelBody
    name: PatchChannelBody
    href: AuxLabs.Twitch.Rest.Requests.PatchChannelBody.html
  - name: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelAsync(System.String).html
  name: GetChannelAsync
  nameWithType: TwitchRestClient.GetChannelAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelAsync
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelsAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelsAsync(System.String[]).html
  name: GetChannelsAsync
  nameWithType: TwitchRestClient.GetChannelsAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelsAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestChannel}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestChannel}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IReadOnlyCollection<RestChannel>>
  nameWithType: Task<IReadOnlyCollection<RestChannel>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<AuxLabs.Twitch.Rest.Entities.RestChannel>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestChannel))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of AuxLabs.Twitch.Rest.Entities.RestChannel))
  name.vb: Task(Of IReadOnlyCollection(Of RestChannel))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Entities.RestChannel
    name: RestChannel
    href: AuxLabs.Twitch.Rest.Entities.RestChannel.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Entities.RestChannel
    name: RestChannel
    href: AuxLabs.Twitch.Rest.Entities.RestChannel.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelEditors*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelEditors
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelEditors(System.String).html
  name: GetChannelEditors
  nameWithType: TwitchRestClient.GetChannelEditors
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetChannelEditors
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestEditor}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestEditor}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IReadOnlyCollection<RestEditor>>
  nameWithType: Task<IReadOnlyCollection<RestEditor>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<AuxLabs.Twitch.Rest.Entities.RestEditor>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestEditor))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of AuxLabs.Twitch.Rest.Entities.RestEditor))
  name.vb: Task(Of IReadOnlyCollection(Of RestEditor))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Entities.RestEditor
    name: RestEditor
    href: AuxLabs.Twitch.Rest.Entities.RestEditor.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Entities.RestEditor
    name: RestEditor
    href: AuxLabs.Twitch.Rest.Entities.RestEditor.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyColorAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyColorAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyColorAsync(AuxLabs.Twitch.ChatColor,System.Nullable{System.Threading.CancellationToken}).html
  name: ModifyMyColorAsync
  nameWithType: TwitchRestClient.ModifyMyColorAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyColorAsync
- uid: AuxLabs.Twitch.ChatColor
  commentId: T:AuxLabs.Twitch.ChatColor
  parent: AuxLabs.Twitch
  href: AuxLabs.Twitch.ChatColor.html
  name: ChatColor
  nameWithType: ChatColor
  fullName: AuxLabs.Twitch.ChatColor
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: AuxLabs.Twitch
  commentId: N:AuxLabs.Twitch
  href: AuxLabs.html
  name: AuxLabs.Twitch
  nameWithType: AuxLabs.Twitch
  fullName: AuxLabs.Twitch
  spec.csharp:
  - uid: AuxLabs
    name: AuxLabs
    href: AuxLabs.html
  - name: .
  - uid: AuxLabs.Twitch
    name: Twitch
    href: AuxLabs.Twitch.html
  spec.vb:
  - uid: AuxLabs
    name: AuxLabs
    href: AuxLabs.html
  - name: .
  - uid: AuxLabs.Twitch
    name: Twitch
    href: AuxLabs.Twitch.html
- uid: System.Drawing.Color
  commentId: T:System.Drawing.Color
  parent: System.Drawing
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.drawing.color
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
- uid: System.Drawing
  commentId: N:System.Drawing
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Drawing
  nameWithType: System.Drawing
  fullName: System.Drawing
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Drawing
    name: Drawing
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.drawing
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Drawing
    name: Drawing
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.drawing
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetChattersAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetChattersAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetChattersAsync(System.String,System.Int32,System.Nullable{System.Threading.CancellationToken}).html
  name: GetChattersAsync
  nameWithType: TwitchRestClient.GetChattersAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetChattersAsync
- uid: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestSimpleUser}}
  commentId: T:System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestSimpleUser}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IAsyncEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  name: IAsyncEnumerable<IReadOnlyCollection<RestSimpleUser>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<RestSimpleUser>>
  fullName: System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyCollection<AuxLabs.Twitch.Rest.Entities.RestSimpleUser>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of RestSimpleUser))
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of System.Collections.Generic.IReadOnlyCollection(Of AuxLabs.Twitch.Rest.Entities.RestSimpleUser))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of RestSimpleUser))
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  - name: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Entities.RestSimpleUser
    name: RestSimpleUser
    href: AuxLabs.Twitch.Rest.Entities.RestSimpleUser.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Entities.RestSimpleUser
    name: RestSimpleUser
    href: AuxLabs.Twitch.Rest.Entities.RestSimpleUser.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmotesAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetEmotesAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmotesAsync(System.Nullable{System.Threading.CancellationToken}).html
  name: GetEmotesAsync
  nameWithType: TwitchRestClient.GetEmotesAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmotesAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestGlobalEmote}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestGlobalEmote}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IReadOnlyCollection<RestGlobalEmote>>
  nameWithType: Task<IReadOnlyCollection<RestGlobalEmote>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<AuxLabs.Twitch.Rest.Entities.RestGlobalEmote>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestGlobalEmote))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of AuxLabs.Twitch.Rest.Entities.RestGlobalEmote))
  name.vb: Task(Of IReadOnlyCollection(Of RestGlobalEmote))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Entities.RestGlobalEmote
    name: RestGlobalEmote
    href: AuxLabs.Twitch.Rest.Entities.RestGlobalEmote.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Entities.RestGlobalEmote
    name: RestGlobalEmote
    href: AuxLabs.Twitch.Rest.Entities.RestGlobalEmote.html
  - name: )
  - name: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestEmote}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestEmote}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IReadOnlyCollection<RestEmote>>
  nameWithType: Task<IReadOnlyCollection<RestEmote>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<AuxLabs.Twitch.Rest.Entities.RestEmote>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestEmote))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of AuxLabs.Twitch.Rest.Entities.RestEmote))
  name.vb: Task(Of IReadOnlyCollection(Of RestEmote))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Entities.RestEmote
    name: RestEmote
    href: AuxLabs.Twitch.Rest.Entities.RestEmote.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Entities.RestEmote
    name: RestEmote
    href: AuxLabs.Twitch.Rest.Entities.RestEmote.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetAsync(System.String,System.Nullable{System.Threading.CancellationToken}).html
  name: GetEmoteSetAsync
  nameWithType: TwitchRestClient.GetEmoteSetAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetAsync
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetsAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetsAsync(System.String[]).html
  name: GetEmoteSetsAsync
  nameWithType: TwitchRestClient.GetEmoteSetsAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetEmoteSetsAsync
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetChatSettingsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetChatSettingsAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetChatSettingsAsync(System.String,System.Nullable{System.Threading.CancellationToken}).html
  name: GetChatSettingsAsync
  nameWithType: TwitchRestClient.GetChatSettingsAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetChatSettingsAsync
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.ChatSettings}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.ChatSettings}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ChatSettings>
  nameWithType: Task<ChatSettings>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.ChatSettings>
  nameWithType.vb: Task(Of ChatSettings)
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.ChatSettings)
  name.vb: Task(Of ChatSettings)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.ChatSettings
    name: ChatSettings
    href: AuxLabs.Twitch.Rest.Models.ChatSettings.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.ChatSettings
    name: ChatSettings
    href: AuxLabs.Twitch.Rest.Models.ChatSettings.html
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.ModifyChatSettingsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.ModifyChatSettingsAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.ModifyChatSettingsAsync(System.String,System.Action{AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody},System.Nullable{System.Threading.CancellationToken}).html
  name: ModifyChatSettingsAsync
  nameWithType: TwitchRestClient.ModifyChatSettingsAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.ModifyChatSettingsAsync
- uid: System.Action{AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody}
  commentId: T:System.Action{AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<PatchChatSettingsBody>
  nameWithType: Action<PatchChatSettingsBody>
  fullName: System.Action<AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody>
  nameWithType.vb: Action(Of PatchChatSettingsBody)
  fullName.vb: System.Action(Of AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody)
  name.vb: Action(Of PatchChatSettingsBody)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody
    name: PatchChatSettingsBody
    href: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.html
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody
    name: PatchChatSettingsBody
    href: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.html
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.SendAnnouncementAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.SendAnnouncementAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.SendAnnouncementAsync(System.String,System.String,System.Nullable{AuxLabs.Twitch.AnnouncementColor},System.Nullable{System.Threading.CancellationToken}).html
  name: SendAnnouncementAsync
  nameWithType: TwitchRestClient.SendAnnouncementAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.SendAnnouncementAsync
- uid: System.Nullable{AuxLabs.Twitch.AnnouncementColor}
  commentId: T:System.Nullable{AuxLabs.Twitch.AnnouncementColor}
  parent: System
  definition: System.Nullable`1
  href: AuxLabs.Twitch.AnnouncementColor.html
  name: AnnouncementColor?
  nameWithType: AnnouncementColor?
  fullName: AuxLabs.Twitch.AnnouncementColor?
  spec.csharp:
  - uid: AuxLabs.Twitch.AnnouncementColor
    name: AnnouncementColor
    href: AuxLabs.Twitch.AnnouncementColor.html
  - name: '?'
  spec.vb:
  - uid: AuxLabs.Twitch.AnnouncementColor
    name: AnnouncementColor
    href: AuxLabs.Twitch.AnnouncementColor.html
  - name: '?'
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.SendShoutoutAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.SendShoutoutAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.SendShoutoutAsync(System.String,System.String,System.Nullable{System.Threading.CancellationToken}).html
  name: SendShoutoutAsync
  nameWithType: TwitchRestClient.SendShoutoutAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.SendShoutoutAsync
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorAsync(System.String,System.Nullable{System.Threading.CancellationToken}).html
  name: GetUserChatColorAsync
  nameWithType: TwitchRestClient.GetUserChatColorAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorAsync
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestChatUser}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestChatUser}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<RestChatUser>
  nameWithType: Task<RestChatUser>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Entities.RestChatUser>
  nameWithType.vb: Task(Of RestChatUser)
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Entities.RestChatUser)
  name.vb: Task(Of RestChatUser)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Entities.RestChatUser
    name: RestChatUser
    href: AuxLabs.Twitch.Rest.Entities.RestChatUser.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Entities.RestChatUser
    name: RestChatUser
    href: AuxLabs.Twitch.Rest.Entities.RestChatUser.html
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorsAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorsAsync(System.String[]).html
  name: GetUserChatColorsAsync
  nameWithType: TwitchRestClient.GetUserChatColorsAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserChatColorsAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestChatUser}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestChatUser}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IReadOnlyCollection<RestChatUser>>
  nameWithType: Task<IReadOnlyCollection<RestChatUser>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<AuxLabs.Twitch.Rest.Entities.RestChatUser>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestChatUser))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of AuxLabs.Twitch.Rest.Entities.RestChatUser))
  name.vb: Task(Of IReadOnlyCollection(Of RestChatUser))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Entities.RestChatUser
    name: RestChatUser
    href: AuxLabs.Twitch.Rest.Entities.RestChatUser.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Entities.RestChatUser
    name: RestChatUser
    href: AuxLabs.Twitch.Rest.Entities.RestChatUser.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetMyUserAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetMyUserAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetMyUserAsync.html
  name: GetMyUserAsync
  nameWithType: TwitchRestClient.GetMyUserAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetMyUserAsync
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestSelfUser}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestSelfUser}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<RestSelfUser>
  nameWithType: Task<RestSelfUser>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Entities.RestSelfUser>
  nameWithType.vb: Task(Of RestSelfUser)
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Entities.RestSelfUser)
  name.vb: Task(Of RestSelfUser)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Entities.RestSelfUser
    name: RestSelfUser
    href: AuxLabs.Twitch.Rest.Entities.RestSelfUser.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Entities.RestSelfUser
    name: RestSelfUser
    href: AuxLabs.Twitch.Rest.Entities.RestSelfUser.html
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyUserAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyUserAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyUserAsync(System.String).html
  name: ModifyMyUserAsync
  nameWithType: TwitchRestClient.ModifyMyUserAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.ModifyMyUserAsync
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserByNameAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetUserByNameAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserByNameAsync(System.String).html
  name: GetUserByNameAsync
  nameWithType: TwitchRestClient.GetUserByNameAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserByNameAsync
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestUser}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestUser}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<RestUser>
  nameWithType: Task<RestUser>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Entities.RestUser>
  nameWithType.vb: Task(Of RestUser)
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Entities.RestUser)
  name.vb: Task(Of RestUser)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Entities.RestUser
    name: RestUser
    href: AuxLabs.Twitch.Rest.Entities.RestUser.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Entities.RestUser
    name: RestUser
    href: AuxLabs.Twitch.Rest.Entities.RestUser.html
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetUsersByNameAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetUsersByNameAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetUsersByNameAsync(System.String[]).html
  name: GetUsersByNameAsync
  nameWithType: TwitchRestClient.GetUsersByNameAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetUsersByNameAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestUser}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestUser}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IReadOnlyCollection<RestUser>>
  nameWithType: Task<IReadOnlyCollection<RestUser>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<AuxLabs.Twitch.Rest.Entities.RestUser>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestUser))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of AuxLabs.Twitch.Rest.Entities.RestUser))
  name.vb: Task(Of IReadOnlyCollection(Of RestUser))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Entities.RestUser
    name: RestUser
    href: AuxLabs.Twitch.Rest.Entities.RestUser.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Entities.RestUser
    name: RestUser
    href: AuxLabs.Twitch.Rest.Entities.RestUser.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserByIdAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetUserByIdAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserByIdAsync(System.String).html
  name: GetUserByIdAsync
  nameWithType: TwitchRestClient.GetUserByIdAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetUserByIdAsync
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetUsersByIdAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetUsersByIdAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetUsersByIdAsync(System.String[]).html
  name: GetUsersByIdAsync
  nameWithType: TwitchRestClient.GetUsersByIdAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetUsersByIdAsync
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowersAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowersAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowersAsync(System.String,System.Int32).html
  name: GetFollowersAsync
  nameWithType: TwitchRestClient.GetFollowersAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowersAsync
- uid: System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestFollower},System.Int32}}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestFollower},System.Int32}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<(IReadOnlyCollection<RestFollower> Followers, int Total)>
  nameWithType: Task<(IReadOnlyCollection<RestFollower> Followers, int Total)>
  fullName: System.Threading.Tasks.Task<(System.Collections.Generic.IReadOnlyCollection<AuxLabs.Twitch.Rest.Entities.RestFollower> Followers, int Total)>
  nameWithType.vb: Task(Of (Followers As IReadOnlyCollection(Of RestFollower), Total As Integer))
  fullName.vb: System.Threading.Tasks.Task(Of (Followers As System.Collections.Generic.IReadOnlyCollection(Of AuxLabs.Twitch.Rest.Entities.RestFollower), Total As Integer))
  name.vb: Task(Of (Followers As IReadOnlyCollection(Of RestFollower), Total As Integer))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: (
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Entities.RestFollower
    name: RestFollower
    href: AuxLabs.Twitch.Rest.Entities.RestFollower.html
  - name: '>'
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestFollower},System.Int32}.Followers
    name: Followers
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ireadonlycollection-auxlabs.twitch.rest.entities.restfollower-,system.int32-.followers
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestFollower},System.Int32}.Total
    name: Total
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ireadonlycollection-auxlabs.twitch.rest.entities.restfollower-,system.int32-.total
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestFollower},System.Int32}.Followers
    name: Followers
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ireadonlycollection-auxlabs.twitch.rest.entities.restfollower-,system.int32-.followers
  - name: " "
  - name: As
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Entities.RestFollower
    name: RestFollower
    href: AuxLabs.Twitch.Rest.Entities.RestFollower.html
  - name: )
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestFollower},System.Int32}.Total
    name: Total
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ireadonlycollection-auxlabs.twitch.rest.entities.restfollower-,system.int32-.total
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowerAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowerAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowerAsync(System.String,System.String).html
  name: GetFollowerAsync
  nameWithType: TwitchRestClient.GetFollowerAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowerAsync
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestFollower}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestFollower}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<RestFollower>
  nameWithType: Task<RestFollower>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Entities.RestFollower>
  nameWithType.vb: Task(Of RestFollower)
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Entities.RestFollower)
  name.vb: Task(Of RestFollower)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Entities.RestFollower
    name: RestFollower
    href: AuxLabs.Twitch.Rest.Entities.RestFollower.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Entities.RestFollower
    name: RestFollower
    href: AuxLabs.Twitch.Rest.Entities.RestFollower.html
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowedChannelsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowedChannelsAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowedChannelsAsync(System.Int32).html
  name: GetFollowedChannelsAsync
  nameWithType: TwitchRestClient.GetFollowedChannelsAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowedChannelsAsync
- uid: System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestFollowedChannel},System.Int32}}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestFollowedChannel},System.Int32}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<(IReadOnlyCollection<RestFollowedChannel> Channels, int Total)>
  nameWithType: Task<(IReadOnlyCollection<RestFollowedChannel> Channels, int Total)>
  fullName: System.Threading.Tasks.Task<(System.Collections.Generic.IReadOnlyCollection<AuxLabs.Twitch.Rest.Entities.RestFollowedChannel> Channels, int Total)>
  nameWithType.vb: Task(Of (Channels As IReadOnlyCollection(Of RestFollowedChannel), Total As Integer))
  fullName.vb: System.Threading.Tasks.Task(Of (Channels As System.Collections.Generic.IReadOnlyCollection(Of AuxLabs.Twitch.Rest.Entities.RestFollowedChannel), Total As Integer))
  name.vb: Task(Of (Channels As IReadOnlyCollection(Of RestFollowedChannel), Total As Integer))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: (
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Entities.RestFollowedChannel
    name: RestFollowedChannel
    href: AuxLabs.Twitch.Rest.Entities.RestFollowedChannel.html
  - name: '>'
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestFollowedChannel},System.Int32}.Channels
    name: Channels
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ireadonlycollection-auxlabs.twitch.rest.entities.restfollowedchannel-,system.int32-.channels
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestFollowedChannel},System.Int32}.Total
    name: Total
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ireadonlycollection-auxlabs.twitch.rest.entities.restfollowedchannel-,system.int32-.total
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestFollowedChannel},System.Int32}.Channels
    name: Channels
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ireadonlycollection-auxlabs.twitch.rest.entities.restfollowedchannel-,system.int32-.channels
  - name: " "
  - name: As
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Entities.RestFollowedChannel
    name: RestFollowedChannel
    href: AuxLabs.Twitch.Rest.Entities.RestFollowedChannel.html
  - name: )
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestFollowedChannel},System.Int32}.Total
    name: Total
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.collections.generic.ireadonlycollection-auxlabs.twitch.rest.entities.restfollowedchannel-,system.int32-.total
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowedChannelAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowedChannelAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowedChannelAsync(System.String).html
  name: GetFollowedChannelAsync
  nameWithType: TwitchRestClient.GetFollowedChannelAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetFollowedChannelAsync
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestFollowedChannel}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestFollowedChannel}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<RestFollowedChannel>
  nameWithType: Task<RestFollowedChannel>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Entities.RestFollowedChannel>
  nameWithType.vb: Task(Of RestFollowedChannel)
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Entities.RestFollowedChannel)
  name.vb: Task(Of RestFollowedChannel)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Entities.RestFollowedChannel
    name: RestFollowedChannel
    href: AuxLabs.Twitch.Rest.Entities.RestFollowedChannel.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Entities.RestFollowedChannel
    name: RestFollowedChannel
    href: AuxLabs.Twitch.Rest.Entities.RestFollowedChannel.html
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.MyUser*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.MyUser
  href: AuxLabs.Twitch.Rest.TwitchRestClient.MyUser.html
  name: MyUser
  nameWithType: TwitchRestClient.MyUser
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.MyUser
- uid: AuxLabs.Twitch.Rest.Entities.RestSelfUser
  commentId: T:AuxLabs.Twitch.Rest.Entities.RestSelfUser
  parent: AuxLabs.Twitch.Rest.Entities
  href: AuxLabs.Twitch.Rest.Entities.RestSelfUser.html
  name: RestSelfUser
  nameWithType: RestSelfUser
  fullName: AuxLabs.Twitch.Rest.Entities.RestSelfUser
- uid: AuxLabs.Twitch.Rest.Entities
  commentId: N:AuxLabs.Twitch.Rest.Entities
  href: AuxLabs.html
  name: AuxLabs.Twitch.Rest.Entities
  nameWithType: AuxLabs.Twitch.Rest.Entities
  fullName: AuxLabs.Twitch.Rest.Entities
  spec.csharp:
  - uid: AuxLabs
    name: AuxLabs
    href: AuxLabs.html
  - name: .
  - uid: AuxLabs.Twitch
    name: Twitch
    href: AuxLabs.Twitch.html
  - name: .
  - uid: AuxLabs.Twitch.Rest
    name: Rest
    href: AuxLabs.Twitch.Rest.html
  - name: .
  - uid: AuxLabs.Twitch.Rest.Entities
    name: Entities
    href: AuxLabs.Twitch.Rest.Entities.html
  spec.vb:
  - uid: AuxLabs
    name: AuxLabs
    href: AuxLabs.html
  - name: .
  - uid: AuxLabs.Twitch
    name: Twitch
    href: AuxLabs.Twitch.html
  - name: .
  - uid: AuxLabs.Twitch.Rest
    name: Rest
    href: AuxLabs.Twitch.Rest.html
  - name: .
  - uid: AuxLabs.Twitch.Rest.Entities
    name: Entities
    href: AuxLabs.Twitch.Rest.Entities.html
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.MyChannel*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.MyChannel
  href: AuxLabs.Twitch.Rest.TwitchRestClient.MyChannel.html
  name: MyChannel
  nameWithType: TwitchRestClient.MyChannel
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.MyChannel
- uid: AuxLabs.Twitch.Rest.Entities.RestChannel
  commentId: T:AuxLabs.Twitch.Rest.Entities.RestChannel
  parent: AuxLabs.Twitch.Rest.Entities
  href: AuxLabs.Twitch.Rest.Entities.RestChannel.html
  name: RestChannel
  nameWithType: RestChannel
  fullName: AuxLabs.Twitch.Rest.Entities.RestChannel
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.Identity*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.Identity
  href: AuxLabs.Twitch.Rest.TwitchRestClient.Identity.html
  name: Identity
  nameWithType: TwitchRestClient.Identity
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.Identity
- uid: AuxLabs.Twitch.Rest.Models.AppIdentity
  commentId: T:AuxLabs.Twitch.Rest.Models.AppIdentity
  parent: AuxLabs.Twitch.Rest.Models
  href: AuxLabs.Twitch.Rest.Models.AppIdentity.html
  name: AppIdentity
  nameWithType: AppIdentity
  fullName: AuxLabs.Twitch.Rest.Models.AppIdentity
- uid: AuxLabs.Twitch.Rest.Models
  commentId: N:AuxLabs.Twitch.Rest.Models
  href: AuxLabs.html
  name: AuxLabs.Twitch.Rest.Models
  nameWithType: AuxLabs.Twitch.Rest.Models
  fullName: AuxLabs.Twitch.Rest.Models
  spec.csharp:
  - uid: AuxLabs
    name: AuxLabs
    href: AuxLabs.html
  - name: .
  - uid: AuxLabs.Twitch
    name: Twitch
    href: AuxLabs.Twitch.html
  - name: .
  - uid: AuxLabs.Twitch.Rest
    name: Rest
    href: AuxLabs.Twitch.Rest.html
  - name: .
  - uid: AuxLabs.Twitch.Rest.Models
    name: Models
    href: AuxLabs.Twitch.Rest.Models.html
  spec.vb:
  - uid: AuxLabs
    name: AuxLabs
    href: AuxLabs.html
  - name: .
  - uid: AuxLabs.Twitch
    name: Twitch
    href: AuxLabs.Twitch.html
  - name: .
  - uid: AuxLabs.Twitch.Rest
    name: Rest
    href: AuxLabs.Twitch.Rest.html
  - name: .
  - uid: AuxLabs.Twitch.Rest.Models
    name: Models
    href: AuxLabs.Twitch.Rest.Models.html
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.#ctor*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.#ctor
  href: AuxLabs.Twitch.Rest.TwitchRestClient.#ctor(AuxLabs.Twitch.Rest.TwitchRestConfig).html
  name: TwitchRestClient
  nameWithType: TwitchRestClient.TwitchRestClient
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.TwitchRestClient
  nameWithType.vb: TwitchRestClient.New
  fullName.vb: AuxLabs.Twitch.Rest.TwitchRestClient.New
  name.vb: New
- uid: AuxLabs.Twitch.Rest.TwitchRestConfig
  commentId: T:AuxLabs.Twitch.Rest.TwitchRestConfig
  parent: AuxLabs.Twitch.Rest
  href: AuxLabs.Twitch.Rest.TwitchRestConfig.html
  name: TwitchRestConfig
  nameWithType: TwitchRestConfig
  fullName: AuxLabs.Twitch.Rest.TwitchRestConfig
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.Dispose*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.Dispose
  href: AuxLabs.Twitch.Rest.TwitchRestClient.Dispose(System.Boolean).html
  name: Dispose
  nameWithType: TwitchRestClient.Dispose
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.Dispose
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.ValidateAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.ValidateAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.ValidateAsync.html
  name: ValidateAsync
  nameWithType: TwitchRestClient.ValidateAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.ValidateAsync
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.AppIdentity}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.AppIdentity}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<AppIdentity>
  nameWithType: Task<AppIdentity>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.AppIdentity>
  nameWithType.vb: Task(Of AppIdentity)
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.AppIdentity)
  name.vb: Task(Of AppIdentity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.AppIdentity
    name: AppIdentity
    href: AuxLabs.Twitch.Rest.Models.AppIdentity.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.AppIdentity
    name: AppIdentity
    href: AuxLabs.Twitch.Rest.Models.AppIdentity.html
  - name: )
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.AccessTokenInfo}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.AccessTokenInfo}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<AccessTokenInfo>
  nameWithType: Task<AccessTokenInfo>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.AccessTokenInfo>
  nameWithType.vb: Task(Of AccessTokenInfo)
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.AccessTokenInfo)
  name.vb: Task(Of AccessTokenInfo)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.AccessTokenInfo
    name: AccessTokenInfo
    href: AuxLabs.Twitch.Rest.Models.AccessTokenInfo.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.AccessTokenInfo
    name: AccessTokenInfo
    href: AuxLabs.Twitch.Rest.Models.AccessTokenInfo.html
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.StartCommercialAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.StartCommercialAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.StartCommercialAsync(System.Int32).html
  name: StartCommercialAsync
  nameWithType: TwitchRestClient.StartCommercialAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.StartCommercialAsync
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.Commercial}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Models.Commercial}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Commercial>
  nameWithType: Task<Commercial>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Models.Commercial>
  nameWithType.vb: Task(Of Commercial)
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Models.Commercial)
  name.vb: Task(Of Commercial)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Commercial
    name: Commercial
    href: AuxLabs.Twitch.Rest.Models.Commercial.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Commercial
    name: Commercial
    href: AuxLabs.Twitch.Rest.Models.Commercial.html
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetCheermotesAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetCheermotesAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetCheermotesAsync(System.String).html
  name: GetCheermotesAsync
  nameWithType: TwitchRestClient.GetCheermotesAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetCheermotesAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Models.Cheermote}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Models.Cheermote}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IReadOnlyCollection<Cheermote>>
  nameWithType: Task<IReadOnlyCollection<Cheermote>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<AuxLabs.Twitch.Rest.Models.Cheermote>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of Cheermote))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of AuxLabs.Twitch.Rest.Models.Cheermote))
  name.vb: Task(Of IReadOnlyCollection(Of Cheermote))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Models.Cheermote
    name: Cheermote
    href: AuxLabs.Twitch.Rest.Models.Cheermote.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Models.Cheermote
    name: Cheermote
    href: AuxLabs.Twitch.Rest.Models.Cheermote.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionTransactionsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionTransactionsAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionTransactionsAsync(System.String,System.Int32).html
  name: GetExtensionTransactionsAsync
  nameWithType: TwitchRestClient.GetExtensionTransactionsAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetExtensionTransactionsAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestExtensionTransaction}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestExtensionTransaction}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IReadOnlyCollection<RestExtensionTransaction>>
  nameWithType: Task<IReadOnlyCollection<RestExtensionTransaction>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<AuxLabs.Twitch.Rest.Entities.RestExtensionTransaction>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestExtensionTransaction))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of AuxLabs.Twitch.Rest.Entities.RestExtensionTransaction))
  name.vb: Task(Of IReadOnlyCollection(Of RestExtensionTransaction))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Entities.RestExtensionTransaction
    name: RestExtensionTransaction
    href: AuxLabs.Twitch.Rest.Entities.RestExtensionTransaction.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Entities.RestExtensionTransaction
    name: RestExtensionTransaction
    href: AuxLabs.Twitch.Rest.Entities.RestExtensionTransaction.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.GetEventSubscriptionsAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.GetEventSubscriptionsAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.GetEventSubscriptionsAsync(System.String,System.Nullable{AuxLabs.Twitch.EventSubStatus},System.Nullable{AuxLabs.Twitch.EventSubType}).html
  name: GetEventSubscriptionsAsync
  nameWithType: TwitchRestClient.GetEventSubscriptionsAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.GetEventSubscriptionsAsync
- uid: System.Nullable{AuxLabs.Twitch.EventSubStatus}
  commentId: T:System.Nullable{AuxLabs.Twitch.EventSubStatus}
  parent: System
  definition: System.Nullable`1
  href: AuxLabs.Twitch.EventSubStatus.html
  name: EventSubStatus?
  nameWithType: EventSubStatus?
  fullName: AuxLabs.Twitch.EventSubStatus?
  spec.csharp:
  - uid: AuxLabs.Twitch.EventSubStatus
    name: EventSubStatus
    href: AuxLabs.Twitch.EventSubStatus.html
  - name: '?'
  spec.vb:
  - uid: AuxLabs.Twitch.EventSubStatus
    name: EventSubStatus
    href: AuxLabs.Twitch.EventSubStatus.html
  - name: '?'
- uid: System.Nullable{AuxLabs.Twitch.EventSubType}
  commentId: T:System.Nullable{AuxLabs.Twitch.EventSubType}
  parent: System
  definition: System.Nullable`1
  href: AuxLabs.Twitch.EventSubType.html
  name: EventSubType?
  nameWithType: EventSubType?
  fullName: AuxLabs.Twitch.EventSubType?
  spec.csharp:
  - uid: AuxLabs.Twitch.EventSubType
    name: EventSubType
    href: AuxLabs.Twitch.EventSubType.html
  - name: '?'
  spec.vb:
  - uid: AuxLabs.Twitch.EventSubType
    name: EventSubType
    href: AuxLabs.Twitch.EventSubType.html
  - name: '?'
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestEventSubscription}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{AuxLabs.Twitch.Rest.Entities.RestEventSubscription}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IReadOnlyCollection<RestEventSubscription>>
  nameWithType: Task<IReadOnlyCollection<RestEventSubscription>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<AuxLabs.Twitch.Rest.Entities.RestEventSubscription>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestEventSubscription))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of AuxLabs.Twitch.Rest.Entities.RestEventSubscription))
  name.vb: Task(Of IReadOnlyCollection(Of RestEventSubscription))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Entities.RestEventSubscription
    name: RestEventSubscription
    href: AuxLabs.Twitch.Rest.Entities.RestEventSubscription.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Entities.RestEventSubscription
    name: RestEventSubscription
    href: AuxLabs.Twitch.Rest.Entities.RestEventSubscription.html
  - name: )
  - name: )
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.CreateEventSubscriptionAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.CreateEventSubscriptionAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.CreateEventSubscriptionAsync--1(System.Action{AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody{--0}}).html
  name: CreateEventSubscriptionAsync
  nameWithType: TwitchRestClient.CreateEventSubscriptionAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.CreateEventSubscriptionAsync
- uid: System.Action{AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody{{TCondition}}}
  commentId: T:System.Action{AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody{``0}}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<PostEventSubscriptionBody<TCondition>>
  nameWithType: Action<PostEventSubscriptionBody<TCondition>>
  fullName: System.Action<AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody<TCondition>>
  nameWithType.vb: Action(Of PostEventSubscriptionBody(Of TCondition))
  fullName.vb: System.Action(Of AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody(Of TCondition))
  name.vb: Action(Of PostEventSubscriptionBody(Of TCondition))
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody`1
    name: PostEventSubscriptionBody
    href: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.html
  - name: <
  - name: TCondition
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody`1
    name: PostEventSubscriptionBody
    href: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TCondition
  - name: )
  - name: )
- uid: System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestEventSubscription}
  commentId: T:System.Threading.Tasks.Task{AuxLabs.Twitch.Rest.Entities.RestEventSubscription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<RestEventSubscription>
  nameWithType: Task<RestEventSubscription>
  fullName: System.Threading.Tasks.Task<AuxLabs.Twitch.Rest.Entities.RestEventSubscription>
  nameWithType.vb: Task(Of RestEventSubscription)
  fullName.vb: System.Threading.Tasks.Task(Of AuxLabs.Twitch.Rest.Entities.RestEventSubscription)
  name.vb: Task(Of RestEventSubscription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AuxLabs.Twitch.Rest.Entities.RestEventSubscription
    name: RestEventSubscription
    href: AuxLabs.Twitch.Rest.Entities.RestEventSubscription.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AuxLabs.Twitch.Rest.Entities.RestEventSubscription
    name: RestEventSubscription
    href: AuxLabs.Twitch.Rest.Entities.RestEventSubscription.html
  - name: )
- uid: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody{{TCondition}}
  commentId: T:AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody{``0}
  parent: AuxLabs.Twitch.Rest.Requests
  definition: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody`1
  href: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.html
  name: PostEventSubscriptionBody<TCondition>
  nameWithType: PostEventSubscriptionBody<TCondition>
  fullName: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody<TCondition>
  nameWithType.vb: PostEventSubscriptionBody(Of TCondition)
  fullName.vb: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody(Of TCondition)
  name.vb: PostEventSubscriptionBody(Of TCondition)
  spec.csharp:
  - uid: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody`1
    name: PostEventSubscriptionBody
    href: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.html
  - name: <
  - name: TCondition
  - name: '>'
  spec.vb:
  - uid: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody`1
    name: PostEventSubscriptionBody
    href: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TCondition
  - name: )
- uid: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody`1
  commentId: T:AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody`1
  href: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.html
  name: PostEventSubscriptionBody<TCondition>
  nameWithType: PostEventSubscriptionBody<TCondition>
  fullName: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody<TCondition>
  nameWithType.vb: PostEventSubscriptionBody(Of TCondition)
  fullName.vb: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody(Of TCondition)
  name.vb: PostEventSubscriptionBody(Of TCondition)
  spec.csharp:
  - uid: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody`1
    name: PostEventSubscriptionBody
    href: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.html
  - name: <
  - name: TCondition
  - name: '>'
  spec.vb:
  - uid: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody`1
    name: PostEventSubscriptionBody
    href: AuxLabs.Twitch.Rest.Requests.PostEventSubscriptionBody-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TCondition
  - name: )
- uid: AuxLabs.Twitch.Rest.Requests
  commentId: N:AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.html
  name: AuxLabs.Twitch.Rest.Requests
  nameWithType: AuxLabs.Twitch.Rest.Requests
  fullName: AuxLabs.Twitch.Rest.Requests
  spec.csharp:
  - uid: AuxLabs
    name: AuxLabs
    href: AuxLabs.html
  - name: .
  - uid: AuxLabs.Twitch
    name: Twitch
    href: AuxLabs.Twitch.html
  - name: .
  - uid: AuxLabs.Twitch.Rest
    name: Rest
    href: AuxLabs.Twitch.Rest.html
  - name: .
  - uid: AuxLabs.Twitch.Rest.Requests
    name: Requests
    href: AuxLabs.Twitch.Rest.Requests.html
  spec.vb:
  - uid: AuxLabs
    name: AuxLabs
    href: AuxLabs.html
  - name: .
  - uid: AuxLabs.Twitch
    name: Twitch
    href: AuxLabs.Twitch.html
  - name: .
  - uid: AuxLabs.Twitch.Rest
    name: Rest
    href: AuxLabs.Twitch.Rest.html
  - name: .
  - uid: AuxLabs.Twitch.Rest.Requests
    name: Requests
    href: AuxLabs.Twitch.Rest.Requests.html
- uid: AuxLabs.Twitch.Rest.TwitchRestClient.DeleteEventSubscriptionAsync*
  commentId: Overload:AuxLabs.Twitch.Rest.TwitchRestClient.DeleteEventSubscriptionAsync
  href: AuxLabs.Twitch.Rest.TwitchRestClient.DeleteEventSubscriptionAsync(System.String).html
  name: DeleteEventSubscriptionAsync
  nameWithType: TwitchRestClient.DeleteEventSubscriptionAsync
  fullName: AuxLabs.Twitch.Rest.TwitchRestClient.DeleteEventSubscriptionAsync
memberLayout: SeparatePages
