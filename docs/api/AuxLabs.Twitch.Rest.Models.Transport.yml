### YamlMime:ManagedReference
items:
- uid: AuxLabs.Twitch.Rest.Models.Transport
  commentId: T:AuxLabs.Twitch.Rest.Models.Transport
  id: Transport
  parent: AuxLabs.Twitch.Rest.Models
  children:
  - AuxLabs.Twitch.Rest.Models.Transport.#ctor
  - AuxLabs.Twitch.Rest.Models.Transport.#ctor(System.String,System.String)
  - AuxLabs.Twitch.Rest.Models.Transport.#ctor(System.String)
  - AuxLabs.Twitch.Rest.Models.Transport.Callback
  - AuxLabs.Twitch.Rest.Models.Transport.Method
  - AuxLabs.Twitch.Rest.Models.Transport.Secret
  - AuxLabs.Twitch.Rest.Models.Transport.SessionId
  langs:
  - csharp
  - vb
  name: Transport
  nameWithType: Transport
  fullName: AuxLabs.Twitch.Rest.Models.Transport
  type: Class
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/Models/EventSub/Transport.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: Transport
    path: ../src/AuxLabs.Twitch.Rest.Api/Models/EventSub/Transport.cs
    startLine: 4
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Models
  syntax:
    content: public class Transport
    content.vb: Public Class Transport
  inheritance:
  - System.Object
  derivedClasses:
  - AuxLabs.Twitch.Rest.Models.AcceptedTransport
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: AuxLabs.Twitch.Rest.Models.Transport.Method
  commentId: P:AuxLabs.Twitch.Rest.Models.Transport.Method
  id: Method
  parent: AuxLabs.Twitch.Rest.Models.Transport
  langs:
  - csharp
  - vb
  name: Method
  nameWithType: Transport.Method
  fullName: AuxLabs.Twitch.Rest.Models.Transport.Method
  type: Property
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/Models/EventSub/Transport.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: Method
    path: ../src/AuxLabs.Twitch.Rest.Api/Models/EventSub/Transport.cs
    startLine: 7
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Models
  summary: The transport method.
  example: []
  syntax:
    content: >-
      [JsonInclude]

      [JsonPropertyName("method")]

      [JsonConverter(typeof(JsonStringEnumMemberConverter))]

      public TransportMethod Method { get; }
    parameters: []
    return:
      type: AuxLabs.Twitch.TransportMethod
    content.vb: >-
      <JsonInclude>

      <JsonPropertyName("method")>

      <JsonConverter(GetType(JsonStringEnumMemberConverter))>

      Public Property Method As TransportMethod
  overload: AuxLabs.Twitch.Rest.Models.Transport.Method*
  attributes:
  - type: System.Text.Json.Serialization.JsonIncludeAttribute
    ctor: System.Text.Json.Serialization.JsonIncludeAttribute.#ctor
    arguments: []
  - type: System.Text.Json.Serialization.JsonPropertyNameAttribute
    ctor: System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: method
  - type: System.Text.Json.Serialization.JsonConverterAttribute
    ctor: System.Text.Json.Serialization.JsonConverterAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: System.Text.Json.Serialization.JsonStringEnumMemberConverter
- uid: AuxLabs.Twitch.Rest.Models.Transport.Callback
  commentId: P:AuxLabs.Twitch.Rest.Models.Transport.Callback
  id: Callback
  parent: AuxLabs.Twitch.Rest.Models.Transport
  langs:
  - csharp
  - vb
  name: Callback
  nameWithType: Transport.Callback
  fullName: AuxLabs.Twitch.Rest.Models.Transport.Callback
  type: Property
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/Models/EventSub/Transport.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: Callback
    path: ../src/AuxLabs.Twitch.Rest.Api/Models/EventSub/Transport.cs
    startLine: 12
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Models
  summary: The callback URL where the notifications are sent. Only required for webhooks.
  example: []
  syntax:
    content: >-
      [JsonInclude]

      [JsonPropertyName("callback")]

      [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]

      public string Callback { get; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonInclude>

      <JsonPropertyName("callback")>

      <JsonIgnore(Condition:=JsonIgnoreCondition.WhenWritingNull)>

      Public Property Callback As String
  overload: AuxLabs.Twitch.Rest.Models.Transport.Callback*
  attributes:
  - type: System.Text.Json.Serialization.JsonIncludeAttribute
    ctor: System.Text.Json.Serialization.JsonIncludeAttribute.#ctor
    arguments: []
  - type: System.Text.Json.Serialization.JsonPropertyNameAttribute
    ctor: System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: callback
  - type: System.Text.Json.Serialization.JsonIgnoreAttribute
    ctor: System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Condition
      type: System.Text.Json.Serialization.JsonIgnoreCondition
      value: 3
- uid: AuxLabs.Twitch.Rest.Models.Transport.Secret
  commentId: P:AuxLabs.Twitch.Rest.Models.Transport.Secret
  id: Secret
  parent: AuxLabs.Twitch.Rest.Models.Transport
  langs:
  - csharp
  - vb
  name: Secret
  nameWithType: Transport.Secret
  fullName: AuxLabs.Twitch.Rest.Models.Transport.Secret
  type: Property
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/Models/EventSub/Transport.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: Secret
    path: ../src/AuxLabs.Twitch.Rest.Api/Models/EventSub/Transport.cs
    startLine: 18
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Models
  summary: The secret used to verify the signature. Only required for webhooks.
  remarks: The secret must be an ASCII string thatâ€™s a minimum of 10 characters long and a maximum of 100 characters long.
  example: []
  syntax:
    content: >-
      [JsonInclude]

      [JsonPropertyName("secret")]

      [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]

      public string Secret { get; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonInclude>

      <JsonPropertyName("secret")>

      <JsonIgnore(Condition:=JsonIgnoreCondition.WhenWritingNull)>

      Public Property Secret As String
  overload: AuxLabs.Twitch.Rest.Models.Transport.Secret*
  attributes:
  - type: System.Text.Json.Serialization.JsonIncludeAttribute
    ctor: System.Text.Json.Serialization.JsonIncludeAttribute.#ctor
    arguments: []
  - type: System.Text.Json.Serialization.JsonPropertyNameAttribute
    ctor: System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: secret
  - type: System.Text.Json.Serialization.JsonIgnoreAttribute
    ctor: System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Condition
      type: System.Text.Json.Serialization.JsonIgnoreCondition
      value: 3
- uid: AuxLabs.Twitch.Rest.Models.Transport.SessionId
  commentId: P:AuxLabs.Twitch.Rest.Models.Transport.SessionId
  id: SessionId
  parent: AuxLabs.Twitch.Rest.Models.Transport
  langs:
  - csharp
  - vb
  name: SessionId
  nameWithType: Transport.SessionId
  fullName: AuxLabs.Twitch.Rest.Models.Transport.SessionId
  type: Property
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/Models/EventSub/Transport.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: SessionId
    path: ../src/AuxLabs.Twitch.Rest.Api/Models/EventSub/Transport.cs
    startLine: 23
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Models
  summary: An ID that identifies the WebSocket to send notifications to. Only required for websockets.
  example: []
  syntax:
    content: >-
      [JsonInclude]

      [JsonPropertyName("session_id")]

      [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]

      public string SessionId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonInclude>

      <JsonPropertyName("session_id")>

      <JsonIgnore(Condition:=JsonIgnoreCondition.WhenWritingNull)>

      Public Property SessionId As String
  overload: AuxLabs.Twitch.Rest.Models.Transport.SessionId*
  attributes:
  - type: System.Text.Json.Serialization.JsonIncludeAttribute
    ctor: System.Text.Json.Serialization.JsonIncludeAttribute.#ctor
    arguments: []
  - type: System.Text.Json.Serialization.JsonPropertyNameAttribute
    ctor: System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: session_id
  - type: System.Text.Json.Serialization.JsonIgnoreAttribute
    ctor: System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Condition
      type: System.Text.Json.Serialization.JsonIgnoreCondition
      value: 3
- uid: AuxLabs.Twitch.Rest.Models.Transport.#ctor
  commentId: M:AuxLabs.Twitch.Rest.Models.Transport.#ctor
  id: '#ctor'
  parent: AuxLabs.Twitch.Rest.Models.Transport
  langs:
  - csharp
  - vb
  name: Transport()
  nameWithType: Transport.Transport()
  fullName: AuxLabs.Twitch.Rest.Models.Transport.Transport()
  type: Constructor
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/Models/EventSub/Transport.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: .ctor
    path: ../src/AuxLabs.Twitch.Rest.Api/Models/EventSub/Transport.cs
    startLine: 27
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Models
  syntax:
    content: public Transport()
    content.vb: Public Sub New()
  overload: AuxLabs.Twitch.Rest.Models.Transport.#ctor*
  nameWithType.vb: Transport.New()
  fullName.vb: AuxLabs.Twitch.Rest.Models.Transport.New()
  name.vb: New()
- uid: AuxLabs.Twitch.Rest.Models.Transport.#ctor(System.String)
  commentId: M:AuxLabs.Twitch.Rest.Models.Transport.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: AuxLabs.Twitch.Rest.Models.Transport
  langs:
  - csharp
  - vb
  name: Transport(string)
  nameWithType: Transport.Transport(string)
  fullName: AuxLabs.Twitch.Rest.Models.Transport.Transport(string)
  type: Constructor
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/Models/EventSub/Transport.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: .ctor
    path: ../src/AuxLabs.Twitch.Rest.Api/Models/EventSub/Transport.cs
    startLine: 28
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Models
  syntax:
    content: public Transport(string sessionId)
    parameters:
    - id: sessionId
      type: System.String
    content.vb: Public Sub New(sessionId As String)
  overload: AuxLabs.Twitch.Rest.Models.Transport.#ctor*
  nameWithType.vb: Transport.New(String)
  fullName.vb: AuxLabs.Twitch.Rest.Models.Transport.New(String)
  name.vb: New(String)
- uid: AuxLabs.Twitch.Rest.Models.Transport.#ctor(System.String,System.String)
  commentId: M:AuxLabs.Twitch.Rest.Models.Transport.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: AuxLabs.Twitch.Rest.Models.Transport
  langs:
  - csharp
  - vb
  name: Transport(string, string)
  nameWithType: Transport.Transport(string, string)
  fullName: AuxLabs.Twitch.Rest.Models.Transport.Transport(string, string)
  type: Constructor
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/Models/EventSub/Transport.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: .ctor
    path: ../src/AuxLabs.Twitch.Rest.Api/Models/EventSub/Transport.cs
    startLine: 33
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Models
  syntax:
    content: public Transport(string callback, string secret)
    parameters:
    - id: callback
      type: System.String
    - id: secret
      type: System.String
    content.vb: Public Sub New(callback As String, secret As String)
  overload: AuxLabs.Twitch.Rest.Models.Transport.#ctor*
  nameWithType.vb: Transport.New(String, String)
  fullName.vb: AuxLabs.Twitch.Rest.Models.Transport.New(String, String)
  name.vb: New(String, String)
references:
- uid: AuxLabs.Twitch.Rest.Models
  commentId: N:AuxLabs.Twitch.Rest.Models
  href: AuxLabs.html
  name: AuxLabs.Twitch.Rest.Models
  nameWithType: AuxLabs.Twitch.Rest.Models
  fullName: AuxLabs.Twitch.Rest.Models
  spec.csharp:
  - uid: AuxLabs
    name: AuxLabs
    href: AuxLabs.html
  - name: .
  - uid: AuxLabs.Twitch
    name: Twitch
    href: AuxLabs.Twitch.html
  - name: .
  - uid: AuxLabs.Twitch.Rest
    name: Rest
    href: AuxLabs.Twitch.Rest.html
  - name: .
  - uid: AuxLabs.Twitch.Rest.Models
    name: Models
    href: AuxLabs.Twitch.Rest.Models.html
  spec.vb:
  - uid: AuxLabs
    name: AuxLabs
    href: AuxLabs.html
  - name: .
  - uid: AuxLabs.Twitch
    name: Twitch
    href: AuxLabs.Twitch.html
  - name: .
  - uid: AuxLabs.Twitch.Rest
    name: Rest
    href: AuxLabs.Twitch.Rest.html
  - name: .
  - uid: AuxLabs.Twitch.Rest.Models
    name: Models
    href: AuxLabs.Twitch.Rest.Models.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: AuxLabs.Twitch.Rest.Models.Transport.Method*
  commentId: Overload:AuxLabs.Twitch.Rest.Models.Transport.Method
  href: AuxLabs.Twitch.Rest.Models.Transport.Method.html
  name: Method
  nameWithType: Transport.Method
  fullName: AuxLabs.Twitch.Rest.Models.Transport.Method
- uid: AuxLabs.Twitch.TransportMethod
  commentId: T:AuxLabs.Twitch.TransportMethod
  parent: AuxLabs.Twitch
  href: AuxLabs.Twitch.TransportMethod.html
  name: TransportMethod
  nameWithType: TransportMethod
  fullName: AuxLabs.Twitch.TransportMethod
- uid: AuxLabs.Twitch
  commentId: N:AuxLabs.Twitch
  href: AuxLabs.html
  name: AuxLabs.Twitch
  nameWithType: AuxLabs.Twitch
  fullName: AuxLabs.Twitch
  spec.csharp:
  - uid: AuxLabs
    name: AuxLabs
    href: AuxLabs.html
  - name: .
  - uid: AuxLabs.Twitch
    name: Twitch
    href: AuxLabs.Twitch.html
  spec.vb:
  - uid: AuxLabs
    name: AuxLabs
    href: AuxLabs.html
  - name: .
  - uid: AuxLabs.Twitch
    name: Twitch
    href: AuxLabs.Twitch.html
- uid: AuxLabs.Twitch.Rest.Models.Transport.Callback*
  commentId: Overload:AuxLabs.Twitch.Rest.Models.Transport.Callback
  href: AuxLabs.Twitch.Rest.Models.Transport.Callback.html
  name: Callback
  nameWithType: Transport.Callback
  fullName: AuxLabs.Twitch.Rest.Models.Transport.Callback
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: AuxLabs.Twitch.Rest.Models.Transport.Secret*
  commentId: Overload:AuxLabs.Twitch.Rest.Models.Transport.Secret
  href: AuxLabs.Twitch.Rest.Models.Transport.Secret.html
  name: Secret
  nameWithType: Transport.Secret
  fullName: AuxLabs.Twitch.Rest.Models.Transport.Secret
- uid: AuxLabs.Twitch.Rest.Models.Transport.SessionId*
  commentId: Overload:AuxLabs.Twitch.Rest.Models.Transport.SessionId
  href: AuxLabs.Twitch.Rest.Models.Transport.SessionId.html
  name: SessionId
  nameWithType: Transport.SessionId
  fullName: AuxLabs.Twitch.Rest.Models.Transport.SessionId
- uid: AuxLabs.Twitch.Rest.Models.Transport.#ctor*
  commentId: Overload:AuxLabs.Twitch.Rest.Models.Transport.#ctor
  href: AuxLabs.Twitch.Rest.Models.Transport.#ctor.html
  name: Transport
  nameWithType: Transport.Transport
  fullName: AuxLabs.Twitch.Rest.Models.Transport.Transport
  nameWithType.vb: Transport.New
  fullName.vb: AuxLabs.Twitch.Rest.Models.Transport.New
  name.vb: New
memberLayout: SeparatePages
