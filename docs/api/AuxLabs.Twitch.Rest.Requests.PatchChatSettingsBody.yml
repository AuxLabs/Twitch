### YamlMime:ManagedReference
items:
- uid: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody
  commentId: T:AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody
  id: PatchChatSettingsBody
  parent: AuxLabs.Twitch.Rest.Requests
  children:
  - AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.FollowerOnlyMinutes
  - AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsEmoteOnly
  - AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsFollowerOnly
  - AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsModeratorDelayed
  - AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsSlowEnabled
  - AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsSubscriberOnly
  - AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsUniqueEnabled
  - AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.ModeratorDelaySeconds
  - AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.SlowSeconds
  - AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.Validate
  langs:
  - csharp
  - vb
  name: PatchChatSettingsBody
  nameWithType: PatchChatSettingsBody
  fullName: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody
  type: Class
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/Requests/Chat/PatchChatSettingsBody.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: PatchChatSettingsBody
    path: ../src/AuxLabs.Twitch.Rest.Api/Requests/Chat/PatchChatSettingsBody.cs
    startLine: 5
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Requests
  syntax:
    content: public class PatchChatSettingsBody
    content.vb: Public Class PatchChatSettingsBody
  inheritance:
  - System.Object
  derivedClasses:
  - AuxLabs.Twitch.Rest.Models.ChatSettings
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsEmoteOnly
  commentId: P:AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsEmoteOnly
  id: IsEmoteOnly
  parent: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody
  langs:
  - csharp
  - vb
  name: IsEmoteOnly
  nameWithType: PatchChatSettingsBody.IsEmoteOnly
  fullName: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsEmoteOnly
  type: Property
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/Requests/Chat/PatchChatSettingsBody.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: IsEmoteOnly
    path: ../src/AuxLabs.Twitch.Rest.Api/Requests/Chat/PatchChatSettingsBody.cs
    startLine: 8
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Requests
  summary: Determines whether chat messages must contain only emotes.
  example: []
  syntax:
    content: >-
      [JsonPropertyName("emote_mode")]

      [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]

      public bool? IsEmoteOnly { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: >-
      <JsonPropertyName("emote_mode")>

      <JsonIgnore(Condition:=JsonIgnoreCondition.WhenWritingNull)>

      Public Property IsEmoteOnly As Boolean?
  overload: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsEmoteOnly*
  attributes:
  - type: System.Text.Json.Serialization.JsonPropertyNameAttribute
    ctor: System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: emote_mode
  - type: System.Text.Json.Serialization.JsonIgnoreAttribute
    ctor: System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Condition
      type: System.Text.Json.Serialization.JsonIgnoreCondition
      value: 3
- uid: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsFollowerOnly
  commentId: P:AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsFollowerOnly
  id: IsFollowerOnly
  parent: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody
  langs:
  - csharp
  - vb
  name: IsFollowerOnly
  nameWithType: PatchChatSettingsBody.IsFollowerOnly
  fullName: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsFollowerOnly
  type: Property
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/Requests/Chat/PatchChatSettingsBody.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: IsFollowerOnly
    path: ../src/AuxLabs.Twitch.Rest.Api/Requests/Chat/PatchChatSettingsBody.cs
    startLine: 13
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Requests
  summary: Determines whether the broadcaster restricts the chat room to followers only.
  example: []
  syntax:
    content: >-
      [JsonPropertyName("follower_mode")]

      [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]

      public bool? IsFollowerOnly { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: >-
      <JsonPropertyName("follower_mode")>

      <JsonIgnore(Condition:=JsonIgnoreCondition.WhenWritingNull)>

      Public Property IsFollowerOnly As Boolean?
  overload: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsFollowerOnly*
  attributes:
  - type: System.Text.Json.Serialization.JsonPropertyNameAttribute
    ctor: System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: follower_mode
  - type: System.Text.Json.Serialization.JsonIgnoreAttribute
    ctor: System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Condition
      type: System.Text.Json.Serialization.JsonIgnoreCondition
      value: 3
- uid: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.FollowerOnlyMinutes
  commentId: P:AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.FollowerOnlyMinutes
  id: FollowerOnlyMinutes
  parent: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody
  langs:
  - csharp
  - vb
  name: FollowerOnlyMinutes
  nameWithType: PatchChatSettingsBody.FollowerOnlyMinutes
  fullName: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.FollowerOnlyMinutes
  type: Property
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/Requests/Chat/PatchChatSettingsBody.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: FollowerOnlyMinutes
    path: ../src/AuxLabs.Twitch.Rest.Api/Requests/Chat/PatchChatSettingsBody.cs
    startLine: 19
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Requests
  summary: The length of time that users must follow the broadcaster before being able to participate in the chat.
  remarks: Minimum value is 0, maximum is 129600 (3 months).
  example: []
  syntax:
    content: >-
      [JsonPropertyName("follower_mode_duration")]

      [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]

      public int? FollowerOnlyMinutes { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
    content.vb: >-
      <JsonPropertyName("follower_mode_duration")>

      <JsonIgnore(Condition:=JsonIgnoreCondition.WhenWritingNull)>

      Public Property FollowerOnlyMinutes As Integer?
  overload: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.FollowerOnlyMinutes*
  attributes:
  - type: System.Text.Json.Serialization.JsonPropertyNameAttribute
    ctor: System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: follower_mode_duration
  - type: System.Text.Json.Serialization.JsonIgnoreAttribute
    ctor: System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Condition
      type: System.Text.Json.Serialization.JsonIgnoreCondition
      value: 3
- uid: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsModeratorDelayed
  commentId: P:AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsModeratorDelayed
  id: IsModeratorDelayed
  parent: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody
  langs:
  - csharp
  - vb
  name: IsModeratorDelayed
  nameWithType: PatchChatSettingsBody.IsModeratorDelayed
  fullName: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsModeratorDelayed
  type: Property
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/Requests/Chat/PatchChatSettingsBody.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: IsModeratorDelayed
    path: ../src/AuxLabs.Twitch.Rest.Api/Requests/Chat/PatchChatSettingsBody.cs
    startLine: 24
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Requests
  summary: Determines whether the broadcaster adds a short delay before chat messages appear in the chat room.
  example: []
  syntax:
    content: >-
      [JsonPropertyName("non_moderator_chat_delay")]

      [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]

      public bool? IsModeratorDelayed { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: >-
      <JsonPropertyName("non_moderator_chat_delay")>

      <JsonIgnore(Condition:=JsonIgnoreCondition.WhenWritingNull)>

      Public Property IsModeratorDelayed As Boolean?
  overload: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsModeratorDelayed*
  attributes:
  - type: System.Text.Json.Serialization.JsonPropertyNameAttribute
    ctor: System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: non_moderator_chat_delay
  - type: System.Text.Json.Serialization.JsonIgnoreAttribute
    ctor: System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Condition
      type: System.Text.Json.Serialization.JsonIgnoreCondition
      value: 3
- uid: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.ModeratorDelaySeconds
  commentId: P:AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.ModeratorDelaySeconds
  id: ModeratorDelaySeconds
  parent: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody
  langs:
  - csharp
  - vb
  name: ModeratorDelaySeconds
  nameWithType: PatchChatSettingsBody.ModeratorDelaySeconds
  fullName: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.ModeratorDelaySeconds
  type: Property
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/Requests/Chat/PatchChatSettingsBody.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: ModeratorDelaySeconds
    path: ../src/AuxLabs.Twitch.Rest.Api/Requests/Chat/PatchChatSettingsBody.cs
    startLine: 30
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Requests
  summary: The amount of time that messages are delayed before appearing in chat.
  remarks: Can only be set to 2, 4, or 6.
  example: []
  syntax:
    content: >-
      [JsonPropertyName("non_moderator_chat_delay_duration")]

      [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]

      public int? ModeratorDelaySeconds { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
    content.vb: >-
      <JsonPropertyName("non_moderator_chat_delay_duration")>

      <JsonIgnore(Condition:=JsonIgnoreCondition.WhenWritingNull)>

      Public Property ModeratorDelaySeconds As Integer?
  overload: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.ModeratorDelaySeconds*
  attributes:
  - type: System.Text.Json.Serialization.JsonPropertyNameAttribute
    ctor: System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: non_moderator_chat_delay_duration
  - type: System.Text.Json.Serialization.JsonIgnoreAttribute
    ctor: System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Condition
      type: System.Text.Json.Serialization.JsonIgnoreCondition
      value: 3
- uid: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsSlowEnabled
  commentId: P:AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsSlowEnabled
  id: IsSlowEnabled
  parent: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody
  langs:
  - csharp
  - vb
  name: IsSlowEnabled
  nameWithType: PatchChatSettingsBody.IsSlowEnabled
  fullName: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsSlowEnabled
  type: Property
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/Requests/Chat/PatchChatSettingsBody.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: IsSlowEnabled
    path: ../src/AuxLabs.Twitch.Rest.Api/Requests/Chat/PatchChatSettingsBody.cs
    startLine: 35
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Requests
  summary: Determines whether the broadcaster limits how often users in the chat room are allowed to send messages.
  example: []
  syntax:
    content: >-
      [JsonPropertyName("slow_mode")]

      [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]

      public bool? IsSlowEnabled { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: >-
      <JsonPropertyName("slow_mode")>

      <JsonIgnore(Condition:=JsonIgnoreCondition.WhenWritingNull)>

      Public Property IsSlowEnabled As Boolean?
  overload: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsSlowEnabled*
  attributes:
  - type: System.Text.Json.Serialization.JsonPropertyNameAttribute
    ctor: System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: slow_mode
  - type: System.Text.Json.Serialization.JsonIgnoreAttribute
    ctor: System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Condition
      type: System.Text.Json.Serialization.JsonIgnoreCondition
      value: 3
- uid: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.SlowSeconds
  commentId: P:AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.SlowSeconds
  id: SlowSeconds
  parent: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody
  langs:
  - csharp
  - vb
  name: SlowSeconds
  nameWithType: PatchChatSettingsBody.SlowSeconds
  fullName: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.SlowSeconds
  type: Property
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/Requests/Chat/PatchChatSettingsBody.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: SlowSeconds
    path: ../src/AuxLabs.Twitch.Rest.Api/Requests/Chat/PatchChatSettingsBody.cs
    startLine: 41
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Requests
  summary: The amount of time that users must wait between sending messages.
  remarks: Minimum value is 3, maximum is 120.
  example: []
  syntax:
    content: >-
      [JsonPropertyName("slow_mode_wait_time")]

      [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]

      public int? SlowSeconds { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
    content.vb: >-
      <JsonPropertyName("slow_mode_wait_time")>

      <JsonIgnore(Condition:=JsonIgnoreCondition.WhenWritingNull)>

      Public Property SlowSeconds As Integer?
  overload: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.SlowSeconds*
  attributes:
  - type: System.Text.Json.Serialization.JsonPropertyNameAttribute
    ctor: System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: slow_mode_wait_time
  - type: System.Text.Json.Serialization.JsonIgnoreAttribute
    ctor: System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Condition
      type: System.Text.Json.Serialization.JsonIgnoreCondition
      value: 3
- uid: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsSubscriberOnly
  commentId: P:AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsSubscriberOnly
  id: IsSubscriberOnly
  parent: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody
  langs:
  - csharp
  - vb
  name: IsSubscriberOnly
  nameWithType: PatchChatSettingsBody.IsSubscriberOnly
  fullName: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsSubscriberOnly
  type: Property
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/Requests/Chat/PatchChatSettingsBody.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: IsSubscriberOnly
    path: ../src/AuxLabs.Twitch.Rest.Api/Requests/Chat/PatchChatSettingsBody.cs
    startLine: 46
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Requests
  summary: Determines whether only users that subscribe to the broadcaster’s channel may talk in the chat room.
  example: []
  syntax:
    content: >-
      [JsonPropertyName("subscriber_mode")]

      [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]

      public bool? IsSubscriberOnly { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: >-
      <JsonPropertyName("subscriber_mode")>

      <JsonIgnore(Condition:=JsonIgnoreCondition.WhenWritingNull)>

      Public Property IsSubscriberOnly As Boolean?
  overload: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsSubscriberOnly*
  attributes:
  - type: System.Text.Json.Serialization.JsonPropertyNameAttribute
    ctor: System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: subscriber_mode
  - type: System.Text.Json.Serialization.JsonIgnoreAttribute
    ctor: System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Condition
      type: System.Text.Json.Serialization.JsonIgnoreCondition
      value: 3
- uid: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsUniqueEnabled
  commentId: P:AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsUniqueEnabled
  id: IsUniqueEnabled
  parent: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody
  langs:
  - csharp
  - vb
  name: IsUniqueEnabled
  nameWithType: PatchChatSettingsBody.IsUniqueEnabled
  fullName: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsUniqueEnabled
  type: Property
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/Requests/Chat/PatchChatSettingsBody.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: IsUniqueEnabled
    path: ../src/AuxLabs.Twitch.Rest.Api/Requests/Chat/PatchChatSettingsBody.cs
    startLine: 51
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Requests
  summary: Determines whether the broadcaster requires users to post only unique messages in the chat room.
  example: []
  syntax:
    content: >-
      [JsonPropertyName("unique_chat_mode")]

      [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]

      public bool? IsUniqueEnabled { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: >-
      <JsonPropertyName("unique_chat_mode")>

      <JsonIgnore(Condition:=JsonIgnoreCondition.WhenWritingNull)>

      Public Property IsUniqueEnabled As Boolean?
  overload: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsUniqueEnabled*
  attributes:
  - type: System.Text.Json.Serialization.JsonPropertyNameAttribute
    ctor: System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: unique_chat_mode
  - type: System.Text.Json.Serialization.JsonIgnoreAttribute
    ctor: System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Condition
      type: System.Text.Json.Serialization.JsonIgnoreCondition
      value: 3
- uid: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.Validate
  commentId: M:AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.Validate
  id: Validate
  parent: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody
  langs:
  - csharp
  - vb
  name: Validate()
  nameWithType: PatchChatSettingsBody.Validate()
  fullName: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.Validate()
  type: Method
  source:
    remote:
      path: src/AuxLabs.Twitch.Rest.Api/Requests/Chat/PatchChatSettingsBody.cs
      branch: main
      repo: https://github.com/AuxLabs/Twitch.git
    id: Validate
    path: ../src/AuxLabs.Twitch.Rest.Api/Requests/Chat/PatchChatSettingsBody.cs
    startLine: 55
  assemblies:
  - AuxLabs.Twitch.Rest.Api
  namespace: AuxLabs.Twitch.Rest.Requests
  syntax:
    content: public void Validate()
    content.vb: Public Sub Validate()
  overload: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.Validate*
references:
- uid: AuxLabs.Twitch.Rest.Requests
  commentId: N:AuxLabs.Twitch.Rest.Requests
  href: AuxLabs.html
  name: AuxLabs.Twitch.Rest.Requests
  nameWithType: AuxLabs.Twitch.Rest.Requests
  fullName: AuxLabs.Twitch.Rest.Requests
  spec.csharp:
  - uid: AuxLabs
    name: AuxLabs
    href: AuxLabs.html
  - name: .
  - uid: AuxLabs.Twitch
    name: Twitch
    href: AuxLabs.Twitch.html
  - name: .
  - uid: AuxLabs.Twitch.Rest
    name: Rest
    href: AuxLabs.Twitch.Rest.html
  - name: .
  - uid: AuxLabs.Twitch.Rest.Requests
    name: Requests
    href: AuxLabs.Twitch.Rest.Requests.html
  spec.vb:
  - uid: AuxLabs
    name: AuxLabs
    href: AuxLabs.html
  - name: .
  - uid: AuxLabs.Twitch
    name: Twitch
    href: AuxLabs.Twitch.html
  - name: .
  - uid: AuxLabs.Twitch.Rest
    name: Rest
    href: AuxLabs.Twitch.Rest.html
  - name: .
  - uid: AuxLabs.Twitch.Rest.Requests
    name: Requests
    href: AuxLabs.Twitch.Rest.Requests.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsEmoteOnly*
  commentId: Overload:AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsEmoteOnly
  href: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsEmoteOnly.html
  name: IsEmoteOnly
  nameWithType: PatchChatSettingsBody.IsEmoteOnly
  fullName: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsEmoteOnly
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool?
  nameWithType: bool?
  fullName: bool?
  nameWithType.vb: Boolean?
  fullName.vb: Boolean?
  name.vb: Boolean?
  spec.csharp:
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '?'
  spec.vb:
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsFollowerOnly*
  commentId: Overload:AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsFollowerOnly
  href: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsFollowerOnly.html
  name: IsFollowerOnly
  nameWithType: PatchChatSettingsBody.IsFollowerOnly
  fullName: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsFollowerOnly
- uid: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.FollowerOnlyMinutes*
  commentId: Overload:AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.FollowerOnlyMinutes
  href: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.FollowerOnlyMinutes.html
  name: FollowerOnlyMinutes
  nameWithType: PatchChatSettingsBody.FollowerOnlyMinutes
  fullName: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.FollowerOnlyMinutes
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int?
  nameWithType: int?
  fullName: int?
  nameWithType.vb: Integer?
  fullName.vb: Integer?
  name.vb: Integer?
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
- uid: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsModeratorDelayed*
  commentId: Overload:AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsModeratorDelayed
  href: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsModeratorDelayed.html
  name: IsModeratorDelayed
  nameWithType: PatchChatSettingsBody.IsModeratorDelayed
  fullName: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsModeratorDelayed
- uid: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.ModeratorDelaySeconds*
  commentId: Overload:AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.ModeratorDelaySeconds
  href: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.ModeratorDelaySeconds.html
  name: ModeratorDelaySeconds
  nameWithType: PatchChatSettingsBody.ModeratorDelaySeconds
  fullName: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.ModeratorDelaySeconds
- uid: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsSlowEnabled*
  commentId: Overload:AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsSlowEnabled
  href: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsSlowEnabled.html
  name: IsSlowEnabled
  nameWithType: PatchChatSettingsBody.IsSlowEnabled
  fullName: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsSlowEnabled
- uid: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.SlowSeconds*
  commentId: Overload:AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.SlowSeconds
  href: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.SlowSeconds.html
  name: SlowSeconds
  nameWithType: PatchChatSettingsBody.SlowSeconds
  fullName: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.SlowSeconds
- uid: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsSubscriberOnly*
  commentId: Overload:AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsSubscriberOnly
  href: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsSubscriberOnly.html
  name: IsSubscriberOnly
  nameWithType: PatchChatSettingsBody.IsSubscriberOnly
  fullName: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsSubscriberOnly
- uid: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsUniqueEnabled*
  commentId: Overload:AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsUniqueEnabled
  href: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsUniqueEnabled.html
  name: IsUniqueEnabled
  nameWithType: PatchChatSettingsBody.IsUniqueEnabled
  fullName: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.IsUniqueEnabled
- uid: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.Validate*
  commentId: Overload:AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.Validate
  href: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.Validate.html
  name: Validate
  nameWithType: PatchChatSettingsBody.Validate
  fullName: AuxLabs.Twitch.Rest.Requests.PatchChatSettingsBody.Validate
memberLayout: SeparatePages
